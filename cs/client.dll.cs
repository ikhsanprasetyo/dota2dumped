public static class ActiveModelConfig_t {
    public const nint m_Handle = 0x28; // ModelConfigHandle_t
    public const nint m_Name = 0x30; // CUtlSymbolLarge
    public const nint m_AssociatedEntities = 0x38; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
    public const nint m_AssociatedEntityNames = 0x50; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
}

public static class CAmbientCreatures {
    public const nint m_szAnimationName = 0x800; // CUtlString
}

public static class CAnimGraphNetworkedVariables {
    public const nint m_PredNetBoolVariables = 0x8; // C_NetworkUtlVectorBase< uint32 >
    public const nint m_PredNetByteVariables = 0x20; // C_NetworkUtlVectorBase< uint8 >
    public const nint m_PredNetUInt16Variables = 0x38; // C_NetworkUtlVectorBase< uint16 >
    public const nint m_PredNetIntVariables = 0x50; // C_NetworkUtlVectorBase< int32 >
    public const nint m_PredNetUInt32Variables = 0x68; // C_NetworkUtlVectorBase< uint32 >
    public const nint m_PredNetUInt64Variables = 0x80; // C_NetworkUtlVectorBase< uint64 >
    public const nint m_PredNetFloatVariables = 0x98; // C_NetworkUtlVectorBase< float32 >
    public const nint m_PredNetVectorVariables = 0xB0; // C_NetworkUtlVectorBase< Vector >
    public const nint m_PredNetQuaternionVariables = 0xC8; // C_NetworkUtlVectorBase< Quaternion >
    public const nint m_OwnerOnlyPredNetBoolVariables = 0xE0; // C_NetworkUtlVectorBase< uint32 >
    public const nint m_OwnerOnlyPredNetByteVariables = 0xF8; // C_NetworkUtlVectorBase< uint8 >
    public const nint m_OwnerOnlyPredNetUInt16Variables = 0x110; // C_NetworkUtlVectorBase< uint16 >
    public const nint m_OwnerOnlyPredNetIntVariables = 0x128; // C_NetworkUtlVectorBase< int32 >
    public const nint m_OwnerOnlyPredNetUInt32Variables = 0x140; // C_NetworkUtlVectorBase< uint32 >
    public const nint m_OwnerOnlyPredNetUInt64Variables = 0x158; // C_NetworkUtlVectorBase< uint64 >
    public const nint m_OwnerOnlyPredNetFloatVariables = 0x170; // C_NetworkUtlVectorBase< float32 >
    public const nint m_OwnerOnlyPredNetVectorVariables = 0x188; // C_NetworkUtlVectorBase< Vector >
    public const nint m_OwnerOnlyPredNetQuaternionVariables = 0x1A0; // C_NetworkUtlVectorBase< Quaternion >
    public const nint m_nBoolVariablesCount = 0x1B8; // int32
    public const nint m_nOwnerOnlyBoolVariablesCount = 0x1BC; // int32
    public const nint m_nRandomSeedOffset = 0x1C0; // int32
    public const nint m_flLastTeleportTime = 0x1C4; // float32
}

public static class CAnimationLayer {
    public const nint m_op = 0x30; // CNetworkedSequenceOperation
    public const nint m_nOrder = 0x58; // int32
    public const nint m_flPlaybackRate = 0x5C; // CNetworkedQuantizedFloat
    public const nint m_bLooping = 0x64; // bool
    public const nint m_nNewSequenceParity = 0x68; // int32
    public const nint m_nFlags = 0x6C; // int32
    public const nint m_bSequenceFinished = 0x70; // bool
    public const nint m_flKillRate = 0x74; // float32
    public const nint m_flKillDelay = 0x78; // float32
    public const nint m_flLayerAnimtime = 0x7C; // float32
    public const nint m_flLayerFadeOuttime = 0x80; // float32
    public const nint m_nActivity = 0x84; // int32
    public const nint m_nPriority = 0x88; // int32
    public const nint m_flLastEventCycle = 0x8C; // float32
    public const nint m_flLastAccess = 0x90; // float32
}

public static class CAnnouncerDescriptor {
    public const nint m_strAnnouncerName = 0x8; // CUtlString
    public const nint m_strAnnouncerVoiceFile = 0x10; // CUtlString
    public const nint m_nAnnouncerItemId = 0x18; // itemid_t
    public const nint m_bItemOwnedByLocalPlayer = 0x20; // bool
}

public static class CAttributeContainer {
    public const nint m_Item = 0x68; // C_EconItemView
}

public static class CAttributeList {
    public const nint m_Attributes = 0x8; // C_UtlVectorEmbeddedNetworkVar< C_EconItemAttribute >
    public const nint m_pManager = 0x58; // CAttributeManager*
}

public static class CAttributeManager {
    public const nint m_Providers = 0x8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_Receivers = 0x20; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_iReapplyProvisionParity = 0x38; // int32
    public const nint m_hOuter = 0x3C; // CHandle< C_BaseEntity >
    public const nint m_bPreventLoopback = 0x40; // bool
    public const nint m_ProviderType = 0x44; // attributeprovidertypes_t
    public const nint m_CachedResults = 0x48; // CUtlVector< CAttributeManager::cached_attribute_float_t >
}

public static class CAttributeManager_cached_attribute_float_t {
    public const nint flIn = 0x0; // float32
    public const nint iAttribHook = 0x8; // CUtlSymbolLarge
    public const nint flOut = 0x10; // float32
}

public static class CBaseAnimGraph {
    public const nint m_bInitiallyPopulateInterpHistory = 0x7B8; // bool
    public const nint m_bShouldAnimateDuringGameplayPause = 0x7B9; // bool
    public const nint m_bSuppressAnimEventSounds = 0x7BB; // bool
    public const nint m_bAnimGraphUpdateEnabled = 0x7C8; // bool
    public const nint m_flMaxSlopeDistance = 0x7CC; // float32
    public const nint m_vLastSlopeCheckPos = 0x7D0; // Vector
    public const nint m_vecForce = 0x7E0; // Vector
    public const nint m_nForceBone = 0x7EC; // int32
    public const nint m_pClientsideRagdoll = 0x7F0; // CBaseAnimGraph*
    public const nint m_bBuiltRagdoll = 0x7F8; // bool
    public const nint m_pRagdollPose = 0x810; // PhysicsRagdollPose_t*
    public const nint m_bClientRagdoll = 0x818; // bool
    public const nint m_bHasAnimatedMaterialAttributes = 0x828; // bool
}

public static class CBaseAnimGraphController {
    public const nint m_baseLayer = 0x18; // CNetworkedSequenceOperation
    public const nint m_bSequenceFinished = 0x40; // bool
    public const nint m_flLastEventCycle = 0x44; // float32
    public const nint m_flLastEventAnimTime = 0x48; // float32
    public const nint m_flPlaybackRate = 0x4C; // CNetworkedQuantizedFloat
    public const nint m_flPrevAnimTime = 0x54; // float32
    public const nint m_bClientSideAnimation = 0x58; // bool
    public const nint m_bNetworkedAnimationInputsChanged = 0x59; // bool
    public const nint m_nPrevNewSequenceParity = 0x5A; // uint8
    public const nint m_nPrevResetEventsParity = 0x5B; // uint8
    public const nint m_nNewSequenceParity = 0x5C; // int32
    public const nint m_nResetEventsParity = 0x60; // int32
    public const nint m_nAnimLoopMode = 0x64; // AnimLoopMode_t
    public const nint m_hAnimationUpdate = 0x104; // AnimationUpdateListHandle_t
    public const nint m_hLastAnimEventSequence = 0x108; // HSequence
}

public static class CBaseAnimatingActivity {
    public const nint m_bShouldAnimateDuringGameplayPause = 0x7B8; // bool
    public const nint m_bInitiallyPopulateInterpHistory = 0x7B9; // bool
    public const nint m_pSuppressedAnimEventTags = 0x7C0; // CUtlVector< CUtlString >*
    public const nint m_bHasAnimatedMaterialAttributes = 0x7C8; // bool
    public const nint m_bSuppressAnimEventSounds = 0x7D8; // bool
}

public static class CBasePlayerController {
    public const nint m_nFinalPredictedTick = 0x540; // int32
    public const nint m_CommandContext = 0x548; // C_CommandContext
    public const nint m_nInButtonsWhichAreToggles = 0x5C0; // uint64
    public const nint m_nTickBase = 0x5C8; // uint32
    public const nint m_hPawn = 0x5CC; // CHandle< C_BasePlayerPawn >
    public const nint m_hPredictedPawn = 0x5D0; // CHandle< C_BasePlayerPawn >
    public const nint m_nSplitScreenSlot = 0x5D4; // CSplitScreenSlot
    public const nint m_hSplitOwner = 0x5D8; // CHandle< CBasePlayerController >
    public const nint m_hSplitScreenPlayers = 0x5E0; // CUtlVector< CHandle< CBasePlayerController > >
    public const nint m_bIsHLTV = 0x5F8; // bool
    public const nint m_iConnected = 0x5FC; // PlayerConnectedState
    public const nint m_iszPlayerName = 0x600; // char[128]
    public const nint m_steamID = 0x688; // uint64
    public const nint m_bIsLocalPlayerController = 0x690; // bool
    public const nint m_iDesiredFOV = 0x694; // uint32
}

public static class CBasePlayerVData {
    public const nint m_sModelName = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
    public const nint m_flHeadDamageMultiplier = 0x108; // CSkillFloat
    public const nint m_flChestDamageMultiplier = 0x118; // CSkillFloat
    public const nint m_flStomachDamageMultiplier = 0x128; // CSkillFloat
    public const nint m_flArmDamageMultiplier = 0x138; // CSkillFloat
    public const nint m_flLegDamageMultiplier = 0x148; // CSkillFloat
    public const nint m_flHoldBreathTime = 0x158; // float32
    public const nint m_flDrowningDamageInterval = 0x15C; // float32
    public const nint m_nDrowningDamageInitial = 0x160; // int32
    public const nint m_nDrowningDamageMax = 0x164; // int32
    public const nint m_nWaterSpeed = 0x168; // int32
    public const nint m_flUseRange = 0x16C; // float32
    public const nint m_flUseAngleTolerance = 0x170; // float32
    public const nint m_flCrouchTime = 0x174; // float32
}

public static class CBasePlayerWeaponVData {
    public const nint m_szClassName = 0x10; // CUtlString
    public const nint m_szWorldModel = 0x18; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
    public const nint m_bBuiltRightHanded = 0xF8; // bool
    public const nint m_bAllowFlipping = 0xF9; // bool
    public const nint m_bIsFullAuto = 0xFA; // bool
    public const nint m_nNumBullets = 0xFC; // int32
    public const nint m_sMuzzleAttachment = 0x100; // CUtlString
    public const nint m_szMuzzleFlashParticle = 0x108; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint m_iFlags = 0x1E8; // ItemFlagTypes_t
    public const nint m_nPrimaryAmmoType = 0x1E9; // AmmoIndex_t
    public const nint m_nSecondaryAmmoType = 0x1EA; // AmmoIndex_t
    public const nint m_iMaxClip1 = 0x1EC; // int32
    public const nint m_iMaxClip2 = 0x1F0; // int32
    public const nint m_iDefaultClip1 = 0x1F4; // int32
    public const nint m_iDefaultClip2 = 0x1F8; // int32
    public const nint m_iWeight = 0x1FC; // int32
    public const nint m_bAutoSwitchTo = 0x200; // bool
    public const nint m_bAutoSwitchFrom = 0x201; // bool
    public const nint m_iRumbleEffect = 0x204; // RumbleEffect_t
    public const nint m_aShootSounds = 0x208; // CUtlMap< WeaponSound_t, CSoundEventName >
    public const nint m_iSlot = 0x228; // int32
    public const nint m_iPosition = 0x22C; // int32
}

public static class CBasePortraitData {
    public const nint m_iModelIndex = 0x410; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_skin = 0x418; // CUtlStringToken
    public const nint m_bHasSetupView = 0xDBC; // bool
    public const nint m_flRotation = 0xDD8; // float32
}

public static class CBaseProp {
    public const nint m_bModelOverrodeBlockLOS = 0x7E0; // bool
    public const nint m_iShapeType = 0x7E4; // int32
    public const nint m_bConformToCollisionBounds = 0x7E8; // bool
    public const nint m_mPreferredCatchTransform = 0x7EC; // matrix3x4_t
}

public static class CBodyComponent {
    public const nint m_pSceneNode = 0x8; // CGameSceneNode*
    public const nint __m_pChainEntity = 0x20; // CNetworkVarChainer
}

public static class CBodyComponentBaseAnimGraph {
    public const nint m_animationController = 0x470; // CBaseAnimGraphController
    public const nint __m_pChainEntity = 0x5D0; // CNetworkVarChainer
}

public static class CBodyComponentBaseModelEntity {
    public const nint __m_pChainEntity = 0x470; // CNetworkVarChainer
}

public static class CBodyComponentPoint {
    public const nint m_sceneNode = 0x50; // CGameSceneNode
    public const nint __m_pChainEntity = 0x1A0; // CNetworkVarChainer
}

public static class CBodyComponentSkeletonInstance {
    public const nint m_skeletonInstance = 0x50; // CSkeletonInstance
    public const nint __m_pChainEntity = 0x440; // CNetworkVarChainer
}

public static class CBuoyancyHelper {
    public const nint m_flFluidDensity = 0x18; // float32
}

public static class CClientAlphaProperty {
    public const nint m_nRenderFX = 0x10; // uint8
    public const nint m_nRenderMode = 0x11; // uint8
    public const nint m_bAlphaOverride = 0x0; // bitfield:1
    public const nint m_bShadowAlphaOverride = 0x0; // bitfield:1
    public const nint m_nReserved = 0x0; // bitfield:6
    public const nint m_nAlpha = 0x13; // uint8
    public const nint m_nDesyncOffset = 0x14; // uint16
    public const nint m_nReserved2 = 0x16; // uint16
    public const nint m_nDistFadeStart = 0x18; // uint16
    public const nint m_nDistFadeEnd = 0x1A; // uint16
    public const nint m_flFadeScale = 0x1C; // float32
    public const nint m_flRenderFxStartTime = 0x20; // GameTime_t
    public const nint m_flRenderFxDuration = 0x24; // float32
}

public static class CCollisionProperty {
    public const nint m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
    public const nint m_vecMins = 0x40; // Vector
    public const nint m_vecMaxs = 0x4C; // Vector
    public const nint m_usSolidFlags = 0x5A; // uint8
    public const nint m_nSolidType = 0x5B; // SolidType_t
    public const nint m_triggerBloat = 0x5C; // uint8
    public const nint m_nSurroundType = 0x5D; // SurroundingBoundsType_t
    public const nint m_CollisionGroup = 0x5E; // uint8
    public const nint m_nEnablePhysics = 0x5F; // uint8
    public const nint m_flBoundingRadius = 0x60; // float32
    public const nint m_vecSpecifiedSurroundingMins = 0x64; // Vector
    public const nint m_vecSpecifiedSurroundingMaxs = 0x70; // Vector
    public const nint m_vecSurroundingMaxs = 0x7C; // Vector
    public const nint m_vecSurroundingMins = 0x88; // Vector
    public const nint m_vCapsuleCenter1 = 0x94; // Vector
    public const nint m_vCapsuleCenter2 = 0xA0; // Vector
    public const nint m_flCapsuleRadius = 0xAC; // float32
}

public static class CComicBook {
    public const nint m_CoverImage = 0x8; // CPanoramaImageName
    public const nint m_XmlFile = 0x18; // CUtlString
}

public static class CDOTABattleReportHighlight {
    public const nint m_nID = 0x8; // uint16
    public const nint m_bEnabled = 0xA; // bool
    public const nint m_eHighlightType = 0xC; // CMsgBattleReport_HighlightType
    public const nint m_eHighlightCategory = 0x10; // CMsgBattleReport_HighlightCategory
    public const nint m_eHighlightRarity = 0x14; // CMsgBattleReport_HighlightRarity
    public const nint m_sNameToken = 0x18; // CUtlString
    public const nint m_sFlavorToken = 0x20; // CUtlString
    public const nint m_bTooltip = 0x28; // bool
    public const nint m_sTooltipLocString = 0x30; // CUtlString
    public const nint m_eFormat = 0x38; // EHighlightNumberFormat
    public const nint m_vecRoles = 0x40; // CUtlVector< CMsgBattleReport_Role >
    public const nint m_vecTiers = 0x58; // CUtlVector< CDOTABattleReportHighlightTier_t >
}

public static class CDOTABattleReportHighlightCompareContext_t {
    public const nint m_eCompareContext = 0x0; // CMsgBattleReport_CompareContext
    public const nint m_eComparisonType = 0x4; // EHighlightScoreComparison
    public const nint m_flCompareValue = 0x8; // float32
}

public static class CDOTABattleReportHighlightTier_t {
    public const nint m_eTier = 0x0; // CMsgBattleReport_HighlightTier
    public const nint m_vecCompareContexts = 0x8; // CUtlVector< CDOTABattleReportHighlightCompareContext_t >
}

public static class CDOTACandyShopDefinition {
    public const nint m_unCandyShopID = 0x8; // CandyShopID_t
    public const nint m_sLocName = 0x10; // CUtlString
    public const nint m_unDefaultInventorySize = 0x18; // uint32
    public const nint m_sInventorySizeUpgradeImage = 0x20; // CPanoramaImageName
    public const nint m_unDefaultRerollCharges = 0x30; // uint32
    public const nint m_unCandyBagItemDef = 0x34; // item_definition_index_t
    public const nint m_unFixedExchangeRecipeMaxCandies = 0x38; // uint8
    public const nint m_unFixedExchangeRecipeStartDate = 0x3C; // uint32
    public const nint m_unFixedExchangeRecipeUpdateRateInSeconds = 0x40; // uint32
    public const nint m_unFixedExchangeRecipeCount = 0x44; // uint8
    public const nint m_unVariableExchangeInputCandyCount = 0x45; // uint8
    public const nint m_unVariableExchangeOutputCandyCount = 0x46; // uint8
    public const nint m_eExpireEvent = 0x48; // EEvent
    public const nint m_vecCandyTypes = 0x50; // CUtlVector< CandyShopCandyType_t >
    public const nint m_vecRewardSlots = 0x68; // CUtlVector< CandyShopRewardSlot_t >
    public const nint m_vecDefaultRewardOptions = 0x80; // CUtlVector< CandyShopRewardOption_t >
}

public static class CDOTACustomShopInfo {
    public const nint m_CustomShopName = 0x30; // char[256]
    public const nint m_CustomShopItems = 0x130; // C_UtlVectorEmbeddedNetworkVar< CDOTACustomShopItemInfo >
}

public static class CDOTACustomShopItemInfo {
    public const nint m_nAbilityID = 0x30; // AbilityID_t
    public const nint m_nStockCount = 0x34; // int32
    public const nint m_Category = 0x38; // char[256]
}

public static class CDOTAInGamePredictionState {
    public const nint m_bVotingClosed = 0x538; // bool
    public const nint m_bAllPredictionsFinished = 0x539; // bool
    public const nint m_vecPredictions = 0x540; // C_UtlVectorEmbeddedNetworkVar< InGamePredictionData_t >
    public const nint m_nLeagueID = 0x590; // LeagueID_t
    public const nint m_vecPrevPredictions = 0x598; // CUtlVector< InGamePredictionData_t >
}

public static class CDOTAPropAghsfortArenaOfBloodWarrior {
    public const nint m_bDying = 0xA58; // bool
}

public static class CDOTAPropArenaOfBloodWarrior {
    public const nint m_bDying = 0xA58; // bool
}

public static class CDOTAPropConsumableBanner {
    public const nint m_nPlayerID = 0xAB0; // PlayerID_t
    public const nint m_hAvatarTexture = 0xAB8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bUseAvatar = 0xAC0; // bool
}

public static class CDOTAPropPlusPlayerGuildBanner {
    public const nint m_nPlayerID = 0xAB0; // int32
}

public static class CDOTAPropTI10PlayerGuildBanner {
    public const nint m_nPlayerID = 0xAB0; // int32
}

public static class CDOTARoadToTIChallengeDefinition {
    public const nint m_eEvent = 0x0; // EEvent
    public const nint m_unTotalQuestPeriods = 0x4; // uint32
    public const nint m_unHeroesPerQuest = 0x8; // uint32
    public const nint m_vecQuestPattern = 0x10; // CUtlVector< uint32 >
    public const nint m_unCullingBladeItemDef = 0x28; // item_definition_index_t
    public const nint m_unRerollItemDef = 0x2C; // item_definition_index_t
    public const nint m_vecQuests = 0x30; // CUtlVector< RoadToTIQuestDefinition_t >
}

public static class CDOTASubChallengeInfo {
    public const nint nType = 0x30; // int32
    public const nint nTier = 0x34; // int32
    public const nint nSlotID = 0x38; // int32
    public const nint nProgress = 0x3C; // int32
    public const nint nCompletionThreshold = 0x40; // int32
    public const nint nPlayerID = 0x44; // PlayerID_t
    public const nint nQueryIndex = 0x48; // int32
    public const nint nEventID = 0x4C; // int32
    public const nint nSequenceID = 0x50; // int32
    public const nint nRequiredHero = 0x54; // int32
    public const nint nCompleted = 0x58; // int32
}

public static class CDOTA_AbilityDraftAbilityState {
    public const nint m_nAbilityID = 0x30; // AbilityID_t
    public const nint m_unPlayerID = 0x34; // PlayerID_t
    public const nint m_unAbilityPlayerSlot = 0x38; // int32
}

public static class CDOTA_Ability_AbyssalUnderlord_Firestorm {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_AbyssalUnderlord_PitOfMalice {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Arcanist_Potion {
    public const nint cooldown_reduction_pct = 0x648; // int32
    public const nint manacost_reduction_pct = 0x64C; // int32
}

public static class CDOTA_Ability_AghsFort_Ascension_Invis {
    public const nint warning_duration = 0x5B0; // float32
}

public static class CDOTA_Ability_AghsFort_Capture {
    public const nint m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
}

public static class CDOTA_Ability_AghsFort_Clinkz_BurningArmy {
    public const nint range = 0x5B0; // int32
}

public static class CDOTA_Ability_AghsFort_Clinkz_BurningBarrage {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_iArrowProjectile = 0x5BC; // int32
    public const nint m_nFXIndex = 0x5C0; // int32
    public const nint m_nTriSplitCount = 0x5E0; // int32
    public const nint projectile_speed = 0x5E4; // int32
    public const nint projectile_width = 0x5E8; // int32
}

public static class CDOTA_Ability_AghsFort_Creature_Impale {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
    public const nint width = 0x5B4; // int32
    public const nint duration = 0x5B8; // float32
    public const nint length = 0x5BC; // int32
    public const nint speed = 0x5C0; // int32
}

public static class CDOTA_Ability_AghsFort_Creature_Phoenix_LaunchFireSpirit {
    public const nint spirit_speed = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
    public const nint radius = 0x5B8; // int32
    public const nint hp_cost_perc = 0x5BC; // int32
    public const nint m_nFXIndex = 0x5C0; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Creature_Phoenix_Supernova {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_DragonKnight_BreatheFire {
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint m_vStartPos = 0x5B8; // Vector
    public const nint m_fStartTime = 0x5C4; // GameTime_t
    public const nint m_fTotalTime = 0x5C8; // float32
}

public static class CDOTA_Ability_AghsFort_Dragon_Potion {
    public const nint bonus_movement_speed = 0x648; // int32
    public const nint bonus_attack_damage = 0x64C; // int32
    public const nint bonus_attack_range = 0x650; // int32
    public const nint magic_resistance = 0x654; // int32
    public const nint model_scale = 0x658; // int32
    public const nint skin_number = 0x65C; // int32
    public const nint flying_movement = 0x660; // bool
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_BoulderSmash {
    public const nint speed = 0x5B0; // int32
    public const nint rock_damage = 0x5B4; // int32
    public const nint radius = 0x5B8; // int32
    public const nint rock_search_aoe = 0x5BC; // int32
    public const nint unit_distance = 0x5C0; // float32
    public const nint rock_distance = 0x5C4; // float32
    public const nint m_nProjectileID = 0x5C8; // int32
    public const nint m_hCursorTarget = 0x5CC; // CHandle< C_BaseEntity >
    public const nint m_bUsedStone = 0x5D0; // bool
    public const nint m_hTarget = 0x5D4; // CHandle< C_BaseEntity >
    public const nint m_bTargetStone = 0x5D8; // bool
    public const nint m_vecBoulderSmashedEnts = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_GeomagneticGrip {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_RollingBoulder {
    public const nint radius = 0x5B0; // int32
    public const nint speed = 0x5B4; // int32
    public const nint rock_speed = 0x5B8; // int32
    public const nint damage = 0x5BC; // int32
    public const nint distance = 0x5C0; // float32
    public const nint rock_distance = 0x5C4; // float32
    public const nint slow_duration = 0x5C8; // float32
    public const nint m_nFXIndex = 0x5CC; // ParticleIndex_t
    public const nint m_boulderSetposBool = 0x5D0; // bool
    public const nint m_nProjectileID = 0x5D4; // int32
    public const nint m_vStartingLocation = 0x5D8; // Vector
    public const nint m_vProjectileLocation = 0x5E4; // Vector
    public const nint m_vDir = 0x5F0; // Vector
    public const nint m_vVel = 0x5FC; // Vector
    public const nint m_bUsedStone = 0x608; // bool
}

public static class CDOTA_Ability_AghsFort_EchoSlamPotion {
    public const nint echo_slam_damage_range = 0x648; // int32
    public const nint echo_slam_echo_search_range = 0x64C; // int32
    public const nint echo_slam_echo_range = 0x650; // int32
    public const nint echo_slam_echo_damage = 0x654; // int32
    public const nint echo_slam_initial_damage = 0x658; // int32
    public const nint spend_charge_delay = 0x65C; // float32
}

public static class CDOTA_Ability_AghsFort_Luna_GlaiveShield {
    public const nint m_GlaiveDefs = 0x5B0; // CUtlVector< sGlaiveDef >
}

public static class CDOTA_Ability_AghsFort_Phoenix_IcarusDive {
    public const nint hp_cost_perc = 0x5B0; // int32
}

public static class CDOTA_Ability_AghsFort_Phoenix_LaunchFireSpirit {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_bUnitCarriedByArtillery = 0x5B4; // bool
    public const nint m_nSpiritSpeed = 0x5B8; // int32
    public const nint m_fDuration = 0x5BC; // float32
    public const nint m_nRadius = 0x5C0; // int32
    public const nint m_nSpiritCount = 0x5C4; // int32
}

public static class CDOTA_Ability_AghsFort_Ravage_Potion {
    public const nint m_hEntsHit = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint damage = 0x660; // int32
    public const nint duration = 0x664; // float32
    public const nint spend_charge_delay = 0x668; // float32
}

public static class CDOTA_Ability_AghsFort_Sniper_Assassinate {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_iIndex = 0x5B4; // ParticleIndex_t
    public const nint m_bHasBuckshotAbility = 0x5B8; // bool
    public const nint m_bInBuckshot = 0x5B9; // bool
    public const nint m_nScatterRange = 0x5BC; // int32
    public const nint m_nScatterWidth = 0x5C0; // int32
    public const nint m_nBuckshotDamagePct = 0x5C4; // int32
    public const nint m_nDamageType = 0x5C8; // int32
    public const nint damage = 0x5CC; // int32
}

public static class CDOTA_Ability_AghsFort_Special_VoidSpirit_ResonantPulse_Suppression {
    public const nint m_nBonusCharges = 0x5B0; // int32
}

public static class CDOTA_Ability_AghsFort_Spectre_ActiveDispersion {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
    public const nint duration = 0x5B4; // float32
}

public static class CDOTA_Ability_AghsFort_Tower_BlastWave {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
    public const nint duration = 0x5B4; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_AetherRemnant {
    public const nint m_nFXPreview = 0x5B0; // ParticleIndex_t
    public const nint start_radius = 0x5B4; // int32
    public const nint end_radius = 0x5B8; // int32
    public const nint remnant_watch_distance = 0x5BC; // int32
    public const nint projectile_speed = 0x5C0; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_AstralStep {
    public const nint m_nFXPreview = 0x5B0; // ParticleIndex_t
    public const nint m_nFXDestinationPreview = 0x5B4; // ParticleIndex_t
    public const nint m_vStartPos = 0x5B8; // Vector
    public const nint m_vDestination = 0x5C4; // Vector
    public const nint m_vDirection = 0x5D0; // Vector
    public const nint radius = 0x5DC; // int32
    public const nint min_travel_distance = 0x5E0; // int32
    public const nint max_travel_distance = 0x5E4; // int32
    public const nint debuff_duration = 0x5E8; // float32
    public const nint pop_damage_delay = 0x5EC; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_Dissimilate {
    public const nint m_nFXPreview = 0x5B0; // ParticleIndex_t
    public const nint phase_duration = 0x5B4; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_ResonantPulse {
    public const nint m_nFXPreview = 0x5B0; // ParticleIndex_t
    public const nint m_bGrantedScepterCharges = 0x5B4; // bool
    public const nint buff_duration = 0x5B8; // float32
    public const nint base_absorb_amount = 0x5BC; // int32
    public const nint absorb_per_hero_hit = 0x5C0; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_AetherRemnant {
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint remnant_watch_distance = 0x5B8; // int32
    public const nint projectile_speed = 0x5BC; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_AstralStep {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_vDestination = 0x5BC; // Vector
    public const nint m_vDirection = 0x5C8; // Vector
    public const nint radius = 0x5D4; // int32
    public const nint min_travel_distance = 0x5D8; // int32
    public const nint max_travel_distance = 0x5DC; // int32
    public const nint debuff_duration = 0x5E0; // float32
    public const nint pop_damage_delay = 0x5E4; // float32
    public const nint pop_damage = 0x5E8; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_Dissimilate {
    public const nint m_vecTranslocatingAllies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint phase_duration = 0x5C8; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_ResonantPulse {
    public const nint buff_duration = 0x5B0; // float32
    public const nint base_absorb_amount = 0x5B4; // int32
    public const nint absorb_per_unit_hit = 0x5B8; // int32
    public const nint hero_absorb_multiplier = 0x5BC; // float32
    public const nint boss_absorb_multiplier = 0x5C0; // float32
}

public static class CDOTA_Ability_Aghsfort_Aziyog_Underlord_Firestorm {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Bonus_Pudge_MeatHook {
    public const nint m_nConsecutiveHits = 0x5B0; // int32
}

public static class CDOTA_Ability_Aghsfort_Dawnbreaker_Celestial_Hammer {
    public const nint projectile_speed = 0x5B0; // int32
    public const nint projectile_radius = 0x5B4; // int32
    public const nint hammer_damage = 0x5B8; // int32
    public const nint hammer_aoe_radius = 0x5BC; // int32
    public const nint flare_radius = 0x5C0; // int32
    public const nint bHasStartedBurning = 0x5C4; // bool
    public const nint flare_debuff_duration = 0x5C8; // float32
    public const nint return_anim_distance_threshold = 0x5CC; // int32
    public const nint range = 0x5D0; // int32
}

public static class CDOTA_Ability_Aghsfort_Gyrocopter_Call_Down {
    public const nint m_vEndpoint = 0x5B0; // Vector
    public const nint range_scepter = 0x5BC; // int32
}

public static class CDOTA_Ability_Aghsfort_Lina_FierySoul {
    public const nint active_duration = 0x5B0; // float32
}

public static class CDOTA_Ability_Aghsfort_Mars_Bulwark {
    public const nint active_duration = 0x5B0; // float32
}

public static class CDOTA_Ability_Aghsfort_Phoenix_Flame_Revenant_Attack {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_PrimalRoar {
    public const nint path_width = 0x5B0; // int32
    public const nint push_duration = 0x5B4; // float32
    public const nint push_distance = 0x5B8; // int32
    public const nint min_distance = 0x5BC; // int32
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_ThrowAttack {
    public const nint base_damage = 0x5B0; // int32
    public const nint hp_damage_pct = 0x5B4; // int32
    public const nint impact_radius = 0x5B8; // int32
    public const nint fragment_impact_distance = 0x5BC; // int32
    public const nint min_range = 0x5C0; // int32
    public const nint m_nFXPreview = 0x5C4; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Snapfire_FiresnapCookie {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint projectile_speed = 0x5BC; // int32
    public const nint pre_hop_duration = 0x5C0; // float32
    public const nint cast_on_ally_gesture_time = 0x5C4; // float32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_GobbleUp {
    public const nint max_time_in_belly = 0x5B0; // float32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_LilShredder {
    public const nint m_iAttackIndex = 0x5B0; // int32
    public const nint m_BounceInfo = 0x5B8; // CUtlVector< sLilShredderBounceInfo >
}

public static class CDOTA_Ability_Aghsfort_Snapfire_MortimerKisses {
    public const nint m_nDamagePerProjectile = 0x5B0; // int32
    public const nint damage_per_impact = 0x5B4; // int32
    public const nint impact_radius = 0x5B8; // int32
    public const nint projectile_vision = 0x5BC; // int32
    public const nint m_nFragmentationImpactRadius = 0x5C0; // int32
    public const nint firetrail_radius = 0x5C4; // int32
    public const nint firetrail_damage = 0x5C8; // int32
    public const nint firetrail_tick_interval = 0x5CC; // int32
    public const nint m_vFirePoolLocations = 0x5D0; // CUtlVector< Vector >
    public const nint m_fNextDamageTick = 0x5E8; // float32
    public const nint m_vLastFirePoolLoc = 0x5EC; // Vector
}

public static class CDOTA_Ability_Aghsfort_Snapfire_Scatterblast {
    public const nint damage = 0x5B0; // int32
    public const nint debuff_duration = 0x5B4; // float32
    public const nint point_blank_range = 0x5B8; // int32
    public const nint point_blank_dmg_bonus_pct = 0x5BC; // float32
    public const nint blast_width_end = 0x5C0; // int32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_SpitCreep {
    public const nint m_nDamagePerProjectile = 0x5B0; // int32
    public const nint m_hGobbledUnit = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Aghsfort_Winter_Wyvern_Arctic_Burn {
    public const nint m_BurnedTargets = 0x5B0; // CUtlVector< CEntityIndex >
}

public static class CDOTA_Ability_Aghsfort_Winter_Wyvern_Splinter_Blast {
    public const nint splinter_damage = 0x5B8; // int32
    public const nint m_hMainTarget = 0x5BC; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Alchemist_UnstableConcoctionThrow {
    public const nint m_fCookTime = 0x5B0; // float32
    public const nint m_vProjectileLoc = 0x5B4; // Vector
}

public static class CDOTA_Ability_AncientApparition_IceAge {
    public const nint radius = 0x5B0; // int32
    public const nint health_degen = 0x5B4; // int32
    public const nint duration = 0x5B8; // float32
    public const nint damage = 0x5BC; // int32
}

public static class CDOTA_Ability_AncientApparition_IceBlast {
    public const nint m_PathTimer = 0x5B0; // CountdownTimer
    public const nint m_vTarget = 0x5C8; // Vector
    public const nint m_vStartPos = 0x5D4; // Vector
    public const nint m_vLastTempViewer = 0x5E0; // Vector
    public const nint m_iTrackerProjectile = 0x5EC; // int32
    public const nint path_radius = 0x5F0; // int32
    public const nint radius_min = 0x5F4; // int32
    public const nint radius_max = 0x5F8; // int32
    public const nint radius_grow = 0x5FC; // float32
    public const nint frostbite_duration = 0x600; // float32
    public const nint target_sight_radius = 0x604; // int32
    public const nint m_hFrostbittenEntities = 0x608; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Ability_AncientApparition_IceVortex {
    public const nint vision_aoe = 0x5B0; // int32
    public const nint vortex_duration = 0x5B4; // float32
}

public static class CDOTA_Ability_Beastmaster_PrimalRoar {
    public const nint duration = 0x5B0; // float32
    public const nint slow_duration = 0x5B4; // float32
    public const nint side_damage = 0x5B8; // int32
    public const nint damage_radius = 0x5BC; // int32
    public const nint path_width = 0x5C0; // int32
    public const nint push_duration = 0x5C4; // float32
    public const nint push_distance = 0x5C8; // int32
    public const nint damage = 0x5CC; // int32
    public const nint movement_speed_duration = 0x5D0; // float32
}

public static class CDOTA_Ability_Brewmaster_Void_Astral_Pull {
    public const nint pull_speed = 0x5B0; // int32
    public const nint pull_distance = 0x5B4; // int32
}

public static class CDOTA_Ability_Capture {
    public const nint m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
    public const nint m_pMyBuff = 0x5B8; // CDOTA_Buff*
}

public static class CDOTA_Ability_Centaur_DoubleEdge {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_Centaur_Stampede {
    public const nint duration = 0x5B0; // float32
    public const nint base_damage = 0x5B4; // int32
    public const nint strength_damage = 0x5B8; // float32
    public const nint slow_duration = 0x5BC; // float32
    public const nint scepter_bonus_duration = 0x5C0; // float32
    public const nint m_hHitEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Ability_Centaur_Work_Horse {
    public const nint m_hCart = 0x5B0; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_CrystalMaiden_IceRink {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_Dawnbreaker_Celestial_Hammer {
    public const nint m_nProjectileIndex = 0x5B0; // int32
    public const nint m_nReturnProjectileID = 0x5B4; // int32
    public const nint m_vEndLocation = 0x5B8; // Vector
    public const nint m_fZCoord = 0x5C4; // float32
    public const nint m_vLastTrailThinkerLocation = 0x5C8; // Vector
    public const nint m_bFlareDone = 0x5D4; // bool
    public const nint m_bStartedCatchAnimation = 0x5D5; // bool
    public const nint m_bIsReturning = 0x5D6; // bool
    public const nint m_hReturnHits = 0x5D8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hAoEHits = 0x5F0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXIndex = 0x608; // ParticleIndex_t
    public const nint m_nFXIndexC = 0x60C; // ParticleIndex_t
    public const nint m_nFXHammerReturnIndex = 0x610; // ParticleIndex_t
    public const nint m_nFXHammerProjectileIndex = 0x614; // ParticleIndex_t
    public const nint m_nFXHeroSolarGuardianTrailIndex = 0x618; // ParticleIndex_t
    public const nint m_hThinker = 0x61C; // CHandle< C_BaseEntity >
    public const nint projectile_speed = 0x620; // int32
    public const nint projectile_radius = 0x624; // int32
    public const nint hammer_damage = 0x628; // int32
    public const nint hammer_aoe_radius = 0x62C; // int32
    public const nint flare_radius = 0x630; // int32
    public const nint bHasStartedBurning = 0x634; // bool
    public const nint flare_debuff_duration = 0x638; // float32
    public const nint return_anim_distance_threshold = 0x63C; // int32
    public const nint range = 0x640; // int32
}

public static class CDOTA_Ability_Diretide_Portal_Channel {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_hInitialPortal = 0x5B4; // CHandle< C_BaseEntity >
    public const nint m_vDestination = 0x5B8; // Vector
    public const nint m_hTarget = 0x5C4; // CHandle< C_DOTA_BaseNPC >
}

public static class CDOTA_Ability_EarthSpirit_Petrify {
    public const nint ally_cast_range = 0x5B0; // int32
}

public static class CDOTA_Ability_Elder_Titan_EarthSplitter {
    public const nint crack_width = 0x5B0; // int32
    public const nint crack_distance = 0x5B4; // int32
    public const nint speed = 0x5B8; // int32
    public const nint vision_width = 0x5BC; // int32
    public const nint crack_time = 0x5C0; // float32
}

public static class CDOTA_Ability_EnragedWildkin_Hurricane {
    public const nint distance = 0x5B0; // float32
    public const nint m_vEndpoint = 0x5B4; // Vector
}

public static class CDOTA_Ability_FelBeast_Haunt {
    public const nint radius = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
}

public static class CDOTA_Ability_Frostivus2018_Centaur_Stampede {
    public const nint duration = 0x5B0; // float32
    public const nint base_damage = 0x5B4; // int32
    public const nint strength_damage = 0x5B8; // float32
    public const nint slow_duration = 0x5BC; // float32
    public const nint m_hHitEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint armor_amount = 0x5D8; // int32
    public const nint armor_duration = 0x5DC; // float32
    public const nint max_armor_stacks = 0x5E0; // int32
}

public static class CDOTA_Ability_Frostivus2018_Clinkz_Burning_Army {
    public const nint range = 0x5B0; // int32
}

public static class CDOTA_Ability_Frostivus2018_FacelessVoid_TimeWalk {
    public const nint speed = 0x5B0; // int32
    public const nint range = 0x5B4; // int32
    public const nint radius = 0x5B8; // int32
    public const nint damage = 0x5BC; // int32
}

public static class CDOTA_Ability_Frostivus2018_Luna_LucentBeam {
    public const nint radius = 0x5B0; // int32
}

public static class CDOTA_Ability_Frostivus2018_Spectre_ActiveDispersion {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
    public const nint duration = 0x5B4; // float32
}

public static class CDOTA_Ability_Frostivus2018_Tusk_WalrusKick {
    public const nint m_nFXKickIndex = 0x5B0; // ParticleIndex_t
}

public static class CDOTA_Ability_GiantWolf_Intimidate {
    public const nint radius = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
}

public static class CDOTA_Ability_Grimstroke_DarkArtistry {
    public const nint m_vCastDir = 0x5B0; // Vector
    public const nint m_fStartTime = 0x5BC; // GameTime_t
    public const nint m_fTotalTime = 0x5C0; // float32
    public const nint m_nProjectileID = 0x5C4; // int32
    public const nint m_vProjectileDir = 0x5C8; // Vector
    public const nint m_nFXIndex = 0x5D4; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x5D8; // ParticleIndex_t
    public const nint m_nTargetsHit = 0x5DC; // int32
    public const nint m_nHeroesHit = 0x5E0; // int32
    public const nint m_nVisibleHeroesHit = 0x5E4; // int32
    public const nint m_fDmgMultiplierTalent = 0x5E8; // float32
    public const nint slow_duration = 0x5EC; // float32
    public const nint start_radius = 0x5F0; // int32
    public const nint end_radius = 0x5F4; // int32
    public const nint damage = 0x5F8; // int32
    public const nint bonus_damage_per_target = 0x5FC; // int32
    public const nint vision_duration = 0x600; // float32
}

public static class CDOTA_Ability_Grimstroke_InkCreature {
    public const nint spawn_time = 0x5B0; // float32
}

public static class CDOTA_Ability_Grimstroke_SoulChain {
    public const nint chain_duration = 0x5B0; // float32
    public const nint chain_latch_radius = 0x5B4; // int32
    public const nint creep_duration_pct = 0x5B8; // float32
}

public static class CDOTA_Ability_Grimstroke_SpiritWalk {
    public const nint buff_duration = 0x5B0; // float32
    public const nint m_hTarget = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Gyrocopter_Call_Down {
    public const nint m_vEndpoint = 0x5B0; // Vector
    public const nint range_scepter = 0x5BC; // int32
}

public static class CDOTA_Ability_Hoodwink_Decoy {
    public const nint hIllusion = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint decoy_stun_duration = 0x5C8; // float32
    public const nint decoy_detonate_radius = 0x5CC; // int32
    public const nint projectile_speed = 0x5D0; // int32
    public const nint m_nFXIndex = 0x5D4; // ParticleIndex_t
}

public static class CDOTA_Ability_Invoker_InvokedBase {
    public const nint m_nQuasLevel = 0x5B0; // int32
    public const nint m_nWexLevel = 0x5B4; // int32
    public const nint m_nExortLevel = 0x5B8; // int32
}

public static class CDOTA_Ability_Lamp_Use {
    public const nint m_flLastCaptureTime = 0x5B0; // GameTime_t
    public const nint m_nChannelFXIndex = 0x5B4; // ParticleIndex_t
}

public static class CDOTA_Ability_Life_Stealer_Assimilate {
    public const nint m_hLastAssimilation = 0x5B0; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Marci_Companion_Run {
    public const nint m_nTrackingProjectileID = 0x5B0; // int32
    public const nint m_nFXIndex = 0x5B4; // ParticleIndex_t
    public const nint m_nMaxJumpDistance = 0x5B8; // int32
    public const nint landing_radius = 0x5BC; // int32
    public const nint move_speed = 0x5C0; // int32
    public const nint ally_buff_duration = 0x5C4; // float32
    public const nint min_jump_distance = 0x5C8; // int32
    public const nint max_jump_distance = 0x5CC; // int32
    public const nint impact_position_offset = 0x5D0; // int32
    public const nint vector_preview_radius = 0x5D4; // int32
    public const nint m_vEndpoint = 0x5D8; // Vector
    public const nint m_nToBounceFXIndex = 0x5E4; // ParticleIndex_t
    public const nint m_nToTargetFXIndex = 0x5E8; // ParticleIndex_t
}

public static class CDOTA_Ability_Marci_Guardian {
    public const nint buff_duration = 0x5B0; // float32
    public const nint nearest_ally_search_range = 0x5B4; // int32
}

public static class CDOTA_Ability_Marci_Unleash {
    public const nint duration = 0x5B0; // float32
    public const nint pulse_radius = 0x5B4; // int32
    public const nint pulse_debuff_duration = 0x5B8; // float32
    public const nint pulse_damage = 0x5BC; // int32
    public const nint pulse_silence_duration = 0x5C0; // float32
}

public static class CDOTA_Ability_Mars_Bulwark {
    public const nint m_flNextAttack = 0x5B0; // GameTime_t
    public const nint m_flLastActive = 0x5B4; // GameTime_t
}

public static class CDOTA_Ability_Meepo_Poof {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint radius = 0x5BC; // int32
}

public static class CDOTA_Ability_Nevermore_Necromastery {
    public const nint attack_range_bonus = 0x5B0; // int32
}

public static class CDOTA_Ability_Nyx_Assassin_Burrow {
    public const nint m_nSpellStartFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nPhaseStartFXIndex = 0x5B4; // ParticleIndex_t
}

public static class CDOTA_Ability_Nyx_Assassin_Jolt {
    public const nint aoe = 0x5B0; // int32
    public const nint damage = 0x5B4; // int32
}

public static class CDOTA_Ability_Nyx_Assassin_ManaBurn {
    public const nint aoe = 0x5B0; // int32
}

public static class CDOTA_Ability_PluckFamango {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_pMyBuff = 0x5B8; // CDOTA_Buff*
    public const nint famango_rate = 0x5C0; // float32
}

public static class CDOTA_Ability_PrimalBeast_Rock_Throw {
    public const nint base_damage = 0x5B0; // int32
    public const nint impact_radius = 0x5B4; // int32
    public const nint fragment_impact_radius = 0x5B8; // int32
    public const nint fragment_impact_distance = 0x5BC; // int32
    public const nint min_range = 0x5C0; // int32
    public const nint stun_duration = 0x5C4; // float32
    public const nint m_nFXPreview = 0x5C8; // ParticleIndex_t
}

public static class CDOTA_Ability_Puck_WaningRift {
    public const nint max_distance = 0x5B0; // int32
}

public static class CDOTA_Ability_Pudge_Dismember {
    public const nint m_hVictim = 0x5B0; // CHandle< C_BaseEntity >
    public const nint shard_cast_range = 0x5B4; // int32
}

public static class CDOTA_Ability_Pudge_MeatHook {
    public const nint m_vEndpoint = 0x5B0; // Vector
    public const nint m_nConsecutiveHits = 0x5BC; // int32
    public const nint m_bIsVectorTargeted = 0x5C0; // bool
    public const nint m_vTurnLocation = 0x5C4; // Vector
    public const nint m_vDirectionAfterTurn = 0x5D0; // Vector
    public const nint m_bHasTurned = 0x5DC; // bool
    public const nint m_flDistanceAfterTurn = 0x5E0; // float32
    public const nint m_vFinalPosition = 0x5E4; // Vector
    public const nint reveal_duration = 0x5F0; // float32
}

public static class CDOTA_Ability_Seasonal_Summon_Dragon_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Ability_Seasonal_Summon_Penguin {
    public const nint spawn_offset = 0x5B0; // int32
}

public static class CDOTA_Ability_Seasonal_TI10_HotPotato {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint projectile_speed = 0x5BC; // int32
}

public static class CDOTA_Ability_Seasonal_TI10_SoccerBall {
    public const nint m_vEndpoint = 0x5B0; // Vector
}

public static class CDOTA_Ability_Seasonal_TI11_Balloon {
    public const nint charge_use_interval = 0x5B0; // float32
    public const nint max_usable_charges = 0x5B4; // float32
    public const nint m_flLastChargeUseTime = 0x5B8; // GameTime_t
    public const nint m_hBalloon = 0x5BC; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Seasonal_TI11_CongaLine {
    public const nint max_duration = 0x5B0; // float32
}

public static class CDOTA_Ability_Seasonal_TI11_Duel {
    public const nint model_scale = 0x5B0; // float32
}

public static class CDOTA_Ability_Snapfire_FiresnapCookie {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint projectile_speed = 0x5BC; // int32
    public const nint pre_hop_duration = 0x5C0; // float32
    public const nint cast_on_ally_gesture_time = 0x5C4; // float32
}

public static class CDOTA_Ability_Snapfire_GobbleUp {
    public const nint max_time_in_belly = 0x5B0; // float32
}

public static class CDOTA_Ability_Snapfire_MortimerKisses {
    public const nint m_nDamagePerProjectile = 0x5B0; // int32
    public const nint damage_per_impact = 0x5B4; // int32
    public const nint impact_radius = 0x5B8; // int32
    public const nint projectile_vision = 0x5BC; // int32
}

public static class CDOTA_Ability_Snapfire_Scatterblast {
    public const nint damage = 0x5B0; // int32
    public const nint debuff_duration = 0x5B4; // float32
    public const nint point_blank_range = 0x5B8; // int32
    public const nint point_blank_dmg_bonus_pct = 0x5BC; // float32
    public const nint blast_width_end = 0x5C0; // int32
}

public static class CDOTA_Ability_Snapfire_SpitCreep {
    public const nint m_nDamagePerProjectile = 0x5B0; // int32
    public const nint m_hGobbledUnit = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Spring2021_DefusalBomb_Defuse {
    public const nint m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
}

public static class CDOTA_Ability_TI10_DiscoBall_Channel {
    public const nint m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
    public const nint m_flChannelTime = 0x5B4; // float32
}

public static class CDOTA_Ability_Techies_Minefield_Sign {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nFXHammerIndex = 0x5B4; // ParticleIndex_t
    public const nint aura_radius = 0x5B8; // int32
    public const nint m_hSign = 0x5BC; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Techies_ReactiveTazer {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Techies_RemoteMines {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_hRMine = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Techies_StasisTrap {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_hTrap = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Tinker_WarpGrenade {
    public const nint debuff_duration = 0x5B0; // float32
    public const nint knockback_distance = 0x5B4; // float32
    public const nint damage = 0x5B8; // float32
}

public static class CDOTA_Ability_Treant_LifeBomb {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_hRMine = 0x5B4; // CHandle< C_BaseEntity >
}

public static class CDOTA_Ability_Tusk_SnowballMeteor {
    public const nint area_of_effect = 0x5B0; // int32
    public const nint damage_interval = 0x5B4; // float32
    public const nint vision_distance = 0x5B8; // int32
    public const nint end_vision_duration = 0x5BC; // float32
    public const nint main_damage = 0x5C0; // float32
    public const nint burn_duration = 0x5C4; // float32
    public const nint burn_dps = 0x5C8; // float32
}

public static class CDOTA_Ability_Tusk_WalrusKick {
    public const nint m_nTargetFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vEndpoint = 0x5B4; // Vector
    public const nint landing_radius = 0x5C0; // int32
    public const nint push_length = 0x5C4; // int32
}

public static class CDOTA_Ability_VoidSpirit_AetherRemnant {
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint remnant_watch_distance = 0x5B8; // int32
    public const nint projectile_speed = 0x5BC; // int32
}

public static class CDOTA_Ability_VoidSpirit_AstralStep {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_vDestination = 0x5BC; // Vector
    public const nint m_vDirection = 0x5C8; // Vector
    public const nint radius = 0x5D4; // int32
    public const nint min_travel_distance = 0x5D8; // int32
    public const nint max_travel_distance = 0x5DC; // int32
    public const nint debuff_duration = 0x5E0; // float32
    public const nint pop_damage_delay = 0x5E4; // float32
}

public static class CDOTA_Ability_VoidSpirit_Dissimilate {
    public const nint phase_duration = 0x5B0; // float32
}

public static class CDOTA_Ability_VoidSpirit_ResonantPulse {
    public const nint m_bGrantedScepterCharges = 0x5B0; // bool
    public const nint buff_duration = 0x5B4; // float32
    public const nint base_absorb_amount = 0x5B8; // int32
    public const nint absorb_per_hero_hit = 0x5BC; // int32
}

public static class CDOTA_Ability_Winter_Wyvern_Arctic_Burn {
    public const nint m_BurnedTargets = 0x5B0; // CUtlVector< CEntityIndex >
}

public static class CDOTA_AghsFort_BossPreview {
    public const nint m_strBossUnit = 0x538; // CUtlSymbolLarge
    public const nint m_strModelName = 0x540; // CUtlSymbolLarge
    public const nint m_flBossModelScale = 0x548; // float32
    public const nint m_flExtraModelScale = 0x54C; // float32
    public const nint m_nEncounterType = 0x550; // int32
}

public static class CDOTA_AghsFort_Modifier_Lich_Frost_Giant {
    public const nint movement_speed = 0x1318; // int32
    public const nint model_scale = 0x131C; // int32
    public const nint damage_radius = 0x1320; // int32
    public const nint pct_int_damage_per_second = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
}

public static class CDOTA_AghsFort_Unit_ArcWarden_Boss {
    public const nint m_nTalkFXIndex = 0x1AC8; // ParticleIndex_t
    public const nint m_nFXDeath = 0x1ACC; // ParticleIndex_t
    public const nint m_nTempestFX = 0x1AD0; // ParticleIndex_t
}

public static class CDOTA_Aghsfort_Modifier_Magnus_Push_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_ArcanaDataEntity_DrowRanger {
    public const nint m_vecDrowRangerArcanaTargetPlayerID = 0x30; // int8[24]
    public const nint m_vecDrowRangerArcanaDeathTime = 0x48; // GameTime_t[24]
    public const nint m_vecDrowRangerArcanaKillTime = 0xA8; // GameTime_t[24]
}

public static class CDOTA_ArcanaDataEntity_FacelessVoid {
    public const nint m_nNumPoints = 0x30; // int32
    public const nint m_flShowPopupTime = 0x34; // GameTime_t
}

public static class CDOTA_ArcanaDataEntity_Razor {
    public const nint m_nEmpoweredKills = 0x30; // int32
}

public static class CDOTA_BaseNPC_AghsFort_Watch_Tower {
    public const nint m_nOptionNumber = 0x17D0; // int32
    public const nint m_flMovePlayersRadius = 0x17D4; // float32
    public const nint m_nExitDirection = 0x17D8; // CDOTA_BaseNPC_AghsFort_Watch_Tower::ExitDirection_t
    public const nint m_vExitLocation = 0x17DC; // Vector
    public const nint m_nPathSelectedID = 0x17E8; // int32
    public const nint m_nEncounterType = 0x17EC; // int32
    public const nint m_bIsEliteEncounter = 0x17F0; // bool
    public const nint m_bIsAscensionLevelPicker = 0x17F1; // bool
    public const nint m_strEncounterName = 0x17F8; // CUtlSymbolLarge
    public const nint m_strAscensionAbilities = 0x1800; // CUtlSymbolLarge
    public const nint m_hEffigy = 0x1808; // CHandle< C_BaseEntity >
    public const nint m_flYaw = 0x180C; // float32
    public const nint m_flStartTime = 0x1810; // float32
    public const nint m_flCursorEnterTime = 0x1814; // GameTime_t
    public const nint m_bShowingTooltip = 0x1818; // bool
    public const nint m_flLastUpdateTime = 0x1834; // float32
    public const nint m_nChannellingParticle = 0x1838; // ParticleIndex_t
    public const nint m_hRoomGate = 0x183C; // CHandle< CBaseAnimatingActivity >
    public const nint m_bIsBeingChanneled = 0x1840; // bool
    public const nint m_flGoalCaptureProgress = 0x1844; // float32
}

public static class CDOTA_BaseNPC_CustomEffigy {
    public const nint m_unStatusEffectIndex = 0x17D0; // uint32
    public const nint m_hPedestal = 0x17D4; // CHandle< C_BaseEntity >
}

public static class CDOTA_BaseNPC_Effigy_AghsFort {
    public const nint m_unStatusEffectIndex = 0x17D0; // uint32
}

public static class CDOTA_BaseNPC_Phantom_Assassin_GroundDagger {
    public const nint m_nFXIndex = 0x1768; // ParticleIndex_t
}

public static class CDOTA_Creature_Jungle_Spirit {
    public const nint m_iCurrentXP = 0x1778; // int32
    public const nint m_fInitialScaleGain = 0x177C; // float32
    public const nint m_fScaleGainMultiplierPerLevel = 0x1780; // float32
    public const nint m_fLastModelScaleGained = 0x1784; // float32
    public const nint m_bGainedSecondPlatemail = 0x1788; // bool
    public const nint m_bGainedBonusHealth = 0x1789; // bool
    public const nint m_nAmbientFXIndex = 0x178C; // ParticleIndex_t
}

public static class CDOTA_DB_Page_StickerEntity {
    public const nint m_bIsPlaced = 0x538; // bool
    public const nint m_ItemDefinitionIndex = 0x53C; // item_definition_index_t
    public const nint m_flStickerScale = 0x54C; // float32
    public const nint m_unDepthBias = 0x550; // uint16
    public const nint m_nStickerNumber = 0x554; // int32
    public const nint m_nDbPageNumber = 0x558; // int32
    public const nint m_bVisible = 0x55C; // bool
    public const nint m_hDecalSpawnGroupHandle = 0x580; // uint32
    public const nint m_hDynamicPropSpawnGroupHandle = 0x584; // uint32
}

public static class CDOTA_ItemStockInfo {
    public const nint iTeamNumber = 0x30; // int32
    public const nint nItemAbilityID = 0x34; // AbilityID_t
    public const nint fStockDuration = 0x38; // float32
    public const nint fStockTime = 0x3C; // GameTime_t
    public const nint iStockCount = 0x40; // int32
    public const nint iMaxCount = 0x44; // int32
    public const nint fInitialStockDuration = 0x48; // float32
    public const nint iPlayerID = 0x4C; // PlayerID_t
    public const nint iBonusDelayedStockCount = 0x50; // int32
}

public static class CDOTA_Item_Demonicon {
    public const nint m_hDemonSummons = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Item_Pirate_Hat {
    public const nint m_vChannelPos = 0x648; // Vector
    public const nint m_bIsUnderwater = 0x654; // bool
    public const nint m_nPhaseStartFXIndex = 0x658; // ParticleIndex_t
}

public static class CDOTA_Item_Tombstone_Drop {
    public const nint m_iTempViewer = 0x8A0; // int32
    public const nint m_iTeam = 0x8A4; // int32
}

public static class CDOTA_Item_Trusty_Shovel {
    public const nint m_vChannelPos = 0x648; // Vector
    public const nint m_bIsUnderwater = 0x654; // bool
    public const nint m_nPhaseStartFXIndex = 0x658; // ParticleIndex_t
}

public static class CDOTA_Item_Ward_Maker {
    public const nint sentry_refresh = 0x648; // float32
    public const nint max_sentry_charges = 0x64C; // int32
    public const nint m_flLastThinkTime = 0x650; // GameTime_t
    public const nint m_flTimeAccumulator = 0x654; // float32
}

public static class CDOTA_Modifer_Furbolg_Enrage_AttackSpeed {
    public const nint bonus_aspd = 0x1318; // int32
}

public static class CDOTA_Modifer_Furbolg_Enrage_Damage {
    public const nint bonus_dmg_pct = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_BlightedSpirit {
    public const nint magic_resist = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifer_Item_Blitz_Knuckles {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_DandelionAmulet {
    public const nint move_speed = 0x1318; // int32
    public const nint mana = 0x131C; // int32
    public const nint magic_block = 0x1320; // int32
    public const nint min_damage = 0x1324; // int32
}

public static class CDOTA_Modifer_Item_GlovesOfHaste {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_TurtleShell {
    public const nint armor = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_TurtleShell_Shell {
    public const nint damage_reduction = 0x1318; // int32
    public const nint m_vecPosition = 0x131C; // Vector
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_ModifierManager {
    public const nint m_bCompactBuffListPending = 0x28; // bool
    public const nint m_nHasTruesightForTeam = 0x290; // uint16
    public const nint m_nHasTruesightForTeamValid = 0x292; // uint16
    public const nint m_nProvidesFOWPositionForTeam = 0x294; // uint16
    public const nint m_nProvidesFOWPositionForTeamValid = 0x296; // uint16
    public const nint m_iBuffIndex = 0x298; // int32
    public const nint m_iLockRefCount = 0x29C; // int32
}

public static class CDOTA_Modifier_ARDM_NewHero {
    public const nint m_hOldHero = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Abaddon_AphoticShield {
    public const nint radius = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // float32
    public const nint regen = 0x1320; // int32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime {
    public const nint redirect_range_scepter = 0x1318; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationAura {
    public const nint immolate_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationDamage {
    public const nint immolate_damage = 0x1318; // float32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_Passive {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Abaddon_Borrowed_Time_Damage_Redirect {
    public const nint m_fDamageTaken = 0x1318; // float32
    public const nint ally_threshold_scepter = 0x131C; // int32
}

public static class CDOTA_Modifier_Abaddon_DeathCoil_Effect {
    public const nint armor_bonus = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint m_bFriendly = 0x1320; // bool
}

public static class CDOTA_Modifier_Abaddon_Frostmourne {
    public const nint slow_duration = 0x1318; // float32
    public const nint curse_duration = 0x131C; // float32
    public const nint hit_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Buff {
    public const nint curse_attack_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Debuff {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_nFXStackIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Debuff_Bonus {
    public const nint m_flDamage = 0x1318; // float32
    public const nint curse_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_CreepDmgBuff {
    public const nint bonus_damage_from_creep = 0x1318; // int32
    public const nint bonus_shared_by_allies_pct = 0x131C; // float32
    public const nint m_flModifier = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Effect {
    public const nint damage_reduction_pct = 0x1318; // int32
    public const nint bonus_damage_duration = 0x131C; // float32
    public const nint bonus_damage_from_creep = 0x1320; // int32
    public const nint bonus_damage_from_hero = 0x1324; // int32
    public const nint m_bWasHidden = 0x1328; // bool
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_HeroDmgBuff {
    public const nint bonus_damage_from_hero = 0x1318; // int32
    public const nint bonus_shared_by_allies_pct = 0x131C; // float32
    public const nint m_flModifier = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Scepter {
    public const nint bonus_damage_from_creep = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_DarkRift {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
    public const nint duration = 0x1320; // int32
    public const nint m_nfxAmbientFx = 0x1324; // ParticleIndex_t
    public const nint bPointTarget = 0x1328; // bool
    public const nint vDestination = 0x132C; // Vector
}

public static class CDOTA_Modifier_AbyssalUnderlord_DarkRift_Bonus_Health {
    public const nint scepter_health_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_Firestorm_Burn {
    public const nint burn_damage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
    public const nint building_damage = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_Firestorm_Thinker {
    public const nint wave_damage = 0x1318; // int32
    public const nint wave_count = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint wave_interval = 0x1324; // float32
    public const nint burn_duration = 0x1328; // float32
    public const nint burn_interval = 0x132C; // float32
    public const nint first_wave_delay = 0x1330; // float32
    public const nint building_damage = 0x1334; // float32
    public const nint m_hTarget = 0x1338; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Slow {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Thinker {
    public const nint pit_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint pit_interval = 0x1320; // float32
    public const nint ensnare_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Activity_Modifier {
    public const nint m_activityModifier = 0x1318; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Aether_Lens {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint cast_range_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows_Chill {
    public const nint interval = 0x1318; // float32
    public const nint max_stacks = 0x131C; // int32
    public const nint damage_percent = 0x1320; // int32
    public const nint movement_damage_percent = 0x1324; // int32
    public const nint m_nDamage = 0x1328; // int32
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
    public const nint m_vLastPosition = 0x1330; // Vector
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_Active {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_range = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint charges = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_WaveOfSilence_Primed {
    public const nint aura_disable_range = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence {
    public const nint blind_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Agility {
    public const nint m_AgilityTimers = 0x1318; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Echo_Thinker {
    public const nint m_vTarget = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Frost {
    public const nint m_fDamagePerSecond = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Movement {
    public const nint movespeed_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_Flux {
    public const nint m_nCasterTeam = 0x1318; // int32
    public const nint damage_per_tick_min = 0x131C; // int32
    public const nint damage_per_tick_max = 0x1320; // int32
    public const nint search_radius = 0x1324; // int32
    public const nint move_speed_slow_pct = 0x1328; // int32
    public const nint think_interval = 0x132C; // float32
    public const nint m_fCurrentDamage = 0x1330; // float32
    public const nint m_fDamageIncreasePerTick = 0x1334; // float32
    public const nint m_nCurrentSlow = 0x1338; // int32
    public const nint m_bAlone = 0x133C; // bool
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Attack_Speed {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint aura_origin_x = 0x1320; // float32
    public const nint aura_origin_y = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Attack_Speed {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
    public const nint explosion_delay_time = 0x1324; // float32
    public const nint explosion_stun_duration = 0x1328; // float32
    public const nint explosion_damage = 0x132C; // int32
    public const nint caster_team = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Explosion {
    public const nint radius = 0x1318; // int32
    public const nint explosion_damage = 0x131C; // int32
    public const nint explosion_stun_duration = 0x1320; // float32
    public const nint explosion_delay_time = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MeteorShockwave_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint knockback_distance = 0x1368; // float32
    public const nint knockback_duration = 0x136C; // float32
    public const nint windup_time = 0x1370; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Purge {
    public const nint move_speed_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint wraith_vision_radius = 0x131C; // int32
    public const nint wraith_speed = 0x1320; // int32
    public const nint activation_delay = 0x132C; // float32
    public const nint scepter_activation_delay = 0x1330; // float32
    public const nint think_interval = 0x1334; // float32
    public const nint search_timer_min = 0x1338; // float32
    public const nint search_timer_max = 0x133C; // float32
    public const nint mini_stun_duration = 0x1340; // float32
    public const nint move_speed_slow_pct = 0x1344; // int32
    public const nint m_nSparkDamage = 0x1348; // int32
    public const nint m_bActive = 0x134C; // bool
    public const nint m_bOriginal = 0x134D; // bool
    public const nint m_fSearchTimer = 0x1350; // float32
    public const nint m_fRotationSpeed = 0x1354; // float32
    public const nint m_nRotationDirection = 0x1358; // int32
    public const nint m_vRotationCenter = 0x135C; // Vector
    public const nint m_nFXIndex = 0x1368; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble {
    public const nint damage_increase = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble_Phase {
    public const nint num_doubles = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Arcanist_Potion {
    public const nint m_nCooldownReductionPct = 0x1318; // int32
    public const nint m_nManaCostReductionPct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage_min = 0x1368; // int32
    public const nint damage_max = 0x136C; // int32
    public const nint slow_min = 0x1370; // int32
    public const nint slow_max = 0x1374; // int32
    public const nint slow_duration = 0x1378; // float32
    public const nint windup_time = 0x137C; // float32
}

public static class CDOTA_Modifier_AghsFort_AssaultCaptain_SunRay {
    public const nint hp_cost_perc_per_second = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint self_turn_rate_percent = 0x133C; // int32
    public const nint m_flCurrentTime = 0x1340; // float32
    public const nint m_flLastDamageTime = 0x1344; // GameTime_t
    public const nint m_flAccumulatedSelfDamage = 0x1348; // float32
    public const nint m_bMovingForward = 0x134C; // bool
    public const nint m_bTurningFast = 0x134D; // bool
    public const nint m_flFacingTarget = 0x1350; // float32
    public const nint hp_perc_damage = 0x1354; // float32
    public const nint hp_perc_heal = 0x1358; // float32
    public const nint m_nBeamFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1360; // CHandle< C_BaseEntity >[8]
    public const nint m_hBeamEnd = 0x1380; // CHandle< C_BaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1384; // bool
    public const nint m_hBeamEndSound = 0x1388; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_Invis {
    public const nint invis_movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_Knockback {
    public const nint radius = 0x1348; // int32
    public const nint heal_pct = 0x134C; // int32
    public const nint slow_duration = 0x1350; // float32
    public const nint m_nBrainSapDamage = 0x1354; // int32
    public const nint m_vecHitTargets = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_KnockbackSlow {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_NightmareMirror {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_FiendsGripThinker {
    public const nint latch_range = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_Invis_Crit {
    public const nint invis_brain_sap_crit_pct = 0x1318; // int32
    public const nint m_nCritPct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossDarkWillow_CursedCrown {
    public const nint delay = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint stun_radius = 0x1320; // int32
    public const nint damage = 0x1324; // int32
    public const nint m_fStartTime = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_BossDarkWillow_ShadowRealm_Buff {
    public const nint m_fAddInterval = 0x1318; // float32
    public const nint m_fNextAddTime = 0x131C; // GameTime_t
    public const nint m_flStartTime = 0x1320; // GameTime_t
    public const nint m_flDamageScale = 0x1324; // float32
    public const nint duration = 0x1328; // float32
    public const nint attack_logic_duration = 0x132C; // float32
    public const nint speed_boost = 0x1330; // int32
    public const nint num_adds = 0x1334; // int32
    public const nint projectile_range = 0x1338; // int32
    public const nint projectile_speed = 0x133C; // int32
    public const nint projectile_width = 0x1340; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint totem_damage_percentage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem_LandDebuff {
    public const nint landing_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_Fissure_Shard {
    public const nint m_vStartPos = 0x1318; // Vector
    public const nint m_vEndPos = 0x1324; // Vector
    public const nint m_flEndTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Debuff {
    public const nint linger_movement_slow = 0x1318; // int32
    public const nint linger_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Thinker {
    public const nint freeze_radius = 0x1318; // int32
    public const nint freeze_damage = 0x131C; // int32
    public const nint freeze_debuff_duration = 0x1320; // float32
    public const nint freeze_delay = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy {
    public const nint attack_rate = 0x1318; // float32
    public const nint damage_percent = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_bHasAttacked = 0x1324; // bool
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons {
    public const nint model_scale = 0x1350; // int32
    public const nint radius = 0x1354; // float32
    public const nint splitshot_count = 0x1358; // int32
    public const nint debuff_duration = 0x135C; // float32
    public const nint pct_for_moveslow = 0x1360; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons_Debuff {
    public const nint m_fMovementSlow = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Buff {
    public const nint m_fLifestealPct = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Debuff {
    public const nint m_fSlowPct = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_vFacePosition = 0x131C; // Vector
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage {
    public const nint m_vOriginalTarget = 0x1318; // Vector
    public const nint wave_count = 0x1324; // int32
    public const nint projectile_speed = 0x1328; // int32
    public const nint projectile_width = 0x132C; // int32
    public const nint m_flInterval = 0x1330; // float32
    public const nint m_nArrowsFired = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_DamageReduction {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_Singe_Slow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1330; // bool
    public const nint damage_bonus = 0x1334; // int32
    public const nint debuff_duration = 0x1338; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Debuff {
    public const nint attack_slow = 0x1318; // int32
    public const nint m_fIgniteThinkInterval = 0x131C; // float32
    public const nint m_fIgniteDmgPerSec = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Melter {
    public const nint armor_reduction_per_arrow = 0x1318; // float32
    public const nint m_nMaxStacks = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_BigSkeletons {
    public const nint m_nInitialHealthBarOffset = 0x1318; // int32
    public const nint colossus_model_scale = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_Thinker {
    public const nint lifetime = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonColossus {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint block_damage_ranged_active = 0x132C; // int32
    public const nint block_damage_melee_active = 0x1330; // int32
    public const nint hp_gain_per_caster_level = 0x1334; // int32
    public const nint hp_regen_per_caster_level = 0x1338; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk {
    public const nint m_vecWraithTouchedEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint move_speed_bonus_pct = 0x1340; // int32
    public const nint bonus_magic_resist = 0x1344; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_Strafe {
    public const nint m_fAttackSpeed = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Caster {
    public const nint max_stacks = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Enemy {
    public const nint m_fAttackLoss = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Creature_Phoenix_FireSpiritCount {
    public const nint spirit_count = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Creature_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint max_hero_attacks = 0x1320; // int32
    public const nint max_hero_attacks_scepter = 0x1324; // int32
    public const nint max_hero_attacks_required = 0x1328; // int32
    public const nint caster_life_pct = 0x132C; // float32
    public const nint m_hSecondaryTarget = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_iAttackCount = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Creature_SpikedCarapace {
    public const nint stun_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonNova {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonSting_Applier {
    public const nint duration = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Dawnbreaker_Starbreaker_CounterOrbital {
    public const nint trigger_chance = 0x1318; // int32
    public const nint cooldown = 0x131C; // float32
    public const nint m_fLastProc = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_DragonPotion {
    public const nint m_iOriginalAttackCapabilities = 0x1318; // int32
    public const nint m_iszRangedAttackEffect = 0x1320; // CUtlSymbolLarge
    public const nint bonus_movement_speed = 0x1328; // int32
    public const nint bonus_attack_damage = 0x132C; // int32
    public const nint bonus_attack_range = 0x1330; // int32
    public const nint attack_projectile_speed = 0x1334; // int32
    public const nint magic_resistance = 0x1338; // int32
    public const nint model_scale = 0x133C; // int32
    public const nint skin_number = 0x1340; // int32
    public const nint flying_movement = 0x1344; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash {
    public const nint m_bInterrupted = 0x1318; // bool
    public const nint m_nProjectileID = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash_Debuff {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_GeomagneticGrip {
    public const nint radius = 0x1318; // int32
    public const nint rock_damage = 0x131C; // int32
    public const nint pull_units_per_second = 0x1320; // float32
    public const nint pull_units_per_second_heroes = 0x1324; // float32
    public const nint total_pull_distance = 0x1328; // float32
    public const nint duration = 0x132C; // float32
    public const nint m_bUsedStone = 0x1330; // bool
    public const nint m_vDestination = 0x1334; // Vector
    public const nint m_vLocation = 0x1340; // Vector
    public const nint m_hHitEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_Magnetize {
    public const nint rock_search_radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint rock_explosion_delay = 0x1324; // float32
    public const nint damage_duration = 0x1328; // float32
    public const nint cast_radius = 0x132C; // int32
    public const nint rock_explosion_radius = 0x1330; // int32
    public const nint m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint duration = 0x1350; // float32
    public const nint m_bShowOverhead = 0x1354; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_bHasBeenMagnetized = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_StoneThinker {
    public const nint m_bHasBeenMagnetized = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ExplosiveBarrel {
    public const nint m_nPreviewFX = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint vision_radius = 0x1324; // int32
    public const nint vision_duration = 0x1328; // float32
    public const nint model_scale = 0x132C; // int32
    public const nint bExploding = 0x1330; // bool
    public const nint stun_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_AghsFort_Firefly {
    public const nint pool_duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_ifirefly_Active = 0x1320; // int32
    public const nint tree_radius = 0x1324; // int32
    public const nint damage_pct_per_second = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint trail_placement_duration = 0x1330; // float32
    public const nint burn_linger_duration = 0x1334; // float32
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint m_flStartTime = 0x1344; // GameTime_t
    public const nint m_vLastFirePoolLoc = 0x1348; // Vector
    public const nint m_vFirePoolLocations = 0x1358; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_AghsFort_Firefly_Burn {
    public const nint damage_pct_per_second = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_fNextDamageTick = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeDance {
    public const nint blade_dance_crit_mult = 0x1318; // int32
    public const nint blade_dance_crit_chance = 0x131C; // int32
    public const nint m_bDidBladeDanceCrit = 0x1320; // bool
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeDance_Buff {
    public const nint evasion_per_stack = 0x1318; // int32
    public const nint movespeed_per_stack = 0x131C; // int32
    public const nint evasion_bonus = 0x1320; // int32
    public const nint movespeed_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint blade_fury_damage = 0x131C; // int32
    public const nint blade_fury_damage_tick = 0x1320; // float32
    public const nint movement_bonus = 0x1324; // int32
    public const nint spark_radius = 0x1328; // int32
    public const nint spark_damage_percent = 0x132C; // int32
    public const nint m_bDestroyParentThinkerOnDeath = 0x1330; // bool
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force_Pull {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint pull_speed = 0x131C; // int32
    public const nint pull_stop = 0x1320; // int32
    public const nint pull_origin = 0x1324; // Vector
    public const nint m_flLastThinkTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Double_Attack {
    public const nint range = 0x1318; // int32
    public const nint bonus_attack_duration = 0x131C; // float32
    public const nint bonus_attack_count = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint m_fBonusRange = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint healing_ward_heal_amount = 0x131C; // float32
    public const nint healing_ward_interval = 0x1320; // float32
    public const nint m_nTotalHealing = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward_Primed {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // int32
    public const nint search_radius = 0x1320; // int32
    public const nint damage_percent = 0x1324; // int32
    public const nint movement_bonus = 0x1328; // int32
    public const nint power = 0x132C; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Omnislash_Ignite {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint tick_damage = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint healing_ward_heal_amount = 0x131C; // float32
    public const nint healing_ward_interval = 0x1320; // float32
    public const nint m_nTotalRegen = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward_Armor {
    public const nint armor_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Fire_Cannons_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageAbsorb {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint movespeed_bonus = 0x131C; // int32
    public const nint ghostship_absorb = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageDelay {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fire_Cannons {
    public const nint m_flDistance = 0x1318; // float32
    public const nint m_flSpeed = 0x131C; // float32
    public const nint m_nNumCannons = 0x1320; // int32
    public const nint m_flProjectileRadius = 0x1324; // float32
    public const nint m_bGhostShipIsEntity = 0x1328; // bool
    public const nint m_hGhostShipProjectile = 0x132C; // int32
    public const nint m_hGhostShip = 0x1330; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fleet {
    public const nint vCasterOrigin = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint m_nHitCount = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_SeaSickness {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
    public const nint m_flMovespeedBonus = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Tidebringer {
    public const nint m_bTidebringerAttack = 0x1318; // bool
    public const nint cleave_starting_width = 0x131C; // int32
    public const nint cleave_ending_width = 0x1320; // int32
    public const nint cleave_distance = 0x1324; // int32
    public const nint damage_bonus = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint cleave_damage = 0x1330; // int32
    public const nint m_bIgnoreCooldown = 0x1334; // bool
    public const nint m_bDreadPirate = 0x1335; // bool
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent {
    public const nint flIntervalThinkTime = 0x1318; // float32
    public const nint torrent_damage = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Storm {
    public const nint torrent_min_distance = 0x1318; // int32
    public const nint torrent_max_distance = 0x131C; // int32
    public const nint m_iExplosionQuadrant = 0x1320; // int32
    public const nint m_vPosition = 0x1324; // Vector
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Thinker {
    public const nint m_bIsSquall = 0x1318; // bool
    public const nint m_bIsSeaLegs = 0x1319; // bool
    public const nint m_flRadius = 0x131C; // float32
    public const nint m_bShowEnemies = 0x1320; // bool
    public const nint m_bTorrentStorm = 0x1321; // bool
    public const nint m_flDelay = 0x1324; // float32
    public const nint m_flFireTime = 0x1328; // float32
    public const nint m_bForcePosition = 0x132C; // bool
    public const nint m_vStartPosition = 0x1330; // Vector
    public const nint m_vEndPosition = 0x133C; // Vector
    public const nint m_nPercentChanceOfGhostShip = 0x1348; // int32
    public const nint m_hTarget = 0x134C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot {
    public const nint armour_increase = 0x1318; // float32
    public const nint speed_increase_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_SeaLegs_Thinker {
    public const nint m_vLastPosition = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_bIsReflection = 0x1324; // bool
    public const nint m_hEntity = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Lich_ChainFrost_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Chain_Frost_Thinker {
    public const nint m_nDamageToHeroes = 0x1318; // int32
    public const nint m_nHeroesKilled = 0x131C; // int32
    public const nint m_nJumps = 0x1320; // int32
    public const nint m_hTarget = 0x1324; // CHandle< C_BaseEntity >
    public const nint m_hAvoidTarget = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostNova_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
    public const nint is_primary_target = 0x1320; // bool
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield_Magic_Resistance_Debuff {
    public const nint magic_resist_reduction = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Ice_Spire {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_Timer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_AghsFort_Lich_Ice_Spire_Debuff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze {
    public const nint movement_speed = 0x1318; // int32
    public const nint mana_drain = 0x131C; // int32
    public const nint m_flIntervalRate = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Self {
    public const nint mana_drain = 0x1318; // int32
    public const nint m_flIntervalRate = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Summon {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint base_damage_outgoing_percentage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Lifestealer_Enraged_Pulse {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint m_flBeamStun = 0x132C; // float32
    public const nint vPosition = 0x1330; // Vector
    public const nint m_bAreaTarget = 0x133C; // bool
    public const nint m_bMoonWell = 0x133D; // bool
    public const nint m_iTickCount = 0x1340; // int32
    public const nint m_nMoonlightFXIndex = 0x1344; // ParticleIndex_t
    public const nint m_HitTargets = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_HitAllies = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint beam_interval = 0x1378; // float32
    public const nint m_flInterval = 0x137C; // float32
}

public static class CDOTA_Modifier_AghsFort_Luna_Eclipse_IntoTheNight_Aura {
    public const nint m_nMoveSpeed = 0x1318; // int32
    public const nint m_nEvasion = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_GlaiveShield {
    public const nint m_bSpiritsExplode = 0x1318; // bool
    public const nint hit_radius = 0x131C; // int32
    public const nint rotate_range = 0x1320; // int32
    public const nint glaive_movement_rate = 0x1324; // int32
    public const nint replenish_time = 0x1328; // float32
    public const nint m_flRotation = 0x132C; // float32
    public const nint m_flGlaiveRadius = 0x1330; // float32
    public const nint m_flNextSpawn = 0x1334; // GameTime_t
    public const nint m_bPaused = 0x1338; // bool
}

public static class CDOTA_Modifier_AghsFort_Luna_LucentBeam_Moonglow {
    public const nint bonus_aspd = 0x1318; // int32
    public const nint lifesteal = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura {
    public const nint bonus_damage = 0x1318; // int32
    public const nint night_bonus_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura_MoonShield {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Active_Buff {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Leap {
    public const nint leap_distance = 0x1318; // int32
    public const nint leap_speed = 0x131C; // float32
    public const nint leap_acceleration = 0x1320; // float32
    public const nint leap_radius = 0x1324; // int32
    public const nint search_range = 0x1328; // int32
    public const nint damage_multiplier = 0x132C; // float32
    public const nint m_flPowerLevelPct = 0x1330; // float32
    public const nint m_bLaunched = 0x1334; // bool
    public const nint m_vecHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_LunarRemnant {
    public const nint m_nBonusDamage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonMark {
    public const nint spell_resist_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonShield_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Moonfright {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort_Luna_Lunar_Grace {
    public const nint attack_speed = 0x1318; // int32
    public const nint night_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive {
    public const nint range = 0x1318; // int32
    public const nint bounces = 0x131C; // int32
    public const nint damage_reduction_percent = 0x1320; // int32
    public const nint bounce_pct = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive_FX {
    public const nint m_nMoonGlaiveFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive_Knockback {
    public const nint attack_speed_slow = 0x1318; // int32
    public const nint move_speed_slow_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Magnataur_Skewer_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Mars_Gods_Rebuke_Strength_Buff {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Omniknight_Repel_Damage_Instance_Refraction {
    public const nint damage_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FireSpiritBurn {
    public const nint tick_interval = 0x1318; // float32
    public const nint attackspeed_slow = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FireSpiritCount {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint spirit_count = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack {
    public const nint radius_pct_as_length = 0x1318; // float32
    public const nint width = 0x131C; // int32
    public const nint linger_duration = 0x1320; // float32
    public const nint m_fLength = 0x1324; // float32
    public const nint m_nBeamFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_flLastHit = 0x1330; // GameTime_t
    public const nint m_vecBurningTrees = 0x1338; // CUtlVector< C_BaseEntity* >
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack_TreeFire_Thinker {
    public const nint m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< C_BaseEntity >, GameTime_t > >
    public const nint m_bCleanupWhenEmpty = 0x1330; // bool
}

public static class CDOTA_Modifier_AghsFort_Phoenix_IcarusDive {
    public const nint m_vSource = 0x1318; // Vector
    public const nint m_vTarget = 0x1324; // Vector
    public const nint m_vDirection = 0x1330; // Vector
    public const nint m_angDirection = 0x133C; // QAngle
    public const nint m_flCurrentTime = 0x1348; // float32
    public const nint dash_length = 0x134C; // int32
    public const nint dash_width = 0x1350; // int32
    public const nint hit_radius = 0x1354; // int32
    public const nint burn_duration = 0x1358; // float32
    public const nint dive_duration = 0x135C; // float32
    public const nint damage_per_second = 0x1360; // int32
    public const nint m_vecHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bSavedAlly = 0x1380; // bool
}

public static class CDOTA_Modifier_AghsFort_Phoenix_IcarusDiveBurn {
    public const nint burn_tick_interval = 0x1318; // float32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_SecondSun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint attacks_to_kill = 0x1320; // int32
    public const nint captain_attack_value = 0x1324; // int32
    public const nint boss_attack_value = 0x1328; // int32
    public const nint m_nAttackCount = 0x132C; // int32
    public const nint m_nRadius = 0x1330; // int32
    public const nint m_fSecondSunRadiusPct = 0x1334; // float32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint attacks_to_kill = 0x1320; // int32
    public const nint captain_attack_value = 0x1324; // int32
    public const nint boss_attack_value = 0x1328; // int32
    public const nint m_hSecondaryTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_bHasExpelCoreShard = 0x1330; // bool
    public const nint m_nAttackCount = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_SunRay {
    public const nint hp_cost_pct = 0x1318; // float32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint m_flCurrentTime = 0x133C; // float32
    public const nint m_flAccumulatedSelfDamage = 0x1340; // float32
    public const nint m_bMovingForward = 0x1344; // bool
    public const nint m_bTurningFast = 0x1345; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint hp_perc_heal = 0x134C; // float32
    public const nint m_nBeamFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1354; // CHandle< C_BaseEntity >[8]
    public const nint m_hBeamEnd = 0x1374; // CHandle< C_BaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1378; // bool
    public const nint m_hBeamEndSound = 0x137C; // CHandle< C_BaseEntity >
    public const nint m_vecDispelledAllies = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Phoenix_Sun_Debuff {
    public const nint damage_per_sec = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint aura_radius = 0x1320; // int32
    public const nint m_fRadius = 0x1324; // float32
    public const nint m_fSecondSunRadiusPct = 0x1328; // float32
    public const nint m_fNextDamageTime = 0x132C; // GameTime_t
    public const nint m_fLastThinkTime = 0x1330; // GameTime_t
    public const nint m_bHasHorizonAbility = 0x1334; // bool
    public const nint m_nHorizonPushDistance = 0x1338; // int32
    public const nint m_fHorizonPushInterval = 0x133C; // float32
    public const nint m_fNextHorizonPushTime = 0x1340; // GameTime_t
    public const nint m_nHorizonFX = 0x1344; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_PlayerTransform {
    public const nint m_nCourierItemId = 0x1318; // itemid_t
    public const nint m_ModelNameOfDisguise = 0x1320; // CUtlString
    public const nint m_nMoveSpeed = 0x1330; // int32
    public const nint m_nDisguisedSpeed = 0x1334; // int32
    public const nint m_nDisguiseEffectIndex = 0x1338; // ParticleIndex_t
    public const nint m_hCourier = 0x133C; // CHandle< C_BaseEntity >
    public const nint m_bIsFlyingCourier = 0x1340; // bool
    public const nint s_pszDonkeyDisguise = 0x1348; // char*
    public const nint invul_duration = 0x1350; // float32
    public const nint m_bParticlesSpawned = 0x1354; // bool
}

public static class CDOTA_Modifier_AghsFort_PoisonNova_Creature_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1338; // int32
    public const nint radius = 0x133C; // int32
    public const nint start_radius = 0x1340; // int32
    public const nint duration = 0x1344; // float32
}

public static class CDOTA_Modifier_AghsFort_QueenOfPain_ShadowStrike {
    public const nint duration_damage = 0x1318; // int32
    public const nint duration_heal = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint m_SlowInterval = 0x1328; // CountdownTimer
    public const nint m_flSlowStep = 0x1340; // float32
    public const nint m_flSlowStepStep = 0x1344; // float32
}

public static class CDOTA_Modifier_AghsFort_RestorativeFlower {
    public const nint radius = 0x1318; // int32
    public const nint heal = 0x131C; // int32
    public const nint vision_radius = 0x1320; // int32
    public const nint vision_duration = 0x1324; // float32
    public const nint model_scale = 0x1328; // int32
    public const nint bExploding = 0x132C; // bool
    public const nint stun_duration = 0x1330; // float32
    public const nint m_nFXAmbient = 0x1334; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_RockGolem_Avalanche {
    public const nint m_pHeroesHit = 0x1318; // CUtlVector< C_DOTA_BaseNPC* >
    public const nint radius = 0x1330; // int32
    public const nint total_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint tick_count = 0x133C; // int32
    public const nint m_damage = 0x1340; // int32
    public const nint m_nTicks = 0x1344; // int32
}

public static class CDOTA_Modifier_AghsFort_ShadowShaman_Shackles {
    public const nint tick_interval = 0x1318; // float32
    public const nint total_damage = 0x131C; // float32
    public const nint channel_time = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_ShadowWaveEffectPotion {
    public const nint m_iCurJumpCount = 0x1318; // int32
    public const nint m_vCurTargetLoc = 0x131C; // Vector
    public const nint m_hHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_fProcChance = 0x1340; // float32
    public const nint m_nCastRange = 0x1344; // int32
    public const nint m_nBounceRadius = 0x1348; // int32
    public const nint m_nDamageRadius = 0x134C; // int32
    public const nint m_nDamage = 0x1350; // int32
    public const nint m_nMaxTargets = 0x1354; // int32
}

public static class CDOTA_Modifier_AghsFort_Shadow_Demon_Shadow_Poison {
    public const nint stack_damage = 0x1318; // float32
    public const nint bonus_stack_damage = 0x131C; // float32
    public const nint max_multiply_stacks = 0x1320; // int32
    public const nint release_at_max_stacks = 0x1324; // int32
    public const nint m_nFXStackIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot {
    public const nint proc_chance = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
    public const nint knockback_distance = 0x1324; // int32
    public const nint m_fLastStunProcTime = 0x1328; // GameTime_t
    public const nint m_vHeadshotRecords = 0x1330; // CUtlVector< int16 >
    public const nint m_vHeadshotAssassinateRecords = 0x1348; // CUtlVector< int16 >
    public const nint m_nCritPct = 0x1360; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot_ArmorReduction {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot_Slow {
    public const nint slow = 0x1318; // int32
    public const nint slow_vs_considered_hero = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_AttackSpeed {
    public const nint value = 0x1318; // int32
    public const nint value2 = 0x131C; // float32
    public const nint m_nAttackSpeedBonus = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Slow {
    public const nint m_fAccumulatedDamage = 0x1318; // float32
    public const nint shrapnel_damage = 0x131C; // int32
    public const nint slow_movement_speed = 0x1320; // int32
    public const nint miss_chance = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint damage_delay = 0x1320; // float32
    public const nint m_nShrapnelPct = 0x1324; // int32
    public const nint m_bExploded = 0x1328; // bool
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint active_attack_range_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_ArmorReduction {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_Bonus {
    public const nint slow = 0x1318; // int32
    public const nint m_nAttackSpeedPerAttack = 0x131C; // int32
    public const nint m_nShrapnelPct = 0x1320; // int32
    public const nint m_bNoCollision = 0x1324; // bool
    public const nint m_vecArtilleryEnemies = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_RapidFire {
    public const nint value2 = 0x1318; // int32
    public const nint value3 = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Dawnbreaker_Solar_Guardian_DeathOfAStar_Active {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bPassive = 0x131C; // bool
    public const nint m_flCooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride {
    public const nint grab_radius = 0x1318; // int32
    public const nint m_hLoadedUnit = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride_LoadedUnit {
    public const nint hit_radius = 0x1318; // int32
    public const nint timeout_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Magnataur_Shockwave_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Omniknight_Purification_Cooldown_Reduction {
    public const nint cooldown_reduction_per_hit = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_PhantomAssassin_CoupDeGrace_BloodyDebuff {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_FireSpirits_Artillery_Carry {
    public const nint unit_position_offset = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Ally {
    public const nint m_hSaviorEnt = 0x1318; // CHandle< C_BaseEntity >
    public const nint ally_position_offset = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Invis {
    public const nint duration = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_SunRay_GammaRay_Slow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_QueenOfPain_Blink_AttackSpeed {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Autoattack {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Incoming_Damage_Reduction {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Templar_Assassin_PsiBlades_AutoAttack {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Undying_ConsumeZombies_Buff {
    public const nint bonus_move_speed_per_stack = 0x1318; // int32
    public const nint bonus_attack_speed_per_stack = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_Armor {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_AttackSpeed {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt_Armor {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_ImpactSlow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_WitchDoctor_DeathWard_Damage_Resist {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion_Thinker {
    public const nint m_fDamage = 0x1318; // float32
    public const nint m_fLastRadius = 0x131C; // float32
    public const nint m_fCurRadius = 0x1320; // float32
    public const nint m_fLastThink = 0x1324; // GameTime_t
    public const nint m_bContracting = 0x1328; // bool
    public const nint m_ViewerTimer = 0x1330; // CountdownTimer
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1368; // int32
    public const nint radius = 0x136C; // int32
}

public static class CDOTA_Modifier_AghsFort_StonehallGeneral_OverwhelmingOdds_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint max_steps = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint m_nNumSteps = 0x1324; // int32
    public const nint m_nRadiusStep = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint m_vDir = 0x1330; // Vector
}

public static class CDOTA_Modifier_AghsFort_SwampSickness {
    public const nint slow_percent = 0x1318; // int32
    public const nint m_bInRiver = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Thinker {
    public const nint m_fProcChance = 0x1318; // float32
    public const nint m_nRadius = 0x131C; // int32
    public const nint m_nMovespeedBonus = 0x1320; // int32
    public const nint m_fStunDuration = 0x1324; // float32
    public const nint m_fSlowDuration = 0x1328; // float32
    public const nint m_fDelay = 0x132C; // float32
    public const nint m_nTorrentDamage = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent {
    public const nint m_nTorrentDamage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent_Slow {
    public const nint m_nMovespeedBonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Tower_BlastWave_Thinker {
    public const nint damage_pct = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
}

public static class CDOTA_Modifier_AghsFort_TrapRoom_Hookshot {
    public const nint speed = 0x1320; // int32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise {
    public const nint m_RevealTimer = 0x1318; // CountdownTimer
    public const nint m_InvisAttackTimer = 0x1330; // CountdownTimer
    public const nint m_CooldownTimer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Root {
    public const nint m_iEntangleDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Tree_Walking {
    public const nint movement_bonus = 0x1318; // int32
    public const nint regen_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_Buff {
    public const nint str_stolen = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_BuffCounter {
    public const nint m_fStrengthStolen = 0x1318; // float32
    public const nint model_scale_per_strength = 0x131C; // float32
    public const nint model_scale_max = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint extra_decays = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint decay_strength_percent = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem {
    public const nint str_percentage = 0x1318; // int32
    public const nint movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem_PlagueAura {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem_Slow {
    public const nint damage_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_SoulRipWard {
    public const nint ward_radius = 0x1318; // int32
    public const nint explosion_damage = 0x131C; // int32
    public const nint taunt_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_SoulRip_Share_Strength {
    public const nint str_gain = 0x1318; // float32
    public const nint model_scale = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Bunker {
    public const nint m_hLoadedUnit = 0x1318; // CHandle< C_BaseEntity >
    public const nint heal_percent_per_tick = 0x131C; // float32
    public const nint tombstone_grab_radius = 0x1320; // int32
    public const nint m_nBunkerEnterFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_HP {
    public const nint tombstone_health = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Aura {
    public const nint radius = 0x1318; // int32
    public const nint zombie_interval = 0x131C; // float32
    public const nint spawn_at_parent = 0x1320; // int32
    public const nint remove_on_death = 0x1324; // int32
    public const nint knockback_duration = 0x1328; // float32
    public const nint knockback_distance = 0x132C; // int32
    public const nint knockback_height = 0x1330; // int32
    public const nint spawn_distance = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathlust {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike {
    public const nint radius = 0x1318; // int32
    public const nint health_threshold_pct = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint m_hTombstoneSourceAbility = 0x1324; // CHandle< C_DOTABaseAbility >
    public const nint m_hChaseUnit = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow {
    public const nint slow = 0x1318; // int32
    public const nint m_flDecrementTime = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Earthshock {
    public const nint m_nMissChance = 0x1318; // int32
    public const nint m_bAddOverpower = 0x131C; // bool
    public const nint m_flOverpowerDuration = 0x1320; // float32
    public const nint m_nNumOverpowerAttacks = 0x1324; // int32
    public const nint movement_slow = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Earthshock_DeepInvis {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage_Magic_Immunity {
    public const nint m_nModelScale = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint bonus_reset_time = 0x131C; // float32
    public const nint bonus_reset_time_roshan = 0x1320; // float32
    public const nint max_swipe_stack = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes_Damage_Increase {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint m_nArmorReductionPerStack = 0x131C; // int32
    public const nint m_nLifestealPerStack = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint m_nEarthshockAttacks = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Overpower_Evasion {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Venomancer_PoisonSting {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint m_nTicksRemaining = 0x1320; // int32
    public const nint m_flAttackDamage = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Unit {
    public const nint m_vFacingDir = 0x1318; // Vector
    public const nint m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_WatchThinker {
    public const nint remnant_watch_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint pop_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1340; // int32
    public const nint radius = 0x1344; // int32
    public const nint damage = 0x1348; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_PhantomAttack_Crit {
    public const nint m_nCritPercent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Unit {
    public const nint m_bActivated = 0x1318; // bool
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_vecWatchPositions = 0x1328; // CUtlVector< Vector >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint m_fVoidMarkPct = 0x131C; // float32
    public const nint movement_slow_pct = 0x1320; // int32
    public const nint pop_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Vacuum_Motion {
    public const nint m_fVacuumSpeed = 0x1318; // float32
    public const nint m_fStunDuration = 0x131C; // float32
    public const nint m_vPullLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
    public const nint damage = 0x13B8; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase_Ally {
    public const nint damage_radius = 0x1318; // int32
    public const nint debuff_duration = 0x131C; // float32
    public const nint destination_fx_radius = 0x1320; // int32
    public const nint damage = 0x1324; // int32
    public const nint m_vExitPos = 0x1328; // Vector
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Cadence {
    public const nint m_fSpellAmp = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EnemiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_AlliesHit = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1358; // int32
    public const nint radius = 0x135C; // int32
    public const nint damage = 0x1360; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_SpellAmped {
    public const nint m_nSpellAmp = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Watch_Tower {
    public const nint m_nState = 0x1318; // TowerState_t
    public const nint m_flYaw = 0x131C; // float32
    public const nint m_nCaptureDuration = 0x1320; // int32
    public const nint m_flEffectiveCaptureStartTime = 0x1324; // GameTime_t
    public const nint m_nCapturingPlayerCount = 0x1328; // int32
    public const nint m_flCaptureProgress = 0x132C; // float32
    public const nint m_iCapturingTeam = 0x1330; // int32
    public const nint m_nFxOutpostAmbient = 0x1334; // ParticleIndex_t
    public const nint m_flDestroyTime = 0x1338; // GameTime_t
    public const nint m_flAutoChannelCompleteTime = 0x133C; // GameTime_t
    public const nint m_bAscensionLevelPicker = 0x1340; // bool
    public const nint m_nEliteChallengeLevel = 0x1344; // int32
    public const nint m_strNextRoomName = 0x1348; // CUtlString
    public const nint m_strNextEncounterName = 0x1350; // CUtlString
    public const nint m_bStartedBeamFacing = 0x1358; // bool
}

public static class CDOTA_Modifier_AghsFort_Waveblaster_Leap {
    public const nint leap_speed = 0x1318; // float32
    public const nint leap_acceleration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura {
    public const nint aura_disable_range = 0x1318; // int32
    public const nint aura_range = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint m_nBonusFactor = 0x1324; // int32
    public const nint m_fLastEnableTime = 0x1328; // GameTime_t
    public const nint m_nFxIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura_Bonus {
    public const nint aura_agility_multiplier = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot {
    public const nint arrow_width = 0x1318; // int32
    public const nint arrow_speed = 0x131C; // float32
    public const nint range = 0x1320; // int32
    public const nint wave_count = 0x1324; // int32
    public const nint wave_delay = 0x1328; // float32
    public const nint arrow_count_per_wave = 0x132C; // int32
    public const nint arrow_delay = 0x1330; // float32
    public const nint per_arrow_angle = 0x1334; // float32
    public const nint m_fYawOffset = 0x1338; // float32
    public const nint m_iWaveIndex = 0x133C; // int32
    public const nint m_iArrowIndex = 0x1340; // int32
    public const nint m_vTarget = 0x1344; // Vector
    public const nint m_vWaveAngle = 0x1350; // QAngle
    public const nint m_flInterval = 0x135C; // float32
    public const nint m_flNextThink = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_Buff {
    public const nint damage_percent = 0x1318; // int32
    public const nint knockback_distance = 0x131C; // int32
    public const nint knockback_duration = 0x1320; // float32
    public const nint move_speed_percent = 0x1324; // int32
    public const nint max_move_speed_percent = 0x1328; // int32
    public const nint model_scale = 0x132C; // int32
    public const nint max_model_scale = 0x1330; // int32
    public const nint m_bActive = 0x1334; // bool
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_SideLine {
    public const nint m_iWaveIndex = 0x1318; // int32
    public const nint m_fYawOffset = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_ArcWardenBoss_SparkWraith_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint hero_damage = 0x1320; // int32
    public const nint acceleration = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_distance = 0x132C; // int32
    public const nint pre_flight_time = 0x1330; // float32
    public const nint stun_duration = 0x1334; // float32
    public const nint m_nMissileDamage = 0x1338; // int32
    public const nint m_nTeamNumber = 0x133C; // int32
    public const nint speed = 0x1348; // float32
    public const nint m_hAttachTarget = 0x134C; // CHandle< C_BaseEntity >
    public const nint m_vStartPosition = 0x1350; // Vector
    public const nint m_EnemyVision = 0x1360; // CountdownTimer
    public const nint m_MoveTime = 0x1378; // CountdownTimer
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Burn {
    public const nint burn_damage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Thinker {
    public const nint wave_damage = 0x1318; // int32
    public const nint wave_count = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint summon_count = 0x1324; // int32
    public const nint wave_interval = 0x1328; // float32
    public const nint burn_duration = 0x132C; // float32
    public const nint first_wave_delay = 0x1330; // float32
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint animation_rate = 0x132C; // float32
    public const nint stop_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Enfeeble_DamageStealBuff {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Enfeeble_Effect {
    public const nint damage_reduction = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
    public const nint cast_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_FiendsGrip {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_boost_lifesteal_multiplier = 0x131C; // int32
    public const nint fiend_grip_damage = 0x1320; // int32
    public const nint fiend_grip_spread_radius = 0x1324; // int32
    public const nint fiend_grip_tick_interval = 0x1328; // float32
    public const nint m_flLastSpreadTime = 0x132C; // GameTime_t
    public const nint m_bThinkerSource = 0x1330; // bool
    public const nint m_bRequiresChanneling = 0x1331; // bool
    public const nint m_bPrimaryGrip = 0x1332; // bool
}

public static class CDOTA_Modifier_Aghsfort_Bane_FiendsGrip_Cast_Illusion {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Nightmare {
    public const nint m_bSweetDreams = 0x1318; // bool
    public const nint m_bConfusion = 0x1319; // bool
    public const nint m_bSelfBreakAvailable = 0x131A; // bool
    public const nint m_bNoStatusEffect = 0x131B; // bool
    public const nint m_nSource = 0x131C; // int32
    public const nint animation_rate = 0x1320; // float32
    public const nint m_flNextNightmareDamageTime = 0x1324; // GameTime_t
    public const nint m_flAccumNightmareDamage = 0x1328; // float32
    public const nint movespeed_pct = 0x132C; // int32
    public const nint attack_speed = 0x1330; // int32
    public const nint model_scale = 0x1334; // int32
    public const nint m_hConfusionAttackTarget = 0x1338; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Bane_Nightmare_Invulnerable {
    public const nint m_nMoveSpeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Clinkz_BurningArmy_Entrenchment {
    public const nint m_fSlowPct = 0x1318; // float32
    public const nint radius = 0x131C; // float32
    public const nint think_interval = 0x1320; // float32
    public const nint linger_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint travel_speed_pct = 0x1320; // int32
    public const nint m_nMaxRange = 0x1324; // int32
    public const nint m_vStartPoint = 0x1328; // Vector
    public const nint m_vLastTrailThinkerLocation = 0x1334; // Vector
    public const nint m_vEndPointShard = 0x1340; // Vector
    public const nint m_nStatusFXIndex = 0x134C; // ParticleIndex_t
    public const nint flare_radius = 0x1350; // int32
    public const nint bHasStartedBurning = 0x1354; // bool
    public const nint flare_debuff_duration = 0x1358; // float32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint trail_duration = 0x131C; // float32
    public const nint flare_radius = 0x1320; // int32
    public const nint m_nProjectileHandle = 0x1324; // int32
    public const nint m_hHavenThinker = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge {
    public const nint move_slow = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint m_hInflictor = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge_Thinker {
    public const nint flare_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_hInflictor = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Attack_Bonus {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Caster {
    public const nint swipe_radius = 0x1318; // int32
    public const nint swipe_damage = 0x131C; // int32
    public const nint smash_radius = 0x1320; // int32
    public const nint smash_damage = 0x1324; // int32
    public const nint m_nCurrentSpeed = 0x1328; // int32
    public const nint flSwipeInterval = 0x132C; // float32
    public const nint m_flNextHit = 0x1330; // GameTime_t
    public const nint iCurrentAttack = 0x1334; // int32
    public const nint total_attacks = 0x1338; // int32
    public const nint smash_stun_duration = 0x133C; // float32
    public const nint sweep_stun_duration = 0x1340; // float32
    public const nint m_bHasCompletedMove = 0x1344; // bool
    public const nint duration = 0x1348; // float32
    public const nint m_vTargetHorizontalDirection = 0x134C; // Vector
    public const nint smash_distance_from_hero = 0x1358; // int32
    public const nint animation_rate = 0x135C; // float32
    public const nint turn_rate = 0x1360; // float32
    public const nint m_flFacingTarget = 0x1364; // float32
    public const nint m_bSuncrusher = 0x1368; // bool
    public const nint m_flDistanceSinceStandAblazeThinker = 0x136C; // float32
    public const nint m_flDistancePerStandAblazeThinker = 0x1370; // float32
    public const nint m_hCelestialHammerForFire = 0x1374; // CHandle< C_DOTABaseAbility >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Slow {
    public const nint swipe_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Smash_Stun {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint attack_count = 0x131C; // int32
    public const nint m_bShouldIncrement = 0x1320; // bool
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_Attack_Buff {
    public const nint m_bIsBuffedAttack = 0x1318; // bool
    public const nint m_bSunSentinel = 0x1319; // bool
    public const nint heal_pct = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint heal_radius = 0x1324; // int32
    public const nint heal_from_creeps = 0x1328; // int32
    public const nint allied_healing_pct = 0x132C; // int32
    public const nint m_nSmashDamage = 0x1330; // int32
    public const nint m_nCounterOrbitalChance = 0x1334; // int32
    public const nint m_vecHeroesToHeal = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flTotalToHeal = 0x1350; // float32
    public const nint m_bCounterOrbitalProcessed = 0x1354; // bool
    public const nint m_bIsCounterOrbitalSmash = 0x1355; // bool
    public const nint m_bBrightFoundryProcessed = 0x1356; // bool
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_SolarBattery {
    public const nint move_speed_pct = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint m_nBonusMovementSpeedPct = 0x1320; // int32
    public const nint m_nBonusAttackSpeed = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Disable {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Evasion {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Thinker {
    public const nint pulse_interval = 0x1318; // float32
    public const nint iEffectRadius = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint scepter_heal = 0x1328; // int32
    public const nint m_hFollowTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_hInflictor = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_flNextPulseTime = 0x1334; // GameTime_t
    public const nint m_nThinkerFXIndex = 0x1338; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse {
    public const nint m_PositionIndex = 0x1318; // Vector[9]
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Attack_Buff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Travel_Damage {
    public const nint damage = 0x1318; // float32
    public const nint max_ticks = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_KineticField {
    public const nint radius = 0x1318; // int32
    public const nint m_vOriginLoc = 0x131C; // Vector
    public const nint m_bCanBeAffected = 0x1328; // bool
    public const nint m_bTruesight = 0x1329; // bool
    public const nint intellect_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_KineticFieldThinker {
    public const nint radius = 0x1318; // int32
    public const nint formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
    public const nint m_nFXIndex = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm {
    public const nint miss_rate = 0x1318; // int32
    public const nint movement_speed_reduction = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint m_bHasScepter = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStormThinker {
    public const nint m_nCurrentPulse = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_max = 0x1320; // int32
    public const nint pulses = 0x1324; // int32
    public const nint duration = 0x1328; // float32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
    public const nint move_slow_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike {
    public const nint strike_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint strike_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether {
    public const nint m_bInManaGained = 0x1318; // bool
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint hStunnedEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint slow_duration = 0x1338; // float32
    public const nint movespeed = 0x133C; // int32
    public const nint self_bonus = 0x1340; // int32
    public const nint m_bIsInRange = 0x1344; // bool
    public const nint radius = 0x1348; // int32
    public const nint latch_distance = 0x134C; // int32
    public const nint m_flHealthHealed = 0x1350; // float32
    public const nint m_flManaHealed = 0x1354; // float32
    public const nint tether_heal_amp = 0x1358; // float32
    public const nint m_flHealMessageTime = 0x135C; // GameTime_t
    public const nint m_flManaMessageTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Haste {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint health_regen = 0x1320; // int32
    public const nint status_resist = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down {
    public const nint slow_duration_first = 0x1318; // int32
    public const nint slow_duration_second = 0x131C; // int32
    public const nint damage_first = 0x1320; // int32
    public const nint damage_second = 0x1324; // int32
    public const nint power = 0x1328; // float32
    public const nint radius = 0x132C; // int32
    public const nint slow_first = 0x1330; // float32
    public const nint slow_second = 0x1334; // float32
    public const nint m_bDelayed = 0x1338; // bool
    public const nint m_bHalfDamage = 0x1339; // bool
    public const nint m_bFirstStrike = 0x133A; // bool
    public const nint m_hInflictorAbility = 0x133C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon {
    public const nint max_attacks = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint max_targets = 0x132C; // int32
    public const nint m_bFirstStrike = 0x1330; // bool
    public const nint m_bShouldFireMissiles = 0x1331; // bool
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon_Scepter {
    public const nint fire_rate = 0x1318; // float32
    public const nint scepter_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Homing_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint acceleration = 0x1320; // int32
    public const nint pre_flight_time = 0x1324; // float32
    public const nint stun_duration = 0x1328; // float32
    public const nint m_nMissileDamage = 0x132C; // int32
    public const nint damage = 0x1330; // int32
    public const nint m_nTeamNumber = 0x1334; // int32
    public const nint speed = 0x1340; // float32
    public const nint m_flFacingTarget = 0x1344; // float32
    public const nint movement_turn_rate = 0x1348; // int32
    public const nint m_nPower = 0x134C; // int32
    public const nint m_hAttachTarget = 0x1350; // CHandle< C_BaseEntity >
    public const nint m_MoveTime = 0x1358; // CountdownTimer
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint m_nPower = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Kunkka_NoQuarter {
    public const nint m_nSpeedBonusPercentage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Ignite {
    public const nint burn_interval = 0x1318; // float32
    public const nint burn_damage = 0x131C; // float32
    public const nint mana_restore = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Movement {
    public const nint m_flPushDistance = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Lina_FierySoul {
    public const nint fiery_soul_attack_speed_bonus = 0x1318; // int32
    public const nint fiery_soul_move_speed_bonus = 0x131C; // float32
    public const nint fiery_soul_max_stacks = 0x1320; // int32
    public const nint fiery_soul_stack_duration = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flFierySoulDieTime = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Lina_FierySoul_Active {
    public const nint attack_range_per_stack = 0x1318; // int32
    public const nint m_bShouldReset = 0x131C; // bool
    public const nint m_bIsActive = 0x131D; // bool
    public const nint fiery_soul_attack_speed_bonus = 0x1320; // int32
    public const nint fiery_soul_move_speed_bonus = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Lina_LagunaBlade_Line {
    public const nint vStart = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint damage_delay = 0x1330; // float32
    public const nint m_hMainTarget = 0x1334; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Lina_LightStrikeArray_Thinker {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_iDamage = 0x1330; // int32
    public const nint m_flStunDuration = 0x1334; // float32
    public const nint light_strike_array_damage = 0x1338; // int32
    public const nint light_strike_array_stun_duration = 0x133C; // float32
    public const nint light_strike_array_delay = 0x1340; // float32
    public const nint m_nLSARadius = 0x1344; // int32
    public const nint m_nCount = 0x1348; // int32
    public const nint max_count = 0x134C; // int32
    public const nint iPower = 0x1350; // int32
    public const nint pulse_interval = 0x1354; // float32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Empower {
    public const nint bonus_damage_pct = 0x1318; // int32
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint splash_damage_pct = 0x132C; // float32
    public const nint splash_radius = 0x1330; // int32
    public const nint self_multiplier = 0x1334; // float32
    public const nint lifesteal_pct = 0x1338; // int32
    public const nint m_fLastShockwaveProcTime = 0x133C; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_ReversePolarity_Steroid {
    public const nint move_speed_percent = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Shockwave {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Shockwave_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint pull_duration = 0x132C; // float32
    public const nint effective_distance = 0x1330; // float32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Impact {
    public const nint slow_duration = 0x1318; // float32
    public const nint skewer_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint spear_damage = 0x1320; // int32
    public const nint spear_distance_from_wall = 0x1324; // int32
    public const nint spear_attack_interval = 0x1328; // float32
    public const nint warrior_fade_min_dist = 0x1348; // float32
    public const nint warrior_fade_max_dist = 0x134C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_AnimationAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Buff {
    public const nint health_regen = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_BuffAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Leash {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // float32
    public const nint m_vOriginLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint formation_time = 0x131C; // float32
    public const nint m_flInitialZ = 0x1320; // float32
    public const nint m_flFinalZ = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark_Active {
    public const nint redirect_chance = 0x1318; // int32
    public const nint redirect_range = 0x131C; // int32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
    public const nint redirect_speed_penatly = 0x1328; // int32
    public const nint m_nPoseParameterWE = 0x132C; // int32
    public const nint m_nPoseParameterNS = 0x1330; // int32
    public const nint m_flLastPoseX = 0x1334; // float32
    public const nint m_flLastPoseY = 0x1338; // float32
    public const nint m_nLastMaxDirection = 0x133C; // int32
    public const nint m_vLastOrigin = 0x1340; // Vector
    public const nint m_flLastGameTime = 0x134C; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark_Soldier_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_GodsRebuke_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Gods_Rebuke {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Minor_Stats_Upgrade {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_primary_stat = 0x131C; // int32
    public const nint bonus_movespeed = 0x1320; // int32
    public const nint bonus_hp_regen = 0x1324; // int32
    public const nint bonus_armor = 0x1328; // int32
    public const nint bonus_attack_damage = 0x132C; // int32
    public const nint bonus_cast_range = 0x1330; // int32
    public const nint bonus_spell_amp = 0x1334; // int32
    public const nint bonus_health = 0x1338; // int32
    public const nint bonus_mana = 0x133C; // int32
    public const nint bonus_attack_speed = 0x1340; // int32
    public const nint bonus_heal_amp = 0x1344; // int32
    public const nint bonus_mana_regen = 0x1348; // int32
    public const nint bonus_evasion = 0x134C; // int32
    public const nint bonus_magic_resist = 0x1350; // int32
    public const nint bonus_lifesteal = 0x1354; // int32
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura_Effect {
    public const nint move_speed_bonus = 0x1318; // int32
    public const nint attack_speed_bonus = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint attack_damage_pct = 0x1324; // int32
    public const nint death_heal = 0x1328; // int32
    public const nint bIsAllied = 0x132C; // bool
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_GuardianAngel {
    public const nint hp_regen = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint purification_trigger_chance = 0x1320; // int32
    public const nint purification_trigger_cooldown = 0x1324; // float32
    public const nint m_fLastProc = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Repel {
    public const nint damage_reduction = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint bonus_str = 0x1320; // int32
    public const nint damage_increase_outgoing_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_Blur {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_BlurActive {
    public const nint radius = 0x1328; // int32
    public const nint fade_duration = 0x132C; // float32
    public const nint m_bDestroyNext = 0x1330; // bool
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_CoupdeGrace {
    public const nint crit_bonus = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_active = 0x1320; // bool
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_PhantomStrike {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_evasion = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger_Caster {
    public const nint base_damage = 0x1318; // int32
    public const nint attack_factor = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Phoenix_FlameRevenant_Attack_Damage {
    public const nint m_fDamagePerSecond = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nActiveFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_nActiveStatusFXIndex = 0x1324; // ParticleIndex_t
    public const nint flame_revenant_damage_pct = 0x1328; // float32
    public const nint think_interval = 0x132C; // float32
    public const nint move_slow_pct = 0x1330; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition {
    public const nint debuff_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition_Debuff {
    public const nint heal_suppression_pct = 0x1318; // int32
    public const nint armor_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_NoCC {
    public const nint bCanbeMotionControlled = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Movement {
    public const nint charge_speed = 0x1318; // float32
    public const nint knockback_radius = 0x131C; // int32
    public const nint knockback_distance = 0x1320; // int32
    public const nint knockback_damage = 0x1324; // int32
    public const nint forward_offset = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_flFacingTarget = 0x1330; // float32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Windup {
    public const nint charge_duration = 0x1318; // float32
    public const nint max_charge_time = 0x131C; // float32
    public const nint turn_rate = 0x1320; // float32
    public const nint base_power = 0x1324; // float32
    public const nint charge_speed = 0x1328; // int32
    public const nint animation_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Push {
    public const nint m_vVelocity = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint animation_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Damage_Tracking {
    public const nint damage_limit = 0x1318; // int32
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_fTotalDamage = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Ripple_Thinker {
    public const nint ripple_effect_width = 0x1318; // int32
    public const nint ripple_damage = 0x131C; // int32
    public const nint health_damage = 0x1320; // int32
    public const nint ripple_count = 0x1324; // int32
    public const nint total_ripple_circles = 0x1328; // int32
    public const nint radius = 0x132C; // float32
    public const nint ripple_slow_duration = 0x1330; // float32
    public const nint ripple_knockback_duration = 0x1334; // float32
    public const nint m_hGrabbedEnemy = 0x1338; // CHandle< C_BaseEntity >
    public const nint m_nPreviewFXIndex = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Self {
    public const nint m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
    public const nint m_vPos = 0x131C; // Vector
    public const nint splash_radius = 0x1328; // int32
    public const nint interval = 0x132C; // float32
    public const nint ministun = 0x1330; // float32
    public const nint m_nCurrentHitCount = 0x1334; // int32
    public const nint total_ripple_circles = 0x1338; // int32
    public const nint ripple_step_distance = 0x133C; // int32
    public const nint ripple_step_distance_offset = 0x1340; // int32
    public const nint health_damage = 0x1344; // float32
    public const nint ripple_duration = 0x1348; // float32
    public const nint ripple_damage = 0x134C; // int32
    public const nint m_vLastRippleOffsets = 0x1350; // CUtlVector< int32 >
    public const nint self_animation_rate = 0x1368; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Crush {
    public const nint m_hRock = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_qRotation = 0x131C; // QAngle
    public const nint m_flOldPitch = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_HP {
    public const nint rock_health = 0x1318; // int32
    public const nint rock_visualzdelta = 0x131C; // int32
    public const nint m_bIsCrushing = 0x1320; // bool
    public const nint summon_count = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Thinker {
    public const nint effect_radius = 0x1318; // int32
    public const nint rock_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift {
    public const nint projectile_speed = 0x1318; // int32
    public const nint projectile_speed_increment = 0x131C; // int32
    public const nint projectile_distance = 0x1320; // int32
    public const nint projectile_width = 0x1324; // int32
    public const nint projectiles_per_interval = 0x1328; // int32
    public const nint projectiles_per_interval_increment = 0x132C; // int32
    public const nint initial_spread_angle = 0x1330; // int32
    public const nint angle_offset = 0x1334; // int32
    public const nint iCurrentInterval = 0x1338; // int32
    public const nint splinter_angle = 0x133C; // int32
    public const nint m_LeftHandSmashTimer = 0x1340; // CountdownTimer
    public const nint m_RightHandSmashTimer = 0x1358; // CountdownTimer
    public const nint m_AttackIntervalTimer = 0x1370; // CountdownTimer
    public const nint initial_interval = 0x1388; // float32
    public const nint interval_reduction = 0x138C; // float32
    public const nint min_interval = 0x1390; // float32
    public const nint arm_distance_forward = 0x1394; // int32
    public const nint arm_distance_side = 0x1398; // int32
    public const nint splash_radius = 0x139C; // int32
    public const nint max_split_amount = 0x13A0; // int32
    public const nint m_nCurrentCastCount = 0x13A4; // int32
    public const nint max_projectiles = 0x13A8; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift_Damage {
    public const nint tick_damage = 0x1318; // float32
    public const nint damage_ticks = 0x131C; // int32
    public const nint m_nTickAmount = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Vault {
    public const nint vault_speed = 0x1318; // float32
    public const nint vault_acceleration = 0x131C; // float32
    public const nint vault_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Pummel_DroppedItem {
    public const nint m_nPreviewFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Primalbeast_Boss_HeavySteps {
    public const nint vLastPos = 0x1318; // Vector
    public const nint flCurrentDistance = 0x1324; // float32
    public const nint step_distance = 0x1328; // int32
    public const nint effect_radius = 0x132C; // int32
    public const nint base_damage = 0x1330; // int32
    public const nint m_hTarget = 0x1334; // CHandle< C_BaseEntity >
    public const nint ctLastCommandTimer = 0x1338; // CountdownTimer
    public const nint m_bMoveCommandIssued = 0x1350; // bool
}

public static class CDOTA_Modifier_Aghsfort_Primalbeast_Boss_RoarAttack_Start {
    public const nint rock_drop_intervals = 0x1318; // int32
    public const nint rock_drop_per_interval = 0x131C; // int32
    public const nint rock_drop_distance = 0x1320; // int32
    public const nint m_nCurrentInterval = 0x1324; // int32
    public const nint rock_drop_rotation_angle = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Pugna_Grandmaster_NetherWard {
    public const nint radius = 0x1318; // int32
    public const nint mana_multiplier = 0x131C; // float32
    public const nint mana_drained_per_attack = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_Reward_ArmorAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_ArmorAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_CritAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_CritAura_Bonus {
    public const nint crit_chance = 0x1318; // int32
    public const nint crit_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_HPAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_HPAura_Bonus {
    public const nint bonus_hp = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Reward_MagicResistAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_MagicResistAura_Bonus {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike {
    public const nint m_vPopupLocation = 0x1318; // Vector
    public const nint m_bTeleported = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Channel {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_nCrosshairFX = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Reverse_Tracking {
    public const nint m_vStartLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Burrowstrike_Transport {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_CausticFinale {
    public const nint caustic_finale_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_CausticFinaleOrb {
    public const nint caustic_finale_radius = 0x1318; // int32
    public const nint caustic_finale_damage_death = 0x131C; // int32
    public const nint caustic_finale_damage_dot = 0x1320; // int32
    public const nint caustic_finale_slow = 0x1324; // int32
    public const nint caustic_finale_dot_tick = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Epicenter {
    public const nint epicenter_pulses = 0x1318; // int32
    public const nint epicenter_radius = 0x131C; // int32[16]
    public const nint epicenter_damage = 0x135C; // int32
    public const nint m_iMaxPulses = 0x1360; // int32
    public const nint m_iPulseCount = 0x1364; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Epicenter_Slow {
    public const nint epicenter_slow = 0x1318; // int32
    public const nint epicenter_slow_as = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm {
    public const nint sand_storm_radius = 0x1318; // float32
    public const nint sand_storm_damage = 0x131C; // int32
    public const nint damage_tick_rate = 0x1320; // float32
    public const nint m_flLastDamageTime = 0x1324; // GameTime_t
    public const nint m_nSandStormParticleIndex1 = 0x1328; // ParticleIndex_t
    public const nint m_nSandStormParticleIndex2 = 0x132C; // ParticleIndex_t
    public const nint m_hThinker = 0x1338; // CHandle< C_BaseEntity >
    public const nint m_hBurrowstrikeFieldThinker = 0x133C; // CHandle< C_BaseEntity >
    public const nint m_bIsPrimarySandstorm = 0x1340; // bool
    public const nint vecSpawnPos = 0x1344; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow {
    public const nint blind_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow_Aura_Thinker {
    public const nint sand_storm_radius = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Sandstorm_Burrowstrike_Field_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint explosion_interval = 0x131C; // float32
    public const nint explosion_radius = 0x1320; // int32
    public const nint explosion_min_dist = 0x1324; // int32
    public const nint m_fLastTick = 0x1328; // float32
    public const nint m_fTimeAccumulator = 0x132C; // float32
    public const nint m_iExplosionCount = 0x1330; // int32
    public const nint m_iExplosionTotalCount = 0x1334; // int32
    public const nint m_iExplosionQuadrant = 0x1338; // int32
    public const nint m_iExplosionDistance = 0x133C; // int32
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Slark_DarkPact_Pulses {
    public const nint radius = 0x1318; // int32
    public const nint total_damage = 0x131C; // float32
    public const nint total_pulses = 0x1320; // int32
    public const nint heal_pct = 0x1324; // int32
    public const nint pulse_interval = 0x1328; // float32
    public const nint bIsBaseAbility = 0x132C; // bool
}

public static class CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Active {
    public const nint agi_gain = 0x1318; // int32
    public const nint iPrimaryAttribute = 0x131C; // int32
    public const nint model_scale = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Counter {
    public const nint max_stacks = 0x1318; // int32
    public const nint passive_agility = 0x131C; // int32
    public const nint flLastProcTime = 0x1320; // GameTime_t
    public const nint debuff_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Essence_Shift_Debuff {
    public const nint reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Pounce {
    public const nint hitEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint pounce_distance = 0x1330; // int32
    public const nint pounce_distance_default = 0x1334; // int32
    public const nint pounce_speed = 0x1338; // float32
    public const nint pounce_acceleration = 0x133C; // float32
    public const nint pounce_radius = 0x1340; // int32
    public const nint pounce_damage = 0x1344; // int32
    public const nint leash_duration = 0x1348; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Pounce_Leash {
    public const nint leash_radius = 0x1318; // int32
    public const nint vLeashLocation = 0x131C; // Vector
    public const nint m_bEscaped = 0x1328; // bool
    public const nint pounce_damage_multiplier = 0x132C; // float32
    public const nint pounce_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint flLastPulseTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Aura {
    public const nint scepter_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_PassiveRegen {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_regen_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Visual {
    public const nint m_bScepter = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_FiresnapCookie_PreHop {
    public const nint jump_duration = 0x1318; // float32
    public const nint m_bMovesHorizontal = 0x131C; // bool
    public const nint m_bSecondaryCookie = 0x131D; // bool
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_GobbleUp_BellyHasUnit {
    public const nint m_hGobbledUnit = 0x1318; // CHandle< C_BaseEntity >
    public const nint max_time_in_belly = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Buff {
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_nIsActive = 0x1338; // int32
    public const nint m_bHasAttackTalent = 0x133C; // bool
    public const nint attack_range_bonus = 0x1340; // int32
    public const nint buffed_attacks = 0x1344; // int32
    public const nint base_attack_time = 0x1348; // float32
    public const nint attack_speed_bonus = 0x134C; // int32
    public const nint armor_duration = 0x1350; // float32
    public const nint damage = 0x1354; // int32
    public const nint bounce_range = 0x1358; // int32
    public const nint bounces = 0x135C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Debuff {
    public const nint armor_reduction_per_attack = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Magma_Burn_Slow {
    public const nint m_nMoveSlowPct = 0x1318; // int32
    public const nint m_fBurnDamagePerTick = 0x131C; // float32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_interval = 0x1324; // float32
    public const nint burn_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Magma_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint impact_radius = 0x131C; // int32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_linger_duration = 0x1324; // float32
    public const nint m_nPathEffectIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_MortimerKisses {
    public const nint m_fIntervalPerRocket = 0x1318; // float32
    public const nint m_flFacingTarget = 0x131C; // float32
    public const nint m_nBeamFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1324; // CHandle< C_BaseEntity >
    public const nint m_flCurDistance = 0x1328; // float32
    public const nint m_vAimTarget = 0x132C; // Vector
    public const nint m_fLastTurnAmount = 0x1338; // float32
    public const nint m_nProjectilesLaunched = 0x133C; // int32
    public const nint m_bDestroyOnNextThink = 0x1340; // bool
    public const nint m_nProjectilesToLaunch = 0x1344; // int32
    public const nint m_bHasProjectileTalent = 0x1348; // bool
    public const nint projectile_count = 0x134C; // int32
    public const nint projectile_vision = 0x1350; // int32
    public const nint turn_rate = 0x1354; // float32
    public const nint min_range = 0x1358; // int32
    public const nint delay_after_last_projectile = 0x135C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Scatterblast_Slow {
    public const nint m_bIsPointBlank = 0x1318; // bool
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint attack_slow_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_SpitCreep_ArcingUnit {
    public const nint min_range = 0x1318; // int32
    public const nint min_lob_travel_time = 0x131C; // float32
    public const nint max_lob_travel_time = 0x1320; // float32
    public const nint impact_radius = 0x1324; // int32
    public const nint projectile_vision = 0x1328; // int32
    public const nint stun_duration = 0x132C; // float32
    public const nint impact_damage = 0x1330; // int32
    public const nint min_height_above_lowest = 0x1334; // float32
    public const nint min_height_above_highest = 0x1338; // float32
    public const nint min_acceleration = 0x133C; // float32
    public const nint max_acceleration = 0x1340; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sniper_Concussive_Grenade {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Disruptor_ThunderStrike_Int_Increase {
    public const nint int_increase_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Disruptor_Thunder_Strike_On_Attack {
    public const nint strike_chance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Call_Down_Attack_Buff {
    public const nint movespeed = 0x1318; // int32
    public const nint attackspeed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_RocketBarrage_On_Attack {
    public const nint strike_chance = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Fiery_Soul_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Bounce {
    public const nint bounces_remaining = 0x1318; // int32
    public const nint m_hHitEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Channel {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_interval = 0x131C; // float32
    public const nint m_hEntitiesToHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFxIndexB = 0x1338; // ParticleIndex_t
    public const nint m_nFXIndices = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint bounces_remaining = 0x1358; // int32
    public const nint iCur_stack = 0x135C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Attacks_Bonus {
    public const nint attack_damage = 0x1318; // float32
    public const nint damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Bulwark_Spears {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_interval = 0x131C; // float32
    public const nint m_nFxIndexB = 0x1320; // ParticleIndex_t
    public const nint iCur_stack = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_PhantomStrike_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_AutoDagger {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_On_Attack {
    public const nint strike_chance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_SonicWave_AttackBuff {
    public const nint spell_amp = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint m_nRadius = 0x1324; // int32
    public const nint m_nTrailFX = 0x1328; // ParticleIndex_t
    public const nint linger_duration = 0x132C; // float32
    public const nint flDamage = 0x1330; // float32
    public const nint damage_pct = 0x1334; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Caustic_Finale_StrengthBuff {
    public const nint str_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_DamageResist {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_Movement {
    public const nint vLastPos = 0x1318; // Vector
    public const nint m_fAccumulatedDistance = 0x1324; // float32
    public const nint movement_distance = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Sandstorm_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_Slark_Pounce_Leashed_Bonus {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Slark_Shadow_Dance_Leash {
    public const nint m_vPullLocation = 0x1318; // Vector
    public const nint pull_speed = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Snapfire_FiresnapCookie_AlliedBuff {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint bonus_attack_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Ursa_Earthshock_Knockback {
    public const nint value3 = 0x1348; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Viper_Periodic_Strike {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_nTargetTeam = 0x1320; // int32
    public const nint m_hAlreadyHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Breach_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Thinker {
    public const nint m_fThinkInterval = 0x1318; // float32
    public const nint m_fPopDamagePctPerInterval = 0x131C; // float32
    public const nint m_fLingerDuration = 0x1320; // float32
    public const nint radius = 0x1324; // int32
    public const nint pop_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
    public const nint m_nBonusIncomingMagicDamage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Thinker {
    public const nint m_nDamageRadius = 0x1318; // int32
    public const nint m_fDissimilateDamage = 0x131C; // float32
    public const nint m_fThinkInterval = 0x1320; // float32
    public const nint m_fDissimilateDamagePctPerInterval = 0x1324; // float32
    public const nint m_fLingerDuration = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_DoubleAttack {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Cold_Embrace_Magic_Damage_Block {
    public const nint barrier_amount = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint m_nMaxMovementSpeed = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Splinter_Blast_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_WitchDoctor_ParalyzingCask_Attack_Procs {
    public const nint cask_chance = 0x1318; // int32
    public const nint cask_cooldown = 0x131C; // int32
    public const nint flLastProcTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Special_Witch_Doctor_Death_Ward_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint split_shot_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Debuff {
    public const nint corpse_explosion_radius = 0x1318; // int32
    public const nint corpse_explosion_damage_pct = 0x131C; // int32
    public const nint corpse_explosion_chance_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld {
    public const nint bonus_damage = 0x1318; // int32
    public const nint launched_attack = 0x131C; // bool
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_MeldArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld_Animation {
    public const nint launched_attack = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint attack_spill_range = 0x131C; // float32
    public const nint attack_spill_width = 0x1320; // int32
    public const nint attack_spill_pct = 0x1324; // int32
    public const nint attack_spill_penalty = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades_Slow {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Psionic_Trap_Thinker {
    public const nint trap_radius = 0x1318; // int32
    public const nint trap_delay_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint max_pulses = 0x1324; // int32
    public const nint iCurrentPulse = 0x1328; // int32
    public const nint m_hImage = 0x132C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionAbsorb {
    public const nint damage_threshold = 0x1318; // int32
    public const nint max_damage_absorb = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionDamage {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Refraction_Holdout {
    public const nint bonus_damage = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // int32
    public const nint m_flDamageAbsorbed = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Trap_Slow {
    public const nint movement_speed_slow = 0x1318; // int32
    public const nint trap_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_IceShard {
    public const nint m_vPos = 0x1318; // Vector
    public const nint radius = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint explosion_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint air_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_bPunchKill = 0x1335; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_IceShard {
    public const nint m_vPos = 0x1318; // Vector
    public const nint radius = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint explosion_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Snowball_SpellLifesteal {
    public const nint spell_lifesteal_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint air_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_bPunchKill = 0x1335; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin {
    public const nint bonus_magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Flying {
    public const nint m_nRadius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Slow {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Speed_Steal {
    public const nint m_flFactor = 0x1318; // float32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_Nethertoxin {
    public const nint min_damage = 0x1318; // int32
    public const nint max_damage = 0x131C; // int32
    public const nint max_duration = 0x1320; // float32
    public const nint m_flDamageInterval = 0x1324; // float32
    public const nint m_flTimeIncrement = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Viper_Nethertoxin_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Viper_PoisonAttack {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Viper_PoisonAttack_Slow {
    public const nint damage = 0x1318; // float32
    public const nint movement_speed = 0x131C; // int32
    public const nint magic_resistance = 0x1320; // int32
    public const nint m_flAccumDamage = 0x1324; // float32
    public const nint m_flPoisonSnapCounter = 0x1328; // float32
    public const nint m_nPoisonSnapThreshold = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_ViperStrike_Slow {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint m_bTargetedAlly = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Shukuchi {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint speed = 0x1330; // int32
    public const nint m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint bHasStartedBurning = 0x1350; // bool
    public const nint m_nBurningTrailRadius = 0x1354; // int32
    public const nint m_vLastTrailThinkerLocation = 0x1358; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Swarm {
    public const nint m_iMaxDist = 0x1318; // int32
    public const nint m_iAttackCount = 0x131C; // int32
    public const nint destroy_attacks = 0x1320; // int32
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_vStartLoc = 0x1330; // Vector
    public const nint m_hAttachTarget = 0x133C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Swarm_Debuff {
    public const nint armor_reduction = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint damage_share_percentage = 0x1320; // int32
    public const nint m_flCurrentArmorReduction = 0x1324; // float32
    public const nint flTotalDamage = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_TimeLapse {
    public const nint m_PositionIndex = 0x1318; // Vector[11]
    public const nint m_flLife = 0x139C; // float32[11]
    public const nint m_flMana = 0x13C8; // float32[11]
    public const nint m_bHasValidHistory = 0x13F4; // bool
}

public static class CDOTA_Modifier_Aghsfort_Wildwing_Tornado_Blast_Debuff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Flight {
    public const nint attack_point = 0x1318; // float32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint projectile_speed_bonus = 0x1320; // int32
    public const nint night_vision_bonus = 0x1324; // int32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Frost_Attack {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Slow {
    public const nint damage_per_second = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Cold_Embrace {
    public const nint m_nOriginalAttackCapability = 0x1318; // int32
    public const nint m_bDidBlast = 0x1324; // bool
    public const nint heal_additive = 0x1328; // int32
    public const nint heal_percentage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Splinter_Blast_Slow {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Cask_Thinker {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint remaining_bounces = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_DeathWard {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_iBounceRadius = 0x131C; // int32
    public const nint m_bFirstAttack = 0x1320; // bool
    public const nint m_iBounces = 0x1324; // int32
    public const nint m_nStaffParticle = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Maledict {
    public const nint m_iStartHealth = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_threshold = 0x1320; // int32
    public const nint max_bonus_damage = 0x1324; // int32
    public const nint ticks = 0x1328; // int32
    public const nint iCurrentTick = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Voodoo_Restoration_Heal {
    public const nint heal = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint heal_interval = 0x1320; // float32
    public const nint lifesteal_percent = 0x1324; // int32
    public const nint spell_lifesteal_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Alchemist_AcidSpray {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Alchemist_AcidSpray_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint armor_allies = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Alchemist_Berserk_Potion {
    public const nint attack_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
    public const nint move_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Alchemist_ChemicalRage {
    public const nint base_attack_time = 0x1318; // float32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_movespeed = 0x1328; // int32
    public const nint m_nFXAlchemistCRIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Alchemist_Corrosive_Weaponry_Debuff {
    public const nint slow_per_stack = 0x1318; // int32
    public const nint status_resist_per_stack = 0x131C; // float32
    public const nint chemical_rage_bonus = 0x1320; // float32
}

public static class CDOTA_Modifier_Alchemist_GoblinsGreed {
    public const nint m_DeathList = 0x1318; // CUtlVector< GameTime_t >
    public const nint damage = 0x1330; // float32
    public const nint duration = 0x1334; // float32
    public const nint bonus_gold = 0x1338; // int32
    public const nint bonus_bonus_gold = 0x133C; // int32
    public const nint bonus_gold_cap = 0x1340; // int32
}

public static class CDOTA_Modifier_Alchemist_Scepter_Bonus_Damage {
    public const nint scepter_bonus_damage = 0x1318; // int32
    public const nint scepter_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Alchemist_UnstableConcoction {
    public const nint brew_time = 0x1318; // float32
    public const nint brew_explosion = 0x131C; // float32
    public const nint m_fStartTime = 0x1320; // GameTime_t
    public const nint m_fLastAlertTime = 0x1324; // GameTime_t
    public const nint m_nConcoctionFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_bHasStunned = 0x132C; // bool
    public const nint damage_resistance = 0x1330; // int32
    public const nint move_speed = 0x1334; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CommandAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CommandAura_Bonus {
    public const nint bonus_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CriticalStrike {
    public const nint crit_mult = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_AncientApparition_ChillingTouch {
    public const nint damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AncientApparition_ChillingTouch_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AncientApparition_ColdFeet {
    public const nint m_vecStartPosition = 0x1318; // Vector
    public const nint m_nCurrentTick = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint break_distance = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_AncientApparition_IceAge {
    public const nint damage = 0x1318; // float32
}

public static class CDOTA_Modifier_AncientApparition_IceBlast {
    public const nint dot_damage = 0x1318; // float32
    public const nint kill_pct = 0x131C; // float32
    public const nint m_hFracturingEntity = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_AncientApparition_IceVortex {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint spell_resist_pct = 0x131C; // int32
    public const nint drag_speed = 0x1320; // int32
    public const nint aura_origin_x = 0x1324; // float32
    public const nint aura_origin_y = 0x1328; // float32
    public const nint shard_dps = 0x132C; // int32
    public const nint shard_attack_speed_reduction = 0x1330; // int32
    public const nint m_vCenter = 0x1334; // Vector
}

public static class CDOTA_Modifier_AncientApparition_IceVortexThinker {
    public const nint radius = 0x1318; // int32
    public const nint movement_speed_pct = 0x131C; // int32
    public const nint spell_resist_pct = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hChilledEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AncientRockGolem_Weakening {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AncientRockGolem_Weakening_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Animation_LeftClawSwipe {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flScalar = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Animation_RightClawSwipe {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flScalar = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Animation_TailSpin {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flPlaybackRate = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_AntiMage_Counterspell {
    public const nint m_LastParams = 0x1318; // CModifierParams
    public const nint magic_resistance = 0x14F8; // int32
}

public static class CDOTA_Modifier_AntiMage_Counterspell_Passive {
    public const nint magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_AntiMage_ManaBreak {
    public const nint percent_damage_per_burn = 0x1318; // int32
    public const nint mana_per_hit = 0x131C; // int32
    public const nint mana_per_hit_pct = 0x1320; // float32
    public const nint slow_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_AntiMage_ManaBreak_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic {
    public const nint shard_spell_damage_reduction_pct = 0x1318; // int32
    public const nint shard_bonus_spell_damage_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic_Aura {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic_Aura_Strong {
    public const nint shard_bonus_aura_range = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_Flux {
    public const nint m_nCasterTeam = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint tempest_damage_per_second = 0x1320; // int32
    public const nint search_radius = 0x1324; // int32
    public const nint move_speed_slow_pct = 0x1328; // int32
    public const nint tempest_move_speed_slow_pct = 0x132C; // int32
    public const nint status_resist = 0x1330; // int32
    public const nint think_interval = 0x1334; // float32
    public const nint m_nCurrentMovementSlow = 0x1338; // int32
    public const nint m_nCurrentStatusResistance = 0x133C; // int32
    public const nint m_bAlone = 0x1340; // bool
    public const nint m_nFXIndex = 0x1344; // ParticleIndex_t
    public const nint m_bIsTempestVersion = 0x1348; // bool
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_AttackRange {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint attack_magic_damage = 0x131C; // int32
    public const nint attack_damage_bonus = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint shard_magic_resist = 0x1328; // int32
    public const nint shard_slow_pct = 0x132C; // int32
    public const nint aura_origin_x = 0x1330; // float32
    public const nint aura_origin_y = 0x1334; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Attack_Speed {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint shard_magic_resist = 0x1320; // int32
    public const nint shard_slow_pct = 0x1324; // int32
    public const nint aura_origin_x = 0x1328; // float32
    public const nint aura_origin_y = 0x132C; // float32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_AttackRange {
    public const nint radius = 0x1320; // int32
    public const nint m_vPos = 0x1324; // Vector
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Attack_Speed {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
    public const nint m_vPos = 0x1324; // Vector
}

public static class CDOTA_Modifier_ArcWarden_SparkWraith_Purge {
    public const nint move_speed_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_SparkWraith_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint scepter_radius = 0x131C; // int32
    public const nint wraith_vision_radius = 0x1320; // int32
    public const nint wraith_speed = 0x1324; // int32
    public const nint activation_delay = 0x1330; // float32
    public const nint scepter_activation_delay = 0x1334; // float32
    public const nint think_interval = 0x1338; // float32
    public const nint m_flSparkDamage = 0x133C; // float32
    public const nint m_nViewerID = 0x1340; // int32
    public const nint m_bActive = 0x1344; // bool
    public const nint m_bOriginal = 0x1345; // bool
}

public static class CDOTA_Modifier_ArcWarden_TempestDouble {
    public const nint penalty_distance = 0x1318; // int32
    public const nint attack_damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_ArcWarden_TempestDouble_DistancePenalty {
    public const nint attack_damage_penalty = 0x1318; // int32
}

public static class CDOTA_Modifier_Arc_Warden_Scepter {
    public const nint m_hRune = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_ArcaneBoots_ManaRegen {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Armlet_UnholyStrength {
    public const nint unholy_bonus_damage = 0x1318; // int32
    public const nint unholy_bonus_attack_speed = 0x131C; // int32
    public const nint unholy_bonus_strength = 0x1320; // int32
    public const nint unholy_bonus_armor = 0x1324; // int32
    public const nint unholy_health_drain_per_second = 0x1328; // int32
    public const nint str_tick_count = 0x132C; // int32
    public const nint unholy_bonus_slow_resistance = 0x1330; // int32
    public const nint tick_interval = 0x1334; // float32
    public const nint m_flDamageRemainder = 0x1338; // float32
}

public static class CDOTA_Modifier_Ascension_AcidBlood {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Ascension_AcidBlood_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Ascension_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
}

public static class CDOTA_Modifier_Ascension_Meteoric_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Assassins_Dagger_Debuff {
    public const nint armor_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Attached_Unit {
    public const nint m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bPhysicalImmune = 0x131C; // bool
    public const nint m_bMagicImmune = 0x131D; // bool
}

public static class CDOTA_Modifier_Avianas_Feather {
    public const nint evasion = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
    public const nint flight_threshold = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BatleHunger_Self {
    public const nint scepter_armor_change = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_BatleHunger_Self_Movespeed {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_BattleHunger {
    public const nint damage_per_second = 0x1318; // int32
    public const nint slow = 0x131C; // int32
    public const nint scepter_armor_change = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BerserkersCall {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
    public const nint bonus_attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BerserkersCallArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_CounterHelix {
    public const nint radius = 0x1318; // int32
    public const nint trigger_attacks = 0x131C; // int32
}

public static class CDOTA_Modifier_Axe_CounterHelix_DamageReduction {
    public const nint shard_damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_CullingBlade_Boost {
    public const nint speed_bonus = 0x1318; // int32
    public const nint armor_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Axe_CullingBlade_Permanent {
    public const nint armor_per_stack = 0x1318; // float32
}

public static class CDOTA_Modifier_Banana {
    public const nint slide_distance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint slide_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Banana_Knockback {
    public const nint m_vCenter = 0x1318; // Vector
    public const nint knockback_distance = 0x1324; // int32
    public const nint knockback_height = 0x1328; // int32
    public const nint knockback_duration = 0x132C; // float32
    public const nint m_vHorizOffset = 0x1330; // Vector
    public const nint m_vStartPosition = 0x133C; // Vector
    public const nint m_vDir = 0x1348; // Vector
    public const nint m_fCurrentTimeHoriz = 0x1354; // float32
    public const nint m_fCurrentTimeVert = 0x1358; // float32
    public const nint m_bShouldStun = 0x135C; // bool
    public const nint flTimeSinceChange = 0x1360; // float32
}

public static class CDOTA_Modifier_Bane_Enfeeble_Effect {
    public const nint damage_reduction = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
    public const nint cast_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Bane_FiendsGrip {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_FiendsGrip_Cast_Illusion {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_Nightmare {
    public const nint m_nSource = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_Nightmare_AttackSpeed_Bonus {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_BaseBlocker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Batrider_Firefly {
    public const nint m_bActive = 0x1318; // bool
    public const nint radius = 0x131C; // int32
    public const nint m_ifirefly_Active = 0x1320; // int32
    public const nint tree_radius = 0x1324; // int32
    public const nint damage_per_second = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint bonus_slow_resistance = 0x1330; // int32
    public const nint tick_interval = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x133C; // ParticleIndex_t
    public const nint m_fNextDamageTick = 0x1340; // GameTime_t
    public const nint m_vLastFirePoolLoc = 0x1344; // Vector
    public const nint bonus_vision = 0x1350; // int32
}

public static class CDOTA_Modifier_Batrider_Flamebreak_Damage {
    public const nint damage_impact = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Batrider_FlamingLasso {
    public const nint tick_rate = 0x1318; // float32
    public const nint drag_distance = 0x131C; // int32
    public const nint break_distance = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint vPreviousLocation = 0x1328; // Vector
}

public static class CDOTA_Modifier_Batrider_FlamingLasso_Damage {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_Batrider_StickyNapalm {
    public const nint movement_speed_pct = 0x1318; // float32
    public const nint turn_rate_pct = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint application_damage = 0x1324; // int32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Batrider_StickyNapalm_Application {
    public const nint m_bShouldApply = 0x1318; // bool
}

public static class CDOTA_Modifier_Beastmaster_Axe_Stack_Counter {
    public const nint damage_amp = 0x1318; // float32
}

public static class CDOTA_Modifier_Beastmaster_CallOfTheWild_Hawk {
    public const nint m_hOwner = 0x1318; // CHandle< C_BaseEntity >
    public const nint attack_radius = 0x131C; // int32
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_seconds_per_rotation = 0x1324; // float32
    public const nint roaming_radius = 0x1328; // int32
    public const nint attack_interval = 0x132C; // float32
    public const nint min_move_speed = 0x1330; // int32
    public const nint max_move_speed = 0x1334; // int32
    public const nint m_iPreviousHawkCount = 0x1338; // int32
    public const nint m_flRotation = 0x133C; // float32
}

public static class CDOTA_Modifier_Beastmaster_DrumsOfSlom {
    public const nint aura_radius = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint max_stacks = 0x1320; // int32
    public const nint base_damage = 0x1324; // float32
    public const nint heal_pct = 0x1328; // int32
    public const nint creep_heal_pct = 0x132C; // int32
    public const nint iCurrentAttacksAtMinInterval = 0x1330; // int32
    public const nint stack_decay_time = 0x1334; // float32
    public const nint max_drum_hit_interval = 0x1338; // float32
    public const nint min_drum_hit_interval = 0x133C; // float32
    public const nint m_flLastStackChangeTime = 0x1340; // GameTime_t
    public const nint m_flLastDrumHitTime = 0x1344; // GameTime_t
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Dive {
    public const nint dive_damage = 0x1318; // int32
    public const nint dive_root_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Perch_Flight {
    public const nint perch_flight_height = 0x1318; // int32
    public const nint perch_tree_height = 0x131C; // int32
    public const nint flight_speed = 0x1320; // int32
    public const nint m_flZDelta = 0x1324; // float32
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Perch_Perching {
    public const nint perching_tree_height = 0x1318; // int32
    public const nint m_hTree = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Beastmaster_InnerBeast_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Push {
    public const nint m_vVelocity = 0x1318; // Vector
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Speed {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Beastmaster_WildAxes {
    public const nint m_vLeftControl = 0x1318; // Vector
    public const nint m_vRightControl = 0x1324; // Vector
    public const nint m_vTargetLoc = 0x1330; // Vector
    public const nint m_vSourceLoc = 0x133C; // Vector
    public const nint m_flDuration = 0x1348; // float32
    public const nint m_flDieTime = 0x134C; // GameTime_t
    public const nint m_bReturning = 0x1350; // bool
    public const nint m_bCatchingAxes = 0x1351; // bool
    public const nint m_hAxes = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nAxeFXIndex = 0x1370; // ParticleIndex_t[2]
    public const nint m_hHitList = 0x1378; // CUtlVector< CHandle< C_BaseEntity > >[2]
    public const nint radius = 0x13A8; // int32
    public const nint spread = 0x13AC; // int32
    public const nint axe_damage = 0x13B0; // int32
    public const nint duration = 0x13B4; // float32
    public const nint min_throw_duration = 0x13B8; // float32
    public const nint max_throw_duration = 0x13BC; // float32
}

public static class CDOTA_Modifier_BerserkerTroll_Break {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_BigThunderLizard_Frenzy {
    public const nint attackspeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Slam {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Wardrums {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Wardrums_Aura {
    public const nint speed_bonus = 0x1318; // int32
    public const nint accuracy = 0x131C; // int32
}

public static class CDOTA_Modifier_BlackDragon_DragonhideAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDragon_DragonhideAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDragon_Fireball_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_BlackDragon_SplashAttack {
    public const nint range = 0x1318; // int32
    public const nint damage_percent = 0x131C; // float32
}

public static class CDOTA_Modifier_BlackDrake_MagicAmplification {
    public const nint spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDrake_MagicAmplification_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Black_King_Bar_Immune {
    public const nint model_scale = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Blight_Stone_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist_Barrier {
    public const nint flLastGameTime = 0x1318; // GameTime_t
    public const nint m_flCurrentShield = 0x131C; // float32
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_Bloodbath_Thinker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_Bloodrage {
    public const nint attack_speed = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint shard_max_health_dmg = 0x1320; // float32
    public const nint damage_pct = 0x1324; // float32
    public const nint flTickRate = 0x1328; // float32
}

public static class CDOTA_Modifier_Bloodseeker_Rupture {
    public const nint movement_damage_pct = 0x1318; // int32
    public const nint hp_pct = 0x131C; // float32
    public const nint vLastPos = 0x1320; // Vector
    public const nint bResetPosition = 0x132C; // bool
    public const nint m_fAccumulatedDamage = 0x1330; // float32
}

public static class CDOTA_Modifier_Bloodseeker_Thirst {
    public const nint hero_kill_heal = 0x1318; // int32
    public const nint creep_kill_heal = 0x131C; // int32
    public const nint half_bonus_aoe = 0x1320; // int32
    public const nint visibility_threshold_pct = 0x1324; // int32
    public const nint invis_threshold_pct = 0x1328; // int32
    public const nint min_bonus_pct = 0x132C; // int32
    public const nint max_bonus_pct = 0x1330; // int32
    public const nint bonus_movement_speed = 0x1334; // int32
    public const nint linger_duration = 0x1338; // float32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bloodseeker_Thirst_Speed {
    public const nint m_iszModifierString = 0x1318; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Bloodseeker_Thirst_Vision {
    public const nint invis_threshold_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodthorn_Debuff {
    public const nint target_crit_multiplier = 0x1318; // float32
    public const nint silence_damage_percent = 0x131C; // float32
    public const nint proc_damage = 0x1320; // int32
    public const nint m_flDamageTaken = 0x1324; // float32
    public const nint m_vRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_Evasion {
    public const nint evasion_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnSorcerer_Evasion {
    public const nint evasion_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Boss_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint reversed = 0x1324; // bool
    public const nint roaming_radius = 0x1328; // int32
    public const nint attack_radius = 0x132C; // int32
    public const nint roaming_seconds_per_rotation = 0x1330; // float32
    public const nint attack_interval = 0x1334; // float32
    public const nint m_bSetupWarning = 0x1338; // bool
    public const nint m_nPreviewFX = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_BottleRegeneration {
    public const nint health_restore = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint health_restore_pct = 0x1320; // int32
    public const nint mana_restore_pct = 0x1324; // int32
    public const nint break_on_hero_damage = 0x1328; // int32
    public const nint m_fHealingDone = 0x132C; // float32
}

public static class CDOTA_Modifier_BountyHunter_Jinada {
    public const nint bonus_damage = 0x1318; // int32
    public const nint gold_steal = 0x131C; // int32
    public const nint m_nFXIndexA = 0x1320; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1324; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BountyHunter_Lookout {
    public const nint radius = 0x1328; // int32
}

public static class CDOTA_Modifier_BountyHunter_Track {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nParentGold = 0x131C; // int32
    public const nint target_crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_BountyHunter_TrackEffect {
    public const nint bonus_move_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_BountyHunter_Track_Bear_Trap {
    public const nint m_bActivated = 0x1328; // bool
}

public static class CDOTA_Modifier_BountyHunter_WindWalk {
    public const nint damage_reduction_pct = 0x1328; // int32
    public const nint shard_stun_duration = 0x132C; // float32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BountyHunter_WindWalk_Slow {
    public const nint slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_BrewUp {
    public const nint m_bBuffExtended = 0x1318; // bool
}

public static class CDOTA_Modifier_Brewmaster_CinderBrew {
    public const nint movement_slow = 0x1318; // int32
    public const nint m_bIgniteActive = 0x131C; // bool
    public const nint m_flDamagePerTick = 0x1320; // float32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x131C; // ParticleIndex_t
    public const nint min_movement = 0x1320; // int32
    public const nint max_movement = 0x1324; // int32
    public const nint m_iMovementBonus = 0x1328; // int32
    public const nint m_flNextUpdateTime = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler_Passive {
    public const nint dodge_chance = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
    public const nint attack_speed = 0x1324; // int32
    public const nint active_multiplier = 0x1328; // float32
    public const nint stun_chance = 0x132C; // int32
    public const nint bash_cooldown = 0x1330; // float32
    public const nint stun_duration = 0x1334; // float32
    public const nint slow_duration = 0x1338; // float32
    public const nint bonus_move_speed = 0x133C; // int32
    public const nint bonus_status_resist = 0x1340; // int32
    public const nint armor = 0x1344; // int32
    public const nint magic_resist = 0x1348; // int32
    public const nint m_flLastBash = 0x134C; // float32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenHaze {
    public const nint movement_slow = 0x1318; // int32
    public const nint miss_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Fire_Phase {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PermanentImmolation {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PermanentImmolation_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplit {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hSecondaryTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_hTertiaryTarget = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_hFourthTarget = 0x1324; // CHandle< C_BaseEntity >
    public const nint m_hReturnBrewling = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x132C; // int32
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplitDelay {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplitDuration {
    public const nint bonus_brewling_hp = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Primal_Companion {
    public const nint cooldown_on_death = 0x1318; // float32
    public const nint cooldown_on_take_damage = 0x131C; // float32
    public const nint disable_distance = 0x1320; // int32
    public const nint movement_slow_when_out_of_range = 0x1324; // int32
    public const nint m_bCanAttack = 0x1328; // bool
    public const nint m_nFxIndex = 0x132C; // ParticleIndex_t
    public const nint cooldown_penalty_pct = 0x1330; // int32
    public const nint bonus_brewling_hp = 0x1334; // int32
    public const nint bonus_damage = 0x1338; // int32
}

public static class CDOTA_Modifier_Brewmaster_Pulverize {
    public const nint bonus_building_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_ThunderClap {
    public const nint movement_slow = 0x1318; // int32
    public const nint attack_speed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Void_AstralPulse {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_Void_Astral_Pull_Movement {
    public const nint pull_distance = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint pull_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Brewmaster_Void_Brawler_Slow {
    public const nint movespeed = 0x1318; // int32
    public const nint active_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Brewmaster_WindWalk {
    public const nint bonus_movement_speeed = 0x1328; // int32
    public const nint bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Bristleback_Active_ConicalQuillSpray {
    public const nint activation_num_quill_sprays = 0x1318; // int32
    public const nint activation_spray_interval = 0x131C; // float32
    public const nint activation_angle = 0x1320; // int32
    public const nint cast_range_bonus = 0x1324; // int32
    public const nint activation_movement_speed_pct = 0x1328; // int32
    public const nint activation_turn_rate_pct = 0x132C; // int32
    public const nint activation_disable_turning = 0x1330; // int32
    public const nint activation_ignore_cast_angle = 0x1334; // int32
    public const nint activation_turn_rate = 0x1338; // int32
    public const nint activation_delay = 0x133C; // float32
    public const nint m_fStartTime = 0x1340; // GameTime_t
    public const nint bDelayFinished = 0x1344; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint m_vFacing = 0x134C; // Vector
    public const nint m_nNumSprays = 0x1358; // int32
    public const nint m_nPoseParameterWE = 0x135C; // int32
    public const nint m_nPoseParameterNS = 0x1360; // int32
    public const nint m_flLastPoseX = 0x1364; // float32
    public const nint m_flLastPoseY = 0x1368; // float32
    public const nint m_nLastMaxDirection = 0x136C; // int32
    public const nint m_vLastOrigin = 0x1370; // Vector
    public const nint m_flLastGameTime = 0x137C; // GameTime_t
}

public static class CDOTA_Modifier_Bristleback_Bristleback {
    public const nint side_damage_reduction = 0x1318; // int32
    public const nint back_damage_reduction = 0x131C; // int32
    public const nint side_angle = 0x1320; // int32
    public const nint back_angle = 0x1324; // int32
    public const nint quill_release_threshold = 0x1328; // float32
    public const nint quill_release_interval = 0x132C; // float32
    public const nint m_bRearHit = 0x1330; // bool
    public const nint m_bSideHit = 0x1331; // bool
    public const nint m_flDamageAccumulated = 0x1334; // float32
    public const nint m_nAccumulatedHits = 0x1338; // int32
}

public static class CDOTA_Modifier_Bristleback_QuillSpray {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bristleback_QuillSpray_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint projectile_speed = 0x1350; // int32
    public const nint radius = 0x1354; // float32
}

public static class CDOTA_Modifier_Bristleback_ViscousNasalGoo {
    public const nint base_armor = 0x1318; // float32
    public const nint armor_per_stack = 0x131C; // float32
    public const nint base_move_slow = 0x1320; // int32
    public const nint move_slow_per_stack = 0x1324; // int32
    public const nint stack_limit = 0x1328; // int32
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bristleback_Warpath {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint move_speed_per_stack = 0x131C; // int32
    public const nint max_stacks = 0x1320; // int32
    public const nint stack_duration = 0x1324; // float32
    public const nint m_flDuration = 0x1328; // float32
}

public static class CDOTA_Modifier_Broodmother_IncapacitatingBite {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_IncapacitatingBiteOrb {
    public const nint miss_chance = 0x1318; // int32
    public const nint bonus_movespeed = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_InsatiableHunger {
    public const nint bonus_damage = 0x1318; // int32
    public const nint lifesteal_pct = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
    public const nint bat_bonus = 0x1324; // float32
    public const nint shard_damage_tick_interval = 0x1328; // float32
    public const nint damage_tick_count = 0x132C; // int32
    public const nint shard_damage_per_tick = 0x1330; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1334; // int32
}

public static class CDOTA_Modifier_Broodmother_PoisonSting {
    public const nint duration = 0x1318; // float32
    public const nint duration_hero = 0x131C; // float32
}

public static class CDOTA_Modifier_Broodmother_PoisonStingDebuff {
    public const nint damage_per_second = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_Silken_Bola {
    public const nint attack_damage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint miss_chance = 0x1320; // int32
    public const nint shard_miss_chance = 0x1324; // int32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderite {
    public const nint buff_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpideriteDebuff {
    public const nint m_hParentSpider = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderlings {
    public const nint spiderling_duration = 0x1318; // float32
    public const nint count = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderlingsShard {
    public const nint shard_spiderling_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_Spider_HP {
    public const nint hp_bonus = 0x1318; // int32
    public const nint damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb {
    public const nint bonus_movespeed = 0x1318; // int32
    public const nint bonus_movespeed_scepter = 0x131C; // int32
    public const nint bonus_turn_rate = 0x1320; // float32
    public const nint flLastDamageTime = 0x1324; // float32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb_Slowed {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_StickySnare {
    public const nint m_vOrigin = 0x1318; // Vector
    public const nint m_vWallDirection = 0x1324; // Vector
    public const nint m_vWallRight = 0x1330; // Vector
    public const nint width = 0x133C; // int32
    public const nint root_duration = 0x1340; // float32
    public const nint formation_delay = 0x1344; // float32
    public const nint m_bTouching = 0x1348; // bool
    public const nint m_hRight = 0x134C; // CHandle< C_BaseEntity >
    public const nint m_bParticle = 0x1350; // bool
    public const nint m_flStartingTime = 0x1354; // GameTime_t
    public const nint m_nFoWID = 0x1358; // int32
    public const nint m_nTeamID = 0x135C; // int32
    public const nint m_vecAffectedHeroes = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nWarmupFXIndex = 0x1378; // ParticleIndex_t
}

public static class CDOTA_Modifier_Broodmother_StickySnare_Root {
    public const nint damage_per_second = 0x1318; // float32
    public const nint m_bFirstSecond = 0x131C; // bool
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_BonusDamage {
    public const nint boar_bonus_damage = 0x1318; // float32
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_PoisonBase {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_PoisonEffect {
    public const nint attack_speed = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_CentaurKhan_EnduranceAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_CentaurKhan_EnduranceAura_Bonus {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_Cart {
    public const nint m_hUnit = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bWasMoving = 0x131C; // bool
    public const nint m_bSpawnDone = 0x131D; // bool
    public const nint m_vecOldForward = 0x1320; // Vector
    public const nint break_distance = 0x132C; // int32
    public const nint m_vecPreviousLocation = 0x1330; // Vector
}

public static class CDOTA_Modifier_Centaur_DoubleEdge_Buff {
    public const nint shard_str_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_DoubleEdge_Slow {
    public const nint shard_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_HoofStomp_Windup {
    public const nint bInterrupted = 0x1318; // bool
}

public static class CDOTA_Modifier_Centaur_Mounted {
    public const nint melee_attack_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_Return {
    public const nint return_damage = 0x1318; // int32
    public const nint return_damage_str = 0x131C; // int32
}

public static class CDOTA_Modifier_Centaur_Return_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_Return_Bonus_Damage {
    public const nint damage_gain_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Centaur_Stampede {
    public const nint radius = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint has_flying_movement = 0x1320; // int32
    public const nint m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Centaur_Stampede_Slow {
    public const nint cast_time_increase = 0x1318; // int32
    public const nint slow_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Ceremonial_Robe_Aura {
    public const nint status_resistance = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_ChaosKnight_Chaos_Strike {
    public const nint creep_multiplier = 0x1318; // float32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // float32
    public const nint crit_min = 0x1320; // int32
    public const nint crit_max = 0x1324; // int32
    public const nint lifesteal = 0x1328; // int32
    public const nint chance = 0x132C; // float32
    public const nint m_nNextCrit = 0x1330; // int32
}

public static class CDOTA_Modifier_ChaosKnight_Chaos_Strike_Debuff {
    public const nint maim_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_ChaosKnight_Reality_Rift_Debuff {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_DivineFavor {
    public const nint armor = 0x1318; // int32
    public const nint heal_rate = 0x131C; // float32
    public const nint creep_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Chen_DivineFavor_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_Divine_Favor_Armor {
    public const nint bonus_armor = 0x1318; // int32
    public const nint heal_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Chen_Divine_Favor_Teleport {
    public const nint bToChen = 0x1318; // bool
}

public static class CDOTA_Modifier_Chen_HandOfGod_Hot {
    public const nint heal_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_HolyPersuasion {
    public const nint health_min = 0x1318; // int32
    public const nint new_max = 0x131C; // int32
    public const nint health_bonus = 0x1320; // int32
    public const nint damage_bonus = 0x1324; // int32
    public const nint movement_speed_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Chen_Penitence {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_taken = 0x131C; // int32
}

public static class CDOTA_Modifier_Chen_Penitence_Attack_Speed_Buff {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_Penitence_Self_Attack_Range {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint self_attack_range_bonus = 0x131C; // int32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_Chen_TestOfFaith_Teleport {
    public const nint bToChen = 0x1318; // bool
}

public static class CDOTA_Modifier_ClarityPotion {
    public const nint mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Clinkz_BurningBarrage {
    public const nint m_iArrowCount = 0x1318; // int32
    public const nint m_vOriginalTarget = 0x131C; // Vector
    public const nint arrow_width = 0x1328; // int32
    public const nint arrow_speed = 0x132C; // float32
    public const nint arrow_range_multiplier = 0x1330; // float32
    public const nint wave_count = 0x1334; // int32
    public const nint arrow_count_per_wave = 0x1338; // int32
    public const nint arrow_angle = 0x133C; // int32
    public const nint m_iLoopCount = 0x1340; // int32
    public const nint m_flInterval = 0x1344; // float32
    public const nint m_flCycleDelay = 0x1348; // float32
    public const nint m_flTimeWaste = 0x134C; // float32
    public const nint m_flExpectedTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Clinkz_Burning_Army {
    public const nint attack_rate = 0x1318; // float32
    public const nint damage_percent = 0x131C; // int32
    public const nint skeleton_health = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint skeleton_building_damage_reduction = 0x1328; // int32
}

public static class CDOTA_Modifier_Clinkz_Burning_Army_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint count = 0x131C; // int32
    public const nint range = 0x1320; // int32
    public const nint m_vFacePosition = 0x1324; // Vector
}

public static class CDOTA_Modifier_Clinkz_DeathPact {
    public const nint health_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Clinkz_SearingArrows {
    public const nint damage_bonus = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1338; // bool
}

public static class CDOTA_Modifier_Clinkz_Strafe {
    public const nint attack_speed_bonus = 0x1318; // int32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint archer_attack_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_SearingArrows {
    public const nint damage_bonus = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1338; // bool
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Clinkz_WindWalk {
    public const nint move_speed_bonus_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Cloak_Of_Flames_Debuff {
    public const nint damage = 0x1318; // int32
    public const nint damage_illusions = 0x131C; // int32
}

public static class CDOTA_Modifier_Clockwerk_RocketFlare_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Corpselord_Revive {
    public const nint radius = 0x1318; // int32
    public const nint ticks_to_revive = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_pReviveTarget = 0x1324; // CHandle< C_DOTA_BaseNPC >
    public const nint m_nCurrentTicks = 0x1328; // int32
}

public static class CDOTA_Modifier_Courier_Burst {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Courier_ReturnStashItems {
    public const nint m_vLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_Courier_TakeStashItems {
    public const nint m_hStashOwner = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_vLocation = 0x131C; // Vector
    public const nint m_bTransferAfterTake = 0x1328; // bool
    public const nint stash_pickup_distance = 0x132C; // int32
}

public static class CDOTA_Modifier_Courier_TransferItems {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Creature_Flamestrike {
    public const nint impact_radius = 0x1318; // int32
    public const nint ground_burn_duration = 0x131C; // float32
    public const nint damage = 0x1320; // float32
    public const nint vision_distance = 0x1324; // int32
    public const nint vision_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Creature_Flamestrike_Ground {
    public const nint burn_interval = 0x1318; // float32
    public const nint burn_radius = 0x131C; // int32
    public const nint burn_dps = 0x1320; // int32
}

public static class CDOTA_Modifier_Creature_Full_Avoidance {
    public const nint m_flOriginalAvoidance = 0x1318; // float32
}

public static class CDOTA_Modifier_Creature_HybridFlyer {
    public const nint m_ctTimer = 0x1318; // CountdownTimer
}

public static class CDOTA_Modifier_Creature_IceSlam_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nPathEffectIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Creep_Bonus_XP {
    public const nint radius = 0x1318; // int32
    public const nint hero_damage_penalty = 0x131C; // int32
    public const nint bonus_gold = 0x1320; // int32
    public const nint m_iGoldBounty = 0x1324; // int32
    public const nint iBannerEffect = 0x1328; // ParticleIndex_t
    public const nint iRingEffect = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Creep_Irresolute {
    public const nint hero_damage_penalty = 0x1318; // int32
}

public static class CDOTA_Modifier_Creep_Piercing {
    public const nint creep_damage_bonus = 0x1318; // int32
    public const nint hero_damage_penalty = 0x131C; // int32
    public const nint heavy_damage_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Creep_Siege {
    public const nint bonus_building_damage = 0x1318; // int32
    public const nint incoming_hero_damage_penalty = 0x131C; // int32
    public const nint incoming_basic_damage_penalty = 0x1320; // int32
    public const nint incoming_controlled_unit_penalty = 0x1324; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_BrillianceAuraEffect {
    public const nint base_mana_regen = 0x1318; // float32
    public const nint self_factor = 0x131C; // float32
    public const nint proximity_bonus_factor = 0x1320; // float32
    public const nint proximity_bonus_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_CrystalNova {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_FreezingField {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint explosion_interval = 0x1324; // float32
    public const nint shard_bonus_explosion = 0x1328; // float32
    public const nint explosion_radius = 0x132C; // int32
    public const nint slow_duration = 0x1330; // float32
    public const nint explosion_min_dist = 0x1334; // int32
    public const nint explosion_max_dist = 0x1338; // int32
    public const nint frostbite_delay = 0x133C; // float32
    public const nint m_fLastTick = 0x1340; // GameTime_t
    public const nint m_fTimeAccumulator = 0x1344; // float32
    public const nint m_iExplosionCount = 0x1348; // int32
    public const nint m_iExplosionTotalCount = 0x134C; // int32
    public const nint m_iExplosionQuadrant = 0x1350; // int32
    public const nint m_iExplosionDistance = 0x1354; // int32
    public const nint shard_self_movement_speed_slow_pct = 0x1358; // int32
    public const nint m_nFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint can_move = 0x1380; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_FreezingField_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_Frostbite {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint creep_damage_per_second = 0x1320; // int32
    public const nint tick_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_CrystalMaiden_IceRink_Movement {
    public const nint m_bHitFirstUpdate = 0x1318; // bool
    public const nint flMovementSpeed = 0x131C; // float32
    public const nint m_flTurnBoostProgress = 0x1320; // float32
    public const nint m_flFacingTarget = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flHitEndTime = 0x132C; // GameTime_t
    public const nint hit_recover_time = 0x1330; // float32
    public const nint m_vDirection = 0x1334; // Vector
}

public static class CDOTA_Modifier_CrystalMaiden_IceRink_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint rink_formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_CrystalMaiden_Let_It_Go_Thinker {
    public const nint m_vPathStart = 0x1318; // Vector
    public const nint m_vPathEnd = 0x1324; // Vector
}

public static class CDOTA_Modifier_Crystal_Maiden_Crystal_Clone_Statue {
    public const nint frostbite_radius = 0x1318; // int32
    public const nint anim_delay = 0x131C; // float32
    public const nint m_bActivated = 0x1320; // bool
    public const nint clone_health = 0x1324; // int32
    public const nint m_flDamageTaken = 0x1328; // float32
}

public static class CDOTA_Modifier_Cyclone {
    public const nint m_flStartTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_DaggerOfRistul_Buff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_IonShell_IllusionInvulnerability {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch {
    public const nint m_PositionIndex = 0x1318; // Vector[30]
    public const nint m_nNormalPunchBuffIndex = 0x1480; // ParticleIndex_t
    public const nint m_flDistanceTraveled = 0x1484; // float32
    public const nint m_bIsValidTarget = 0x1488; // bool
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion {
    public const nint replica_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion_Thinker {
    public const nint m_vecIllusionSpawnPosition = 0x1318; // Vector
    public const nint speed = 0x1324; // int32
    public const nint m_hTarget = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DarkSeer_Surge {
    public const nint speed_boost = 0x1318; // int32
    public const nint trail_radius = 0x131C; // int32
    public const nint trail_duration = 0x1320; // float32
    public const nint m_vLastTrailThinkerLocation = 0x1324; // Vector
    public const nint m_bTrailStarted = 0x1330; // bool
}

public static class CDOTA_Modifier_DarkSeer_Surge_Trail {
    public const nint trail_move_slow = 0x1318; // int32
    public const nint trail_damage = 0x131C; // int32
    public const nint trail_damage_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_DarkSeer_Surge_Trail_Thinker {
    public const nint trail_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DarkSeer_Vacuum {
    public const nint pull_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica {
    public const nint m_vWallDirection = 0x1318; // Vector
    public const nint m_vWallRight = 0x1324; // Vector
    public const nint m_PreventReplicateTime = 0x1348; // CUtlMap< int32, GameTime_t >
    public const nint width = 0x1368; // int32
    public const nint wall_damage = 0x136C; // int32
    public const nint slow_duration = 0x1370; // float32
    public const nint replica_damage_incoming = 0x1374; // int32
    public const nint replica_damage_outgoing = 0x1378; // int32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica_Illusion {
    public const nint replica_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_radius = 0x1324; // int32
    public const nint attack_radius = 0x1328; // int32
    public const nint roaming_seconds_per_rotation = 0x132C; // float32
    public const nint attack_interval = 0x1330; // float32
    public const nint target_count = 0x1334; // int32
    public const nint m_bTravelling = 0x1338; // bool
    public const nint travel_speed = 0x133C; // int32
}

public static class CDOTA_Modifier_DarkWillow_BrambleMaze_Creation_Thinker {
    public const nint latch_creation_interval = 0x1318; // float32
    public const nint initial_creation_delay = 0x131C; // float32
    public const nint placement_count = 0x1320; // int32
    public const nint placement_duration = 0x1324; // float32
    public const nint m_iBramblesIndex = 0x1328; // int32
}

public static class CDOTA_Modifier_DarkWillow_BrambleMaze_Thinker {
    public const nint latch_range = 0x1318; // int32
    public const nint latch_vision = 0x131C; // int32
    public const nint latch_creation_delay = 0x1320; // float32
    public const nint latch_duration = 0x1324; // float32
    public const nint m_bActive = 0x1330; // bool
}

public static class CDOTA_Modifier_DarkWillow_CursedCrown {
    public const nint delay = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint stun_radius = 0x1320; // int32
    public const nint m_fStartTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_DarkWillow_Debuff_Fear {
    public const nint m_bDidGiveOrder = 0x1318; // bool
}

public static class CDOTA_Modifier_DarkWillow_ShadowRealm_Buff {
    public const nint damage = 0x1318; // int32
    public const nint max_damage_duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint bAttackRange = 0x1340; // bool
    public const nint m_flStartTime = 0x1344; // GameTime_t
    public const nint m_flFadeTime = 0x1348; // GameTime_t
    public const nint m_flDamageScale = 0x134C; // float32
    public const nint duration = 0x1350; // float32
}

public static class CDOTA_Modifier_DarkWillow_ShadowRealm_Buff_Attack_Logic {
    public const nint damage = 0x1318; // int32
    public const nint m_iRecord = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
}

public static class CDOTA_Modifier_DarkWillow_Terrorize_Thinker {
    public const nint m_hWisp = 0x1318; // CHandle< C_BaseEntity >
    public const nint destination_travel_speed = 0x131C; // int32
    public const nint return_travel_speed = 0x1320; // int32
    public const nint destination_radius = 0x1324; // int32
    public const nint destination_status_duration = 0x1328; // float32
    public const nint initial_delay = 0x132C; // float32
    public const nint starting_height = 0x1330; // float32
    public const nint m_vAttackLocation = 0x1334; // Vector
    public const nint m_bAttacking = 0x1340; // bool
    public const nint m_bReturning = 0x1341; // bool
    public const nint m_fCurHeight = 0x1344; // float32
    public const nint m_fEstimatedTravelTime = 0x1348; // float32
    public const nint think_interval = 0x134C; // float32
    public const nint m_bInFlight = 0x1350; // bool
}

public static class CDOTA_Modifier_DataDriven {
    public const nint m_nAbilityID = 0x1318; // AbilityID_t
    public const nint m_nIndexInAbility = 0x131C; // int32
    public const nint m_bIsHidden = 0x1320; // bool
    public const nint m_bIsDebuff = 0x1321; // bool
    public const nint m_bIsPurgable = 0x1322; // bool
    public const nint m_bIsStunDebuff = 0x1323; // bool
    public const nint m_bAllowIllusionDuplicate = 0x1324; // bool
    public const nint m_bRemoveOnDeath = 0x1325; // bool
    public const nint m_pszAuraModifier = 0x1328; // char*
    public const nint m_nAuraModifierIndex = 0x1330; // int32
    public const nint m_nAuraRadius = 0x1334; // int32
    public const nint m_nAuraSearchTeam = 0x1338; // int32
    public const nint m_nAuraSearchType = 0x133C; // int32
    public const nint m_nAuraSearchFlags = 0x1340; // int32
    public const nint m_bAuraApplyToCaster = 0x1344; // bool
    public const nint m_bAuraApplyToParent = 0x1345; // bool
    public const nint m_nAttributes = 0x1348; // int32
    public const nint m_pszEffectName = 0x1350; // char*
    public const nint m_nEffectAttachType = 0x1358; // int32
    public const nint m_nPriority = 0x135C; // int32
    public const nint m_pszStatusEffectName = 0x1360; // char*
    public const nint m_nStatusEffectPriority = 0x1368; // int32
    public const nint m_nOverrideAnimation = 0x136C; // int32
    public const nint m_nOrbPriority = 0x1370; // int32
    public const nint m_nOrbLabel = 0x1374; // int32
    public const nint m_bOrbIsCastAttack = 0x1378; // bool
    public const nint m_flThinkInterval = 0x137C; // float32
    public const nint m_bNeedsReParseIfRefreshed = 0x1380; // bool
    public const nint m_pszModelName = 0x1388; // char*
    public const nint m_pszOrbProjectileName = 0x1390; // char*
    public const nint m_nModifierStatesEnabled = 0x3818; // uint64
    public const nint m_nModifierStatesDisabled = 0x3820; // uint64
    public const nint m_pOnCreated = 0x3828; // KeyValues*
    public const nint m_pOnIntervalThink = 0x3830; // KeyValues*
    public const nint m_pOnDestroy = 0x3838; // KeyValues*
    public const nint m_pOnAttackStart = 0x3840; // KeyValues*
    public const nint m_pOnAttack = 0x3848; // KeyValues*
    public const nint m_pOnAttackLanded = 0x3850; // KeyValues*
    public const nint m_pOnAttackFailed = 0x3858; // KeyValues*
    public const nint m_pOnAttackAllied = 0x3860; // KeyValues*
    public const nint m_pOnProjectileDodge = 0x3868; // KeyValues*
    public const nint m_pOnOrder = 0x3870; // KeyValues*
    public const nint m_pOnUnitMoved = 0x3878; // KeyValues*
    public const nint m_pOnAbilityStart = 0x3880; // KeyValues*
    public const nint m_pOnAbilityExecuted = 0x3888; // KeyValues*
    public const nint m_pOnBreakInvisibility = 0x3890; // KeyValues*
    public const nint m_pOnAbilityEndChannel = 0x3898; // KeyValues*
    public const nint m_pOnTakeDamage = 0x38A0; // KeyValues*
    public const nint m_pOnDealDamage = 0x38A8; // KeyValues*
    public const nint m_pOnStateChanged = 0x38B0; // KeyValues*
    public const nint m_pOnAttacked = 0x38B8; // KeyValues*
    public const nint m_pOnDeath = 0x38C0; // KeyValues*
    public const nint m_pOnKill = 0x38C8; // KeyValues*
    public const nint m_pOnRespawn = 0x38D0; // KeyValues*
    public const nint m_pOnSpentMana = 0x38D8; // KeyValues*
    public const nint m_pOnTeleporting = 0x38E0; // KeyValues*
    public const nint m_pOnTeleported = 0x38E8; // KeyValues*
    public const nint m_pOnHealthGained = 0x38F0; // KeyValues*
    public const nint m_pOnManaGained = 0x38F8; // KeyValues*
    public const nint m_pOnHeroKilled = 0x3900; // KeyValues*
    public const nint m_pOnHealReceived = 0x3908; // KeyValues*
    public const nint m_pOnAttackFinished = 0x3910; // KeyValues*
    public const nint m_pOnAttackCancelled = 0x3918; // KeyValues*
}

public static class CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint travel_speed_pct = 0x1320; // int32
    public const nint m_nMaxRange = 0x1324; // int32
    public const nint m_vStartPoint = 0x1328; // Vector
    public const nint m_vLastTrailThinkerLocation = 0x1334; // Vector
    public const nint m_vEndPointShard = 0x1340; // Vector
    public const nint m_nStatusFXIndex = 0x134C; // ParticleIndex_t
    public const nint flare_radius = 0x1350; // int32
    public const nint bHasStartedBurning = 0x1354; // bool
    public const nint flare_debuff_duration = 0x1358; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Converge {
    public const nint move_slow = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Converge_Thinker {
    public const nint flare_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Attack_Bonus {
    public const nint attack_damage = 0x1318; // int32
    public const nint creep_damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Caster {
    public const nint movement_speed = 0x1318; // int32
    public const nint shard_movement_penalty = 0x131C; // int32
    public const nint swipe_radius = 0x1320; // int32
    public const nint swipe_damage = 0x1324; // int32
    public const nint smash_radius = 0x1328; // int32
    public const nint smash_damage = 0x132C; // int32
    public const nint m_nCurrentSpeed = 0x1330; // int32
    public const nint flSwipeInterval = 0x1334; // float32
    public const nint m_flNextHit = 0x1338; // GameTime_t
    public const nint iCurrentAttack = 0x133C; // int32
    public const nint total_attacks = 0x1340; // int32
    public const nint smash_stun_duration = 0x1344; // float32
    public const nint sweep_stun_duration = 0x1348; // float32
    public const nint m_bHasCompletedMove = 0x134C; // bool
    public const nint duration = 0x1350; // float32
    public const nint m_vTargetHorizontalDirection = 0x1354; // Vector
    public const nint smash_distance_from_hero = 0x1360; // int32
    public const nint animation_rate = 0x1364; // float32
    public const nint turn_rate = 0x1368; // float32
    public const nint m_flFacingTarget = 0x136C; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Slow {
    public const nint swipe_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Smash_Stun {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Luminosity {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint attack_count = 0x131C; // int32
    public const nint m_bShouldIncrement = 0x1320; // bool
}

public static class CDOTA_Modifier_Dawnbreaker_Luminosity_Attack_Buff {
    public const nint m_bIsBuffedAttack = 0x1318; // bool
    public const nint heal_pct = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint heal_radius = 0x1324; // int32
    public const nint heal_from_creeps = 0x1328; // int32
    public const nint allied_healing_pct = 0x132C; // int32
    public const nint hTargets = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flTotalToHeal = 0x1348; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Disable {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Evasion {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Thinker {
    public const nint pulse_interval = 0x1318; // float32
    public const nint iEffectRadius = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint m_nThinkerFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Armor {
    public const nint armor_reduction = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Armor_Counter {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint armor_reduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Manacost {
    public const nint mana_cost_increase_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Dazzle_Good_Juju {
    public const nint cooldown_reduction = 0x1318; // float32
    public const nint item_cooldown_reduction = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Dazzle_Poison_Touch {
    public const nint slow = 0x1318; // int32
    public const nint bonus_slow = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
    public const nint flAccummulatedBonusSlow = 0x1324; // float32
    public const nint iAccummulatedBonusDamage = 0x1328; // int32
    public const nint attack_range_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Dazzle_Poison_Touch_Self {
    public const nint attack_range_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Dazzle_Rain_Of_Vermin {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint hex_chance = 0x1320; // float32
    public const nint hex_duration = 0x1324; // float32
    public const nint damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Dazzle_Shallow_Grave {
    public const nint heal_amplify = 0x1318; // int32
}

public static class CDOTA_Modifier_Dazzle_Weave_Armor {
    public const nint armor_per_second = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DeathProphet_CryptSwarm_Slow {
    public const nint slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Exorcism {
    public const nint radius = 0x1318; // int32
    public const nint spirit_speed = 0x131C; // int32
    public const nint max_distance = 0x1320; // int32
    public const nint give_up_distance = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_damage = 0x132C; // int32
    public const nint heal_percent = 0x1330; // int32
    public const nint spirit_duration = 0x1334; // int32
    public const nint ghost_spawn_rate = 0x1338; // float32
    public const nint movement_bonus = 0x133C; // int32
    public const nint m_iSpirits = 0x1340; // int32
    public const nint m_fStartTime = 0x1344; // GameTime_t
    public const nint m_fLastThinkTime = 0x1348; // GameTime_t
    public const nint m_fSpawnTime = 0x134C; // GameTime_t
    public const nint m_bFirstSpawn = 0x1350; // bool
    public const nint m_bCommentedOnExpired = 0x1351; // bool
    public const nint m_bForceExpired = 0x1352; // bool
    public const nint m_vecSpirits = 0x1358; // CUtlVector< sSpiritInfo* >
}

public static class CDOTA_Modifier_DeathProphet_Scepter {
    public const nint radius = 0x1318; // int32
    public const nint spirit_speed = 0x131C; // int32
    public const nint max_distance = 0x1320; // int32
    public const nint give_up_distance = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_damage = 0x132C; // int32
    public const nint heal_percent = 0x1330; // int32
    public const nint spirit_duration = 0x1334; // int32
    public const nint m_fStartTime = 0x1338; // GameTime_t
    public const nint m_fLastThinkTime = 0x133C; // GameTime_t
    public const nint m_bExpired = 0x1340; // bool
    public const nint m_SpiritInfo = 0x1348; // sSpiritInfo*
}

public static class CDOTA_Modifier_DeathProphet_Silence_Debuff {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Slow {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon {
    public const nint flSmoothness = 0x1318; // float32
    public const nint damage = 0x131C; // float32
    public const nint damage_pct = 0x1320; // float32
    public const nint drain_range = 0x1324; // int32
    public const nint haunt_duration = 0x1328; // float32
    public const nint siphon_buffer = 0x132C; // int32
    public const nint movement_steal = 0x1330; // int32
    public const nint m_hTarget = 0x1334; // CHandle< C_BaseEntity >
    public const nint m_iLinkIndex = 0x1338; // ParticleIndex_t
    public const nint m_nSelfBuffSerialNumber = 0x133C; // int32
    public const nint m_nTargetDebuffSerialNumber = 0x1340; // int32
    public const nint m_bAppliedFear = 0x1344; // bool
    public const nint shard_fear_duration = 0x1348; // float32
    public const nint shard_consecutive_siphon_duration = 0x134C; // float32
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon_Slow {
    public const nint movement_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Witchcraft {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Demonicon_Bonus {
    public const nint hp_bonus = 0x1318; // int32
    public const nint damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Desolator_2_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Desolator_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Devastator_Debuff {
    public const nint active_mres_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Diretide_Portal_Buff {
    public const nint m_hInvader = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Disruptor_Glimpse {
    public const nint m_PositionIndex = 0x1318; // Vector[18]
}

public static class CDOTA_Modifier_Disruptor_Glimpse_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< C_BaseEntity >
    public const nint m_flDistance = 0x1328; // float32
}

public static class CDOTA_Modifier_Disruptor_KineticField {
    public const nint radius = 0x1318; // int32
    public const nint m_vOriginLoc = 0x131C; // Vector
    public const nint m_bTruesight = 0x1328; // bool
    public const nint damage_per_second = 0x132C; // float32
}

public static class CDOTA_Modifier_Disruptor_KineticFieldThinker {
    public const nint radius = 0x1318; // int32
    public const nint formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
    public const nint m_nFXIndex = 0x132C; // int32
}

public static class CDOTA_Modifier_Disruptor_StaticStorm {
    public const nint miss_rate = 0x1318; // int32
    public const nint movement_speed_reduction = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint m_bHasScepter = 0x1324; // bool
}

public static class CDOTA_Modifier_Disruptor_StaticStormThinker {
    public const nint m_nCurrentPulse = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_max = 0x1320; // int32
    public const nint pulses = 0x1324; // int32
    public const nint duration = 0x1328; // float32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike {
    public const nint strike_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint strike_damage = 0x1320; // int32
    public const nint strike_damage_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike_Speed {
    public const nint shard_movement_speed_bonus = 0x1318; // int32
    public const nint shard_attack_speed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Devour {
    public const nint armor = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Devour_Intrinsic {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint spell_amp_bonus = 0x131C; // int32
    public const nint cooldown_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_DoomBringer_Doom {
    public const nint damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint deniable_pct = 0x1320; // int32
    public const nint flElapsedTime = 0x1324; // float32
    public const nint damage_amp = 0x1328; // int32
    public const nint m_bDoesBreak = 0x132C; // bool
    public const nint m_bDoesMute = 0x132D; // bool
}

public static class CDOTA_Modifier_DoomBringer_Doom_Aura_Enemy {
    public const nint scepter_aura_radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Doom_Aura_Self {
    public const nint scepter_aura_radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_InfernalBlade {
    public const nint m_bInfernalBladeAttack = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint burn_duration = 0x1320; // float32
    public const nint ministun_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_DoomBringer_InfernalBlade_Burn {
    public const nint burn_damage = 0x1318; // int32
    public const nint burn_damage_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_DoomBringer_ScorchedEarthEffect {
    public const nint bonus_movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_DoomBringer_ScorchedEarthEffectAura {
    public const nint damage_per_second = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint heal_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_DragonKnight_BreatheFire_Reduction {
    public const nint reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_CorrosiveBreath {
    public const nint corrosive_breath_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_DragonKnight_CorrosiveBreathDoT {
    public const nint corrosive_breath_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonBlood {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonBlood_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonForm {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_damage = 0x131C; // int32
    public const nint bonus_attack_range = 0x1320; // int32
    public const nint attack_projectile_speed_bonus = 0x1324; // int32
    public const nint magic_resistance = 0x1328; // int32
    public const nint model_scale = 0x132C; // int32
    public const nint iLevel = 0x1330; // int32
    public const nint m_iOriginalAttackCapabilities = 0x1334; // int32
    public const nint m_iszRangedAttackEffect = 0x1338; // CUtlSymbolLarge
    public const nint bonus_slow_resistance = 0x1340; // int32
}

public static class CDOTA_Modifier_DragonKnight_Fireball_Burn {
    public const nint burn_interval = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_Fireball_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint linger_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_DragonKnight_FrostBreath {
    public const nint frost_duration = 0x1318; // float32
    public const nint frost_aoe = 0x131C; // float32
}

public static class CDOTA_Modifier_DragonKnight_FrostBreath_Slow {
    public const nint frost_bonus_movement_speed = 0x1318; // int32
    public const nint frost_bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_SplashAttack {
    public const nint splash_radius = 0x1318; // int32
    public const nint splash_damage_percent = 0x131C; // int32
    public const nint corrosive_breath_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Dragon_Scale_Burn {
    public const nint damage_per_sec = 0x1318; // int32
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint shard_bonus_damage_per_stack = 0x1330; // int32
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Hypothermia {
    public const nint shard_regen_reduction_pct_per_stack = 0x1318; // int32
    public const nint shard_burst_radius = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Shard_Slow {
    public const nint shard_burst_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Slow {
    public const nint frost_arrows_movement_speed = 0x1318; // int32
    public const nint shard_max_stacks = 0x131C; // int32
    public const nint shard_stack_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship {
    public const nint chance = 0x1318; // int32
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_GlacialInFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint bonus_factor = 0x1350; // int32
    public const nint disable_range = 0x1354; // int32
    public const nint agility_range = 0x1358; // int32
    public const nint bonus_damage = 0x135C; // int32
    public const nint split_count = 0x1360; // int32
    public const nint split_range = 0x1364; // int32
    public const nint m_bGlacialAttack = 0x1368; // bool
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship_Aura_Bonus {
    public const nint agility_multiplier = 0x1318; // int32
    public const nint agility_multiplier_ally = 0x131C; // float32
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship_Reduction {
    public const nint split_damage_reduction = 0x1318; // int32
    public const nint m_vecRecords = 0x1320; // CUtlVectorFixedGrowable< int32 >
    public const nint m_vecRecordTimes = 0x1358; // CUtlVectorFixedGrowable< GameTime_t >
}

public static class CDOTA_Modifier_DrowRanger_TrueshotAura {
    public const nint trueshot_ranged_attack_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_DrowRanger_WaveOfSilence {
    public const nint miss_chance = 0x1318; // int32
    public const nint gust_reveals_invis = 0x131C; // int32
}

public static class CDOTA_Modifier_DrowRanger_WaveOfSilence_Buff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop {
    public const nint multishot_arrow_bonus = 0x1318; // int32
    public const nint end_height = 0x131C; // int32
    public const nint attack_range_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Aura {
    public const nint shard_width = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Removal {
    public const nint z_speed_override = 0x1318; // float32
}

public static class CDOTA_Modifier_Drow_Ranger_Multishot {
    public const nint m_iArrowCount = 0x1318; // int32
    public const nint m_vOriginalTarget = 0x131C; // Vector
    public const nint arrow_width = 0x1328; // int32
    public const nint arrow_speed = 0x132C; // float32
    public const nint arrow_range_multiplier = 0x1330; // float32
    public const nint wave_count = 0x1334; // int32
    public const nint arrow_count_per_wave = 0x1338; // int32
    public const nint arrow_angle = 0x133C; // int32
    public const nint m_iLoopCount = 0x1340; // int32
    public const nint m_flInterval = 0x1344; // float32
    public const nint m_flCycleDelay = 0x1348; // float32
    public const nint m_flTimeWaste = 0x134C; // float32
    public const nint m_flExpectedTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Drow_Ranger_Multishot_Damage {
    public const nint arrow_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_EarthSpirit_BoulderSmash {
    public const nint m_bInterrupted = 0x1318; // bool
    public const nint m_nProjectileID = 0x131C; // int32
}

public static class CDOTA_Modifier_EarthSpirit_Boulder_Smash_Debuff {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_EarthSpirit_GeomagneticGrip {
    public const nint radius = 0x1318; // int32
    public const nint rock_damage = 0x131C; // int32
    public const nint pull_units_per_second = 0x1320; // float32
    public const nint pull_units_per_second_heroes = 0x1324; // float32
    public const nint total_pull_distance = 0x1328; // float32
    public const nint duration = 0x132C; // float32
    public const nint m_bUsedStone = 0x1330; // bool
    public const nint m_vDestination = 0x1334; // Vector
    public const nint m_vLocation = 0x1340; // Vector
    public const nint m_hHitEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_EarthSpirit_Magnetize {
    public const nint rock_search_radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint rock_explosion_delay = 0x1324; // float32
    public const nint damage_duration = 0x1328; // float32
    public const nint cast_radius = 0x132C; // int32
    public const nint rock_explosion_radius = 0x1330; // int32
    public const nint m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint duration = 0x1350; // float32
    public const nint m_bShowOverhead = 0x1354; // bool
}

public static class CDOTA_Modifier_EarthSpirit_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_bHasBeenMagnetized = 0x131C; // bool
}

public static class CDOTA_Modifier_EarthSpirit_Polarization {
    public const nint damage_per_second = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint damage_duration = 0x1320; // float32
    public const nint rock_search_radius = 0x1324; // int32
    public const nint m_hMagnetizeAbility = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_EarthSpirit_RollingBoulder_Caster {
    public const nint m_vDir = 0x1318; // Vector
    public const nint m_bBoulderCreated = 0x1324; // bool
}

public static class CDOTA_Modifier_EarthSpirit_StoneThinker {
    public const nint m_pVisionRangeFX = 0x1318; // CNewParticleEffect*
    public const nint vision_radius = 0x1320; // int32
    public const nint m_bHasBeenMagnetized = 0x1324; // bool
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Earthshaker_Aftershock {
    public const nint aftershock_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Earthshaker_Arcana {
    public const nint m_nComboCount = 0x1318; // int32
    public const nint m_flComboWindow = 0x131C; // float32
    public const nint m_flComboDisplayInterval = 0x1320; // float32
    public const nint m_flDamageDone = 0x1324; // float32
}

public static class CDOTA_Modifier_Earthshaker_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Earthshaker_EnchantTotem {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint totem_damage_percentage = 0x131C; // int32
    public const nint scepter_cleave_pct = 0x1320; // int32
    public const nint scepter_cleave_starting_width = 0x1324; // float32
    public const nint scepter_cleave_ending_width = 0x1328; // float32
    public const nint scepter_cleave_distance = 0x132C; // float32
}

public static class CDOTA_Modifier_Earthshaker_Fissure_Shard {
    public const nint shard_aftershock_stun_duration_pct = 0x1318; // int32
    public const nint shard_free_pathing_linger_duration = 0x131C; // float32
    public const nint m_vStartPos = 0x1320; // Vector
    public const nint m_vEndPos = 0x132C; // Vector
    public const nint m_flEndTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_EchoSabre_Debuff {
    public const nint movement_slow = 0x1318; // int32
    public const nint attack_speed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Elder_Titan_AncestralSpirit {
    public const nint pass_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_nCreepsHit = 0x1320; // int32
    public const nint m_nHeroesHit = 0x1324; // int32
    public const nint m_flSpeed = 0x1328; // float32
    public const nint m_hHitUnits = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nBonusMoveSpeed = 0x1348; // int32
}

public static class CDOTA_Modifier_Elder_Titan_AncestralSpirit_Buff {
    public const nint move_pct_creeps = 0x1318; // float32
    public const nint move_pct_heroes = 0x131C; // int32
    public const nint damage_creeps = 0x1320; // int32
    public const nint damage_heroes = 0x1324; // int32
    public const nint armor_creeps = 0x1328; // float32
    public const nint armor_heroes = 0x132C; // float32
    public const nint move_pct_cap = 0x1330; // float32
    public const nint m_nCreepsHit = 0x1334; // int32
    public const nint m_nHeroesHit = 0x1338; // int32
    public const nint m_fSpeedPercentage = 0x133C; // float32
    public const nint m_nDamage = 0x1340; // int32
    public const nint m_nArmor = 0x1344; // int32
    public const nint m_bSpellImmunity = 0x1348; // bool
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter_Caster {
    public const nint m_hHitUnits = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint vision_width = 0x1330; // int32
    public const nint vision_interval = 0x1334; // float32
    public const nint vision_duration = 0x1338; // float32
    public const nint vision_step = 0x133C; // int32
    public const nint total_steps = 0x1340; // int32
    public const nint m_nCompletedSteps = 0x1344; // int32
    public const nint m_vStart = 0x1348; // Vector
    public const nint m_vEnd = 0x1354; // Vector
    public const nint m_vNextVisionLocation = 0x1360; // Vector
    public const nint m_vCastDirection = 0x136C; // Vector
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter_Thinker {
    public const nint crack_width = 0x1318; // int32
    public const nint damage_pct = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
    public const nint slow_duration_scepter = 0x1324; // float32
    public const nint m_pParentModifier = 0x1328; // CDOTA_Buff*
}

public static class CDOTA_Modifier_Elder_Titan_EchoStomp {
    public const nint wake_damage_limit = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
    public const nint initial_stun_duration = 0x1320; // float32
    public const nint ctStunTimer = 0x1328; // CountdownTimer
    public const nint m_flDamageTaken = 0x1340; // float32
}

public static class CDOTA_Modifier_Elder_Titan_EchoStomp_Magic_Immune {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Armor {
    public const nint armor_reduction_pct = 0x1318; // int32
    public const nint m_flArmorReduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_Armor {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_MagicResistance {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_MagicResistance {
    public const nint magic_resistance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_ElixerHealing {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnantThinker {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_bIsShardRemnant = 0x131C; // bool
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_RemnantTracker {
    public const nint m_vActiveRemnants = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vTrackingDelayedRemnants = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint shard_charge_radius = 0x1348; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_Shard {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_Shard_Debuff {
    public const nint shard_damage_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FlameGuard {
    public const nint absorb_amount = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint tick_interval = 0x1324; // float32
    public const nint shield_pct_absorb = 0x1328; // int32
    public const nint m_nAbsorbRemaining = 0x132C; // int32
    public const nint m_flShowParticleInterval = 0x1330; // float32
    public const nint m_bDestroy = 0x1334; // bool
    public const nint linger_duration = 0x1338; // float32
}

public static class CDOTA_Modifier_EmberSpirit_FlameGuard_Debuff {
    public const nint damage_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_EmberSpirit_SearingChains {
    public const nint damage_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint tick_damage = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_EmberSpirit_SleightOfFist_Caster {
    public const nint bonus_hero_damage = 0x1318; // int32
    public const nint creep_damage_penalty = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint attack_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_Enchantress_Enchant_Controlled {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint enchant_health = 0x131C; // int32
    public const nint enchant_armor = 0x1320; // int32
    public const nint enchant_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Enchantress_Enchant_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Enchantress_Impetus {
    public const nint distance_damage_pct = 0x1318; // float32
    public const nint distance_cap = 0x131C; // int32
    public const nint creep_multiplier = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Enchantress_Little_Friends {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint bonus_move_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Enchantress_Little_Friends_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
    public const nint root_base_duration = 0x1330; // float32
    public const nint root_per_target = 0x1334; // float32
    public const nint max_root = 0x1338; // float32
    public const nint m_flLastSeen = 0x133C; // GameTime_t
}

public static class CDOTA_Modifier_Enchantress_Little_Friends_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Enchantress_NaturesAttendants {
    public const nint heal_interval = 0x1318; // float32
    public const nint heal = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint wisp_count = 0x1324; // int32
    public const nint movespeed = 0x1328; // int32
    public const nint m_nWispFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enchantress_NaturesAttendants_Shard {
    public const nint heal_interval = 0x1318; // float32
    public const nint heal = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint shard_permanent_wisp_count = 0x1324; // int32
    public const nint m_bActive = 0x1328; // bool
    public const nint m_nWispFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enchantress_Untouchable_Slow {
    public const nint slow_attack_speed = 0x1318; // int32
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_BlackHoleThinker {
    public const nint radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_BlackHole_Pull {
    public const nint pull_speed = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint tick_rate = 0x1324; // float32
    public const nint pull_rotate_speed = 0x1328; // float32
    public const nint animation_rate = 0x132C; // float32
    public const nint scepter_pct_damage = 0x1330; // float32
    public const nint m_flDamageTick = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Enigma_Black_Hole_Pull_Scepter {
    public const nint scepter_drag_speed = 0x1318; // int32
    public const nint scepter_pull_rotate_speed = 0x131C; // float32
    public const nint aura_origin_x = 0x1320; // float32
    public const nint aura_origin_y = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_vCenter = 0x132C; // Vector
    public const nint m_flLastThinkTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_Enigma_Black_Hole_Thinker_Scepter {
    public const nint scepter_radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_DemonicConversion {
    public const nint m_iAttackCount = 0x1320; // int32
    public const nint split_attack_count = 0x1324; // int32
    public const nint life_extension = 0x1328; // float32
    public const nint eidolon_attack_range = 0x132C; // int32
    public const nint eidolon_bonus_damage = 0x1330; // int32
    public const nint eidolon_bonus_attack_speed = 0x1334; // int32
    public const nint m_bAllowSplit = 0x1338; // bool
    public const nint m_nSpawnNum = 0x133C; // int32
}

public static class CDOTA_Modifier_Enigma_DemonicConversion_ModelScale {
    public const nint self_modelscale = 0x1318; // float32
}

public static class CDOTA_Modifier_Enigma_Malefice {
    public const nint tick_rate = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint m_nEidolonSpawnNum = 0x1328; // int32
}

public static class CDOTA_Modifier_Enigma_MidnightPulseThinker {
    public const nint radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_MidnightPulse_Damage {
    public const nint damage_percent = 0x1318; // float32
    public const nint tick_rate = 0x131C; // float32
    public const nint base_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_Hurricane {
    public const nint m_FX = 0x1318; // ParticleIndex_t
    public const nint distance = 0x131C; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_ToughnessAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_ToughnessAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Ethereal_Blade_Ethereal {
    public const nint ethereal_damage_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Eul_Cyclone {
    public const nint m_hBlocker = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_bBlockerCreated = 0x1324; // bool
}

public static class CDOTA_Modifier_FacelessVoid_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_FacelessVoid_Backtrack {
    public const nint dodge_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere_SelfBuff {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere_Speed {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_TimeDilation_Distortion {
    public const nint slow_distance_min = 0x1318; // float32
    public const nint slow_distance_max = 0x131C; // float32
}

public static class CDOTA_Modifier_FacelessVoid_TimeDilation_Slow {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAffectedAbilities = 0x131C; // int32
    public const nint m_flLastDamageTime = 0x1320; // GameTime_t
    public const nint slow = 0x1324; // int32
    public const nint cooldown_percentage = 0x1328; // int32
    public const nint damage_per_stack = 0x132C; // int32
    public const nint base_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_FacelessVoid_TimeLock {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint delay = 0x1320; // float32
    public const nint chance_pct = 0x1324; // int32
    public const nint bonus_damage = 0x1328; // int32
    public const nint last_attack_time = 0x132C; // GameTime_t
    public const nint m_ProcAttackRecords = 0x1330; // CUtlVector< int16 >
    public const nint apply_activity_modifier_until = 0x1348; // GameTime_t
    public const nint disable_activity_modifier_until = 0x134C; // GameTime_t
    public const nint m_mapTargets = 0x1350; // CUtlOrderedMap< CHandle< C_DOTA_BaseNPC >, int32, F( size=1 ) >
}

public static class CDOTA_Modifier_FacelessVoid_TimeLock_ForceProc {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
    public const nint delay = 0x1324; // float32
    public const nint m_hTarget = 0x1328; // CHandle< C_DOTA_BaseNPC >
}

public static class CDOTA_Modifier_FacelessVoid_TimeWalk_ShardBuff {
    public const nint m_vStartLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_FacelessVoid_TimeWalk_Slow {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_FelBeast_Haunt {
    public const nint damage_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_FelBeast_Haunt_OnDeath {
    public const nint projectile_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_FillerThinker {
    public const nint hCasterList = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint bStarted = 0x1330; // bool
    public const nint nCount = 0x1334; // int32
}

public static class CDOTA_Modifier_Filler_Heal {
    public const nint hp_heal = 0x1318; // int32
    public const nint mp_heal = 0x131C; // int32
    public const nint hp_heal_growth = 0x1320; // int32
    public const nint mp_heal_growth = 0x1324; // float32
    public const nint hp_heal_pct = 0x1328; // int32
    public const nint mp_heal_pct = 0x132C; // int32
    public const nint tota_hp_per_second = 0x1330; // int32
    public const nint tota_mp_per_second = 0x1334; // int32
}

public static class CDOTA_Modifier_Filler_Heal_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Filler_LastDitch {
    public const nint melee_number = 0x1318; // float32
    public const nint ranged_number = 0x131C; // float32
    public const nint siege_number = 0x1320; // float32
    public const nint lane = 0x1324; // int32
}

public static class CDOTA_Modifier_Firecracker_Debuff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Firework_Mine {
    public const nint damage_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_FixedNumberOfHitsToKill {
    public const nint creep_attack_divisor = 0x1318; // int32
    public const nint attack_count = 0x131C; // int32
}

public static class CDOTA_Modifier_Flagbearer_Creep_Aura_Effect {
    public const nint bonus_health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_FlaskHealing {
    public const nint health_regen = 0x1318; // int32
    public const nint break_on_hero_damage = 0x131C; // int32
    public const nint m_fHealingDone = 0x1320; // float32
}

public static class CDOTA_Modifier_ForceStaff {
    public const nint push_length = 0x1318; // float32
}

public static class CDOTA_Modifier_Force_Boots {
    public const nint push_length = 0x1318; // int32
    public const nint push_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAmp {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAmp_Bonus {
    public const nint heal_amp = 0x1318; // float32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAutocast {
    public const nint health = 0x1318; // int32
    public const nint m_hHealTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_ForestTrollHighPriest_ManaAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_ManaAura_Bonus {
    public const nint mana_regen = 0x1318; // float32
    public const nint allow_multiple = 0x131C; // int32
    public const nint m_nAttributes = 0x1320; // int32
}

public static class CDOTA_Modifier_ForgedSpirit_MeltingStrike {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_ForgedSpirit_Stats {
    public const nint level = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint mana = 0x1320; // int32
    public const nint attack_range = 0x1324; // float32
    public const nint armor_per_attack = 0x1328; // float32
}

public static class CDOTA_Modifier_FountainInvulnerabilityBuff {
    public const nint m_vecPosition = 0x1318; // Vector
}

public static class CDOTA_Modifier_FountainPassive {
    public const nint bonus_chance = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_FrostbittenGolem_TimeWarpAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FrostbittenGolem_TimeWarpAura_Bonus {
    public const nint bonus_cdr = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return {
    public const nint return_damage = 0x1318; // int32
    public const nint strength_gain_duration = 0x131C; // float32
    public const nint max_stacks = 0x1320; // int32
    public const nint ally_factor = 0x1324; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede {
    public const nint radius = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint m_hEntitiesAffected = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Bonus_Armor {
    public const nint bonus_base_armor_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army {
    public const nint attack_rate = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_vFacePosition = 0x131C; // Vector
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_SearingArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1330; // bool
    public const nint damage_bonus = 0x1334; // int32
    public const nint attack_spill_width = 0x1338; // int32
    public const nint attack_spill_range = 0x133C; // int32
    public const nint spill_damage_multiplier = 0x1340; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Strafe {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint attack_spill_width = 0x131C; // int32
    public const nint attack_spill_range = 0x1320; // int32
    public const nint spill_damage_multiplier = 0x1324; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk {
    public const nint m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bFreePathing = 0x1340; // bool
    public const nint move_speed_bonus_pct = 0x1344; // int32
    public const nint radius = 0x1348; // int32
    public const nint attack_steal_amount = 0x134C; // int32
    public const nint attack_steal_duration = 0x1350; // float32
    public const nint max_stacks = 0x1354; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_AttackDebuff {
    public const nint attack_steal_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_BonusDamage {
    public const nint bonus_base_dmg_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_radius = 0x1324; // int32
    public const nint attack_radius = 0x1328; // int32
    public const nint roaming_seconds_per_rotation = 0x132C; // float32
    public const nint attack_interval = 0x1330; // float32
    public const nint attack_targets = 0x1334; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Creation_Thinker {
    public const nint latch_creation_interval = 0x1318; // float32
    public const nint initial_creation_delay = 0x131C; // float32
    public const nint placement_count = 0x1320; // int32
    public const nint placement_duration = 0x1324; // float32
    public const nint m_iBramblesIndex = 0x1328; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Thinker {
    public const nint latch_count = 0x1318; // int32
    public const nint latch_range = 0x131C; // int32
    public const nint latch_vision = 0x1320; // int32
    public const nint latch_creation_delay = 0x1324; // float32
    public const nint latch_duration = 0x1328; // float32
    public const nint m_bActive = 0x1334; // bool
    public const nint m_nLatchedEnemies = 0x1338; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Buff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint damage = 0x131C; // float32
    public const nint max_damage_duration = 0x1320; // float32
    public const nint slow_radius = 0x1324; // float32
    public const nint burn_duration = 0x1328; // float32
    public const nint burn_damage = 0x132C; // float32
    public const nint slow_attack_speed_pct = 0x1330; // float32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Burn_Slow {
    public const nint burn_damage = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Decorate_Tree_Thinker {
    public const nint num_explosions = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_fExplosions = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Earthshaker_Aftershock {
    public const nint aftershock_range = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint ability_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeLock {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint chance_pct = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint radius = 0x1328; // int32
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker {
    public const nint m_vDamageSources = 0x1318; // CUtlVector< CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker::sDamageSources >
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker_sDamageSources {
    public const nint flTime = 0x0; // GameTime_t
    public const nint flAmount = 0x4; // float32
}

public static class CDOTA_Modifier_Frostivus2018_FestiveFirework_Blind {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Counter {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Debuff {
    public const nint burn_damage = 0x1318; // int32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Self {
    public const nint health_cost = 0x1318; // int32
    public const nint spear_aoe = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Frostivus2018_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint m_flBeamStun = 0x132C; // float32
    public const nint vPosition = 0x1330; // Vector
    public const nint lucent_beam_radius = 0x133C; // int32
    public const nint bAreaTarget = 0x1340; // bool
    public const nint m_iTickCount = 0x1344; // int32
    public const nint m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_HitTargets = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint beam_interval = 0x1368; // float32
    public const nint beam_interval_scepter = 0x136C; // float32
    public const nint m_flInterval = 0x1370; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Magnataur_Skewer_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Repel {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Puck_DreamCoil_Thinker {
    public const nint m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint coil_radius = 0x1330; // int32
    public const nint coil_break_radius = 0x1334; // int32
    public const nint coil_stun_duration = 0x1338; // float32
    public const nint coil_stun_duration_scepter = 0x133C; // float32
    public const nint coil_slow = 0x1340; // float32
    public const nint coil_break_damage = 0x1344; // int32
    public const nint coil_break_damage_scepter = 0x1348; // int32
    public const nint m_bHasScepter = 0x134C; // bool
    public const nint m_FXIndex = 0x1350; // CUtlVector< ParticleIndex_t >
}

public static class CDOTA_Modifier_Frostivus2018_Siege_Fireball_Burn {
    public const nint damage_per_tick = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Siege_Fireball_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Frostivus2018_Snowman_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion_Thinker {
    public const nint m_fDamage = 0x1318; // float32
    public const nint m_fLastRadius = 0x131C; // float32
    public const nint m_fCurRadius = 0x1320; // float32
    public const nint m_fLastThink = 0x1324; // GameTime_t
    public const nint m_bContracting = 0x1328; // bool
    public const nint m_ViewerTimer = 0x1330; // CountdownTimer
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1368; // int32
    public const nint radius = 0x136C; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Summon_Snowman_Thinker {
    public const nint tick_rate = 0x1318; // float32
    public const nint taunt_radius = 0x131C; // int32
    public const nint taunt_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_TrollWarlord_BattleTrance {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint bonus_damage_pct = 0x1324; // int32
    public const nint cleave_damage_pct = 0x1328; // float32
    public const nint cleave_starting_width = 0x132C; // int32
    public const nint cleave_ending_width = 0x1330; // int32
    public const nint cleave_distance = 0x1334; // int32
    public const nint splash_damage_pct = 0x1338; // float32
    public const nint splash_radius = 0x133C; // int32
    public const nint m_hTarget = 0x1340; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Frostivus2018_TrollWarlord_Fervor {
    public const nint attack_speed = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint m_hUnit = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_AirTime {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
    public const nint arrow_count = 0x1358; // int32
    public const nint bonus_range = 0x135C; // int32
}

public static class CDOTA_Modifier_Furbolg_Enrage_AttackSpeed_OnDeath {
    public const nint duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Furbolg_Enrage_Damage_OnDeath {
    public const nint duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Furion_Arboreal_Might_Armor {
    public const nint armor_per_stack = 0x1318; // float32
}

public static class CDOTA_Modifier_Furion_Arboreal_Might_Attack_Damage {
    public const nint damage_per_stack = 0x1318; // float32
    public const nint iMaxStacks = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Furion_CurseOfTheForest {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_tree = 0x131C; // int32
    public const nint slow_per_tree = 0x1320; // int32
    public const nint m_nSlow = 0x1324; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Damage {
    public const nint sprout_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Damage_Aura {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Furion_WrathOfNature_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint max_targets = 0x131C; // int32
    public const nint damage_percent_add = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint m_iFixedDamage = 0x1328; // int32
}

public static class CDOTA_Modifier_Fusion_runeHealing {
    public const nint health_regen = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Gem_Active_TrueSight {
    public const nint active_radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_GhostScepter_Active {
    public const nint extra_spell_damage_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Ghost_FrostAttack {
    public const nint duration = 0x1318; // float32
    public const nint movespeed_slow = 0x131C; // int32
    public const nint attackspeed_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Ghost_FrostAttack_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_GiantWolf_CriticalStrike {
    public const nint crit_mult = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_GiantWolf_Intimidate {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Gladiator_Helm_Buff {
    public const nint damage = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_GlimmerCape_Fade {
    public const nint active_movement_speed = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint barrier_amount = 0x1320; // int32
    public const nint initial_fade_delay = 0x1324; // float32
    public const nint secondary_fade_delay = 0x1328; // float32
    public const nint m_flFadeTime = 0x132C; // float32
    public const nint m_flCurentFadeDelay = 0x1330; // float32
    public const nint m_flLastActionTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_GnollAssassin_EnvenomedWeapon {
    public const nint damage_per_second = 0x1318; // int32
    public const nint non_hero_duration = 0x131C; // float32
    public const nint hero_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_GnollAssassin_EnvenomedWeapon_Poison {
    public const nint damage_per_second = 0x1318; // int32
    public const nint regen_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Gold_Bag_Launch {
    public const nint gold_amount = 0x1348; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Agi {
    public const nint agi_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Int {
    public const nint int_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Str {
    public const nint str_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_GraniteGolem_HPAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_GraniteGolem_HPAura_Bonus {
    public const nint bonus_hp = 0x1318; // float32
}

public static class CDOTA_Modifier_GreaterClarity {
    public const nint total_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Black_Nightmare {
    public const nint animation_rate = 0x1318; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_ColdFeet {
    public const nint m_vecStartPosition = 0x1318; // Vector
    public const nint m_nCurrentTick = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint break_distance = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortex {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint spell_resist_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortexThinker {
    public const nint radius = 0x1318; // int32
    public const nint movement_speed_pct = 0x131C; // int32
    public const nint spell_resist_pct = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hChilledEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Greevil_Miniboss_Casting {
    public const nint cast_animation = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Green_LivingArmor {
    public const nint health_regen = 0x1318; // int32
    public const nint damage_block = 0x131C; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Orange_LightStrikeArray_Thinker {
    public const nint m_iDamage = 0x1318; // int32
    public const nint m_flStunDuration = 0x131C; // float32
    public const nint light_strike_array_aoe = 0x1320; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Purple_VenomousGale {
    public const nint movement_slow = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Red_Earthshock {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Red_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Sight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Yellow_IonShell {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
}

public static class CDOTA_Modifier_Grimstroke_DarkArtistry_Slow {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAmbientFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nAttackCount = 0x1320; // int32
    public const nint m_bIsLatched = 0x1324; // bool
    public const nint m_hAttachTarget = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_EnemyVision = 0x1330; // CountdownTimer
    public const nint latch_duration = 0x1348; // float32
    public const nint speed = 0x134C; // float32
    public const nint destroy_attacks = 0x1350; // int32
    public const nint hero_attack_multiplier = 0x1354; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Debuff {
    public const nint m_flCurrentArmorReduction = 0x1318; // float32
    public const nint m_hLatchedCreature = 0x131C; // CHandle< C_BaseEntity >
    public const nint tick_interval = 0x1320; // float32
    public const nint damage_per_second = 0x1324; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Latched {
    public const nint m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_fZOffset = 0x131C; // float32
    public const nint m_bRemovedByEnemy = 0x1320; // bool
    public const nint latch_duration = 0x1324; // float32
    public const nint pop_damage = 0x1328; // int32
    public const nint latched_unit_offset = 0x132C; // int32
    public const nint latched_unit_offset_short = 0x1330; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Spawning {
    public const nint m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Grimstroke_Scepter_Buff {
    public const nint images_movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Grimstroke_Shard_Buff {
    public const nint total_damage = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint move_speed = 0x1320; // int32
    public const nint m_flInterval = 0x1324; // float32
}

public static class CDOTA_Modifier_Grimstroke_SoulChain {
    public const nint m_hPartner = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bIsPrimary = 0x131C; // bool
    public const nint m_bEscaped = 0x131D; // bool
    public const nint m_bTethered = 0x131E; // bool
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_nFXIndexA = 0x1324; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1328; // ParticleIndex_t
    public const nint m_bStartedLeashSound = 0x132C; // bool
    public const nint m_fLeashDistance = 0x1330; // float32
    public const nint m_fOriginalStartTime = 0x1334; // GameTime_t
    public const nint m_nOverheadFXIndex = 0x1338; // ParticleIndex_t
    public const nint chain_latch_radius = 0x133C; // int32
    public const nint chain_break_distance = 0x1340; // int32
    public const nint leash_limit_multiplier = 0x1344; // float32
    public const nint chain_duration = 0x1348; // float32
    public const nint creep_duration_pct = 0x134C; // float32
    public const nint bonus_reflected_spell_damage = 0x1350; // int32
}

public static class CDOTA_Modifier_Grimstroke_SoulChain_ChannelCheck {
    public const nint m_hAbility = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_hAbilities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vLocation = 0x1338; // Vector
    public const nint m_fChannelEnd = 0x1344; // GameTime_t
    public const nint m_bInterrupt = 0x1348; // bool
    public const nint m_bExpired = 0x1349; // bool
}

public static class CDOTA_Modifier_Grimstroke_SpiritWalk_Buff {
    public const nint m_fStartTime = 0x1318; // GameTime_t
    public const nint m_nHeroTickDamageApplied = 0x131C; // int32
    public const nint m_fLastEffectsTime = 0x1320; // GameTime_t
    public const nint radius = 0x1324; // int32
    public const nint buff_duration = 0x1328; // float32
    public const nint debuff_duration = 0x132C; // float32
    public const nint max_damage = 0x1330; // int32
    public const nint max_stun = 0x1334; // float32
    public const nint movespeed_bonus_pct = 0x1338; // int32
    public const nint damage_per_tick = 0x133C; // int32
    public const nint tick_rate = 0x1340; // float32
    public const nint max_threshold_duration = 0x1344; // float32
    public const nint shard_bonus_damage_pct = 0x1348; // int32
    public const nint shard_heal_pct = 0x134C; // int32
    public const nint shard_creep_penalty = 0x1350; // float32
    public const nint m_bIsReflection = 0x1354; // bool
}

public static class CDOTA_Modifier_GungirChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Gyrocopter_Call_Down {
    public const nint slow_duration = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint slow = 0x1324; // int32
    public const nint m_bDelayed = 0x1328; // bool
}

public static class CDOTA_Modifier_Gyrocopter_Call_Down_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Flak_Cannon {
    public const nint max_attacks = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint bonus_night_vision = 0x1328; // int32
    public const nint radius = 0x132C; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Flak_Cannon_Scepter {
    public const nint fire_rate = 0x1318; // float32
    public const nint scepter_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Homing_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint hero_damage = 0x1320; // int32
    public const nint acceleration = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_distance = 0x132C; // int32
    public const nint shard_radius = 0x1330; // int32
    public const nint shard_delay = 0x1334; // float32
    public const nint pre_flight_time = 0x1338; // float32
    public const nint stun_duration = 0x133C; // float32
    public const nint m_nMissileDamage = 0x1340; // int32
    public const nint m_nTeamNumber = 0x1344; // int32
    public const nint speed = 0x1350; // float32
    public const nint m_hAttachTarget = 0x1354; // CHandle< C_BaseEntity >
    public const nint m_vStartPosition = 0x1358; // Vector
    public const nint m_EnemyVision = 0x1368; // CountdownTimer
    public const nint m_MoveTime = 0x1380; // CountdownTimer
}

public static class CDOTA_Modifier_Gyrocopter_Homing_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint shard_radius = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Gyrocopter_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint slow_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_HallOfFame_Glow {
    public const nint m_vecGlowingPlayerIDs = 0x1318; // CUtlVector< PlayerID_t >
    public const nint m_vecGlowingPlayerIDs2 = 0x1330; // CUtlVector< PlayerID_t >
}

public static class CDOTA_Modifier_HarpyScout_TakeOff {
    public const nint move_speed_penalty = 0x1318; // int32
    public const nint cost_per_second = 0x131C; // float32
}

public static class CDOTA_Modifier_HarpyStorm_ChainLightning {
    public const nint jump_range = 0x1318; // int32
    public const nint max_targets = 0x131C; // int32
    public const nint damage_percent_loss = 0x1320; // float32
}

public static class CDOTA_Modifier_Havoc_Hammer_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Healing_Campfire_Heal {
    public const nint heal_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_HeavensHalberd_Debuff {
    public const nint m_bPierceDebuffImmunity = 0x1318; // bool
}

public static class CDOTA_Modifier_HeroStatue {
    public const nint m_unStatusEffectIndex = 0x1318; // uint32
    public const nint m_hPedestal = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Hide_On_Minimap {
    public const nint m_bEnemiesOnly = 0x1318; // bool
}

public static class CDOTA_Modifier_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_HillTroll_Rally {
    public const nint damage_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_HillTroll_RallyAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_HoldoutCullingBlade {
    public const nint leap_distance = 0x1318; // int32
    public const nint leap_radius = 0x131C; // int32
    public const nint leap_speed = 0x1320; // float32
    public const nint leap_acceleration = 0x1324; // float32
}

public static class CDOTA_Modifier_Holdout_GladiatorsUnite {
    public const nint bonus_armor_per_hero = 0x1318; // int32
    public const nint bonus_damage_per_hero = 0x131C; // int32
    public const nint lifesteal_per_hero = 0x1320; // int32
    public const nint scepter_damage_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Holdout_GladiatorsUnite_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Holdout_StaticRemnantThinker {
    public const nint static_remnant_radius = 0x1318; // int32
    public const nint static_remnant_damage_radius = 0x131C; // int32
    public const nint static_remnant_damage = 0x1320; // int32
    public const nint static_remnant_delay = 0x1324; // float32
    public const nint overload_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_ArmorCorruption {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_BonusDamage {
    public const nint acorn_shot_damage = 0x1318; // int32
    public const nint base_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_Bushwhack_Trap {
    public const nint visual_height = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
    public const nint m_iIndex = 0x1320; // ParticleIndex_t
    public const nint m_bPullComplete = 0x1324; // bool
    public const nint m_TreeId = 0x1328; // uint32
    public const nint m_flDamagePerTick = 0x132C; // float32
    public const nint m_nDamageTicks = 0x1330; // int32
}

public static class CDOTA_Modifier_Hoodwink_Caltrops_Debuff {
    public const nint movespeed_pct = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_Camouflage {
    public const nint fade_time = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_bInvisLastThink = 0x1320; // bool
}

public static class CDOTA_Modifier_Hoodwink_Decoy_Illusion {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Hoodwink_Decoy_Invisibility {
    public const nint movement_speed = 0x1328; // int32
    public const nint m_hEntitiesAffected = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Hoodwink_HeavyQuiver {
    public const nint bonus_projectile_speed_pct = 0x1318; // int32
    public const nint bonus_attack_range = 0x131C; // int32
    public const nint deadly_blow_multiplier = 0x1320; // int32
    public const nint maim_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Hoodwink_HuntersQuiver {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint debuff_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Hoodwink_HuntersQuiver_Mark {
    public const nint stack_crit_chance_pct = 0x1318; // int32
    public const nint critical_damage_pct = 0x131C; // int32
    public const nint stack_slow_pct = 0x1320; // int32
    public const nint m_nFXStackIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Hoodwink_Hunters_Mark {
    public const nint slow_pct = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Hoodwink_Scurry_Active {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint attack_range = 0x131C; // int32
    public const nint cast_range = 0x1320; // int32
}

public static class CDOTA_Modifier_Hoodwink_Scurry_Passive {
    public const nint evasion = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint bonus_active_evasion = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_Debuff {
    public const nint slow_move_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_VisionThinker {
    public const nint arrow_width = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_Windup {
    public const nint arrow_vision = 0x1318; // int32
    public const nint max_charge_time = 0x131C; // float32
    public const nint turn_rate = 0x1320; // float32
    public const nint base_power = 0x1324; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Active {
    public const nint push_length = 0x1318; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Active_Alternate {
    public const nint enemy_length = 0x1318; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Range {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint max_attacks = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint bActive = 0x1324; // bool
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Huskar_Berserkers_Blood {
    public const nint maximum_health_regen = 0x1318; // int32
    public const nint maximum_attack_speed = 0x131C; // int32
    public const nint maximum_magic_resist = 0x1320; // int32
    public const nint hp_threshold_max = 0x1324; // int32
    public const nint m_nFxHuskIndex = 0x1328; // ParticleIndex_t
    public const nint m_nFxIndexA = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Counter {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Debuff {
    public const nint burn_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Self {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Huskar_Inner_Fire_Disarm {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Huskar_Inner_Fire_Knockback {
    public const nint knockback_distance = 0x1318; // float32
    public const nint knockback_duration = 0x131C; // float32
    public const nint effective_distance = 0x1320; // float32
}

public static class CDOTA_Modifier_Huskar_Inner_Vitality {
    public const nint heal = 0x1318; // int32
    public const nint attrib_bonus = 0x131C; // float32
    public const nint hurt_attrib_bonus = 0x1320; // float32
    public const nint hurt_percent = 0x1324; // float32
}

public static class CDOTA_Modifier_Huskar_Life_Break {
    public const nint attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Huskar_Life_Break_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_IceShaman_IncendiaryBomb {
    public const nint burn_damage = 0x1318; // int32
    public const nint building_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_IceSlide {
    public const nint m_fLastUpdateTime = 0x1318; // GameTime_t
    public const nint m_vVelocity = 0x131C; // Vector
}

public static class CDOTA_Modifier_Illusion {
    public const nint outgoing_damage = 0x1318; // int32
    public const nint outgoing_damage_structure = 0x131C; // int32
    public const nint outgoing_damage_roshan = 0x1320; // int32
    public const nint incoming_damage = 0x1324; // int32
    public const nint bounty_base = 0x1328; // int32
    public const nint bounty_growth = 0x132C; // int32
    public const nint m_strIllusionType = 0x1330; // CUtlString
    public const nint m_szIllusionLabel = 0x1338; // char[64]
    public const nint m_bHidden = 0x1378; // bool
}

public static class CDOTA_Modifier_InvisibilityEdge_WindWalk {
    public const nint windwalk_bonus_damage = 0x1328; // int32
    public const nint windwalk_movement_speed = 0x132C; // int32
}

public static class CDOTA_Modifier_Invisible {
    public const nint m_bSubtle = 0x1318; // bool
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_flFadeTimeValue = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoke_Bonuses {
    public const nint spell_amp = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
}

public static class CDOTA_Modifier_Invoker_Alacrity {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Invoker_ChaosMeteor_Burn {
    public const nint spell_amp = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
}

public static class CDOTA_Modifier_Invoker_ColdSnap {
    public const nint freeze_damage = 0x1318; // float32
    public const nint freeze_duration = 0x131C; // float32
    public const nint freeze_cooldown = 0x1320; // float32
    public const nint damage_trigger = 0x1324; // float32
    public const nint spell_lifesteal = 0x1328; // float32
    public const nint spell_amp = 0x132C; // float32
    public const nint freeze_heal = 0x1330; // float32
    public const nint nQuasApplications = 0x1334; // int32
    public const nint nExortApplications = 0x1338; // int32
}

public static class CDOTA_Modifier_Invoker_DeafeningBlast_Knockback {
    public const nint disarm_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Invoker_EMP {
    public const nint area_of_effect = 0x1318; // int32
    public const nint mana_burned = 0x131C; // int32
    public const nint damage_per_mana = 0x1320; // float32
    public const nint spell_lifesteal = 0x1324; // float32
    public const nint spell_amp = 0x1328; // float32
    public const nint self_mana_restore_pct = 0x132C; // int32
    public const nint m_hPullThinker = 0x1330; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Invoker_EMP_Pull {
    public const nint shard_drag_speed = 0x1318; // int32
    public const nint aura_origin_x = 0x131C; // float32
    public const nint aura_origin_y = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_vCenter = 0x1328; // Vector
    public const nint m_flLastThinkTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Invoker_EMP_Pull_Thinker {
    public const nint area_of_effect = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_ExortInstance {
    public const nint bonus_damage_per_instance = 0x1318; // int32
    public const nint spell_amp = 0x131C; // float32
}

public static class CDOTA_Modifier_Invoker_GhostWalk_Enemy {
    public const nint enemy_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_GhostWalk_Self {
    public const nint self_slow = 0x1328; // int32
    public const nint area_of_effect = 0x132C; // int32
    public const nint aura_fade_time = 0x1330; // float32
    public const nint health_regen = 0x1334; // float32
    public const nint mana_regen = 0x1338; // float32
    public const nint disable_time = 0x133C; // float32
    public const nint m_timeLastDamage = 0x1340; // GameTime_t
}

public static class CDOTA_Modifier_Invoker_IceWall_SlowAura {
    public const nint radius = 0x1318; // int32
    public const nint slow = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoker_IceWall_SlowDebuff {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_IceWall_Thinker {
    public const nint damage_per_second = 0x1318; // float32
    public const nint num_wall_elements = 0x131C; // int32
    public const nint wall_element_spacing = 0x1320; // int32
    public const nint wall_element_radius = 0x1324; // int32
    public const nint spell_amp = 0x1328; // float32
    public const nint spell_lifesteal = 0x132C; // float32
    public const nint m_vWallDir = 0x1330; // Vector
}

public static class CDOTA_Modifier_Invoker_QuasInstance {
    public const nint spell_lifesteal = 0x1318; // float32
    public const nint health_regen_per_instance = 0x131C; // int32
}

public static class CDOTA_Modifier_Invoker_SunStrike {
    public const nint area_of_effect = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_SunStrike_Cataclysm {
    public const nint area_of_effect = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_SunStrike_Cataclysm_Thinker {
    public const nint damage = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
    public const nint spell_amp = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoker_WexInstance {
    public const nint move_speed_per_instance = 0x1318; // float32
    public const nint cooldown_reduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Invoker_Wex_Cooldown_Reduction {
    public const nint cooldown_reduction = 0x1318; // int32
    public const nint m_nTotalCDR = 0x131C; // int32
}

public static class CDOTA_Modifier_IonShell {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_AbyssalBlade {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bash_chance_melee = 0x131C; // int32
    public const nint bash_chance_ranged = 0x1320; // int32
    public const nint bash_duration = 0x1324; // float32
    public const nint bash_cooldown = 0x1328; // float32
    public const nint bonus_chance_damage = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint bonus_health = 0x1350; // int32
    public const nint bonus_health_regen = 0x1354; // float32
    public const nint block_damage_ranged = 0x1358; // int32
    public const nint block_damage_melee = 0x135C; // int32
    public const nint block_chance = 0x1360; // int32
}

public static class CDOTA_Modifier_Item_Aegis {
    public const nint reincarnate_time = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_AeonDisk {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint health_threshold_pct = 0x1320; // int32
    public const nint buff_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_AeonDisk_Buff {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // float32
    public const nint mana_regen_multiplier = 0x1328; // float32
    public const nint spell_lifesteal_amp = 0x132C; // float32
    public const nint bonus_aoe = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint burn_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_AghsFort_Bloodstone {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint mana_regen_multiplier = 0x1320; // int32
    public const nint regen_per_charge = 0x1324; // float32
    public const nint amp_per_charge = 0x1328; // float32
    public const nint death_charges = 0x132C; // int32
    public const nint kill_charges = 0x1330; // int32
    public const nint hero_lifesteal = 0x1334; // float32
    public const nint creep_lifesteal = 0x1338; // float32
    public const nint bonus_intellect = 0x133C; // int32
    public const nint spell_amp = 0x1340; // int32
    public const nint spell_lifesteal_amp = 0x1344; // int32
}

public static class CDOTA_Modifier_Item_AghsFort_Bloodstone_Active {
    public const nint mana_cost_percentage = 0x1318; // int32
    public const nint restore_duration = 0x131C; // float32
    public const nint m_flDrainAmount = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_AncientGuardian {
    public const nint actual_bonus_damage = 0x1318; // int32
    public const nint extra_bonus_damage = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint radius = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo {
    public const nint radius = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
    public const nint bonus_int = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo_Active {
    public const nint bonus_attack_speed_pct = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo_Aura {
    public const nint aura_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Perseverance {
    public const nint damage = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
    public const nint mana_regen_amp = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Angels_Demise {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_spell_damage = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint bonus_all_stats = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint crit_chance = 0x1334; // int32
    public const nint crit_multiplier = 0x1338; // int32
    public const nint spell_crit_multiplier = 0x133C; // int32
    public const nint spell_crit_flat = 0x1340; // int32
    public const nint vecActivatedAbilities = 0x1348; // CUtlVector< C_DOTABaseAbility* >
}

public static class CDOTA_Modifier_Item_Angels_Demise_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Apex {
    public const nint primary_stat = 0x1318; // int32
    public const nint primary_stat_universal = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Blink {
    public const nint blink_damage_cooldown = 0x1318; // float32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Blink_Buff {
    public const nint cast_pct_improvement = 0x1318; // int32
    public const nint manacost_reduction = 0x131C; // int32
    public const nint debuff_amp = 0x1320; // int32
    public const nint cast_range_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Boots {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
    public const nint mana_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Arcane_Ring {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_intelligence = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Scout {
    public const nint vision_bonus = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Scout_Invulnerability {
    public const nint scout_movespeed = 0x1318; // int32
    public const nint sight_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Armlet {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_AsceticCap {
    public const nint bonus_health = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_AsceticCapBuff {
    public const nint status_resistance = 0x1318; // int32
    public const nint slow_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_AssassinsDagger {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint debuff_duration = 0x1330; // int32
    public const nint bonus_attack_speed = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass_Negative_Armor {
    public const nint aura_negative_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass_Positive {
    public const nint aura_attack_speed = 0x1318; // int32
    public const nint aura_positive_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ballista {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint knockback_distance = 0x131C; // float32
    public const nint knockback_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Barricade {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Barricade_Thinker {
    public const nint length = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint max_hits = 0x1320; // int32
    public const nint m_iCurrentHits = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Battlefury {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint cleave_damage_percent = 0x1324; // int32
    public const nint cleave_damage_percent_creep = 0x1328; // int32
    public const nint cleave_starting_width = 0x132C; // int32
    public const nint cleave_ending_width = 0x1330; // int32
    public const nint cleave_distance = 0x1334; // int32
    public const nint upgraded_cleave_bonus = 0x1338; // int32
    public const nint upgraded_damage_bonus = 0x133C; // int32
    public const nint quelling_bonus = 0x1340; // int32
    public const nint quelling_bonus_ranged = 0x1344; // int32
}

public static class CDOTA_Modifier_Item_BeltOfStrength {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Black_King_Bar {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_BladeOfAlacrity {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blade_Mail {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint passive_reflection_constant = 0x1324; // int32
    public const nint passive_reflection_pct = 0x1328; // int32
    public const nint active_reflection_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_BladesOfAttack {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blight_Stone {
    public const nint corruption_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_BlightedSpirit_Blight {
    public const nint damage_per_second = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_BlinkDagger {
    public const nint blink_damage_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Blood_Grenade {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blood_Grenade_Debuff {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint damage_over_time = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Blood_Grenade_Flight_Thinker {
    public const nint speed = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_over_time = 0x1320; // int32
    public const nint impact_damage = 0x1324; // int32
    public const nint debuff_duration = 0x1328; // float32
    public const nint movespeed_slow = 0x132C; // int32
    public const nint tick_rate = 0x1330; // float32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Bloodstone {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_aoe = 0x1320; // int32
    public const nint spell_lifesteal = 0x1324; // float32
    public const nint lifesteal_multiplier = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Bloodthorn {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint bonus_intellect = 0x1330; // int32
    public const nint bonus_mana_regen = 0x1334; // float32
    public const nint bonus_damage = 0x1338; // int32
    public const nint bonus_attack_speed = 0x133C; // int32
    public const nint spell_amp = 0x1340; // int32
    public const nint mana_regen_multiplier = 0x1344; // int32
    public const nint bonus_magic_resist = 0x1348; // int32
    public const nint duration = 0x134C; // float32
    public const nint proc_damage = 0x1350; // int32
    public const nint proc_chance = 0x1354; // int32
    public const nint bonus_health_regen = 0x1358; // float32
}

public static class CDOTA_Modifier_Item_Book_Of_Shadows {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Book_Of_Shadows_Buff {
    public const nint m_bUntargetableAllies = 0x1318; // bool
    public const nint m_bUntargetableEnemies = 0x1319; // bool
}

public static class CDOTA_Modifier_Item_BootsOfElven {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_BootsOfSpeed {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_BootsOfTravel {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // int32
    public const nint bonus_str = 0x1324; // int32
    public const nint bonus_int = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing_Active {
    public const nint bonus_attack_speed_pct = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
    public const nint bonus_ms_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing_Aura {
    public const nint aura_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Bottomless_Chalice {
    public const nint max_charges_per_kill = 0x1318; // int32
    public const nint recharge_time = 0x131C; // float32
    public const nint m_bFull = 0x1320; // bool
    public const nint bonus_intellect = 0x1324; // int32
    public const nint movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Bottomless_Chalice_Regen {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Bracer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint clock_time = 0x1324; // int32
    public const nint bonus_health_regen = 0x1328; // float32
    public const nint bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Broadsword {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Broom_Handle {
    public const nint melee_attack_range = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Buckler {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bonus_aoe_radius = 0x131C; // int32
    public const nint armor = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Buckler_Effect {
    public const nint bonus_aoe_armor = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Bullwhip {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Bullwhip_Buff {
    public const nint speed = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Bullwhip_Buff_Thinker {
    public const nint speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Butterfly {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_evasion = 0x1320; // int32
    public const nint bonus_attack_speed_pct = 0x1324; // int32
    public const nint bonus_slow_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Butterfly_Extra {
    public const nint bonus_move_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Caster_Rapier {
    public const nint cast_range_limit = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint backstab_duration = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Ceremonial_Robe {
    public const nint bonus_mana = 0x1318; // int32
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_ChainMail {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Chipped_Vest {
    public const nint hp_regen = 0x1318; // float32
    public const nint damage_return_hero = 0x131C; // int32
    public const nint damage_return_creep = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Circlet {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Claymore {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Cloak_Of_Flames {
    public const nint armor = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Clumsy_Net {
    public const nint all_stats = 0x1318; // int32
    public const nint mana_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Cornucopia {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Craggy_Coat {
    public const nint armor_bonus = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Craggy_Coat_Tanky {
    public const nint active_armor = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_CraniumBasher {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bash_chance_melee = 0x131C; // int32
    public const nint bash_chance_ranged = 0x1320; // int32
    public const nint bash_duration = 0x1324; // float32
    public const nint bash_cooldown = 0x1328; // float32
    public const nint bonus_chance_damage = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Crimson_Guard {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // float32
    public const nint block_damage_ranged = 0x1324; // int32
    public const nint block_damage_melee = 0x1328; // int32
    public const nint block_chance = 0x132C; // int32
    public const nint bonus_aoe_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Crimson_Guard_Extra {
    public const nint block_chance_active = 0x1318; // int32
    public const nint block_damage_active = 0x131C; // int32
    public const nint strength_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Crown {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Cyclone {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_DaggerOfRistul {
    public const nint aspd = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Dagon {
    public const nint bonus_int = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
    public const nint bonus_agi = 0x1320; // int32
    public const nint passive_spell_lifesteal = 0x1324; // float32
    public const nint dagon_spell_lifesteal = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_DemonEdge {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Demonicon {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Desolator {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_per_kill = 0x131C; // int32
    public const nint bonus_damage_per_assist = 0x1320; // int32
    public const nint max_damage = 0x1324; // int32
    public const nint corruption_duration = 0x1328; // float32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Desolator_2 {
    public const nint bonus_damage = 0x1318; // int32
    public const nint corruption_duration = 0x131C; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Devastator {
    public const nint bonus_armor = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint mana_cost = 0x1328; // int32
    public const nint slow_duration = 0x132C; // int32
    public const nint spell_amp_duration = 0x1330; // int32
    public const nint damage_penalty = 0x1334; // int32
    public const nint passive_cooldown = 0x1338; // int32
    public const nint m_InFlightWitchBladeAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Diadem {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Diffusal_Blade {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint damage_per_burn = 0x1320; // float32
    public const nint feedback_mana_burn = 0x1324; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1328; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Diffusal_Blade_Slow {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint damage_per_burn = 0x132C; // float32
    public const nint feedback_mana_burn = 0x1330; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1334; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x1338; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Attack_Debuff {
    public const nint attack_speed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Evasion_Buff {
    public const nint purge_bonus_miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Movespeed_Buff {
    public const nint movement_speed_buff_rate = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_DivineRapier {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Doubloon {
    public const nint conversion_pct = 0x1318; // float32
    public const nint bonus_health_regen = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_DragonLance {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint base_attack_range = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Dragon_Scale {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_DuelistGloves {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint radius = 0x1320; // float32
    public const nint actual_attack_speed = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_DustofAppearance {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_DustofAppearance_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint duration = 0x131C; // float32
    public const nint linger_duration = 0x1320; // float32
    public const nint movespeed = 0x1324; // int32
    public const nint damage = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Dynamite_Jacket {
    public const nint bonus_armor = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint blind_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_EagleEye {
    public const nint radius = 0x1318; // int32
    public const nint bonus_agi = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_EagleHorn {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_EchoSabre {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_strength = 0x1328; // int32
    public const nint slow_duration = 0x132C; // float32
    public const nint bonus_speed = 0x1330; // bool
}

public static class CDOTA_Modifier_Item_Elven_Tunic {
    public const nint attack_speed = 0x1318; // int32
    public const nint evasion = 0x131C; // int32
    public const nint movment = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Enchanted_Mango {
    public const nint hp_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Enchanted_Quiver {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint active_bonus_attack_range = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_EnergyBooster {
    public const nint bonus_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Essence_Ring {
    public const nint bonus_int = 0x1318; // int32
    public const nint mp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Essence_Ring_Active {
    public const nint health_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud {
    public const nint bonus_spell_resist = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health = 0x1324; // float32
    public const nint mana_restore_pct = 0x1328; // int32
    public const nint stack_threshold = 0x132C; // float32
    public const nint stack_resist = 0x1330; // float32
    public const nint stack_duration = 0x1334; // float32
    public const nint max_stacks = 0x1338; // int32
    public const nint m_flCumulativeDamage = 0x133C; // float32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud_Barrier {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud_Bonus_Magic_Resist {
    public const nint max_stacks = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ethereal_Blade {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint bonus_cast_range = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Ethereal_Blade_Slow {
    public const nint blast_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ex_Machina {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_EyeOfTheVizier {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint mana_reduction_pct = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Faded_Broach {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Faerie_Fire {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Falcon_Blade {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_per_kill = 0x131C; // int32
    public const nint bonus_damage_per_assist = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint max_damage = 0x1328; // int32
    public const nint bonus_mana_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // float32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint blink_damage_cooldown = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Flicker {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Fluffy_Hat {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ForceStaff {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Force_Boots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Force_Field {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bonus_aoe_radius = 0x131C; // int32
    public const nint self_armor = 0x1320; // int32
    public const nint self_mres = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Force_Field_Bonus_Aura {
    public const nint bonus_aoe_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Force_Field_Effect {
    public const nint bonus_aoe_armor = 0x1318; // float32
    public const nint bonus_aoe_ms = 0x131C; // float32
    public const nint bonus_aoe_mres = 0x1320; // float32
    public const nint self_mres = 0x1324; // float32
    public const nint self_armor = 0x1328; // float32
    public const nint active_reflection_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Fortitude_Ring {
    public const nint bonus_health = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Fortitude_Ring_Active {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gauntlets {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GemOfTrueSight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GhostScepter {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Giants_Ring {
    public const nint bonus_strength = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint model_scale = 0x1320; // int32
    public const nint damage_radius = 0x1324; // int32
    public const nint pct_str_damage_per_second = 0x1328; // int32
    public const nint tick_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_GlimmerCape {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gloves_Of_Travel {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gossamer_Cape {
    public const nint movement_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Grandmasters_Glaive {
    public const nint sange_bonus_strength = 0x1318; // int32
    public const nint sange_status_resistance = 0x131C; // int32
    public const nint sange_hp_regen_amp = 0x1320; // int32
    public const nint kaya_bonus_intellect = 0x1324; // int32
    public const nint kaya_spell_amp = 0x1328; // int32
    public const nint kaya_mana_regen_multiplier = 0x132C; // int32
    public const nint kaya_magic_damage_attack = 0x1330; // int32
    public const nint yasha_bonus_agility = 0x1334; // int32
    public const nint yasha_bonus_attack_speed = 0x1338; // int32
    public const nint yasha_movement_speed_percent_bonus = 0x133C; // int32
    public const nint m_iCurrentStance = 0x1340; // int32
    public const nint bonus_strength = 0x1344; // int32
    public const nint bash_chance_melee = 0x1348; // int32
    public const nint bash_chance_ranged = 0x134C; // int32
    public const nint bash_duration = 0x1350; // float32
    public const nint bash_cooldown = 0x1354; // float32
    public const nint bonus_chance_damage = 0x1358; // int32
    public const nint bonus_damage = 0x135C; // int32
    public const nint m_InFlightAttackRecords = 0x1360; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_GreaterCritical {
    public const nint bonus_damage = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Greater_Faerie_Fire {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Grove_Bow {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint attack_speed_bonus = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Grove_Bow_Debuff {
    public const nint magic_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GuardianShell_Active {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Guardian_Greaves {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mres = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint aura_radius = 0x1328; // int32
    public const nint mana_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Guardian_Greaves_Aura {
    public const nint aura_health_regen = 0x1318; // float32
    public const nint aura_armor = 0x131C; // float32
    public const nint aura_health_regen_bonus = 0x1320; // float32
    public const nint aura_armor_bonus = 0x1324; // float32
    public const nint aura_mana_regen = 0x1328; // float32
    public const nint aura_mana_regen_bonus = 0x132C; // float32
    public const nint aura_bonus_threshold = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Guardian_Shell {
    public const nint all_stats = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint counter_cooldown = 0x1320; // float32
    public const nint m_flLastCounterTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_Item_Gungir {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_strength = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
    public const nint bonus_intellect = 0x1328; // int32
    public const nint bonus_hp = 0x132C; // int32
    public const nint chain_chance = 0x1330; // int32
    public const nint chain_strikes = 0x1334; // int32
    public const nint chain_damage = 0x1338; // int32
    public const nint chain_radius = 0x133C; // int32
    public const nint chain_cooldown = 0x1340; // float32
    public const nint m_InFlightAttackRecords = 0x1348; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1360; // CountdownTimer
}

public static class CDOTA_Modifier_Item_HandOfMidas {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint charge_gain_timer = 0x131C; // float32
    public const nint max_charges = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Harpoon {
    public const nint bonus_chance = 0x1318; // int32
    public const nint bonus_chance_damage = 0x131C; // int32
    public const nint bonus_strength = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
    public const nint bonus_intellect = 0x1328; // int32
    public const nint bonus_mana_regen = 0x132C; // float32
    public const nint bonus_damage = 0x1330; // int32
    public const nint bonus_speed = 0x1334; // int32
    public const nint m_InFlightProcAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Harpoon_EchoSabre_Component {
    public const nint slow_duration = 0x1318; // float32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_speed = 0x1320; // bool
    public const nint passive_cooldown = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Harpoon_Pull {
    public const nint m_flDistance = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Harpoon_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Havoc_Hammer {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Headdress {
    public const nint health_regen = 0x1318; // float32
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Headdress_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Heart {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint health_regen_pct = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_HeavensHalberd {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint bonus_evasion = 0x1320; // int32
    public const nint status_resistance = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Heavy_Blade {
    public const nint damage = 0x1318; // float32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_HelmOfIronWill {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_HelmOfTheDominator {
    public const nint bonus_stats = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_HelmOfTheDominator_BonusHealth {
    public const nint health_min = 0x1318; // int32
    public const nint new_max = 0x131C; // int32
    public const nint health_bonus = 0x1320; // int32
    public const nint model_scale = 0x1324; // int32
    public const nint creep_bonus_damage = 0x1328; // int32
    public const nint creep_bonus_hp_regen = 0x132C; // int32
    public const nint creep_bonus_mp_regen = 0x1330; // int32
    public const nint creep_bonus_armor = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Helm_Of_The_Undying {
    public const nint bonus_armor = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Helm_Of_The_Undying_Active {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bPassive = 0x131C; // bool
}

public static class CDOTA_Modifier_Item_Hermes_Sandals {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_melee = 0x131C; // int32
    public const nint bonus_damage_range = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint bonus_agility = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hermes_Sandals_Active {
    public const nint phase_movement_speed = 0x1318; // int32
    public const nint phase_movement_speed_range = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_bWasRooted = 0x1324; // bool
}

public static class CDOTA_Modifier_Item_Holy_Locket {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_mana = 0x1320; // int32
    public const nint heal_increase = 0x1324; // int32
    public const nint charge_radius = 0x1328; // int32
    public const nint max_charges = 0x132C; // int32
    public const nint bonus_all_stats = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Holy_Locket_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Hood_Of_Defiance {
    public const nint bonus_spell_resist = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Hood_Of_Defiance_Barrier {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_HorizonsEquilibrium {
    public const nint distance = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint attack_lifesteal = 0x1320; // int32
    public const nint spell_lifesteal = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hurricane_Pike {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_agility = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint base_attack_range = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hyperstone {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_IcarusWings {
    public const nint move_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_IcarusWingsBuff {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_IcarusWingsDebuff {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Illusionists_Cape_Aura {
    public const nint attack_damage_aura = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Illusionsts_Cape {
    public const nint bonus_agi = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Imp_Claw {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Infused_Raindrop {
    public const nint mana_regen = 0x1318; // float32
    public const nint bonus_armor = 0x131C; // float32
    public const nint bonus_magical_armor = 0x1320; // int32
    public const nint magic_damage_block = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_InvisibilityEdge {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Iron_Talon {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_IronwoodBranch {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ironwood_tree {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Javelin {
    public const nint bonus_chance = 0x1318; // int32
    public const nint bonus_chance_damage = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Kaya {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint mana_regen_multiplier = 0x1320; // int32
    public const nint spell_lifesteal_amp = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Kaya_And_Sange {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // int32
    public const nint mana_regen_multiplier = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
    public const nint spell_lifesteal_amp = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_LanceOfPursuit {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint backstab_damage = 0x1320; // int32
    public const nint backstab_angle = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint m_bBackstab = 0x132C; // bool
}

public static class CDOTA_Modifier_Item_Lance_of_Pursuit_Slow {
    public const nint slow_pct_melee = 0x1318; // int32
    public const nint slow_pct_ranged = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_LesserCritical {
    public const nint bonus_damage = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_LightRobes {
    public const nint health_penalty = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Lotus_Orb {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint block_cooldown = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Lotus_Orb_Active {
    public const nint m_LastParams = 0x1318; // CModifierParams
}

public static class CDOTA_Modifier_Item_Lotus_Orb_ChannelCheck {
    public const nint m_hAbility = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_vLocation = 0x1320; // Vector
    public const nint m_fChannelEnd = 0x132C; // GameTime_t
    public const nint m_bInterrupt = 0x1330; // bool
    public const nint m_bExpired = 0x1331; // bool
}

public static class CDOTA_Modifier_Item_Lunar_Crest {
    public const nint bonus_health = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint bonus_spell_resist = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Lunar_Crest_Barrier_Addition {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Lunar_Crest_Barrier_Reduction {
    public const nint barrier_block = 0x1318; // int32
    public const nint m_flDamageTotal = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Maelstrom {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint chain_chance = 0x1320; // int32
    public const nint chain_strikes = 0x1324; // int32
    public const nint chain_damage = 0x1328; // int32
    public const nint chain_radius = 0x132C; // int32
    public const nint chain_cooldown = 0x1330; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1350; // CountdownTimer
}

public static class CDOTA_Modifier_Item_Mage_Slayer {
    public const nint bonus_magical_armor = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint bonus_intellect = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Mage_Slayer_Debuff {
    public const nint spell_amp_debuff = 0x1318; // int32
    public const nint dps = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MagicStick {
    public const nint charge_radius = 0x1318; // int32
    public const nint max_charges = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MagicWand {
    public const nint charge_radius = 0x1318; // int32
    public const nint max_charges = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Magus_Minimus {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint damage_per_burn = 0x1320; // float32
    public const nint feedback_mana_burn = 0x1324; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1328; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x132C; // int32
    public const nint aura_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Magus_Minimus_Aura_Slow {
    public const nint max_slow_pct = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Magus_Minimus_Inhibit {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ManaclesOfPower {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ManaclesOfPower_Effect {
    public const nint m_hPartner = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint leash_distance = 0x1320; // float32
    public const nint leash_limit_multiplier = 0x1324; // float32
    public const nint m_hAnchor = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Item_Mango_Tree {
    public const nint m_hTree = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_Timer = 0x1320; // CountdownTimer
    public const nint seconds = 0x1338; // float32
}

public static class CDOTA_Modifier_Item_MantaStyle {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint bonus_agility = 0x1320; // int32
    public const nint bonus_intellect = 0x1324; // int32
    public const nint bonus_movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Mantle {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MartyrsPlate {
    public const nint duration = 0x1318; // float32
    public const nint magic_resist = 0x131C; // int32
    public const nint hp_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_MartyrsPlate_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MartyrsPlate_Effect {
    public const nint damage_redirection = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MaskOfDeath {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MaskOfDispair {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
    public const nint spell_lifesteal = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_MaskOfMadness {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Mechanical_Arm {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bat = 0x131C; // float32
    public const nint stun_duration = 0x1320; // float32
    public const nint stun_chance = 0x1324; // int32
    public const nint m_nAttack = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana_regen_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Addition {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Reduction {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mekansm {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Mekansm_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_MeteorHammer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // float32
    public const nint mana_regen_multiplier = 0x1328; // float32
    public const nint spell_lifesteal_amp = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_MeteorHammer_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint burn_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_MeteorHammer_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Mind_Breaker {
    public const nint magic_damage = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Minotaur_Horn {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mirror_Shield {
    public const nint m_LastParams = 0x1318; // CModifierParams
    public const nint all_stats = 0x14F8; // int32
    public const nint reflect_chance = 0x14FC; // int32
    public const nint m_bProcSuccessful = 0x1500; // bool
}

public static class CDOTA_Modifier_Item_Misericorde {
    public const nint bonus_damage = 0x1318; // int32
    public const nint missing_hp = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint aspd = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_MithrilHammer {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mjollnir {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint chain_chance = 0x1320; // int32
    public const nint chain_strikes = 0x1324; // int32
    public const nint chain_damage = 0x1328; // int32
    public const nint chain_radius = 0x132C; // int32
    public const nint chain_damage_per_charge = 0x1330; // int32
    public const nint max_charges = 0x1334; // int32
    public const nint chain_cooldown = 0x1338; // float32
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1358; // CountdownTimer
}

public static class CDOTA_Modifier_Item_Mjollnir_Static {
    public const nint static_chance = 0x1320; // int32
    public const nint static_strikes = 0x1324; // int32
    public const nint static_damage = 0x1328; // int32
    public const nint static_primary_radius = 0x132C; // int32
    public const nint static_seconary_radius = 0x1330; // int32
    public const nint static_radius = 0x1334; // int32
    public const nint static_cooldown = 0x1338; // float32
    public const nint chain_damage_per_charge = 0x133C; // int32
}

public static class CDOTA_Modifier_Item_MonkeyKingBar {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_chance = 0x131C; // int32
    public const nint bonus_chance_damage = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Moonshard {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Moonshard_Consumed {
    public const nint consumed_bonus = 0x1318; // int32
    public const nint consumed_bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MuertasGun {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_cast_pct = 0x131C; // int32
    public const nint bonus_spell_amp = 0x1320; // int32
    public const nint health_pct_penalty = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Mysterious_Hat {
    public const nint bonus_health = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint manacost_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_MysticStaff {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Naginata {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint cooldown_reduction_percent = 0x132C; // int32
    public const nint bonus_chance = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_2 {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint bonus_strength = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_3 {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint bonus_strength = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_Archer_Aura {
    public const nint ms_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura_2 {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura_3 {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Nemesis_Curse_Debuff {
    public const nint debuff_enemy = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Nether_Shawl {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Ninja_Gear {
    public const nint bonus_agility = 0x1318; // int32
    public const nint passive_movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_NullTalisman {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_max_mana_percentage = 0x1328; // int32
    public const nint clock_time = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Nullifier_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Oakheart {
    public const nint strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_OblivionStaff {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Occult_Bracelet {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint stack_limit = 0x131C; // int32
    public const nint stack_duration = 0x1320; // float32
    public const nint m_flStackDieTime = 0x1324; // GameTime_t
    public const nint magic_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Occult_Bracelet_Stack {
    public const nint mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Ocean_Heart {
    public const nint water_hp_regen = 0x1318; // float32
    public const nint water_mp_regen = 0x131C; // float32
    public const nint all_stats = 0x1320; // int32
    public const nint m_bInRiver = 0x1324; // bool
}

public static class CDOTA_Modifier_Item_Octarine_Core {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_cooldown = 0x1320; // float32
    public const nint bonus_health_regen = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_OgreAxe {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_OgreSealTotem {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Orb_Of_Corrosion {
    public const nint armor = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Orb_Of_Destruction {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Orb_of_Pestilence {
    public const nint poison_movement_speed_melee = 0x1318; // int32
    public const nint poison_movement_speed_range = 0x131C; // int32
    public const nint poison_duration = 0x1320; // float32
    public const nint poison_damage = 0x1324; // float32
    public const nint armor = 0x1328; // int32
    public const nint hp_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Pestilence_Slow {
    public const nint duration = 0x1318; // float32
    public const nint slow = 0x131C; // int32
    public const nint damage = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Venom {
    public const nint poison_movement_speed_melee = 0x1318; // int32
    public const nint poison_movement_speed_range = 0x131C; // int32
    public const nint poison_duration = 0x1320; // float32
    public const nint poison_damage_melee = 0x1324; // float32
    public const nint poison_damage_range = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Venom_Slow {
    public const nint duration = 0x1318; // float32
    public const nint slow = 0x131C; // float32
    public const nint damage = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_OrchidMalevolence {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_health_regen = 0x1320; // float32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Overwhelming_Blink {
    public const nint bonus_strength = 0x1318; // int32
    public const nint blink_damage_cooldown = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Overwhelming_Blink_Debuff {
    public const nint caster_strength = 0x1318; // float32
    public const nint movement_slow = 0x131C; // int32
    public const nint attack_slow = 0x1320; // int32
    public const nint damage_pct_over_time = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Paintball {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Paintball_Debuff {
    public const nint dps = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Paladin_Sword {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_lifesteal = 0x131C; // int32
    public const nint bonus_spell_lifesteal = 0x1320; // int32
    public const nint bonus_amp = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Panic_Button {
    public const nint bonus_health = 0x1318; // int32
    public const nint health_threshold = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Pavise {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // float32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Pavise_Shield {
    public const nint absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Penta_Edged_Sword {
    public const nint damage = 0x1318; // int32
    public const nint maim_chance = 0x131C; // int32
    public const nint maim_duration = 0x1320; // float32
    public const nint melee_attack_range = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Perseverance {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_PhaseBoots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_melee = 0x131C; // int32
    public const nint bonus_damage_range = 0x1320; // int32
    public const nint damage_block_melee = 0x1324; // int32
    public const nint damage_block_ranged = 0x1328; // int32
    public const nint block_chance = 0x132C; // int32
    public const nint bonus_attack_speed = 0x1330; // int32
    public const nint bonus_armor = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_PhaseBoots_Active {
    public const nint phase_movement_speed = 0x1318; // int32
    public const nint phase_movement_speed_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Philosophers_Stone {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_gpm = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Phoenix_Ash {
    public const nint health_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Phylactery {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_spell_damage = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint bonus_all_stats = 0x132C; // int32
    public const nint vecActivatedAbilities = 0x1330; // CUtlVector< C_DOTABaseAbility* >
}

public static class CDOTA_Modifier_Item_Phylactery_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Pipe {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint health_regen = 0x131C; // float32
    public const nint magic_resistance = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Pipe_Aura {
    public const nint aura_health_regen = 0x1318; // float32
    public const nint magic_resistance_aura = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Pipe_Barrier {
    public const nint barrier_amount = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint barrier_block_creep = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Pirate_Hat {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_ms = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PlaneswalkersCloak {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_PlateMail {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_PogoStick {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_PointBooster {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PoorMansShield {
    public const nint damage_block_melee = 0x1318; // int32
    public const nint damage_block_ranged = 0x131C; // int32
    public const nint block_chance = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Possessed_Mask {
    public const nint primary_attribute = 0x1318; // int32
    public const nint lifesteal = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PowerTreads {
    public const nint bonus_movement_speed_ranged = 0x1318; // int32
    public const nint bonus_movement_speed_melee = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_stat = 0x1324; // int32
    public const nint bonus_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Princes_Knife {
    public const nint duration = 0x1318; // float32
    public const nint projectile_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Princes_Knife_Hex {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Psychic_Headband {
    public const nint intelligence_pct = 0x1318; // int32
    public const nint cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Pupils_gift {
    public const nint secondary_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Quarterstaff {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_QuellingBlade {
    public const nint damage_bonus = 0x1318; // int32
    public const nint damage_bonus_ranged = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Quickening_Charm {
    public const nint bonus_cooldown = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Quicksilver_Amulet {
    public const nint base_attack = 0x1318; // int32
    public const nint bonus_attack = 0x131C; // int32
    public const nint base_movement = 0x1320; // int32
    public const nint bonus_movement = 0x1324; // int32
    public const nint projectile_increase = 0x1328; // int32
    public const nint anim_increase = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Radiance {
    public const nint bonus_damage = 0x1318; // int32
    public const nint evasion = 0x131C; // int32
    public const nint upgrade_day_vision = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Radiance_Debuff {
    public const nint aura_damage = 0x1320; // int32
    public const nint aura_damage_upgrade_bonus = 0x1324; // int32
    public const nint aura_damage_illusions = 0x1328; // int32
    public const nint blind_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Rattlecage {
    public const nint m_iDamageTaken = 0x1318; // int32
    public const nint damage_threshold = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint damage_reset_interval = 0x1324; // float32
    public const nint bonus_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Rattlecage_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Reaver {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_RefresherOrb {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_RefresherShard {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Repair_Kit {
    public const nint hp_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Revenants_Brooch {
    public const nint m_bScepter = 0x1318; // bool
    public const nint bonus_damage = 0x131C; // int32
    public const nint spell_lifesteal = 0x1320; // int32
    public const nint bonus_spell_lifesteal = 0x1324; // int32
    public const nint manacost_per_hit = 0x1328; // int32
    public const nint m_bActive = 0x132C; // bool
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_RingOfAquila {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_RingOfAquila_Aura {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_RingOfAquila_Aura_Bonus {
    public const nint aura_bonus_armor = 0x1318; // int32
    public const nint aura_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_RingOfHealth {
    public const nint bonus_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfProtection {
    public const nint bonus_armor = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfRegeneration {
    public const nint bonus_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfTarrasque {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ring_Of_Basilius {
    public const nint aura_radius = 0x1318; // int32
    public const nint mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Ring_Of_Basilius_Effect {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RobeOfMagi {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_RodOfAtos {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_hp = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Royal_Jelly {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_SacredRelic {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SamplePicker {
    public const nint base_gold = 0x1318; // int32
    public const nint gold_per_level = 0x131C; // int32
    public const nint strength_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Agi {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint base_interval = 0x131C; // float32
    public const nint max_tick_count = 0x1320; // int32
    public const nint bonus_all_stats = 0x1324; // int32
    public const nint agi_counter_chance = 0x1328; // int32
    public const nint agi_counter_cooldown = 0x132C; // float32
    public const nint m_flLastCounterTime = 0x1330; // GameTime_t
    public const nint iCurrentTickCount = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Int {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint base_interval = 0x131C; // float32
    public const nint max_tick_count = 0x1320; // int32
    public const nint int_damage_interval = 0x1324; // float32
    public const nint int_damage_range = 0x1328; // float32
    public const nint int_damage = 0x132C; // float32
    public const nint iCurrentTickCount = 0x1330; // int32
    public const nint int_max_targets = 0x1334; // int32
    public const nint m_flNextHit = 0x1338; // GameTime_t
    public const nint bonus_all_stats = 0x133C; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Str {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint base_interval = 0x1320; // float32
    public const nint max_tick_count = 0x1324; // int32
    public const nint str_root_duration = 0x1328; // float32
    public const nint str_root_cooldown = 0x132C; // float32
    public const nint str_root_chance = 0x1330; // int32
    public const nint str_bonus_damage = 0x1334; // float32
    public const nint iCurrentTickCount = 0x1338; // int32
    public const nint m_flLastRootTime = 0x133C; // GameTime_t
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Sange {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_SangeAndYasha {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint hp_regen_amp = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Satanic {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint lifesteal_percent = 0x1320; // int32
    public const nint unholy_lifesteal_percent = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Satanic_Unholy {
    public const nint unholy_lifesteal_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Satchel {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint xp_gain = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity_Active {
    public const nint aura_health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity_Active_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_SheepStick {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_mana = 0x1328; // int32
    public const nint cast_range_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
    public const nint bonus_hp_regen = 0x1324; // int32
    public const nint bonus_strength = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Aura {
    public const nint aura_attack_speed = 0x1318; // int32
    public const nint hp_regen_degen_aura = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Blast {
    public const nint blast_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint blast_speed = 0x1350; // int32
    public const nint blast_radius = 0x1354; // int32
    public const nint blast_damage = 0x1358; // int32
    public const nint illusion_multiplier_pct = 0x135C; // int32
    public const nint blast_debuff_duration = 0x1360; // float32
    public const nint resist_debuff_duration = 0x1364; // float32
}

public static class CDOTA_Modifier_Item_Silver_Edge {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint crit_chance = 0x1328; // int32
    public const nint crit_multiplier = 0x132C; // int32
    public const nint backstab_duration = 0x1330; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Skadi {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_mana = 0x1320; // int32
    public const nint cold_duration = 0x1324; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Skadi_Slow {
    public const nint cold_slow_melee = 0x1318; // int32
    public const nint cold_slow_ranged = 0x131C; // int32
    public const nint cold_attack_slow_melee = 0x1320; // int32
    public const nint cold_attack_slow_ranged = 0x1324; // int32
    public const nint heal_reduction = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial {
    public const nint health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial_Spill_Debuff {
    public const nint spill_movement_speed = 0x1318; // int32
    public const nint spill_attack_speed = 0x131C; // int32
    public const nint spill_self_bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint spill_speed = 0x1350; // int32
    public const nint spill_radius = 0x1354; // int32
    public const nint spill_damage = 0x1358; // int32
    public const nint spill_debuff_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Item_Slippers {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SobiMask {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Solar_Crest {
    public const nint bonus_mana = 0x1318; // float32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint self_movement_speed = 0x1328; // int32
    public const nint nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Solar_Crest_Armor_Addition {
    public const nint target_armor = 0x1318; // int32
    public const nint target_attack_speed = 0x131C; // int32
    public const nint target_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Solar_Crest_Armor_Reduction {
    public const nint target_armor = 0x1318; // int32
    public const nint target_attack_speed = 0x131C; // int32
    public const nint target_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Sorcerers_Staff {
    public const nint mana_regen_amp = 0x1318; // int32
    public const nint spell_amp_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Soul_Booster {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_magical_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Soul_Ring {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Spark_Of_Courage {
    public const nint damage = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint health_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_SpecialistsArray {
    public const nint all_stats = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint proc_bonus_damage = 0x1320; // int32
    public const nint count = 0x1324; // int32
    public const nint secondary_target_range_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_SpecialistsArray_ProcDamage {
    public const nint proc_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Sphere {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_damage = 0x1324; // int32
    public const nint block_cooldown = 0x1328; // float32
    public const nint upgrade_absorb_duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Sphere_Target {
    public const nint upgrade_absorb_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Sphere_Upgrade_Absorb {
    public const nint damage_absorb = 0x1318; // int32
    public const nint m_bStartedTimer = 0x131C; // bool
    public const nint m_flDamageAbsorbed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Spider_Legs_Active {
    public const nint bonus_movement_speed_active = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // float32
    public const nint bonus_all_stats = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel_Damage {
    public const nint hp_regen_reduction_enemy = 0x1318; // int32
    public const nint soul_damage_amount = 0x131C; // int32
    public const nint enemy_hp_drain = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel_Heal {
    public const nint soul_heal_amount = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Spy_Gadget {
    public const nint attack_range = 0x1318; // int32
    public const nint cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Spy_Gadget_Aura {
    public const nint scan_cooldown_reduction = 0x1318; // int32
    public const nint aura_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Star_Mace {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint cleave_damage_percent = 0x1320; // int32
    public const nint cleave_starting_width = 0x1324; // int32
    public const nint cleave_ending_width = 0x1328; // int32
    public const nint cleave_distance = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Stormcrafter {
    public const nint m_flNextHit = 0x1318; // GameTime_t
    public const nint passive_movement_bonus = 0x131C; // int32
    public const nint range = 0x1320; // int32
    public const nint interval = 0x1324; // float32
    public const nint damage = 0x1328; // int32
    public const nint slow_duration = 0x132C; // float32
    public const nint bonus_mana_regen = 0x1330; // float32
    public const nint max_targets = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_StoutShield {
    public const nint damage_block_melee = 0x1318; // int32
    public const nint damage_block_ranged = 0x131C; // int32
    public const nint block_chance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Swift_Blink {
    public const nint blink_damage_cooldown = 0x1318; // float32
    public const nint bonus_agility = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Swift_Blink_Buff {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_agi_active = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_TalismanOfEvasion {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Tenderizer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bash_chance_melee = 0x1320; // int32
    public const nint bash_chance_ranged = 0x1324; // int32
    public const nint bash_duration = 0x1328; // float32
    public const nint bash_cooldown = 0x132C; // float32
    public const nint bonus_chance_damage = 0x1330; // int32
    public const nint bonus_damage = 0x1334; // int32
    public const nint weaken_per_hit = 0x1338; // int32
    public const nint weaken_duration = 0x133C; // float32
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Terror_Mask {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Terror_Mask_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Item_Terror_Mask_Fear_Aura {
    public const nint effect_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_The_Leveller {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint demolish = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_TiaraOfSelemene {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Timeless_Relic {
    public const nint spell_amp = 0x1318; // int32
    public const nint debuff_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Titan_Sliver {
    public const nint base_attack_damage = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Tome_of_Omniscience {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_xpm = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_TranquilBoots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint broken_movement_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
    public const nint break_threshold = 0x1328; // int32
    public const nint break_time = 0x132C; // int32
    public const nint break_count = 0x1330; // int32
    public const nint m_flResetTime = 0x1334; // float32
}

public static class CDOTA_Modifier_Item_TranquilBoots2 {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint broken_movement_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
    public const nint break_threshold = 0x1328; // int32
    public const nint break_time = 0x132C; // int32
    public const nint break_count = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Tree_Processor {
    public const nint bonus_int = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Tree_Processor_Speed {
    public const nint health_per_tree = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Trickster_Cloak {
    public const nint evasion = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint debuff_limit = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Trident {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint hp_regen_amp = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
    public const nint bonus_intellect = 0x1330; // int32
    public const nint spell_amp = 0x1334; // int32
    public const nint mana_regen_multiplier = 0x1338; // int32
    public const nint magic_damage_attack = 0x133C; // int32
}

public static class CDOTA_Modifier_Item_Trusty_Shovel {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_UltimateOrb {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_UltimateScepter {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_UltimateScepter_Consumed_Alchemist {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_UnstableWand {
    public const nint all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Urn_Damage {
    public const nint soul_damage_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Urn_Heal {
    public const nint soul_heal_amount = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Urn_Of_Shadows {
    public const nint mana_regen = 0x1318; // float32
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Vambrace {
    public const nint bonus_primary_stat = 0x1318; // int32
    public const nint bonus_secondary_stat = 0x131C; // int32
    public const nint bonus_magic_resistance = 0x1320; // int32
    public const nint bonus_spell_amp = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint m_iStat = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Vampire_Fangs {
    public const nint attack_lifesteal = 0x1318; // int32
    public const nint spell_lifesteal = 0x131C; // int32
    public const nint night_vision = 0x1320; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Vanguard {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint block_damage_ranged = 0x1320; // int32
    public const nint block_damage_melee = 0x1324; // int32
    public const nint block_chance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_aoe = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord_Debuff {
    public const nint spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint debuff_radius = 0x131C; // int32
    public const nint resist_debuff_duration = 0x1320; // float32
    public const nint m_nHeroesHit = 0x1324; // int32
    public const nint m_bHitInvisibleHero = 0x1328; // bool
    public const nint m_bFirstPulse = 0x1329; // bool
}

public static class CDOTA_Modifier_Item_Vengeances_Shadow {
    public const nint bonus_health = 0x1318; // int32
    public const nint damage_return = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Venom_Gland {
    public const nint primary_attribute = 0x1318; // int32
    public const nint debuff_amp = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Vermillion_Robe {
    public const nint mana_regen_pct = 0x1318; // int32
    public const nint move_speed_bonus = 0x131C; // int32
    public const nint bonus_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Vermillion_Robe_Flames {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_health_missing = 0x131C; // float32
    public const nint delay = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_VindicatorsAxe {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_slow_resist = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_VitalityBooster {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Vladmir {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Vladmir_Aura {
    public const nint lifesteal_aura = 0x1318; // int32
    public const nint damage_aura = 0x131C; // int32
    public const nint armor_aura = 0x1320; // float32
    public const nint mana_regen_aura = 0x1324; // float32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_VoidStone {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_VoidwalkerScythe {
    public const nint bonus_agility = 0x1318; // int32
    public const nint attacks = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint buff_duration = 0x1324; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint m_nCounter = 0x1340; // int32
}

public static class CDOTA_Modifier_Item_Voodoo_Mask {
    public const nint spell_lifesteal = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_WandOfSanctitude {
    public const nint all_stats = 0x1318; // int32
    public const nint cast_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_WandOfSanctitude_Active_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_WandOfTheBrine {
    public const nint heal_increase = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_WandOfTheBrine_Active {
    public const nint movement_speed = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint heal = 0x1324; // int32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_WardTrueSight {
    public const nint true_sight_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ward_Dispenser {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ward_Maker {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Warhammer {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Warhammer_Armor {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_WindLace {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Wind_Waker {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_movement_speed = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint cast_range_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Witch_Blade {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint slow_duration = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint projectile_speed = 0x132C; // int32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Witch_Blade_Slow {
    public const nint slow = 0x1318; // int32
    public const nint int_damage_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Witches_Switch {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Witches_Switch_Aura_Effect {
    public const nint aura_mana_regen = 0x1318; // float32
    public const nint aura_health_regen = 0x131C; // float32
    public const nint aura_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Witless_shako {
    public const nint max_health = 0x1318; // int32
    public const nint max_mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Wizard_Glass {
    public const nint debuff_amp = 0x1318; // int32
    public const nint cooldown_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Woodland_Striders {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_WraithBand {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint clock_time = 0x1328; // int32
    public const nint bonus_armor = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_WraithPact {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_WraithPact_DeathAura {
    public const nint armor_penalty_aura = 0x1318; // int32
    public const nint damage_penalty_aura = 0x131C; // int32
    public const nint aura_dps = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_WraithPact_Thinker {
    public const nint pact_aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint aura_dps = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Yasha {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Yasha_And_Kaya {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_intellect = 0x1324; // int32
    public const nint spell_amp = 0x1328; // int32
    public const nint mana_regen_multiplier = 0x132C; // int32
    public const nint spell_lifesteal_amp = 0x1330; // int32
}

public static class CDOTA_Modifier_Jacket_Blind {
    public const nint blind_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Burn {
    public const nint m_bFirst = 0x1318; // bool
    public const nint burn_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Thinker {
    public const nint start_radius = 0x1318; // int32
    public const nint end_radius = 0x131C; // int32
    public const nint m_fStartTime = 0x1320; // GameTime_t
    public const nint m_fTotalTime = 0x1324; // float32
    public const nint m_vCastPosition = 0x1328; // Vector
}

public static class CDOTA_Modifier_Jakiro_IcePath_Thinker {
    public const nint path_delay = 0x1318; // float32
    public const nint path_radius = 0x131C; // int32
    public const nint m_nDamage = 0x1320; // int32
    public const nint m_flRadius = 0x1324; // float32
    public const nint stun_duration = 0x1328; // float32
    public const nint m_hUnitsHit = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vPathStart = 0x1348; // Vector
    public const nint m_vPathEnd = 0x1354; // Vector
    public const nint m_fStartTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Jakiro_LiquidFire {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint radius = 0x1338; // int32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bForceProc = 0x1340; // bool
}

public static class CDOTA_Modifier_Jakiro_LiquidFire_Burn {
    public const nint slow_attack_speed_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
}

public static class CDOTA_Modifier_Jakiro_LiquidIce {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint radius = 0x1338; // int32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bForceProc = 0x1340; // bool
}

public static class CDOTA_Modifier_Jakiro_LiquidIce_Debuff {
    public const nint base_damage = 0x1318; // int32
    public const nint pct_health_damage = 0x131C; // float32
    public const nint movement_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Burn {
    public const nint damage = 0x1318; // int32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Ice_EdgeThinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint ice_edge_path_radius = 0x1324; // int32
    public const nint cast_range = 0x1328; // int32
    public const nint ice_edge_linger_duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Ice_Edge_Slow {
    public const nint ice_edge_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint burn_interval = 0x1324; // float32
    public const nint path_radius = 0x1328; // int32
    public const nint cast_range = 0x132C; // int32
    public const nint linger_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Jugg_Caster {
    public const nint shard_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_BladeDance {
    public const nint blade_dance_crit_mult = 0x1318; // int32
    public const nint blade_dance_crit_chance = 0x131C; // int32
    public const nint blade_dance_lifesteal = 0x1320; // int32
    public const nint m_bHasCrit = 0x1324; // bool
    public const nint m_bWasBladeDanceTriggeredCrit = 0x1325; // bool
}

public static class CDOTA_Modifier_Juggernaut_BladeFury {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint blade_fury_damage_per_tick = 0x131C; // int32
    public const nint blade_fury_aspd_multiplier = 0x1320; // float32
    public const nint m_flTotalAppliedDamage = 0x1324; // float32
    public const nint bonus_movespeed = 0x1328; // int32
    public const nint m_flNextAttack = 0x132C; // GameTime_t
    public const nint m_bIgnoreAttackRestriction = 0x1330; // bool
}

public static class CDOTA_Modifier_Juggernaut_BladeFury_Pull {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_Healing_Ward_Aura {
    public const nint healing_ward_movespeed_tooltip = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_Healing_Ward_Heal {
    public const nint healing_ward_heal_amount = 0x1318; // int32
    public const nint m_nStartingHealthThisInterval = 0x131C; // int32
}

public static class CDOTA_Modifier_Juggernaut_Omnislash {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hLastTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_nJumps = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint omni_slash_radius = 0x132C; // int32
    public const nint attack_rate_multiplier = 0x1330; // float32
    public const nint m_bFirstHit = 0x1334; // bool
    public const nint m_iTotalDamage = 0x1338; // int32
    public const nint m_iHeroDamage = 0x133C; // int32
    public const nint m_iKilledHeroes = 0x1340; // int32
    public const nint m_fNextAttackTime = 0x1344; // GameTime_t
    public const nint m_bScepterCast = 0x1348; // bool
    public const nint m_bReflection = 0x1349; // bool
    public const nint m_bEndNext = 0x134A; // bool
}

public static class CDOTA_Modifier_JumpBoots {
    public const nint push_length = 0x1318; // int32
}

public static class CDOTA_Modifier_JumpBootsIntrinsic {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Effect {
    public const nint distance_from_shrine = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Regen {
    public const nint health_restore = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint regen_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_JungleSpirit_Storm_Cyclone {
    public const nint m_FXIndex = 0x1318; // CUtlVector< ParticleIndex_t >
    public const nint m_hCyclones = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint projectile_distance = 0x1348; // int32
    public const nint projectile_radius = 0x134C; // int32
    public const nint projectile_amount = 0x1350; // int32
    public const nint projectile_duration = 0x1354; // float32
    public const nint delay = 0x1358; // float32
    public const nint m_flDieTime = 0x135C; // GameTime_t
    public const nint m_flStartTime = 0x1360; // GameTime_t
    public const nint m_vLeftControl = 0x1368; // CUtlVector< Vector >
    public const nint m_vSourceLoc = 0x1380; // CUtlVector< Vector >
    public const nint m_vTargetLoc = 0x1398; // Vector
}

public static class CDOTA_Modifier_JungleVarmint_Creator {
    public const nint m_hVarmint = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nClientVarmintEntIndex = 0x131C; // CEntityIndex
}

public static class CDOTA_Modifier_JungleVarmint_Dive {
    public const nint distance = 0x1318; // int32
    public const nint speed = 0x131C; // float32
    public const nint acceleration = 0x1320; // float32
    public const nint radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit {
    public const nint hCasterList = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint bAcceptingGems = 0x1330; // bool
}

public static class CDOTA_Modifier_Jungle_Spirit_Ally_Alert {
    public const nint m_flLastHowl = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Jungle_Spirit_Range_Attack {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint projectile_speed = 0x131C; // int32
    public const nint turn_rate = 0x1320; // float32
    public const nint m_hAttachTarget = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Jungle_Spirit_Reductions {
    public const nint m_vecAlliesNearby = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nAlliesNearby = 0x1330; // int32
    public const nint stat_reduction_pct = 0x1334; // int32
    public const nint armor_reduction = 0x1338; // int32
    public const nint radius = 0x133C; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Debuff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Invulnerable {
    public const nint nFXIndex = 0x1318; // ParticleIndex_t
    public const nint projectile_radius = 0x131C; // int32
    public const nint projectile_destruction_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit_Volcano_Fire_Strike_Caster {
    public const nint damage_modifier = 0x1318; // int32
}

public static class CDOTA_Modifier_Keen_Optic {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint cast_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_KeeperOfTheLight_BlindingLight {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_KeeperOfTheLight_BlindingLight_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_KeeperOfTheLight_Illuminate {
    public const nint range = 0x1318; // int32
    public const nint total_damage = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint channel_vision_radius = 0x1324; // int32
    public const nint channel_vision_interval = 0x1328; // float32
    public const nint channel_vision_duration = 0x132C; // float32
    public const nint channel_vision_step = 0x1330; // int32
    public const nint m_flLastChantTime = 0x1334; // GameTime_t
    public const nint m_vNextVisionLocation = 0x1338; // Vector
    public const nint m_vCastDirection = 0x1344; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_ManaLeak {
    public const nint mana_leak_pct = 0x1318; // float32
    public const nint vLastPos = 0x131C; // Vector
    public const nint bResetPosition = 0x1328; // bool
    public const nint m_fAccumulatedManaLeak = 0x132C; // float32
}

public static class CDOTA_Modifier_KeeperOfTheLight_Radiant_Bind {
    public const nint slow = 0x1318; // float32
    public const nint magic_resistance = 0x131C; // int32
    public const nint stun_duration = 0x1320; // float32
    public const nint vLastPos = 0x1324; // Vector
    public const nint bResetPosition = 0x1330; // bool
    public const nint m_fAccumulatedDistance = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bStunned = 0x1340; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_Recall {
    public const nint m_bWasAttacked = 0x1318; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_SpiritForm {
    public const nint m_nFXIndexA = 0x1318; // ParticleIndex_t
    public const nint movement_speed = 0x131C; // int32
    public const nint cast_range = 0x1320; // int32
    public const nint m_bDidSwapSpiritForm = 0x1324; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_SpiritForm_Illuminate {
    public const nint range = 0x1318; // int32
    public const nint vision_radius = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint total_damage = 0x1324; // int32
    public const nint max_channel_time = 0x1328; // float32
    public const nint speed = 0x132C; // float32
    public const nint vision_duration = 0x1330; // float32
    public const nint channel_vision_radius = 0x1334; // int32
    public const nint channel_vision_interval = 0x1338; // float32
    public const nint channel_vision_duration = 0x133C; // float32
    public const nint channel_vision_step = 0x1340; // int32
    public const nint m_vCastLoc = 0x1344; // Vector
    public const nint m_vTargetLoc = 0x1350; // Vector
    public const nint m_fStartTime = 0x135C; // GameTime_t
    public const nint m_qCastAngle = 0x1360; // QAngle
    public const nint m_iProjectile = 0x136C; // int32
    public const nint m_nFXIndex = 0x1370; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1374; // ParticleIndex_t
    public const nint m_vNextVisionLocation = 0x1378; // Vector
    public const nint m_vCastDirection = 0x1384; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp {
    public const nint fixed_movement_speed = 0x1318; // int32
    public const nint m_vSource = 0x131C; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp_Aura {
    public const nint radius = 0x1318; // int32
    public const nint wisp_damage = 0x131C; // float32
    public const nint off_duration = 0x1320; // float32
    public const nint off_duration_initial = 0x1324; // float32
    public const nint on_duration = 0x1328; // float32
    public const nint hit_count = 0x132C; // int32
    public const nint m_iAttackCount = 0x1330; // int32
    public const nint m_flNextTimeOn = 0x1334; // GameTime_t
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint m_flNextTime = 0x1344; // GameTime_t
    public const nint m_vecDamagedEntities = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flCorrectionTime = 0x1360; // float32
}

public static class CDOTA_Modifier_Kill {
    public const nint m_bHideOnKill = 0x1318; // bool
}

public static class CDOTA_Modifier_Knockback {
    public const nint knockback_distance = 0x1318; // float32
    public const nint knockback_height = 0x131C; // int32
    public const nint knockback_duration = 0x1320; // float32
    public const nint m_vHorizOffset = 0x1324; // Vector
    public const nint m_vStartPosition = 0x1330; // Vector
    public const nint m_fCurrentTimeHoriz = 0x133C; // float32
    public const nint m_fCurrentTimeVert = 0x1340; // float32
    public const nint m_bShouldStun = 0x1344; // bool
    public const nint m_bRespectLeash = 0x1345; // bool
    public const nint m_bReversePolarity = 0x1346; // bool
}

public static class CDOTA_Modifier_KoboldTaskmaster_SpeedAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTaskmaster_SpeedAura_Bonus {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTunneler_ProspectingAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTunneler_ProspectingAura_Money {
    public const nint gpm_aura = 0x1318; // int32
}

public static class CDOTA_Modifier_Kobold_Disarm {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Kunkka_Davy_Jones_Locker_Aura {
    public const nint m_flRadius = 0x1318; // float32
}

public static class CDOTA_Modifier_Kunkka_Fear {
    public const nint m_pEntityToBeAfraidOf = 0x1318; // CHandle< C_DOTA_BaseNPC >
}

public static class CDOTA_Modifier_Kunkka_GhostShip_DamageAbsorb {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint movespeed_bonus = 0x131C; // int32
    public const nint ghostship_absorb = 0x1320; // float32
}

public static class CDOTA_Modifier_Kunkka_GhostShip_DamageDelay {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
}

public static class CDOTA_Modifier_Kunkka_Ghost_Ship_Fleet {
    public const nint vCasterOrigin = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint hitcount = 0x1330; // int32
}

public static class CDOTA_Modifier_Kunkka_Man_the_Helm {
    public const nint tick_interval = 0x1318; // float32
    public const nint forward_move_speed = 0x131C; // float32
    public const nint turn_rate_boosted = 0x1320; // float32
    public const nint turn_rate = 0x1324; // float32
    public const nint hit_radius = 0x1328; // int32
    public const nint knockback_radius = 0x132C; // int32
    public const nint m_bHitFirstUpdate = 0x1330; // bool
    public const nint m_flHitEndTime = 0x1334; // GameTime_t
    public const nint hit_recover_time = 0x1338; // float32
    public const nint m_flTurnBoostProgress = 0x133C; // float32
    public const nint m_flFacingTarget = 0x1340; // float32
    public const nint m_flLastHeroAttackTime = 0x1344; // GameTime_t
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_flGyroshellDurationRemaining = 0x134C; // float32
    public const nint m_flTurnHistory = 0x1350; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesCredited = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x1398; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vDirection = 0x13B0; // Vector
}

public static class CDOTA_Modifier_Kunkka_No_Quarter_Counter {
    public const nint m_nStackCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Rumboldened_Immunity {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Tidebringer {
    public const nint m_bTidebringerAttack = 0x1318; // bool
    public const nint cleave_starting_width = 0x131C; // int32
    public const nint cleave_ending_width = 0x1320; // int32
    public const nint cleave_distance = 0x1324; // int32
    public const nint damage_bonus = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint cleave_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_Kunkka_Tidebringer_Slow {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent {
    public const nint torrent_damage = 0x1318; // int32
    public const nint damage_tick_interval = 0x131C; // float32
    public const nint percent_instant = 0x1320; // float32
    public const nint flDamagePerTick = 0x1324; // float32
}

public static class CDOTA_Modifier_Kunkka_Torrent_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent_Storm {
    public const nint torrent_min_distance = 0x1318; // int32
    public const nint torrent_max_distance = 0x131C; // int32
    public const nint m_iExplosionQuadrant = 0x1320; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent_Thinker {
    public const nint m_bShowEnemies = 0x1318; // bool
    public const nint m_bTorrentStorm = 0x1319; // bool
    public const nint m_bTorrentStarted = 0x131A; // bool
    public const nint m_fTorrentStartTime = 0x131C; // GameTime_t
    public const nint flDamagePerTick = 0x1320; // float32
    public const nint flFirstDamage = 0x1324; // float32
    public const nint damage_tick_interval = 0x1328; // float32
    public const nint percent_instant = 0x132C; // float32
}

public static class CDOTA_Modifier_Kunkka_XMarksTheSpot {
    public const nint ally_ms = 0x1318; // int32
    public const nint ally_armor = 0x131C; // int32
    public const nint hThinker = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Kunkka_XMarksTheSpot_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_bIsReflection = 0x1324; // bool
    public const nint m_hEntity = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Lamp_Off {
    public const nint m_iTempViewer = 0x1318; // int32
}

public static class CDOTA_Modifier_Legion_Commander_Duel {
    public const nint reward_damage = 0x1318; // int32
    public const nint scepter_damage_reduction_pct = 0x131C; // int32
    public const nint m_bAttacked = 0x1320; // bool
    public const nint m_bHadAVictor = 0x1321; // bool
    public const nint m_flTimeDuelStart = 0x1324; // GameTime_t
    public const nint m_hPartner = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_flNextTime = 0x132C; // float32
    public const nint hAlreadyHitList = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Legion_Commander_MomentOfCourage {
    public const nint trigger_chance = 0x1318; // int32
    public const nint buff_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Legion_Commander_MomentOfCourage_Lifesteal {
    public const nint hp_leech_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Legion_Commander_OverwhelmingOdds {
    public const nint bonus_attack_speed_creeps = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint armor_per_creep = 0x1320; // float32
    public const nint armor_per_hero = 0x1324; // float32
    public const nint m_nTotalBonus = 0x1328; // int32
    public const nint m_flBonusArmor = 0x132C; // float32
}

public static class CDOTA_Modifier_Legion_Commander_PressTheAttack {
    public const nint move_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Legion_Commander_PressTheAttack_Immunity {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Leshrac_Decrepify {
    public const nint magic_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Decrepify_Aura {
    public const nint magic_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Diabolic_Edict {
    public const nint num_explosions = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_fExplosions = 0x1320; // float32
    public const nint tower_bonus = 0x1324; // float32
    public const nint m_bTalentActive = 0x1328; // bool
}

public static class CDOTA_Modifier_Leshrac_Greater_Lightning_Storm {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm {
    public const nint damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint jump_count = 0x1320; // int32
    public const nint slow_duration = 0x1324; // float32
    public const nint jump_delay = 0x1328; // float32
    public const nint hInitialTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_flDamage = 0x1330; // float32
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm_Scepter_Thinker {
    public const nint pulse_nova_lightning_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Pulse_Nova {
    public const nint m_bFirst = 0x1318; // bool
    public const nint damage_resistance = 0x1324; // int32
    public const nint bonus_movespeed = 0x1328; // int32
}

public static class CDOTA_Modifier_Leshrac_Split_Earth_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Lesser_NightCrawler_Pounce {
    public const nint pounce_distance = 0x1318; // int32
    public const nint pounce_speed = 0x131C; // float32
    public const nint pounce_acceleration = 0x1320; // float32
    public const nint pounce_radius = 0x1324; // int32
    public const nint pounce_damage = 0x1328; // int32
    public const nint leash_duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Lich_ChainFrost_OnDeath {
    public const nint should_fire_chain_frost_on_death = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_ChainFrost_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Lich_Chain_Frost_Thinker {
    public const nint m_nDamageToHeroes = 0x1318; // int32
    public const nint m_nHeroesKilled = 0x131C; // int32
    public const nint m_nJumps = 0x1320; // int32
    public const nint m_bFirstJump = 0x1324; // bool
    public const nint m_hTarget = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_hAvoidTarget = 0x132C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Lich_DarkSorcery_Buff {
    public const nint mana_drain = 0x1318; // int32
    public const nint attack_count = 0x131C; // int32
    public const nint attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Lich_FrostArmor {
    public const nint armor_bonus = 0x1318; // int32
    public const nint health_regen = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Lich_FrostArmor_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Lich_FrostAura {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Lich_FrostAura_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_FrostAura_Slow {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_FrostNova_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
    public const nint slow_attack_speed_primary = 0x1320; // int32
    public const nint m_bIsPrimary = 0x1324; // bool
}

public static class CDOTA_Modifier_Lich_FrostShield {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_Lich_FrostShield_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_Ice_Spire {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_Timer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_Lich_Ice_Spire_Debuff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_Sinister_Gaze {
    public const nint movement_speed = 0x1318; // int32
    public const nint mana_drain = 0x131C; // int32
    public const nint m_flIntervalRate = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint creep_damage = 0x1328; // float32
    public const nint m_bBlasted = 0x132C; // bool
}

public static class CDOTA_Modifier_Life_Stealer_Assimilate {
    public const nint order_lock_duration = 0x1318; // float32
    public const nint m_fOrderLockDone = 0x131C; // GameTime_t
    public const nint m_nFXIndex = 0x1320; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Feast {
    public const nint hp_leech_percent = 0x1318; // float32
    public const nint hp_damage_percent = 0x131C; // float32
}

public static class CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy_Slow {
    public const nint miss_pct = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x131C; // int32
    public const nint self_regen = 0x1320; // float32
    public const nint m_nStartingHealth = 0x1324; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Creep {
    public const nint m_bChangedTeams = 0x1318; // bool
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Effect {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Enemy_Hero {
    public const nint attack_rate_enemy = 0x1318; // float32
}

public static class CDOTA_Modifier_Life_Stealer_Open_Wounds {
    public const nint slow_steps = 0x1318; // int32[8]
    public const nint heal_percent = 0x1338; // int32
    public const nint m_nDamageTracker = 0x133C; // int32
    public const nint damage_threshold = 0x1340; // int32
    public const nint spread_radius = 0x1344; // int32
    public const nint max_health_as_damage_pct = 0x1348; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Rage {
    public const nint movement_speed_bonus = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Light_Collector {
    public const nint m_bActive = 0x1318; // bool
    public const nint health_regen = 0x131C; // int32
    public const nint mana_regen = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint movespeed_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Light_Collector_Blind {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_DragonSlave_Burn {
    public const nint dragon_slave_burn = 0x1318; // int32
    public const nint target_crit_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Lina_FierySoul {
    public const nint fiery_soul_attack_speed_bonus = 0x1318; // int32
    public const nint fiery_soul_move_speed_bonus = 0x131C; // float32
    public const nint fiery_soul_max_stacks = 0x1320; // int32
    public const nint fiery_soul_stack_duration = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flFierySoulDieTime = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_Lina_Fiery_Cloak {
    public const nint magic_resistance = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint visualzdelta = 0x1320; // float32
}

public static class CDOTA_Modifier_Lina_LagunaBlade {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_LagunaBlade_Line {
    public const nint vStart = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
}

public static class CDOTA_Modifier_Lina_LagunaBlade_Superheated {
    public const nint increased_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_LightStrikeArray_Thinker {
    public const nint m_iDamage = 0x1318; // int32
    public const nint m_flStunDuration = 0x131C; // float32
    public const nint light_strike_array_aoe = 0x1320; // int32
    public const nint light_strike_array_damage = 0x1324; // int32
    public const nint light_strike_array_stun_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Lion_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Lion_FingerOfDeath {
    public const nint m_bIgnoreBonus = 0x1318; // bool
}

public static class CDOTA_Modifier_Lion_ManaDrain {
    public const nint mana_per_second = 0x1318; // int32
    public const nint break_distance = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint movespeed = 0x1324; // int32
    public const nint damage_pct = 0x1328; // int32
    public const nint ally_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Lion_Voodoo {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_Entangling_Claws {
    public const nint attack_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_Rabid {
    public const nint shard_movement_speed_pct = 0x1318; // int32
    public const nint shard_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_LoneDruid_SavageRoar {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_AttackCheck {
    public const nint m_bCanBeResummoned = 0x1318; // bool
    public const nint m_bCanAttack = 0x1319; // bool
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_nStatusFxIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Defender {
    public const nint damage_share = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Demolish {
    public const nint bonus_building_damage = 0x1318; // int32
    public const nint true_form_bonus_building_damage = 0x131C; // int32
    public const nint spell_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Entangle {
    public const nint entangle_chance = 0x1318; // int32
    public const nint hero_entangle_chance = 0x131C; // int32
    public const nint hero_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Entangle_Effect {
    public const nint m_iEntangleDamage = 0x1318; // int32
    public const nint interval_rate = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch {
    public const nint tick_rate = 0x1318; // float32
    public const nint drag_distance = 0x131C; // int32
    public const nint break_distance = 0x1320; // int32
    public const nint vPreviousLocation = 0x1324; // Vector
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Damage {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Self {
    public const nint self_slow = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_bFetchingRune = 0x1324; // bool
    public const nint m_vPreviousLoc = 0x1328; // Vector
    public const nint drag_distance = 0x1334; // int32
    public const nint break_distance = 0x1338; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint lifesteal_percent = 0x131C; // int32
    public const nint armor = 0x1320; // int32
    public const nint armor_sharing = 0x1324; // int32
    public const nint active_bonus = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink_Active {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink_BearFear {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_TrueForm {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp = 0x131C; // int32
    public const nint base_attack_time = 0x1320; // float32
}

public static class CDOTA_Modifier_LoneDruid_TrueForm_BattleCry {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Lua {
    public const nint m_bHasCustomTransmitterData = 0x1400; // bool
}

public static class CDOTA_Modifier_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint beam_interval = 0x132C; // float32
    public const nint stun_duration = 0x1330; // float32
    public const nint vPosition = 0x1334; // Vector
    public const nint bAreaTarget = 0x1340; // bool
    public const nint m_iTickCount = 0x1344; // int32
    public const nint m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_HitTargets = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flBeamStun = 0x1368; // float32
}

public static class CDOTA_Modifier_Luna_LucentBeam_Damage_Buff {
    public const nint damage_buff_per_beam = 0x1318; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessingAura {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_self = 0x131C; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing_Active {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing_Smoke {
    public const nint bonus_speed_day = 0x1328; // int32
    public const nint bonus_speed_night = 0x132C; // int32
    public const nint break_distance_day = 0x1330; // int32
    public const nint break_distance_night = 0x1334; // int32
    public const nint visibility_radius = 0x1338; // int32
    public const nint bonus_movement_speed = 0x133C; // int32
}

public static class CDOTA_Modifier_Luna_Lunar_Grace {
    public const nint attack_speed = 0x1318; // int32
    public const nint night_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Luna_MoonGlaive {
    public const nint range = 0x1318; // int32
    public const nint bounces = 0x131C; // int32
    public const nint damage_reduction_percent = 0x1320; // int32
    public const nint m_nMoonGlaiveFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Luna_MoonGlaive_Shield {
    public const nint rotating_glaives = 0x1318; // int32
    public const nint rotating_glaives_hit_radius = 0x131C; // float32
    public const nint rotating_glaives_speed = 0x1320; // float32
    public const nint rotating_glaives_collision_damage = 0x1324; // float32
    public const nint rotating_glaives_movement_radius = 0x1328; // float32
    public const nint rotating_glaives_damage_reduction = 0x132C; // float32
}

public static class CDOTA_Modifier_Lycan_FeralImpulse {
    public const nint bonus_hp_regen = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Lycan_FeralImpulse_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_Howl {
    public const nint attack_damage_reduction = 0x1318; // int32
    public const nint total_attack_damage_reduction = 0x131C; // int32
    public const nint armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Shapeshift {
    public const nint bonus_night_vision = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_iOriginalAttackCapability = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Shapeshift_Speed {
    public const nint speed = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
    public const nint health_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_Lycan_Shard {
    public const nint m_flNextSpawn = 0x1318; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Bash {
    public const nint bash_chance = 0x1318; // int32
    public const nint bash_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_BonusDamage {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_CriticalStrike {
    public const nint m_CooldownTimer = 0x1318; // CountdownTimer
    public const nint maim_chance = 0x1330; // int32
    public const nint maim_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Health {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Maim {
    public const nint maim_movement_speed = 0x1318; // int32
    public const nint maim_attack_speed = 0x131C; // int32
    public const nint maim_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Wolf_Bite_Attack_Range {
    public const nint attack_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_Wolf_Bite_Lifesteal {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint lifesteal_range = 0x131C; // int32
    public const nint m_vecTargets = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_MaelstromChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Magnataur_Empower {
    public const nint bonus_damage_pct = 0x1318; // int32
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint self_multiplier = 0x132C; // float32
    public const nint secondary_cleave_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Magnataur_Horn_Toss_Slow {
    public const nint horn_toss_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_ReversePolarity_Stats {
    public const nint stats_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Erupt {
    public const nint scepter_width = 0x1318; // int32
    public const nint scepter_duration = 0x131C; // float32
    public const nint play_particle = 0x1320; // bool
    public const nint m_vStart = 0x1324; // Vector
    public const nint m_vEnd = 0x1330; // Vector
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Eruption_Slow {
    public const nint scepter_slow_pct = 0x1318; // int32
    public const nint scepter_armor_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint pull_duration = 0x132C; // float32
    public const nint effective_distance = 0x1330; // float32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Impact {
    public const nint slow_duration = 0x1318; // float32
    public const nint skewer_damage = 0x131C; // int32
    public const nint damage_distance_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnus_Strength_Of_Joelrak {
    public const nint strength_per_stack = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint stack_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Marci_CompanionRun_AllyMovespeed {
    public const nint ally_movespeed_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Marci_Dispose_Debuff {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Grapple_VictimMotion {
    public const nint impact_damage = 0x1318; // int32
    public const nint debuff_duration = 0x131C; // float32
    public const nint landing_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Marci_Guardian_Buff {
    public const nint lifesteal_pct = 0x1318; // float32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_attack_range = 0x1320; // int32
    public const nint max_partner_distance = 0x1324; // int32
    public const nint max_partner_penalty = 0x1328; // int32
    public const nint creep_lifesteal_reduction_pct = 0x132C; // int32
    public const nint m_fLifestealPct = 0x1330; // float32
    public const nint m_fDamageAbsorbed = 0x1334; // float32
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFxIndex = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Marci_Lunge_Arc {
    public const nint m_bTriggeredLandingAnim = 0x1318; // bool
    public const nint m_nMaxJumpDistance = 0x131C; // int32
    public const nint min_jump_distance = 0x1320; // int32
    public const nint max_jump_distance = 0x1324; // int32
    public const nint min_lob_travel_time = 0x1328; // float32
    public const nint max_lob_travel_time = 0x132C; // float32
    public const nint landing_radius = 0x1330; // int32
    public const nint debuff_duration = 0x1334; // float32
    public const nint min_height_above_lowest = 0x1338; // float32
    public const nint min_height_above_highest = 0x133C; // float32
    public const nint min_acceleration = 0x1340; // float32
    public const nint max_acceleration = 0x1344; // float32
    public const nint impact_damage = 0x1348; // float32
    public const nint impact_position_offset = 0x134C; // int32
    public const nint ally_buff_duration = 0x1350; // float32
}

public static class CDOTA_Modifier_Marci_Lunge_Buff {
    public const nint scepter_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Lunge_Debuff {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Lunge_TrackingMotion {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint m_nMaxJumpDistance = 0x131C; // int32
    public const nint landing_radius = 0x1320; // int32
    public const nint max_jump_distance = 0x1324; // int32
    public const nint min_jump_distance = 0x1328; // int32
    public const nint target_abort_distance = 0x132C; // int32
    public const nint impact_position_offset = 0x1330; // int32
    public const nint m_flCastDistance = 0x1334; // float32
    public const nint m_nAoEFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_vDestination = 0x133C; // Vector
    public const nint m_hBounceEntity = 0x1348; // CHandle< C_BaseEntity >
    public const nint m_hBounceEntityClient = 0x134C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Marci_Unleash {
    public const nint time_between_flurries = 0x1318; // float32
    public const nint charges_per_flurry = 0x131C; // int32
    public const nint flurry_charge_increment = 0x1320; // int32
    public const nint bonus_movespeed = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Marci_Unleash_Flurry {
    public const nint flurry_bonus_attack_speed = 0x1318; // int32
    public const nint time_between_flurries = 0x131C; // float32
    public const nint debuff_duration = 0x1320; // float32
    public const nint max_time_window_per_hit = 0x1324; // float32
    public const nint m_bBonusSpeed = 0x1328; // bool
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
    public const nint m_bIsDoingFlurryAttack = 0x1330; // bool
    public const nint m_bIsDoingFlurryPulseAttack = 0x1331; // bool
    public const nint m_fLastAttackTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Marci_Unleash_FlurryCooldown {
    public const nint charges_per_flurry = 0x1318; // int32
    public const nint time_between_flurries = 0x131C; // float32
    public const nint recovery_fixed_attack_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_Marci_Unleash_FlurryPulse_Debuff {
    public const nint pulse_move_slow_pct = 0x1318; // float32
    public const nint pulse_attack_slow_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_Marci_Unleash_Pull {
    public const nint shard_push_length = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint spear_damage = 0x1320; // int32
    public const nint spear_distance_from_wall = 0x1324; // int32
    public const nint spear_attack_interval = 0x1328; // float32
    public const nint warrior_fade_min_dist = 0x1348; // float32
    public const nint warrior_fade_max_dist = 0x134C; // float32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_AnimationAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Buff {
    public const nint health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_BuffAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Leash {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // float32
    public const nint m_vOriginLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint formation_time = 0x131C; // float32
    public const nint m_flInitialZ = 0x1320; // float32
    public const nint m_flFinalZ = 0x1324; // float32
}

public static class CDOTA_Modifier_Mars_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
}

public static class CDOTA_Modifier_Mars_Bulwark_Active {
    public const nint redirect_chance = 0x1318; // int32
    public const nint redirect_range = 0x131C; // int32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
    public const nint redirect_speed_penatly = 0x1328; // int32
    public const nint redirect_close_range = 0x132C; // int32
    public const nint attack_redirection_grace_distance = 0x1330; // int32
    public const nint m_nPoseParameterWE = 0x1334; // int32
    public const nint m_nPoseParameterNS = 0x1338; // int32
    public const nint m_flLastPoseX = 0x133C; // float32
    public const nint m_flLastPoseY = 0x1340; // float32
    public const nint m_nLastMaxDirection = 0x1344; // int32
    public const nint m_vLastOrigin = 0x1348; // Vector
    public const nint m_flLastGameTime = 0x1354; // GameTime_t
}

public static class CDOTA_Modifier_Mars_Bulwark_Soldier_Bonus {
    public const nint m_nPoseParameterWE = 0x1318; // int32
    public const nint m_nPoseParameterNS = 0x131C; // int32
    public const nint m_flLastPoseX = 0x1320; // float32
    public const nint m_flLastPoseY = 0x1324; // float32
    public const nint m_nLastMaxDirection = 0x1328; // int32
    public const nint m_vLastOrigin = 0x132C; // Vector
    public const nint m_flLastGameTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_Mars_Bulwark_Soldier_Thinker {
    public const nint m_NextAttack = 0x1318; // GameTime_t
    public const nint soldier_offset = 0x131C; // int32
    public const nint soldier_count = 0x1320; // int32
    public const nint forward_angle = 0x1324; // int32
    public const nint knockback_distance = 0x1328; // int32
    public const nint m_hAllSoldiers = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flLastStationaryTime = 0x1348; // GameTime_t
    public const nint m_vLastStationaryPosition = 0x134C; // Vector
    public const nint stationary_attack_delay = 0x1358; // float32
}

public static class CDOTA_Modifier_Mars_GodsRebuke_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Gods_Rebuke {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Scepter_Damage {
    public const nint scepter_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Scepter_Damage_Slow {
    public const nint scepter_movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_MaskOfDispair_Berserk {
    public const nint berserk_spell_amp = 0x1318; // int32
    public const nint berserk_manacost_reduction = 0x131C; // int32
    public const nint berserk_magic_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_MaskOfMadness_Berserk {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
    public const nint berserk_armor_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Medusa_ManaShield {
    public const nint bonus_mana = 0x1318; // int32
    public const nint absorption_pct = 0x131C; // float32
    public const nint damage_per_mana = 0x1320; // float32
    public const nint illusion_damage_per_mana = 0x1324; // float32
}

public static class CDOTA_Modifier_Medusa_Mystic_Snake_Slow {
    public const nint movement_slow = 0x1318; // int32
    public const nint turn_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Medusa_SplitShot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint m_nSplitShotBowFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Medusa_StoneGaze {
    public const nint radius = 0x1318; // int32
    public const nint vision_cone = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint speed_boost = 0x1324; // int32
    public const nint m_hHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Facing {
    public const nint face_duration = 0x1318; // float32
    public const nint stone_duration = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint vision_cone = 0x1324; // float32
    public const nint m_flAccumulatedTime = 0x1328; // float32
    public const nint ctFacing = 0x1330; // CountdownTimer
    public const nint m_bAlreadyStoned = 0x1348; // bool
    public const nint m_nFXIndex = 0x134C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Stone {
    public const nint bonus_physical_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Tracker {
    public const nint m_nNumStoned = 0x1318; // int32
    public const nint m_bAnyInvisible = 0x131C; // bool
}

public static class CDOTA_Modifier_Meepo_Divided_We_Stand {
    public const nint respawn = 0x1318; // float32
    public const nint magic_resist = 0x131C; // float32
}

public static class CDOTA_Modifier_Meepo_Fling_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Flung {
    public const nint m_nHandle = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Geostrike_Debuff {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Meepo_MegaMeepo {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint m_vStartLocation = 0x132C; // Vector
    public const nint animation_rate = 0x1338; // float32
    public const nint m_bInterrupted = 0x133C; // bool
    public const nint m_bHasBeenDestroyed = 0x133D; // bool
    public const nint m_bIsHighestMeepo = 0x133E; // bool
}

public static class CDOTA_Modifier_Meepo_MegaMeepo_Self {
    public const nint base_strength = 0x1318; // int32
    public const nint base_int = 0x131C; // int32
    public const nint base_agi = 0x1320; // int32
    public const nint stats_pct = 0x1324; // int32
    public const nint m_hMegameepoFrame = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_bWasOutOfGame = 0x132C; // bool
}

public static class CDOTA_Modifier_Meepo_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint hp_restore = 0x131C; // int32
}

public static class CDOTA_Modifier_Meepo_Poof_Damage_Sharing {
    public const nint damage_share_percentage = 0x1318; // int32
    public const nint damage_share_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Meepo_Poof_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Ransack {
    public const nint health_steal_heroes = 0x1318; // int32
    public const nint health_steal_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_MeltingStrike_Debuff {
    public const nint armor_removed = 0x1318; // float32
}

public static class CDOTA_Modifier_Miniboss_Radiance {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Miniboss_Radiance_Debuff {
    public const nint aura_damage = 0x1320; // int32
    public const nint aura_interval = 0x1324; // float32
    public const nint aura_radius = 0x1328; // float32
}

public static class CDOTA_Modifier_Miniboss_Reflect {
    public const nint passive_reflection_pct = 0x1318; // int32
    public const nint passive_reflection_bonus_per_death = 0x131C; // int32
}

public static class CDOTA_Modifier_Miniboss_UnyieldingShield {
    public const nint damage_absorb = 0x1318; // int32
    public const nint regen_per_second = 0x131C; // float32
    public const nint regen_bonus_per_death = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
    public const nint m_timeLastTick = 0x1328; // GameTime_t
    public const nint nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Minotaur_Horn_Immune {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Mirana_Leap {
    public const nint leap_distance = 0x1318; // int32
    public const nint shard_radius = 0x131C; // float32
    public const nint shard_radius_end = 0x1320; // float32
    public const nint shard_damage = 0x1324; // float32
    public const nint shard_slow_pct = 0x1328; // float32
    public const nint shard_slow_duration = 0x132C; // float32
    public const nint leap_speed = 0x1330; // float32
    public const nint leap_acceleration = 0x1334; // float32
    public const nint leap_radius = 0x1338; // int32
    public const nint leap_bonus_duration = 0x133C; // float32
    public const nint m_bLaunched = 0x1340; // bool
}

public static class CDOTA_Modifier_Mirana_Leap_Buff {
    public const nint leap_speedbonus = 0x1318; // int32
    public const nint leap_speedbonus_as = 0x131C; // int32
    public const nint m_bCritUsed = 0x1320; // bool
}

public static class CDOTA_Modifier_Mirana_Leap_Slow {
    public const nint shard_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Mirana_MoonlightShadow {
    public const nint duration = 0x1328; // float32
    public const nint bonus_movement_speed = 0x132C; // int32
    public const nint evasion = 0x1330; // int32
}

public static class CDOTA_Modifier_Mirana_Starfall_Scepter_Thinker {
    public const nint interval_scepter = 0x1318; // float32
    public const nint bInBufferTime = 0x131C; // bool
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Mirana_Starfall_Thinker {
    public const nint starfall_secondary_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_MjollnirChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint chain_damage_per_charge = 0x1328; // int32
    public const nint m_iCurJumpCount = 0x132C; // int32
    public const nint m_vCurTargetLoc = 0x1330; // Vector
    public const nint m_hHitEntities = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_MonkeyKing_ArcToGround {
    public const nint leap_speed = 0x1318; // float32
    public const nint give_up_distance = 0x131C; // float32
    public const nint attackspeed_duration = 0x1320; // float32
    public const nint m_flOriginalZDelta = 0x1324; // float32
    public const nint m_flZDelta = 0x1328; // float32
}

public static class CDOTA_Modifier_MonkeyKing_Bounce {
    public const nint jump_damage_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_MonkeyKing_BounceLeap {
    public const nint give_up_distance = 0x1318; // float32
    public const nint ground_jump_distance = 0x131C; // float32
    public const nint m_flZDelta = 0x1320; // float32
    public const nint perched_day_vision = 0x1324; // float32
    public const nint perched_night_vision = 0x1328; // float32
}

public static class CDOTA_Modifier_MonkeyKing_BouncePerch {
    public const nint m_hTree = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_bGroundToTree = 0x131C; // bool
    public const nint m_bTreeToGround = 0x131D; // bool
    public const nint m_bTreeToTree = 0x131E; // bool
    public const nint perched_day_vision = 0x1320; // float32
    public const nint perched_night_vision = 0x1324; // float32
    public const nint m_bAbilityIsStolen = 0x1328; // bool
}

public static class CDOTA_Modifier_MonkeyKing_BoundlessStrike_ShardMovement {
    public const nint acceleration_z = 0x1318; // int32
    public const nint min_height_above_lowest = 0x131C; // int32
    public const nint min_height_above_highest = 0x1320; // int32
    public const nint max_horizontal_acceleration = 0x1324; // int32
    public const nint spring_channel_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmyThinker {
    public const nint m_fDuration = 0x1318; // float32
    public const nint m_fTimeThinkerCreated = 0x131C; // GameTime_t
    public const nint m_vTargetPositions = 0x1320; // CUtlVector< Vector >
    public const nint m_vInitialPos = 0x1338; // Vector
    public const nint first_radius = 0x1344; // int32
    public const nint num_first_soldiers = 0x1348; // int32
    public const nint second_radius = 0x134C; // int32
    public const nint num_second_soldiers = 0x1350; // int32
    public const nint m_nRingFXIndex = 0x1354; // ParticleIndex_t
    public const nint final_radius = 0x1358; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_BonusDamage {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_Soldier {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_vDirection = 0x1324; // Vector
    public const nint move_speed = 0x1330; // int32
    public const nint m_hThinker = 0x1334; // CHandle< C_BaseEntity >
    public const nint m_bIsInPosition = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bAutoSpawn = 0x1340; // bool
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_SoldierInPosition {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_hAttackTarget = 0x1324; // CHandle< C_BaseEntity >
    public const nint attack_speed = 0x1328; // float32
    public const nint second_radius = 0x132C; // int32
    public const nint outer_attack_buffer = 0x1330; // int32
    public const nint m_hThinker = 0x1334; // CHandle< C_BaseEntity >
    public const nint m_bDisarmed = 0x1338; // bool
    public const nint m_flNextAttackTime = 0x133C; // GameTime_t
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_bAutoSpawn = 0x1344; // bool
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap {
    public const nint counter_duration = 0x1318; // int32
    public const nint required_hits = 0x131C; // int32
    public const nint max_duration = 0x1320; // int32
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap_Bonuses {
    public const nint charges = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_nIgnoreStrikeIndex = 0x1328; // int32
    public const nint m_bIsAttackAnim = 0x132C; // bool
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap_Counter {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_MonkeyKing_SpringSlow {
    public const nint impact_movement_slow = 0x1318; // int32
    public const nint m_nSlowPct = 0x131C; // int32
}

public static class CDOTA_Modifier_MonkeyKing_Spring_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_MonkeyKing_Strike_Crit {
    public const nint strike_crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_MonkeyKing_Transform {
    public const nint m_strDisguise = 0x1318; // CUtlString
    public const nint movespeed = 0x1320; // int32
    public const nint m_nDisguisedSpeed = 0x1324; // int32
    public const nint reveal_radius = 0x1328; // int32
    public const nint m_nDisguiseEffectIndex = 0x132C; // ParticleIndex_t
    public const nint m_hCourierToClone = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_hCreepToClone = 0x1334; // CHandle< C_BaseEntity >
    public const nint m_aryBountyRuneSpawners = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bIsFlyingCourier = 0x1350; // bool
    public const nint m_bIsRune = 0x1351; // bool
    public const nint m_bIsBanana = 0x1352; // bool
    public const nint m_bIsFakeAlly = 0x1353; // bool
    public const nint m_nMischiefUnitType = 0x1354; // uint32
    public const nint m_nMischiefHealthbarOffset = 0x1358; // int32
    public const nint invul_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_MonkeyKing_TreeDance_Activity {
    public const nint m_fAbilityRangePct = 0x1318; // float32
    public const nint m_bIsSpring = 0x131C; // float32
}

public static class CDOTA_Modifier_Morokai_JungleHealBeam {
    public const nint beam_count = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint beam_radius = 0x1320; // int32
    public const nint beam_buffer = 0x1324; // int32
    public const nint turn_rate = 0x1328; // int32
    public const nint hp_per_second = 0x132C; // int32
    public const nint m_flLastThinkTime = 0x1330; // GameTime_t
    public const nint m_vecTargetedEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint flLastTreeDestroyed = 0x1368; // float32
    public const nint flTreeDestructionCooldown = 0x136C; // float32
}

public static class CDOTA_Modifier_Morphling_Adaptive_Strike_Armor {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Morphling_Morph {
    public const nint tick_rate = 0x1318; // float32
    public const nint bonus_attributes = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_Morph_Agi {
    public const nint mana_cost = 0x1318; // int32
    public const nint points_per_tick = 0x131C; // int32
    public const nint morph_cooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_Morphling_Morph_Str {
    public const nint mana_cost = 0x1318; // int32
    public const nint points_per_tick = 0x131C; // int32
    public const nint morph_cooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_Morphling_Replicate {
    public const nint m_hTinyTreeWearable = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_flBaseAttackRange = 0x131C; // float32
    public const nint m_flBaseMovementSpeed = 0x1320; // float32
    public const nint m_iszModelName = 0x1328; // CUtlSymbolLarge
    public const nint m_iszProjectileName = 0x1330; // CUtlSymbolLarge
    public const nint m_iszOriginalModel = 0x1338; // CUtlSymbolLarge
    public const nint m_nCopiedHeroID = 0x1340; // int32
    public const nint m_fOriginalModelScale = 0x1344; // float32
    public const nint m_vecOriginalItems = 0x1348; // CUtlVector< C_EconItemView* >
    public const nint m_flOriginalStr = 0x1390; // float32
    public const nint m_flOriginalAgi = 0x1394; // float32
    public const nint m_flOriginalInt = 0x1398; // float32
    public const nint m_iOriginalAttackCapability = 0x139C; // int32
    public const nint m_flOriginalHealthPercentage = 0x13A0; // float32
    public const nint m_flOriginalManaPercentage = 0x13A4; // float32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nAgilitySteal = 0x1324; // int32
    public const nint nIntSteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint nStrengthSteal = 0x131C; // int32
    public const nint nAgiSteal = 0x1320; // int32
    public const nint nIntSteal = 0x1324; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_spell_amplify = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nIntSteal = 0x1324; // int32
    public const nint nAgilitySteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_spell_amplify = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_status_resist = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nAgiSteal = 0x1324; // int32
    public const nint nIntSteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_status_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Morty_Hop {
    public const nint duration = 0x1318; // float32
    public const nint height = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint damage_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_MoveSpeed_Percentage {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_MudGolem_CloakAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_MudGolem_CloakAura_Bonus {
    public const nint bonus_magical_armor = 0x1318; // int32
    public const nint bonus_magical_armor_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_MudGolem_RockDestroy {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint shard_health = 0x1320; // int32
    public const nint shard_damage = 0x1324; // int32
    public const nint shard_duration = 0x1328; // int32
}

public static class CDOTA_Modifier_Muerta_DeadShot_Fear {
    public const nint m_vFearDir = 0x1318; // Vector
}

public static class CDOTA_Modifier_Muerta_DeadShot_Slow {
    public const nint impact_slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Muerta_Gunslinger {
    public const nint double_shot_chance = 0x1318; // float32
    public const nint target_search_bonus_range = 0x131C; // float32
}

public static class CDOTA_Modifier_Muerta_PartingShot_PhysicalBodyDebuff {
    public const nint m_hSoulEntityClient = 0x1318; // CHandle< C_BaseEntity >
    public const nint damage_reduction_percent = 0x131C; // int32
}

public static class CDOTA_Modifier_Muerta_PartingShot_ProjectileReturn {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_hPhysicalBody = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Muerta_PartingShot_SoulDebuff {
    public const nint ethereal_damage_bonus = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
    public const nint m_hPhysicalBody = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_nTetherFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Muerta_PierceTheVeil {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Muerta_PierceTheVeil_Buff {
    public const nint modelscale = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint spell_lifesteal = 0x1320; // int32
    public const nint attack_projectile_speed_bonus = 0x1324; // int32
    public const nint attack_range_bonus = 0x1328; // int32
    public const nint m_iOriginalAttackCapabilities = 0x132C; // int32
    public const nint m_nScreenFXIndex = 0x1330; // ParticleIndex_t
}

public static class CDOTA_Modifier_Muerta_Revenant_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint hit_radius = 0x131C; // int32
    public const nint dead_zone_distance = 0x1320; // int32
    public const nint speed_initial = 0x1324; // float32
    public const nint speed_max = 0x1328; // float32
    public const nint acceleration = 0x132C; // float32
    public const nint num_revenants = 0x1330; // int32
    public const nint rotation_direction = 0x1334; // int32
    public const nint radius = 0x1338; // int32
    public const nint rotation_initial = 0x133C; // float32
    public const nint show_warning = 0x1340; // int32
    public const nint m_nWarningFX = 0x1344; // ParticleIndex_t
    public const nint m_SpiritDefs = 0x1348; // CUtlVector< sRevenantDef >
}

public static class CDOTA_Modifier_Muerta_TheCallingAuraSlow {
    public const nint aura_movespeed_slow = 0x1318; // int32
    public const nint aura_attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Muertas_Gun_Fear {
    public const nint m_vFearDir = 0x1318; // Vector
}

public static class CDOTA_Modifier_Muertas_Gun_Slow {
    public const nint impact_slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Cooldown_Reduction {
    public const nint m_iCooldownReduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Crit_Chance {
    public const nint m_iChance = 0x1318; // int32
    public const nint m_iDamageMultiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Mutation_DeathExplosionDelayed {
    public const nint m_iDamageBase = 0x1318; // int32
    public const nint m_iDamagePerLevel = 0x131C; // int32
    public const nint m_iRadius = 0x1320; // int32
}

public static class CDOTA_Modifier_Mutation_KillstreakPower {
    public const nint m_iDamageDonePct = 0x1318; // int32
    public const nint m_iDamageTakenPct = 0x131C; // int32
    public const nint m_iModelScale = 0x1320; // int32
}

public static class CDOTA_Modifier_Mutation_StationaryDamageReduction {
    public const nint m_iReductionPct = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Treecutter {
    public const nint m_iRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Vampire {
    public const nint m_iLifeStealPct = 0x1318; // int32
    public const nint m_iHealthDrain = 0x131C; // int32
}

public static class CDOTA_Modifier_NPXBuff {
    public const nint m_nCurReduction = 0x1318; // int32
}

public static class CDOTA_Modifier_NagaSiren_Crit_Passive {
    public const nint chance = 0x1318; // int32
    public const nint crit = 0x131C; // int32
}

public static class CDOTA_Modifier_NagaSiren_RipTide {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren {
    public const nint animation_rate = 0x1318; // float32
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nAffectedEnemies = 0x131C; // int32
    public const nint m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren_Healing_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nAffectedAllies = 0x131C; // int32
    public const nint m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Naga_Siren_Reel_In {
    public const nint pull_strength = 0x1318; // float32
    public const nint min_pull_distance = 0x131C; // int32
    public const nint m_flLastThinkTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_bStackCountChanged = 0x131C; // bool
    public const nint m_fStackExpireTimes = 0x1320; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Counter {
    public const nint mana_regen = 0x1318; // float32
    public const nint health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Effect {
    public const nint aura_damage = 0x1318; // float32
    public const nint heal_reduction_pct = 0x131C; // int32
    public const nint heal_regen_to_damage = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Necrolyte_ReapersScythe {
    public const nint stun_duration = 0x1318; // float32
    public const nint m_bIllusion = 0x131C; // bool
    public const nint m_bArcWardenClone = 0x131D; // bool
    public const nint m_bSpiritBear = 0x131E; // bool
}

public static class CDOTA_Modifier_Necrolyte_ReapersScythe_RespawnTime {
    public const nint hp_per_kill = 0x1318; // float32
    public const nint mana_per_kill = 0x131C; // float32
    public const nint hp_regen = 0x1320; // float32
    public const nint mp_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Necrolyte_Sadist_Active {
    public const nint heal_bonus = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint slow_aoe = 0x1320; // int32
}

public static class CDOTA_Modifier_Necrolyte_Sadist_Aura_Effect {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Archer_AoE {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Archer_Purge {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_LastWill {
    public const nint explosion = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_ManaBurn {
    public const nint burn_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_Sight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Necrophos_Death_Seeker_Ethereal {
    public const nint magic_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Nemesis_Curse {
    public const nint debuff_self = 0x1318; // int32
    public const nint debuff_enemy = 0x131C; // float32
    public const nint debuff_enemy_duration = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Neutral_Sleep_AI {
    public const nint m_iFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Neutral_Upgrade {
    public const nint increase_time = 0x1318; // float32
    public const nint increase_damage = 0x131C; // int32
    public const nint increase_health = 0x1320; // int32
    public const nint increase_armor = 0x1324; // float32
    public const nint increase_aspd = 0x1328; // int32
    public const nint increase_gold = 0x132C; // int32
    public const nint increase_xp = 0x1330; // int32
    public const nint current_level = 0x1334; // int32
    public const nint max_level = 0x1338; // int32
}

public static class CDOTA_Modifier_Nevermore_Necromastery {
    public const nint necromastery_damage_per_soul = 0x1318; // int32
    public const nint necromastery_max_souls = 0x131C; // int32
    public const nint necromastery_max_souls_scepter = 0x1320; // int32
    public const nint shard_crit_pct = 0x1324; // int32
    public const nint shard_souls_per_kill = 0x1328; // int32
    public const nint shard_fear_duration = 0x132C; // float32
    public const nint m_iParticleSoulsIndex = 0x1330; // ParticleIndex_t
    public const nint m_FXIndex = 0x1334; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Nevermore_Presence {
    public const nint presence_armor_reduction = 0x1318; // int32
    public const nint bonus_armor_per_stack = 0x131C; // int32
    public const nint m_bWasHidden = 0x1320; // bool
}

public static class CDOTA_Modifier_Nevermore_Presence_Aura {
    public const nint presence_radius = 0x1318; // int32
    public const nint kill_buff_duration = 0x131C; // float32
    public const nint m_fLastStackChange = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Nevermore_Requiem_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Nevermore_Requiem_InvisBreak {
    public const nint bDisableInvis = 0x1318; // bool
}

public static class CDOTA_Modifier_Nevermore_Requiem_Slow {
    public const nint requiem_reduction_ms = 0x1318; // int32
    public const nint requiem_reduction_mres = 0x131C; // int32
}

public static class CDOTA_Modifier_NianCharge {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_NianChargePinned {
    public const nint pinned_damage_amount = 0x1318; // float32
    public const nint pinned_damage_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Nian_Apocalypse {
    public const nint area_of_effect = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Damage_Reflection {
    public const nint m_flReflectionStartTime = 0x1318; // GameTime_t
    public const nint m_flReflectionAmount = 0x131C; // float32
}

public static class CDOTA_Modifier_Nian_Dive {
    public const nint pounce_distance = 0x1318; // int32
    public const nint pounce_speed = 0x131C; // float32
    public const nint pounce_acceleration = 0x1320; // float32
    public const nint pounce_radius = 0x1324; // int32
    public const nint pounce_damage = 0x1328; // int32
    public const nint stun_radius = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
    public const nint leash_duration = 0x1334; // float32
    public const nint initial_delay = 0x1338; // float32
    public const nint landing_delay = 0x133C; // float32
    public const nint vertical_adjust = 0x1340; // float32
    public const nint vertical_adjust_max_distance = 0x1344; // float32
    public const nint vertical_adjust_min_distance = 0x1348; // float32
    public const nint claw_damage = 0x134C; // int32
    public const nint claw_damage_radius = 0x1350; // int32
    public const nint claw_damage_delay = 0x1354; // float32
    public const nint claw_damage_duration = 0x1358; // float32
    public const nint m_vHitEntities = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Nian_EruptionPendingThinker {
    public const nint tick_count = 0x1318; // int32
    public const nint beam_radius = 0x131C; // int32
    public const nint m_nTickCount = 0x1320; // int32
    public const nint n_FXIndex = 0x1324; // int32
}

public static class CDOTA_Modifier_Nian_EruptionThinker {
    public const nint explosion_radius = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint damage = 0x1320; // int32
    public const nint n_FXIndex = 0x1324; // int32
}

public static class CDOTA_Modifier_Nian_Flag_Trap_Thinker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Flag_Trapped {
    public const nint bonus_spell_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Frenzy {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint stun_radius = 0x1320; // int32
    public const nint dive_distance = 0x1324; // float32
    public const nint initial_rise_time = 0x1328; // float32
    public const nint right_swipe_time = 0x132C; // float32
    public const nint left_swipe_time = 0x1330; // float32
    public const nint knockdown_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint m_nTickCounter = 0x133C; // int32
    public const nint m_hEnemies = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Nian_GreaterBash {
    public const nint chance_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint movespeed_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Nian_GreaterBash_Speed {
    public const nint bonus_movespeed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Hurricane_Whirlpool {
    public const nint pull_switch_interval = 0x1318; // float32
    public const nint pull_speed = 0x131C; // int32
    public const nint m_bForward = 0x1320; // bool
    public const nint m_nfxIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Nian_Knockdown {
    public const nint m_flStandUpDuration = 0x1318; // float32
    public const nint m_flKnockDownDuration = 0x131C; // float32
    public const nint m_bDebuff = 0x1320; // bool
    public const nint m_bStandingUp = 0x1321; // bool
}

public static class CDOTA_Modifier_Nian_Leap {
    public const nint pounce_distance = 0x1318; // int32
    public const nint pounce_speed = 0x131C; // float32
    public const nint pounce_acceleration = 0x1320; // float32
    public const nint initial_delay = 0x1324; // float32
    public const nint landing_delay = 0x1328; // float32
}

public static class CDOTA_Modifier_Nian_Waterball {
    public const nint trail_damage_per_second = 0x1318; // int32
    public const nint trail_damage_radius = 0x131C; // int32
    public const nint m_vFXIndices = 0x1320; // CUtlVector< int32 >
    public const nint m_vLocations = 0x1338; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_Nian_WhirlpoolThinker {
    public const nint pull_radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Nian_Whirlpool_Pull {
    public const nint pull_radius = 0x1318; // int32
    public const nint pull_speed = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint whirlpool_damage = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
    public const nint m_flDamageTick = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_NightStalker_CripplingFear {
    public const nint dps = 0x1320; // int32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_NightStalker_CripplingFear_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_NightStalker_Darkness {
    public const nint bonus_damage = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint hp_regen = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_NightStalker_HunterInTheNight {
    public const nint bonus_movement_speed_pct_night = 0x1318; // int32
    public const nint bonus_attack_speed_night = 0x131C; // int32
    public const nint bonus_status_resist_night = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_NightStalker_Void {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_NightStalker_Void_ZoneThinker {
    public const nint radius_scepter = 0x1318; // int32
}

public static class CDOTA_Modifier_Nullifier {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Nullifier_Mute {
    public const nint slow_interval_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Nyx_Assassin_Burrow {
    public const nint health_regen_rate = 0x1328; // float32
    public const nint mana_regen_rate = 0x132C; // float32
    public const nint damage_reduction = 0x1330; // int32
    public const nint m_vecInitialPos = 0x1334; // Vector
}

public static class CDOTA_Modifier_Nyx_Assassin_Impale {
    public const nint impale_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Nyx_Assassin_Jolt_Debuff {
    public const nint resist_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Nyx_Assassin_SpikedCarapace {
    public const nint stun_duration = 0x1318; // float32
    public const nint m_hProcessedEnemies = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Nyx_Assassin_Vendetta {
    public const nint bonus_damage = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint shard_movement_speed_bonus = 0x1330; // int32
    public const nint mana_removal_pct = 0x1334; // int32
    public const nint m_bFreePathing = 0x1338; // bool
    public const nint attack_animation_bonus = 0x133C; // int32
    public const nint attack_range_bonus = 0x1340; // int32
}

public static class CDOTA_Modifier_Nyx_Assassin_Vendetta_Armor_Reduction {
    public const nint shard_magic_resist_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Oakheart_Healing {
    public const nint heal = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_ArcaneOrb {
    public const nint mana_pool_damage_pct = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Obsidian_Destroyer_AstralImprisonment_Prison {
    public const nint allied_movement_speed_pct = 0x1318; // int32
    public const nint m_bAllowMovement = 0x131C; // bool
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium {
    public const nint proc_chance = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint mana_capacity_steal = 0x1320; // float32
    public const nint mana_capacity_duration = 0x1324; // float32
    public const nint shard_mana_duration = 0x1328; // float32
    public const nint scepter_barrier_threshold = 0x132C; // float32
    public const nint scepter_barrier_duration = 0x1330; // float32
    public const nint scepter_barrier_cooldown = 0x1334; // float32
    public const nint scepter_max_mana_barrier_pct = 0x1338; // float32
    public const nint spell_lifesteal = 0x133C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Barrier {
    public const nint barrier_amt = 0x1318; // float32
    public const nint m_nDamageAbsorbed = 0x131C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_BonusMana {
    public const nint shard_bonus_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Buff {
    public const nint mana_steal = 0x1318; // int32
    public const nint m_flCurrentMana = 0x131C; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Debuff {
    public const nint mana_steal = 0x1318; // int32
    public const nint m_flCurrentMana = 0x131C; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_EssenceAura {
    public const nint bonus_mana = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_EssenceAura_Effect {
    public const nint radius = 0x1318; // int32
    public const nint restore_chance = 0x131C; // int32
    public const nint restore_amount = 0x1320; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Mana_Allergy {
    public const nint percentage_damage = 0x1318; // int32
    public const nint percentage_heal = 0x131C; // int32
}

public static class CDOTA_Modifier_OgreMagi_FrostArmor {
    public const nint armor_bonus = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_OgreMagi_FrostArmor_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_OgreSealTotem_Active {
    public const nint m_nCurrentBounce = 0x1318; // int32
    public const nint leap_distance = 0x131C; // int32
    public const nint leap_speed = 0x1320; // float32
    public const nint leap_acceleration = 0x1324; // float32
    public const nint leap_radius = 0x1328; // int32
    public const nint leap_bonus_duration = 0x132C; // float32
    public const nint m_bLaunched = 0x1330; // bool
}

public static class CDOTA_Modifier_OgreSealTotem_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Bloodlust {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint self_bonus = 0x1320; // int32
    public const nint modelscale = 0x1324; // float32
}

public static class CDOTA_Modifier_Ogre_Magi_DumbLuck {
    public const nint mana_per_str = 0x1318; // float32
    public const nint mana_regen_per_str = 0x131C; // float32
}

public static class CDOTA_Modifier_Ogre_Magi_Fireblast_Multicast {
    public const nint m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
    public const nint multicast_delay = 0x131C; // float32
    public const nint m_nMultiCastCount = 0x1320; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Ignite {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Ignite_Multicast {
    public const nint m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
    public const nint multicast_delay = 0x131C; // float32
    public const nint m_nMultiCastCount = 0x1320; // int32
    public const nint ignite_multicast_aoe = 0x1324; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Smash_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint attacks = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Omniknight_Angelic_Flight {
    public const nint movement_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_GuardianAngel {
    public const nint scepter_status_resist = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_HammerOfPurity {
    public const nint m_flNextAttackTime = 0x1318; // GameTime_t
    public const nint attack_cooldown = 0x131C; // float32
}

public static class CDOTA_Modifier_Omniknight_Hammer_Of_Purity_Bomb {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Marty {
    public const nint base_strength = 0x1318; // int32
    public const nint base_hpregen = 0x131C; // int32
    public const nint strength_bonus = 0x1320; // int32
    public const nint nDebuffAmount = 0x1324; // int32
}

public static class CDOTA_Modifier_Omniknight_Pacify {
    public const nint spell_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Repel {
    public const nint status_resistance = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint bonus_str = 0x1320; // int32
}

public static class CDOTA_Modifier_Oracle_FalsePromise {
    public const nint m_bWaitingForInvulnerability = 0x1348; // bool
    public const nint m_bDisableHealing = 0x1349; // bool
    public const nint m_flHealthOnCreated = 0x134C; // float32
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1354; // ParticleIndex_t
    public const nint m_flRunningDmg = 0x1358; // float32
    public const nint m_flRunningHealth = 0x135C; // float32
    public const nint bonus_armor = 0x1360; // int32
}

public static class CDOTA_Modifier_Oracle_FalsePromise_Invis {
    public const nint shard_spell_amp_bonus = 0x1328; // float32
    public const nint shard_bat_bonus = 0x132C; // float32
}

public static class CDOTA_Modifier_Oracle_PurifyingFlames {
    public const nint heal_per_second = 0x1318; // float32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Oracle_RainOfDestiny {
    public const nint heal_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Oracle_RainOfDestiny_Aura {
    public const nint damage = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Orb_Of_Corrosion_Debuff {
    public const nint armor = 0x1318; // int32
    public const nint slow_melee = 0x131C; // int32
    public const nint slow_range = 0x1320; // int32
    public const nint heal_reduction = 0x1324; // int32
    public const nint bCasterRanged = 0x1328; // bool
    public const nint damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Orb_Of_Destruction_Debuff {
    public const nint armor_reduction = 0x1318; // int32
    public const nint slow_melee = 0x131C; // int32
    public const nint slow_range = 0x1320; // int32
    public const nint bCasterRanged = 0x1324; // bool
}

public static class CDOTA_Modifier_Orb_Of_Revelations {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint cast_range_bonus = 0x1324; // int32
    public const nint bonus_magical_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Orb_Of_Revelations_Reveal {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_OrchidMalevolence_Debuff {
    public const nint silence_damage_percent = 0x1318; // float32
    public const nint m_flDamageTaken = 0x131C; // float32
}

public static class CDOTA_Modifier_Overflowing_Elixir_Regen {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_Gyroshell {
    public const nint mp_cost_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint forward_move_speed = 0x1320; // float32
    public const nint turn_rate_boosted = 0x1324; // float32
    public const nint turn_rate = 0x1328; // float32
    public const nint hit_radius = 0x132C; // int32
    public const nint knockback_radius = 0x1330; // int32
    public const nint m_bHitFirstUpdate = 0x1334; // bool
    public const nint m_flHitEndTime = 0x1338; // GameTime_t
    public const nint hit_recover_time = 0x133C; // float32
    public const nint m_flJumpEndTime = 0x1340; // GameTime_t
    public const nint jump_recover_time = 0x1344; // float32
    public const nint m_flTurnBoostProgress = 0x1348; // float32
    public const nint m_flFacingTarget = 0x134C; // float32
    public const nint m_bIsJumping = 0x1350; // bool
    public const nint m_nFXIndex = 0x1354; // ParticleIndex_t
    public const nint m_flTurnHistory = 0x1358; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1370; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesCredited = 0x1388; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x13A0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer {
    public const nint debuff_delay = 0x1318; // float32
    public const nint chance_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer_Debuff {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer_Delay {
    public const nint duration = 0x1318; // float32
    public const nint debuff_delay = 0x131C; // float32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot {
    public const nint chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot_Disarm {
    public const nint armor = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot_Silence {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_Rollup {
    public const nint mp_cost_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint forward_move_speed = 0x1320; // float32
    public const nint turn_rate_boosted = 0x1324; // float32
    public const nint turn_rate = 0x1328; // float32
    public const nint hit_radius = 0x132C; // int32
    public const nint knockback_radius = 0x1330; // int32
    public const nint m_bHitFirstUpdate = 0x1334; // bool
    public const nint m_flHitEndTime = 0x1338; // GameTime_t
    public const nint hit_recover_time = 0x133C; // float32
    public const nint m_flJumpEndTime = 0x1340; // GameTime_t
    public const nint jump_recover_time = 0x1344; // float32
    public const nint m_flTurnBoostProgress = 0x1348; // float32
    public const nint m_flFacingTarget = 0x134C; // float32
    public const nint m_flLastHeroAttackTime = 0x1350; // GameTime_t
    public const nint m_bIsJumping = 0x1354; // bool
    public const nint m_nFXIndex = 0x1358; // ParticleIndex_t
    public const nint m_flGyroshellDurationRemaining = 0x135C; // float32
    public const nint m_flTurnHistory = 0x1360; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1378; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesCredited = 0x1390; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x13A8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Pangolier_ShieldCrash_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAbsorbRemaining = 0x131C; // int32
    public const nint hero_shield = 0x1320; // int32
    public const nint base_shield = 0x1324; // int32
    public const nint accummulated_value = 0x1328; // int32
}

public static class CDOTA_Modifier_Pangolier_ShieldCrash_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_Swashbuckle {
    public const nint m_nStrikesLeft = 0x1318; // int32
    public const nint attack_interval = 0x131C; // float32
    public const nint m_vSpawnPos = 0x1320; // Vector
    public const nint m_vStrikeDir = 0x132C; // Vector
    public const nint m_vDashDir = 0x1338; // Vector
}

public static class CDOTA_Modifier_Pangolier_Swashbuckle_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Passive_Mango_Tree {
    public const nint m_hTree = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nMangoSeconds = 0x131C; // int32
    public const nint m_MangoTimer = 0x1320; // CountdownTimer
    public const nint m_nRespawnSeconds = 0x1338; // int32
    public const nint m_RespawnTimer = 0x1340; // CountdownTimer
    public const nint m_nMangosAvailable = 0x1358; // int32
    public const nint m_nChannelCount = 0x135C; // int32
}

public static class CDOTA_Modifier_Penta_Edged_Sword_Maim {
    public const nint maim_slow_movement = 0x1318; // int32
    public const nint maim_slow_attack = 0x131C; // int32
}

public static class CDOTA_Modifier_PersistentInvisibility {
    public const nint fade_delay = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // float32
    public const nint m_flLastActionTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_PhantomAssassin_Blur {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_BlurActive {
    public const nint radius = 0x1328; // int32
    public const nint fade_duration = 0x132C; // float32
    public const nint scepter_fade_duration = 0x1330; // float32
    public const nint m_bDestroyNext = 0x1334; // bool
}

public static class CDOTA_Modifier_PhantomAssassin_CoupdeGrace {
    public const nint crit_bonus = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint dagger_crit_chance = 0x1320; // int32
    public const nint crit_active = 0x1324; // bool
    public const nint duration = 0x1328; // float32
}

public static class CDOTA_Modifier_PhantomAssassin_Fan_Of_Knives_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint projectile_speed = 0x1350; // int32
    public const nint radius = 0x1354; // int32
    public const nint duration = 0x1358; // float32
    public const nint pct_health_damage_initial = 0x135C; // float32
    public const nint max_damage_initial = 0x1360; // float32
}

public static class CDOTA_Modifier_PhantomAssassin_Gravestone {
    public const nint m_nFXIndex = 0x1318; // int32
    public const nint m_bContractGravestoneComplete = 0x131C; // bool
}

public static class CDOTA_Modifier_PhantomAssassin_Gravestone_Thinker {
    public const nint m_nEpitaph = 0x1318; // int32
    public const nint m_nVictimPlayerID = 0x131C; // PlayerID_t
    public const nint m_nVictimHeroID = 0x1320; // int32
    public const nint m_nCritDmg = 0x1324; // int32
    public const nint m_nContractComplete = 0x1328; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_PhantomStrike {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint lifesteal_pct = 0x131C; // int32
    public const nint creep_lifesteal_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_StiflingDagger {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_StiflingDagger_Caster {
    public const nint base_damage = 0x1318; // int32
    public const nint attack_factor = 0x131C; // int32
}

public static class CDOTA_Modifier_PhantomLancer_Doppelwalk_Illusion {
    public const nint flDamageTaken = 0x1318; // float32
}

public static class CDOTA_Modifier_PhantomLancer_Dopplewalk_Phase {
    public const nint vTargetPosition = 0x1318; // Vector
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose {
    public const nint proc_chance_pct = 0x1318; // int32
    public const nint illusion_proc_chance_pct = 0x131C; // int32
    public const nint max_illusions = 0x1320; // int32
    public const nint illusion_duration = 0x1324; // float32
    public const nint illusion_damage_out_pct = 0x1328; // int32
    public const nint illusion_damage_in_pct = 0x132C; // int32
    public const nint shard_bonus_illusions = 0x1330; // int32
}

public static class CDOTA_Modifier_PhantomLancer_JuxtaposeIllusion {
    public const nint m_bstrongIllusion = 0x1318; // bool
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Cache {
    public const nint m_nControllingPlayer = 0x1318; // PlayerID_t
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Invisibility {
    public const nint invis_movespeed = 0x1328; // float32
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Thinker {
    public const nint max_illusions = 0x1318; // int32
    public const nint scepter_bonus_illusions = 0x131C; // int32
    public const nint illusion_duration = 0x1320; // float32
    public const nint illusion_damage_out_pct = 0x1324; // int32
    public const nint illusion_damage_in_pct = 0x1328; // int32
    public const nint scepter_bonus_duration = 0x132C; // float32
    public const nint m_iIllusionsSoFar = 0x1330; // int32
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge {
    public const nint min_distance = 0x1318; // int32
    public const nint max_distance = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge_Agility {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge_Boost {
    public const nint bonus_speed = 0x1318; // int32
    public const nint agility_duration = 0x131C; // float32
    public const nint m_bGiveAgility = 0x1320; // bool
    public const nint m_hTarget = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_PhantomLancer_SpiritLance {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Phoenix_FireSpiritBurn {
    public const nint tick_interval = 0x1318; // float32
    public const nint attackspeed_slow = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
}

public static class CDOTA_Modifier_Phoenix_FireSpiritCount {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Phoenix_IcarusDive {
    public const nint m_vSource = 0x1318; // Vector
    public const nint m_vTarget = 0x1324; // Vector
    public const nint m_vDirection = 0x1330; // Vector
    public const nint m_angDirection = 0x133C; // QAngle
    public const nint m_flCurrentTime = 0x1348; // float32
    public const nint dash_length = 0x134C; // int32
    public const nint dash_width = 0x1350; // int32
    public const nint hit_radius = 0x1354; // int32
    public const nint burn_duration = 0x1358; // float32
    public const nint dive_duration = 0x135C; // float32
    public const nint impact_damage = 0x1360; // float32
    public const nint m_vecHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Phoenix_IcarusDiveBurn {
    public const nint burn_tick_interval = 0x1318; // float32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint max_hero_attacks = 0x1320; // int32
    public const nint max_hero_attacks_scepter = 0x1324; // int32
    public const nint max_hero_attacks_required = 0x1328; // int32
    public const nint m_hSecondaryTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_iAttackCount = 0x1330; // int32
}

public static class CDOTA_Modifier_Phoenix_SunRay {
    public const nint hp_cost_perc_per_second = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint m_flCurrentTime = 0x133C; // float32
    public const nint m_flAccumulatedSelfDamage = 0x1340; // float32
    public const nint m_bMovingForward = 0x1344; // bool
    public const nint m_bTurningFast = 0x1345; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint hp_perc_damage = 0x134C; // float32
    public const nint hp_perc_heal = 0x1350; // float32
    public const nint blind_duration = 0x1354; // float32
    public const nint blind_per_second = 0x1358; // int32
    public const nint m_nBeamFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1360; // CHandle< C_BaseEntity >[8]
    public const nint m_hBeamEnd = 0x1380; // CHandle< C_BaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1384; // bool
    public const nint m_hBeamEndSound = 0x1388; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Phoenix_SunRay_Luminance {
    public const nint pct_of_heal_as_attack_speed = 0x1318; // float32
    public const nint m_fAttackSpeedBonus = 0x131C; // float32
}

public static class CDOTA_Modifier_Phoenix_Sun_Debuff {
    public const nint damage_per_sec = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Phoenix_Sun_Ray_Slow {
    public const nint shard_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_BonusDamage {
    public const nint acorn_shot_damage = 0x1318; // int32
    public const nint base_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_ShieldBash_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_ShieldBash_Slow {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Plague_Wards_Bonus {
    public const nint ward_hp = 0x1318; // int32
    public const nint ward_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Plague_Wards_Bonus_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Plus_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Pogo_Stick_Active {
    public const nint leap_distance = 0x1318; // int32
    public const nint leap_speed = 0x131C; // float32
    public const nint leap_acceleration = 0x1320; // float32
    public const nint leap_radius = 0x1324; // int32
    public const nint leap_bonus_duration = 0x1328; // float32
    public const nint m_bLaunched = 0x132C; // bool
}

public static class CDOTA_Modifier_PoisonNova_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1338; // int32
    public const nint radius = 0x133C; // int32
    public const nint start_radius = 0x1340; // int32
    public const nint duration = 0x1344; // float32
}

public static class CDOTA_Modifier_PolarFurbolgUrsaWarrior_ThunderClap {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Onslaught_Movement {
    public const nint tick_interval = 0x1318; // float32
    public const nint charge_speed = 0x131C; // float32
    public const nint movement_turn_rate = 0x1320; // float32
    public const nint knockback_radius = 0x1324; // int32
    public const nint knockback_distance = 0x1328; // float32
    public const nint knockback_damage = 0x132C; // int32
    public const nint m_nEnemyHeroesHit = 0x1330; // int32
    public const nint m_flFacingTarget = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_PrimalBeast_Onslaught_Windup {
    public const nint max_distance = 0x1318; // int32
    public const nint max_charge_time = 0x131C; // float32
    public const nint turn_rate = 0x1320; // float32
    public const nint base_power = 0x1324; // float32
    public const nint charge_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Pulverize {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint m_vStartLocation = 0x132C; // Vector
    public const nint animation_rate = 0x1338; // float32
    public const nint m_bInterrupted = 0x133C; // bool
    public const nint m_bHasBeenDestroyed = 0x133D; // bool
}

public static class CDOTA_Modifier_PrimalBeast_Pulverize_Self {
    public const nint m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
    public const nint m_vPulverizeCenter = 0x131C; // Vector
    public const nint m_vCasterStartPos = 0x1328; // Vector
    public const nint splash_radius = 0x1334; // int32
    public const nint interval = 0x1338; // float32
    public const nint ministun = 0x133C; // float32
    public const nint damage = 0x1340; // int32
    public const nint bonus_damage_per_hit = 0x1344; // int32
    public const nint m_nHitCount = 0x1348; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Uproar {
    public const nint stack_limit = 0x1318; // int32
    public const nint damage_limit = 0x131C; // int32
    public const nint stack_duration = 0x1320; // float32
    public const nint damage_min = 0x1324; // float32
    public const nint damage_max = 0x1328; // float32
    public const nint bonus_damage_per_stack = 0x132C; // int32
    public const nint m_nFxIndexA = 0x1330; // ParticleIndex_t
    public const nint iCur_stack = 0x1334; // int32
    public const nint bonus_damage = 0x1338; // int32
    public const nint slow_duration = 0x133C; // float32
    public const nint m_fTotalDamage = 0x1358; // float32
    public const nint m_flLastStackTime = 0x135C; // GameTime_t
}

public static class CDOTA_Modifier_PrimalBeast_Uproar_Roared_Self {
    public const nint roared_bonus_attack_speed = 0x1318; // int32
    public const nint roared_bonus_armor = 0x131C; // int32
    public const nint m_nBuffStackCount = 0x1320; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Uproar_Slow {
    public const nint move_slow_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Primal_Beast_Uproar_Projectile_Thinker {
    public const nint projectiles_per_stack = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint projectile_distance = 0x1320; // int32
    public const nint projectile_width = 0x1324; // int32
    public const nint splinter_angle = 0x1328; // int32
    public const nint split_delay = 0x132C; // float32
    public const nint projectile_waves = 0x1330; // int32
    public const nint m_nCurrentWaveCount = 0x1334; // int32
    public const nint tectonic_shift_projectiles = 0x1338; // int32
}

public static class CDOTA_Modifier_Primalbeast_Trample {
    public const nint effect_radius = 0x1318; // int32
    public const nint vLastPos = 0x131C; // Vector
    public const nint flCurrentDistance = 0x1328; // float32
    public const nint step_distance = 0x132C; // int32
    public const nint bonus_magic_resistance = 0x1330; // int32
    public const nint m_bIsUnslowable = 0x1334; // bool
}

public static class CDOTA_Modifier_Psychic_Headband {
    public const nint push_length = 0x1318; // int32
    public const nint push_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Puck_Coil_Break_Stun {
    public const nint m_vCastLocation = 0x1318; // Vector
    public const nint coil_rapid_fire_z_offset = 0x1324; // int32
    public const nint coil_rapid_fire_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Puck_Coiled {
    public const nint m_vCastLocation = 0x1318; // Vector
    public const nint coil_rapid_fire_z_offset = 0x1324; // int32
    public const nint coil_rapid_fire_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Puck_DreamCoil_Thinker {
    public const nint m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint coil_radius = 0x1330; // int32
    public const nint coil_break_radius = 0x1334; // int32
    public const nint coil_initial_damage = 0x1338; // int32
    public const nint coil_stun_duration = 0x133C; // float32
    public const nint coil_duration = 0x1340; // float32
    public const nint coil_break_damage = 0x1344; // int32
    public const nint m_FXIndex = 0x1348; // CUtlVector< ParticleIndex_t >
}

public static class CDOTA_Modifier_Puck_PhaseShift_AttackBonus {
    public const nint shard_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_PudgeMiniboss_ArmorCorruption {
    public const nint armor_reduction_per_stack = 0x1318; // float32
    public const nint stack_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_PudgeMiniboss_ArmorCorruptionDebuff {
    public const nint armor_reduction_per_stack = 0x1318; // float32
    public const nint stack_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_PudgeMiniboss_HatefulStrike {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint maxhp_percent_damage = 0x131C; // int32
    public const nint every_n_attacks = 0x1320; // int32
    public const nint crit_active = 0x1324; // bool
}

public static class CDOTA_Modifier_Pudge_Dismember {
    public const nint dismember_damage = 0x1318; // int32
    public const nint strength_damage = 0x131C; // float32
    public const nint m_nTicks = 0x1320; // int32
    public const nint m_nMaxTicks = 0x1324; // int32
    public const nint m_flTickRate = 0x1328; // float32
    public const nint animation_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Pudge_Dismember_Pull {
    public const nint m_vDestination = 0x1318; // Vector
    public const nint pull_units_per_second = 0x1324; // int32
    public const nint pull_distance_limit = 0x1328; // float32
    public const nint animation_rate = 0x1334; // float32
}

public static class CDOTA_Modifier_Pudge_FleshHeap {
    public const nint magic_resistance = 0x1318; // float32
    public const nint damage_block = 0x131C; // float32
    public const nint flesh_heap_strength_buff_amount = 0x1320; // float32
}

public static class CDOTA_Modifier_Pudge_FleshHeap_Block {
    public const nint damage_block = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Pudge_Rot {
    public const nint rot_damage = 0x1318; // int32
    public const nint rot_slow = 0x131C; // int32
    public const nint scepter_rot_regen_reduction_pct = 0x1320; // int32
    public const nint m_flLastRotTime = 0x132C; // GameTime_t
    public const nint m_bQualifiesAsPotentionalDeny = 0x1330; // bool
}

public static class CDOTA_Modifier_Pudge_Swallow {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Pudge_Swallow_Hide {
    public const nint order_lock_duration = 0x1318; // float32
    public const nint m_fOrderLockDone = 0x131C; // GameTime_t
    public const nint m_nFXIndex = 0x1320; // int32
    public const nint shard_regen_pct = 0x1324; // float32
}

public static class CDOTA_Modifier_Pugna_Decrepify {
    public const nint bonus_spell_damage_pct = 0x1318; // int32
    public const nint bonus_heal_amp_pct_allies = 0x131C; // int32
    public const nint bonus_movement_speed = 0x1320; // int32
    public const nint bonus_movement_speed_allies = 0x1324; // int32
}

public static class CDOTA_Modifier_Pugna_LifeDrain {
    public const nint health_drain = 0x1318; // int32
    public const nint ally_healing = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
    public const nint m_bDoRangeCheck = 0x1324; // bool
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flElapsedTime = 0x132C; // GameTime_t
    public const nint m_bPrimary = 0x1330; // bool
    public const nint m_bShard = 0x1331; // bool
    public const nint m_bFromWard = 0x1332; // bool
    public const nint m_hWard = 0x1334; // CHandle< C_BaseEntity >
    public const nint spell_amp_drain_duration = 0x1338; // float32
    public const nint max_spell_amp_drain_pct = 0x133C; // int32
    public const nint spell_amp_drain_rate = 0x1340; // int32
    public const nint spell_amp_drain_rate_ward = 0x1344; // int32
    public const nint spell_amp_drain_max = 0x1348; // int32
    public const nint health_to_mana_rate = 0x134C; // int32
}

public static class CDOTA_Modifier_Pugna_LifeDrain_SpellAmp {
    public const nint m_bIsFriendly = 0x1318; // bool
}

public static class CDOTA_Modifier_Pugna_NetherWard {
    public const nint radius = 0x1318; // int32
    public const nint mana_multiplier = 0x131C; // float32
    public const nint mana_drained_per_attack = 0x1320; // float32
    public const nint attacks_to_destroy = 0x1324; // int32
}

public static class CDOTA_Modifier_Pugna_NetherWard_Aura {
    public const nint mana_regen = 0x1318; // float32
    public const nint spell_damage_reduction = 0x131C; // float32
}

public static class CDOTA_Modifier_QueenOfPain_Arcana {
    public const nint m_bIsMeleeAttack = 0x1318; // bool
}

public static class CDOTA_Modifier_QueenOfPain_ScreamOfPain_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_QueenOfPain_ShadowStrike {
    public const nint duration_damage = 0x1318; // int32
    public const nint duration_heal = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint m_SlowInterval = 0x1328; // CountdownTimer
    public const nint m_flSlowStep = 0x1340; // float32
    public const nint m_flSlowStepStep = 0x1344; // float32
    public const nint attack_buff_duration = 0x1348; // float32
}

public static class CDOTA_Modifier_QueenOfPain_SonicWave_Damage {
    public const nint m_flDamagePerTick = 0x1318; // float32
    public const nint m_nCurrentTick = 0x131C; // int32
    public const nint m_nTotalTicks = 0x1320; // int32
}

public static class CDOTA_Modifier_Radar_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_bEverFound = 0x131C; // bool
    public const nint m_bBonus = 0x131D; // bool
}

public static class CDOTA_Modifier_Rattletrap_Cog {
    public const nint m_bEnabled = 0x1318; // bool
    public const nint trigger_distance = 0x131C; // int32
    public const nint push_length = 0x1320; // int32
    public const nint push_duration = 0x1324; // float32
    public const nint cogs_radius = 0x1328; // int32
    public const nint attacks_to_destroy = 0x132C; // int32
    public const nint m_iCogIndex = 0x1330; // int32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
    public const nint vCenter = 0x1338; // Vector
}

public static class CDOTA_Modifier_Rattletrap_CogPush {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint push_length = 0x131C; // int32
    public const nint push_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Barrier {
    public const nint magic_barrier = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Leash {
    public const nint leash = 0x1318; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Leash {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Self_Bonuses {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Talent {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Hookshot {
    public const nint speed = 0x1320; // int32
    public const nint stun_radius = 0x1324; // float32
    public const nint damage = 0x1328; // float32
    public const nint duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Rattletrap_JetPack {
    public const nint m_nMovementSpeed = 0x1318; // int32
    public const nint bonus_speed = 0x131C; // int32
    public const nint turn_rate = 0x1320; // float32
    public const nint m_flStartTime = 0x1324; // GameTime_t
    public const nint tick_interval = 0x1328; // float32
    public const nint m_flFacingTarget = 0x132C; // float32
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t
    public const nint m_flTurnHistory = 0x1338; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesCredited = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Rattletrap_Overclocking {
    public const nint m_nOverclockFX = 0x1318; // ParticleIndex_t
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare {
    public const nint projectile_vision_radius = 0x1320; // int32
    public const nint projectile_vision_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare_Overclock {
    public const nint rocket_flare_interval = 0x1318; // float32
    public const nint rocket_flare_offset_pct = 0x131C; // int32
    public const nint rocket_flare_rockets = 0x1320; // int32
    public const nint m_nRocketsFired = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint m_vOriginalTarget = 0x132C; // Vector
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare_Slow {
    public const nint slow_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Razor_Arcana {
    public const nint m_bIsMeleeAttack = 0x1318; // bool
    public const nint m_bTauntQueued = 0x1319; // bool
}

public static class CDOTA_Modifier_Razor_Arcana_EmpoweredState {
    public const nint m_nEmpoweredBodyFX = 0x1318; // ParticleIndex_t
    public const nint m_nEmpoweredWeaponFX = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Razor_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Razor_EyeOfTheStorm {
    public const nint radius = 0x1318; // int32
    public const nint armor_reduction = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Razor_EyeOfTheStorm_Passive {
    public const nint passive_area_damage = 0x1318; // int32
    public const nint passive_area_interval = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint m_bHitNext = 0x1324; // bool
}

public static class CDOTA_Modifier_Razor_PlasmaField_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Razor_PlasmaField_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bContracting = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage_min = 0x1368; // float32
    public const nint damage_max = 0x136C; // float32
    public const nint slow_min = 0x1370; // int32
    public const nint slow_max = 0x1374; // int32
    public const nint slow_duration = 0x1378; // float32
    public const nint m_bHasCreatedFx = 0x137C; // bool
    public const nint total_ability_time = 0x1380; // float32
}

public static class CDOTA_Modifier_Razor_StaticLink {
    public const nint flSmoothness = 0x1318; // float32
    public const nint drain_duration = 0x131C; // float32
    public const nint drain_rate = 0x1320; // int32
    public const nint drain_range = 0x1324; // int32
    public const nint drain_range_buffer = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_iTotalDrainAmount = 0x1330; // int32
    public const nint pull_speed = 0x1334; // int32
    public const nint min_pull_range = 0x1338; // int32
    public const nint m_iLinkIndex = 0x133C; // ParticleIndex_t
    public const nint m_pBuffPositive = 0x1340; // CDOTA_Buff*
    public const nint m_pNegative = 0x1348; // CDOTA_Buff*
    public const nint m_flLastThinkTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Razor_StaticLink_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint drain_rate = 0x131C; // int32
    public const nint drain_length = 0x1320; // float32
    public const nint attack_speed_factor = 0x1324; // int32
    public const nint drain_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Razor_StaticLink_Debuff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint attack_speed_factor = 0x131C; // int32
    public const nint drain_rate = 0x1320; // int32
    public const nint drain_armor = 0x1324; // int32
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Aura {
    public const nint self_movement_speed_pct = 0x1318; // int32
    public const nint strike_pct_chance = 0x131C; // int32
    public const nint strike_damage = 0x1320; // float32
    public const nint strike_move_slow_pct = 0x1324; // int32
    public const nint strike_search_radius = 0x1328; // int32
    public const nint strike_target_count = 0x132C; // int32
    public const nint strike_slow_duration = 0x1330; // float32
    public const nint strike_internal_cd = 0x1334; // float32
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Delayed_Damage {
    public const nint strike_damage = 0x1318; // float32
    public const nint strike_slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Slow {
    public const nint strike_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Repair_Kit {
    public const nint health_regen = 0x1318; // float32
    public const nint armor_bonus = 0x131C; // int32
    public const nint multishot_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Riki_Backstab {
    public const nint fade_delay = 0x1328; // float32
    public const nint backstab_angle = 0x132C; // int32
    public const nint cleave = 0x1330; // int32
    public const nint damage_multiplier = 0x1334; // float32
    public const nint bonus_xp_kill = 0x1338; // float32
    public const nint bonus_xp_assist = 0x133C; // float32
    public const nint m_bBackstab = 0x1340; // bool
}

public static class CDOTA_Modifier_Riki_Permanent_Invisibility {
    public const nint movement_speed = 0x1328; // int32
    public const nint fade_delay = 0x132C; // float32
}

public static class CDOTA_Modifier_Riki_Poison_Dart {
    public const nint wake_damage_limit = 0x1318; // int32
    public const nint m_flDamageTaken = 0x131C; // float32
}

public static class CDOTA_Modifier_Riki_Poison_Dart_Debuff {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Riki_SmokeScreen {
    public const nint miss_rate = 0x1318; // int32
    public const nint dodge_chance = 0x131C; // int32
    public const nint block_targeting = 0x1320; // int32
    public const nint armor_reduction = 0x1324; // int32
}

public static class CDOTA_Modifier_Riki_SmokeScreenThinker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Riki_TricksOfTheTrade_Phase {
    public const nint m_nFxIndex = 0x1318; // ParticleIndex_t
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_Timer = 0x1320; // CountdownTimer
    public const nint m_hPreviousTarget = 0x1338; // CHandle< C_BaseEntity >
    public const nint m_nSucceessiveHits = 0x133C; // int32
    public const nint damage_pct = 0x1340; // int32
    public const nint agility_pct = 0x1344; // int32
}

public static class CDOTA_Modifier_Roshan_Bash {
    public const nint bash_chance = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint stun_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Roshan_DevotionAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshan_Moving {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_bFlipped = 0x1320; // bool
}

public static class CDOTA_Modifier_Roshan_RevengeRoar {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshan_Slam {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshans_Banner_Aura {
    public const nint radius = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
    public const nint damage_bonus = 0x1320; // int32
    public const nint model_scale = 0x1324; // int32
    public const nint buff_linger_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Roshans_Banner_Effect {
    public const nint damage_bonus = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
    public const nint model_scale = 0x1320; // int32
}

public static class CDOTA_Modifier_Roshans_Banner_HP {
    public const nint health = 0x1318; // int32
}

public static class CDOTA_Modifier_Royal_Jelly_Regen {
    public const nint health_regen = 0x1318; // float32
    public const nint mana_regen = 0x131C; // float32
    public const nint charges = 0x1320; // int32
}

public static class CDOTA_Modifier_Royale_With_Cheese {
    public const nint shield = 0x1318; // float32
    public const nint regen = 0x131C; // float32
    public const nint idle = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
    public const nint m_timeLastTick = 0x1328; // GameTime_t
    public const nint m_timeLastDamage = 0x132C; // GameTime_t
    public const nint nFXIndex = 0x1330; // ParticleIndex_t
}

public static class CDOTA_Modifier_Rubick_Arcane_Supremacy {
    public const nint cast_range = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Rubick_FadeBolt {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint jump_damage_reduction_pct = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Rubick_FadeBoltBuff {
    public const nint attack_damage_bonus = 0x1318; // int32
    public const nint attack_damage_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Rubick_FadeBoltDebuff {
    public const nint attack_damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Rubick_NullField {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Rubick_NullField_Effect {
    public const nint magic_damage_reduction_pct = 0x1318; // int32
    public const nint m_bWasHidden = 0x131C; // bool
}

public static class CDOTA_Modifier_Rubick_SpellSteal {
    public const nint m_strActivityModifier = 0x1318; // CUtlString
    public const nint stolen_debuff_amp = 0x1320; // int32
}

public static class CDOTA_Modifier_Rubick_Telekinesis {
    public const nint m_fStartTime = 0x1318; // GameTime_t
    public const nint m_fEndTime = 0x131C; // GameTime_t
    public const nint m_fTargetHeight = 0x1320; // float32
    public const nint m_fCurHeight = 0x1324; // float32
    public const nint m_vStartLoc = 0x1328; // Vector
    public const nint m_vCurLoc = 0x1334; // Vector
    public const nint max_land_distance = 0x1340; // int32
    public const nint fall_duration = 0x1344; // float32
    public const nint m_bOverrideDuration = 0x1348; // bool
    public const nint m_flOverrideDuration = 0x134C; // float32
}

public static class CDOTA_Modifier_Rune_Arcane {
    public const nint m_iCooldownReductionPct = 0x1318; // int32
    public const nint m_iCostReductionPct = 0x131C; // int32
}

public static class CDOTA_Modifier_Rune_ExtraDamage {
    public const nint m_iAdditionalDamagePct = 0x1318; // int32
}

public static class CDOTA_Modifier_Rune_Shield {
    public const nint damage_absorb = 0x1318; // int32
    public const nint m_bStartedTimer = 0x131C; // bool
    public const nint m_nDamageAbsorbed = 0x1320; // int32
}

public static class CDOTA_Modifier_Safety_Bubble {
    public const nint m_nDamageAbsorbed = 0x1318; // int32
    public const nint m_timeLastDamage = 0x131C; // GameTime_t
    public const nint bonus_hp_regen = 0x1320; // int32
    public const nint shield = 0x1324; // int32
    public const nint restore_time = 0x1328; // float32
}

public static class CDOTA_Modifier_SandKing_CausticFinale {
    public const nint caustic_finale_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_SandKing_CausticFinaleOrb {
    public const nint caustic_finale_radius = 0x1318; // int32
    public const nint caustic_finale_damage_base = 0x131C; // int32
    public const nint caustic_finale_damage_pct = 0x1320; // int32
    public const nint caustic_finale_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_SandKing_Epicenter {
    public const nint epicenter_radius_base = 0x1318; // int32
    public const nint epicenter_radius_increment = 0x131C; // int32
    public const nint epicenter_pulses = 0x1320; // int32
    public const nint epicenter_radius = 0x1324; // int32[16]
    public const nint m_iMaxPulses = 0x1364; // int32
    public const nint m_iPulseCount = 0x1368; // int32
}

public static class CDOTA_Modifier_SandKing_Epicenter_Slow {
    public const nint epicenter_slow = 0x1318; // int32
    public const nint epicenter_slow_as = 0x131C; // int32
}

public static class CDOTA_Modifier_SandKing_SandStorm {
    public const nint sand_storm_radius = 0x1328; // int32
    public const nint sand_storm_damage = 0x132C; // int32
    public const nint damage_tick_rate = 0x1330; // float32
    public const nint m_flLastDamageTime = 0x1334; // GameTime_t
    public const nint m_nSandStormParticleIndex1 = 0x1338; // ParticleIndex_t
    public const nint m_nSandStormParticleIndex2 = 0x133C; // ParticleIndex_t
    public const nint m_hThinker = 0x1348; // CHandle< C_BaseEntity >
    public const nint sand_storm_move_speed = 0x134C; // int32
    public const nint vecSpawnPos = 0x1350; // Vector
    public const nint m_iExplosionQuadrant = 0x135C; // int32
    public const nint m_iExplosionDistance = 0x1360; // int32
}

public static class CDOTA_Modifier_SandKing_SandStorm_Slow {
    public const nint slow = 0x1318; // int32
    public const nint blind = 0x131C; // int32
}

public static class CDOTA_Modifier_SandKing_SandStorm_Slow_Aura_Thinker {
    public const nint sand_storm_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Sand_King_BurrowStrike {
    public const nint m_vPopupLocation = 0x1318; // Vector
    public const nint m_bTeleported = 0x1324; // bool
}

public static class CDOTA_Modifier_Sand_King_Shard {
    public const nint shard_move_distance = 0x1318; // float32
    public const nint shard_interval = 0x131C; // float32
    public const nint vLastPos = 0x1320; // Vector
    public const nint m_fAccumulatedDistance = 0x132C; // float32
}

public static class CDOTA_Modifier_SatyrHellcaller_UnholyAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SatyrHellcaller_UnholyAura_Bonus {
    public const nint health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_SatyrSoulstealer_ManaBurn {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SatyrTrickster_Purge {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_ScoutBonuses {
    public const nint reveal_radius = 0x1318; // int32
    public const nint increase_health = 0x131C; // float32
    public const nint max_health = 0x1320; // int32
    public const nint increase_armor = 0x1324; // float32
    public const nint max_armor = 0x1328; // float32
}

public static class CDOTA_Modifier_ScoutVisible {
    public const nint reveal_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ScriptedMotionController {
    public const nint m_hHorizontalControlFunction = 0x1318; // HSCRIPT
    public const nint m_hVerticalControlFunction = 0x1320; // HSCRIPT
    public const nint m_hOnDestroyFunction = 0x1328; // HSCRIPT
    public const nint m_parameterTable = 0x1330; // CVariantBase< CVariantDefaultAllocator >
}

public static class CDOTA_Modifier_Seasonal_Diretide2020_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Seasonal_Penguin {
    public const nint m_fLifetimeGained = 0x1318; // float32
    public const nint m_vTargetPos = 0x131C; // Vector
    public const nint m_nCurrentSpeed = 0x1328; // int32
    public const nint m_fLastBumpTime = 0x132C; // GameTime_t
    public const nint m_vLastPos = 0x1330; // Vector
    public const nint m_hLastHit = 0x133C; // CHandle< C_BaseEntity >
    public const nint m_vDir = 0x1340; // Vector
    public const nint m_vRunEndPos = 0x134C; // Vector
    public const nint m_bIsInInitialRun = 0x1358; // bool
    public const nint m_vJumpEndPos = 0x135C; // Vector
    public const nint m_bPlayedVroomSinceLastCrash = 0x1368; // bool
    public const nint m_nVroomFX = 0x136C; // ParticleIndex_t
    public const nint m_fLastSpeedStepTime = 0x1370; // GameTime_t
    public const nint m_fLastSpeechTime = 0x1374; // GameTime_t
    public const nint m_nFXStackIndex = 0x1378; // ParticleIndex_t
    public const nint m_nBumpsSinceLastCrash = 0x137C; // int32
    public const nint m_hLastBumpingHero = 0x1380; // CHandle< C_BaseEntity >
    public const nint initial_speed = 0x1384; // int32
    public const nint max_speed = 0x1388; // int32
    public const nint speed_step = 0x138C; // int32
    public const nint speed_step_interval = 0x1390; // float32
    public const nint bump_delay = 0x1394; // float32
    public const nint bump_delay_absolute = 0x1398; // float32
    public const nint bump_collision_radius = 0x139C; // int32
    public const nint run_distance = 0x13A0; // int32
    public const nint jump_distance = 0x13A4; // int32
    public const nint speed_after_crash = 0x13A8; // int32
    public const nint speed_gain_per_hero_bump = 0x13AC; // int32
    public const nint max_gainable_lifetime = 0x13B0; // float32
    public const nint lifetime_gain_per_hero_bump = 0x13B4; // float32
    public const nint min_speech_repeat_time = 0x13B8; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_CNY_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint m_vLastPos = 0x1338; // Vector
    public const nint m_vDir = 0x1344; // Vector
    public const nint m_flSpeed = 0x1350; // float32
    public const nint m_flDistRemaining = 0x1354; // float32
    public const nint m_flTreeTimeRemaining = 0x1358; // float32
    public const nint m_hLastHit = 0x135C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Seasonal_Summon_Common_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_Snowman_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint max_bounces = 0x1338; // int32
    public const nint max_model_scale = 0x133C; // float32
    public const nint power_growth_exponent = 0x1340; // float32
    public const nint m_vLastPos = 0x1344; // Vector
    public const nint m_vDir = 0x1350; // Vector
    public const nint m_flSpeed = 0x135C; // float32
    public const nint m_flDistRemaining = 0x1360; // float32
    public const nint m_flTreeTimeRemaining = 0x1364; // float32
    public const nint m_nTimesBounced = 0x1368; // int32
    public const nint m_flModelScale = 0x136C; // float32
    public const nint m_hLastHit = 0x1370; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Visuals {
    public const nint model_scale_per_stack = 0x1318; // float32
    public const nint m_bIsRadiant = 0x131C; // bool
}

public static class CDOTA_Modifier_Seasonal_Summon_TI9_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint m_vLastPos = 0x1338; // Vector
    public const nint m_vDir = 0x1344; // Vector
    public const nint m_flSpeed = 0x1350; // float32
    public const nint m_flDistRemaining = 0x1354; // float32
    public const nint m_flTreeTimeRemaining = 0x1358; // float32
    public const nint m_hLastHit = 0x135C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Seasonal_TI10_DiscoBall_Channeling {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nGesture = 0x131C; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_Portal {
    public const nint m_vSpawnPos = 0x1318; // Vector
    public const nint m_vecEmissions = 0x1328; // CUtlVector< Vector >
    public const nint m_bChatSent = 0x1340; // bool
    public const nint m_nPhase = 0x1344; // int32
    public const nint m_nNumEmitted = 0x1348; // int32
    public const nint m_nNumDrops = 0x134C; // int32
    public const nint m_flStartTime = 0x1350; // GameTime_t
    public const nint m_flLastEmitTime = 0x1354; // GameTime_t
    public const nint m_bIsOnRadiant = 0x1358; // bool
    public const nint m_bUseLargeEmit = 0x1359; // bool
    public const nint m_nOutcome = 0x135C; // int32
    public const nint PHASE_OPEN = 0x1370; // int32
    public const nint PHASE_EMIT = 0x1374; // int32
    public const nint PHASE_EMIT_DONE = 0x1378; // int32
    public const nint PHASE_CLOSE = 0x137C; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_SoccerBall {
    public const nint m_vPost1 = 0x1318; // Vector
    public const nint m_vPost2 = 0x1324; // Vector
    public const nint m_vPostForward = 0x1330; // Vector
    public const nint m_nPost1FXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nPost2FXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nPost3FXIndex = 0x1344; // ParticleIndex_t
    public const nint PHASE_START = 0x1348; // int32
    public const nint PHASE_GESTURE = 0x134C; // int32
    public const nint PHASE_FX = 0x1350; // int32
    public const nint PHASE_MOTION = 0x1354; // int32
    public const nint PHASE_IMPACT = 0x1358; // int32
    public const nint PHASE_FAIL = 0x135C; // int32
    public const nint PHASE_CROSSED_GOAL = 0x1360; // int32
    public const nint PHASE_GOAL = 0x1364; // int32
    public const nint tick_interval = 0x1368; // float32
    public const nint forward_move_speed = 0x136C; // float32
    public const nint magnus_coefficient = 0x1370; // float32
    public const nint magnus_falloff = 0x1374; // float32
    public const nint drag_coefficient = 0x1378; // float32
    public const nint min_delay = 0x137C; // float32
    public const nint max_delay = 0x1380; // float32
    public const nint hit_radius = 0x1384; // int32
    public const nint m_nFXIndex = 0x1388; // ParticleIndex_t
    public const nint m_vVelocity = 0x138C; // Vector
    public const nint m_vSpawnPos = 0x1398; // Vector
    public const nint m_vTargetPos = 0x13A4; // Vector
    public const nint m_nPhase = 0x13B0; // int32
    public const nint m_nHits = 0x13B4; // int32
    public const nint m_flMagnusValue = 0x13B8; // float32
    public const nint m_flStartTime = 0x13BC; // GameTime_t
    public const nint m_flDelay = 0x13C0; // float32
    public const nint m_flStateChangeTime = 0x13C4; // GameTime_t
    public const nint m_bFirstThink = 0x13C8; // bool
    public const nint m_bGroundHit = 0x13C9; // bool
    public const nint m_nTargetPlayerID = 0x13CC; // PlayerID_t
    public const nint m_flCurTime = 0x13D0; // float32
    public const nint m_flStartZ = 0x13D4; // float32
    public const nint m_flAirTime = 0x13D8; // float32
    public const nint m_flHeight = 0x13DC; // float32
}

public static class CDOTA_Modifier_Seasonal_TI11_BubbleGun {
    public const nint think_interval = 0x1318; // float32
    public const nint max_charges = 0x131C; // int32
    public const nint m_nChargesUsed = 0x1320; // int32
}

public static class CDOTA_Modifier_Seasonal_TI11_CongaLineSlow {
    public const nint m_flMaxSpeed = 0x1318; // float32
}

public static class CDOTA_Modifier_Seasonal_TI11_DuelAccepted {
    public const nint m_nDuelOpponent = 0x1318; // PlayerID_t
}

public static class CDOTA_Modifier_Seasonal_TI11_RockPaperScissors {
    public const nint challenge_duration = 0x1318; // float32
    public const nint reveal_duration = 0x131C; // float32
    public const nint reveal_delay = 0x1320; // float32
    public const nint completed_cooldown = 0x1324; // float32
    public const nint think_interval = 0x1328; // float32
    public const nint acknowledge_range = 0x132C; // float32
    public const nint m_flRevealTime = 0x1334; // GameTime_t
    public const nint m_nOverheadFXIndex = 0x1338; // ParticleIndex_t
}

public static class CDOTA_Modifier_Seasonal_TI11_RockPaperScissors_Playing {
    public const nint input_duration = 0x1318; // float32
    public const nint think_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_BabyRoshan {
    public const nint m_bFirstThink = 0x1318; // bool
    public const nint m_flStartTime = 0x131C; // GameTime_t
    public const nint m_vecStartingPos = 0x1320; // Vector
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_Stasis_Trap {
    public const nint m_hHero = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Seer_Stone {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint vision_bonus = 0x131C; // int32
    public const nint mana_regen = 0x1320; // int32
}

public static class CDOTA_Modifier_Seer_Stone_Truesight {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_SetScaleset {
    public const nint m_Scaleset = 0x1318; // CUtlString
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_ShadowAmulet_Fade {
    public const nint fade_time = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_bFaded = 0x1320; // bool
}

public static class CDOTA_Modifier_ShadowShaman_SerpentWard {
    public const nint scepter_range = 0x1318; // int32
}

public static class CDOTA_Modifier_ShadowShaman_Shackles {
    public const nint tick_interval = 0x1318; // float32
    public const nint total_damage = 0x131C; // float32
    public const nint channel_time = 0x1320; // float32
}

public static class CDOTA_Modifier_ShadowShaman_Voodoo {
    public const nint movespeed = 0x1318; // int32
    public const nint damage_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Disruption {
    public const nint m_flHealth = 0x1318; // float32
    public const nint m_flDisseminate_Duration = 0x131C; // float32
    public const nint m_hDisseminateAbility = 0x1320; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Shadow_Demon_Disruption_Bonus_Damage {
    public const nint illusion_flat_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Disseminate {
    public const nint damage_reflection_pct = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_flLastDispersionPulseEffectTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Shadow_Demon_Shadow_Poison {
    public const nint stack_damage = 0x1318; // float32
    public const nint bonus_stack_damage = 0x131C; // float32
    public const nint max_multiply_stacks = 0x1320; // int32
    public const nint m_nFXStackIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher {
    public const nint actual_health_lost = 0x1318; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher_Illusion {
    public const nint hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher_SpellAmp {
    public const nint num_heroes = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Shadowraze_Counter {
    public const nint shadowraze_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_Shadowraze_Debuff {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint turn_rate_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_SheepStick_Debuff {
    public const nint sheep_movement_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Shredder_Chakram_Debuff {
    public const nint slow = 0x1318; // int32
    public const nint slow_health_percentage = 0x131C; // int32
}

public static class CDOTA_Modifier_Shredder_Chakram_Thinker {
    public const nint damage_per_second = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint radius = 0x1320; // float32
    public const nint break_distance = 0x1324; // float32
    public const nint damage_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_Shredder_Flamethrower {
    public const nint length = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
    public const nint m_nBeamFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_flLastHit = 0x132C; // GameTime_t
    public const nint m_vecBurningTrees = 0x1330; // CUtlVector< C_BaseEntity* >
}

public static class CDOTA_Modifier_Shredder_Flamethrower_Damage {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nActiveFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nActiveStatusFXIndex = 0x1320; // ParticleIndex_t
    public const nint damage_per_second = 0x1324; // float32
    public const nint building_dmg_pct = 0x1328; // int32
    public const nint move_slow_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Shredder_Flamethrower_TreeFire_Thinker {
    public const nint m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< C_BaseEntity >, GameTime_t > >
    public const nint m_bCleanupWhenEmpty = 0x1330; // bool
}

public static class CDOTA_Modifier_Shredder_ReactiveArmor_Bomb {
    public const nint initial_shield = 0x1318; // float32
    public const nint max_shield = 0x131C; // float32
    public const nint shield_per_sec = 0x1320; // float32
    public const nint shield_per_sec_per_enemy = 0x1324; // float32
    public const nint duration = 0x1328; // float32
    public const nint base_explosion = 0x132C; // float32
    public const nint radius = 0x1330; // int32
    public const nint explosion_radius = 0x1334; // int32
    public const nint m_nDamageAbsorbed = 0x1338; // int32
    public const nint m_timeLastTick = 0x133C; // GameTime_t
    public const nint m_StartTime = 0x1340; // GameTime_t
    public const nint m_nLastParticleTime = 0x1344; // int32
}

public static class CDOTA_Modifier_Shredder_Reactive_Armor {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_duration = 0x131C; // float32
    public const nint stacks_per_hero_attack = 0x1320; // int32
    public const nint m_flStackDieTime = 0x1324; // GameTime_t
    public const nint m_pFXIndex = 0x1328; // ParticleIndex_t[4]
}

public static class CDOTA_Modifier_Shredder_Reactive_Armor_Stack {
    public const nint bonus_armor = 0x1318; // float32
    public const nint bonus_hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Shredder_TimberChain {
    public const nint speed = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Shredder_WhirlingDeath_Debuff {
    public const nint stat_loss_pct = 0x1318; // int32
    public const nint stat_loss_univ = 0x131C; // int32
    public const nint iPrimaryAttribute = 0x1320; // int32
    public const nint flStatLossStr = 0x1324; // float32
    public const nint flStatLossAgi = 0x1328; // float32
    public const nint flStatLossInt = 0x132C; // float32
}

public static class CDOTA_Modifier_Silencer_CurseOfTheSilent {
    public const nint damage = 0x1318; // int32
    public const nint nFxIndex = 0x131C; // ParticleIndex_t
    public const nint penalty_duration = 0x1320; // int32
    public const nint penalty_multiplier = 0x1324; // float32
    public const nint movespeed = 0x1328; // int32
    public const nint undispellable = 0x132C; // int32
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom {
    public const nint intellect_damage_pct = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_InFlightSilenceAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_pAttackCounterBuff = 0x1350; // CDOTA_Buff*
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom_Buff {
    public const nint int_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom_Debuff {
    public const nint int_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Silencer_LastWord {
    public const nint duration = 0x1318; // int32
    public const nint spellcast = 0x131C; // bool
    public const nint damage = 0x1320; // int32
    public const nint debuff_duration = 0x1324; // float32
    public const nint int_multiplier = 0x1328; // float32
    public const nint scepter_bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Silver_Edge_WindWalk {
    public const nint windwalk_bonus_damage = 0x1328; // int32
    public const nint windwalk_movement_speed = 0x132C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_HellfireBlast {
    public const nint blast_dot_damage = 0x1318; // int32
    public const nint blast_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_HellfireBlast_Skeleton_Buff {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_move_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_MortalStrike {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation {
    public const nint reincarnate_time = 0x1318; // float32
    public const nint scepter_aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter {
    public const nint scepter_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_Active {
    public const nint scepter_move_speed_pct = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_bPassive = 0x1324; // bool
    public const nint m_bKillAtEnd = 0x1325; // bool
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_RespawnTime {
    public const nint scepter_respawn_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Slow {
    public const nint movespeed = 0x1318; // int32
    public const nint attackslow = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura {
    public const nint vampiric_aura = 0x1318; // int32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // int32
    public const nint skeleton_duration = 0x1320; // float32
    public const nint max_skeleton_charges = 0x1324; // int32
    public const nint m_iKillCounter = 0x1328; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura_Summon {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint talent_skeleton_damage = 0x131C; // int32
    public const nint m_bRespawnReady = 0x1320; // bool
    public const nint m_bRespawnConsumed = 0x1321; // bool
    public const nint m_bKillParentOnDestroy = 0x1322; // bool
    public const nint m_flRespawnTime = 0x1324; // GameTime_t
    public const nint vampiric_aura = 0x1328; // int32
    public const nint gold_bounty = 0x132C; // int32
    public const nint xp_bounty = 0x1330; // int32
    public const nint skeleton_building_damage_reduction = 0x1334; // int32
    public const nint skeleton_bonus_hero_damage = 0x1338; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura_Summon_Thinker {
    public const nint m_iCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Skywrath_Mage_Ancient_Seal {
    public const nint resist_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Skywrath_Mage_Arcane_Bolt_Lifesteal {
    public const nint lifesteal_amt = 0x1318; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Concussive_Shot {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Skywrath_Mage_Mystic_Flare {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint damage_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard {
    public const nint stack_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard_Bonus {
    public const nint bonus_intelligence = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard_Bonus_Counter {
    public const nint bonus_intelligence = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Slardar_Amplify_Damage {
    public const nint armor_reduction = 0x1318; // int32
    public const nint scepter_delay = 0x131C; // float32
    public const nint undispellable = 0x1320; // int32
    public const nint puddle_radius = 0x1324; // int32
    public const nint puddle_duration = 0x1328; // float32
    public const nint m_vecLastPuddle = 0x132C; // Vector
    public const nint m_hPuddle = 0x1338; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Slardar_Bash_Active {
    public const nint bonus_damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint attack_count = 0x1320; // int32
    public const nint river_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Slardar_Puddle_Thinker {
    public const nint puddle_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Slardar_Slithereen_Crush {
    public const nint crush_extra_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Slardar_Sprint {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slardar_Sprint_River {
    public const nint river_speed = 0x1318; // int32
    public const nint puddle_regen = 0x131C; // int32
    public const nint puddle_armor = 0x1320; // int32
    public const nint puddle_status_resistance = 0x1324; // int32
}

public static class CDOTA_Modifier_Slark_DarkPact_Pulses {
    public const nint radius = 0x1318; // int32
    public const nint total_damage = 0x131C; // int32
    public const nint total_pulses = 0x1320; // int32
    public const nint self_damage_pct = 0x1324; // int32
    public const nint pulse_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_Slark_Depth_Shroud {
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint bonus_movement_speed = 0x132C; // int32
    public const nint bonus_regen = 0x1330; // float32
}

public static class CDOTA_Modifier_Slark_Depth_Shroud_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_hVisibleEntity = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Slark_EssenceShift {
    public const nint agi_gain = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Slark_EssenceShift_Debuff {
    public const nint stat_loss = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_Fish_Bait_Post {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_Fish_Bait_Pre {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_Pounce {
    public const nint pounce_distance = 0x1318; // int32
    public const nint pounce_distance_scepter = 0x131C; // int32
    public const nint pounce_speed = 0x1320; // float32
    public const nint pounce_acceleration = 0x1324; // float32
    public const nint pounce_radius = 0x1328; // int32
    public const nint pounce_damage = 0x132C; // int32
    public const nint leash_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Slark_Pounce_Leash {
    public const nint leash_radius = 0x1318; // int32
    public const nint vLeashLocation = 0x131C; // Vector
    public const nint m_bEscaped = 0x1328; // bool
    public const nint m_bFishBait = 0x1329; // bool
}

public static class CDOTA_Modifier_Slark_ShadowDance {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Slark_ShadowDance_Aura {
    public const nint scepter_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_ShadowDance_Passive {
    public const nint activation_delay = 0x1318; // float32
    public const nint neutral_disable = 0x131C; // float32
    public const nint m_bPendingRefresh = 0x1320; // bool
    public const nint m_fPendingStateChangeTime = 0x1324; // GameTime_t
    public const nint m_NeutralHitTimer = 0x1328; // CountdownTimer
}

public static class CDOTA_Modifier_Slark_ShadowDance_PassiveRegen {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Slark_ShadowDance_Visual {
    public const nint m_bScepter = 0x1318; // bool
}

public static class CDOTA_Modifier_Smoke_Of_Deceit {
    public const nint bonus_movement_speed = 0x1328; // int32
    public const nint visibility_radius = 0x132C; // int32
    public const nint secondary_application_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Snapfire_FiresnapCookie_PreHop {
    public const nint jump_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Snapfire_GobbleUp_BellyHasUnit {
    public const nint m_hGobbledUnit = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nOriginalControllingUnit = 0x131C; // PlayerID_t
    public const nint m_bUnitWasLaunched = 0x1320; // bool
    public const nint max_time_in_belly = 0x1324; // float32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Attack_Reduction {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Buff {
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_nIsActive = 0x1338; // int32
    public const nint m_bHasAttackTalent = 0x133C; // bool
    public const nint m_bBonusAttack = 0x133D; // bool
    public const nint attack_range_bonus = 0x1340; // int32
    public const nint buffed_attacks = 0x1344; // int32
    public const nint base_attack_time = 0x1348; // float32
    public const nint attack_speed_bonus = 0x134C; // int32
    public const nint armor_duration = 0x1350; // float32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Debuff {
    public const nint armor_reduction_per_attack = 0x1318; // float32
}

public static class CDOTA_Modifier_Snapfire_Magma_Burn_Slow {
    public const nint m_nMoveSlowPct = 0x1318; // int32
    public const nint m_fBurnDamagePerTick = 0x131C; // float32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_interval = 0x1324; // float32
    public const nint burn_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Snapfire_Magma_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint impact_radius = 0x131C; // int32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_linger_duration = 0x1324; // float32
    public const nint m_nPathEffectIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Snapfire_MortimerKisses {
    public const nint m_fIntervalPerRocket = 0x1318; // float32
    public const nint m_flFacingTarget = 0x131C; // float32
    public const nint m_nBeamFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1324; // CHandle< C_BaseEntity >
    public const nint m_flCurDistance = 0x1328; // float32
    public const nint m_vAimTarget = 0x132C; // Vector
    public const nint m_fLastTurnAmount = 0x1338; // float32
    public const nint m_nProjectilesLaunched = 0x133C; // int32
    public const nint m_bDestroyOnNextThink = 0x1340; // bool
    public const nint m_nProjectilesToLaunch = 0x1344; // int32
    public const nint m_bHasProjectileTalent = 0x1348; // bool
    public const nint projectile_count = 0x134C; // int32
    public const nint projectile_speed = 0x1350; // int32
    public const nint projectile_width = 0x1354; // int32
    public const nint projectile_vision = 0x1358; // int32
    public const nint turn_rate = 0x135C; // float32
    public const nint min_range = 0x1360; // int32
    public const nint impact_radius = 0x1364; // int32
    public const nint min_lob_travel_time = 0x1368; // float32
    public const nint max_lob_travel_time = 0x136C; // float32
    public const nint delay_after_last_projectile = 0x1370; // float32
}

public static class CDOTA_Modifier_Snapfire_Scatterblast_Slow {
    public const nint m_bIsPointBlank = 0x1318; // bool
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint attack_slow_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Snapfire_SpitCreep_ArcingUnit {
    public const nint min_range = 0x1318; // int32
    public const nint min_lob_travel_time = 0x131C; // float32
    public const nint max_lob_travel_time = 0x1320; // float32
    public const nint impact_radius = 0x1324; // int32
    public const nint projectile_vision = 0x1328; // int32
    public const nint stun_duration = 0x132C; // float32
    public const nint min_height_above_lowest = 0x1330; // float32
    public const nint min_height_above_highest = 0x1334; // float32
    public const nint min_acceleration = 0x1338; // float32
    public const nint max_acceleration = 0x133C; // float32
}

public static class CDOTA_Modifier_Sniper_Assassinate_Crit {
    public const nint scepter_crit_damage = 0x1318; // int32
    public const nint scatter_damage_pct = 0x131C; // int32
    public const nint is_secondary = 0x1320; // bool
}

public static class CDOTA_Modifier_Sniper_Concussive_Grenade {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_Headshot {
    public const nint proc_chance = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint knockback_distance = 0x1320; // float32
    public const nint bonus_damage_creeps = 0x1324; // int32
    public const nint bonus_attack_range = 0x1328; // int32
    public const nint damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Sniper_Headshot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_Shrapnel_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint shrapnel_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Sniper_Shrapnel_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_bExploded = 0x131C; // bool
}

public static class CDOTA_Modifier_Sniper_TakeAim {
    public const nint bonus_attack_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_TakeAim_Bonus {
    public const nint slow = 0x1318; // int32
    public const nint active_attack_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Soul_Ring_Buff {
    public const nint m_iTempExtraMaxMana = 0x1318; // int32
    public const nint m_iManaToRemove = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Spawnlord_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Spawnlord_Aura_Bonus {
    public const nint lifesteal = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Spawnlord_Master_Freeze {
    public const nint m_bFreezeAttack = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Spawnlord_Master_Freeze_Root {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
}

public static class CDOTA_Modifier_Spawnlord_Master_Stomp {
    public const nint armor_reduction_pct = 0x1318; // int32
    public const nint m_flArmorReduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_20_Bash {
    public const nint value = 0x1318; // float32
    public const nint value2 = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Agility {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Agility_And_Intelligence {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_All_Stats {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Armor {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Base_Damage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Damage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attributes {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Base_Attack_Rate {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Cast_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Cast_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Cleave {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Cooldown_Reduction {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Corruption {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Corruption_Debuff {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Crit {
    public const nint crit_chance = 0x1318; // float32
    public const nint crit_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Day_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Evasion {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Exp_Boost {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Gold {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Gold_Income {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_HP {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_HP_Regen {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Haste {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Intelligence {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Lifesteal {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_MP {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_MP_Regen {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_MP_Regen_Amp {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Magic_Resistance {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Mana_Break {
    public const nint value = 0x1318; // int32
    public const nint burn_illusions_ranged = 0x131C; // int32
    public const nint burn_illusions_melee = 0x1320; // int32
    public const nint damage_per_burn = 0x1324; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Manaloss_Reduction {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Movement_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Movement_Speed_Percentage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Night_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Reincarnation {
    public const nint value = 0x1318; // float32
    public const nint reincarnate_time = 0x131C; // float32
    public const nint m_fLastReincarnationTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Special_Bonus_Respawn_Reduction {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Amplify {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Block {
    public const nint block_cooldown = 0x1318; // float32
    public const nint m_CooldownTimer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Lifesteal {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Status_Resistance {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Strength {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_5 {
    public const nint bonus_ms = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_6 {
    public const nint bonus_hp = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Gyrocopter_Call_Down_Land_Mines {
    public const nint radius = 0x1318; // int32
    public const nint proximity_threshold = 0x131C; // float32
    public const nint damage = 0x1320; // float32
    public const nint activation_delay = 0x1324; // float32
    public const nint bActivated = 0x1328; // bool
    public const nint m_Timer = 0x1330; // CountdownTimer
}

public static class CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Burn {
    public const nint shard_dps = 0x1318; // int32
    public const nint shard_move_slow_pct = 0x131C; // int32
    public const nint shard_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint shard_trail_radius = 0x1324; // int32
    public const nint shard_debuff_linger_duration = 0x1328; // float32
    public const nint shard_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Spectre_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Spectre_Desolate {
    public const nint bonus_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Spectre_Desolate_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Spectre_Dispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
    public const nint min_radius = 0x131C; // int32
    public const nint max_radius = 0x1320; // int32
    public const nint activation_bonus_pct = 0x1324; // int32
    public const nint m_flLastDispersionPulseEffectTime = 0x1328; // GameTime_t
    public const nint m_fDamageCounter = 0x132C; // float32
    public const nint m_fLastTime = 0x1330; // float32
}

public static class CDOTA_Modifier_Spectre_Haunt {
    public const nint m_fStartAttackTime = 0x1318; // GameTime_t
    public const nint hTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Spectre_SpectralDagger {
    public const nint path_radius = 0x1318; // int32
    public const nint hero_path_duration = 0x131C; // float32
    public const nint m_vLastPosition = 0x1320; // Vector
}

public static class CDOTA_Modifier_Spectre_SpectralDaggerInPath {
    public const nint bonus_movespeed = 0x1318; // int32
    public const nint m_hTrackingTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Spectre_SpectralDaggerPath {
    public const nint m_hUnitsInPath = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint path_radius = 0x1348; // int32
    public const nint vision_radius = 0x134C; // int32
    public const nint dagger_radius = 0x1350; // int32
    public const nint buff_persistence = 0x1354; // float32
    public const nint dagger_grace_period = 0x1358; // float32
    public const nint dagger_path_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Spell_Prism {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_cooldown = 0x131C; // int32
    public const nint mana_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Spider_Legs {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint turn_rate = 0x131C; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_Bulldoze {
    public const nint movement_speed = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint damage_barrier = 0x1320; // float32
    public const nint m_flCurrentBarrier = 0x1324; // float32
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarkness {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessTarget {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_iChargeTargetEntityIndex = 0x131C; // CEntityIndex
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessVision {
    public const nint m_nFXIndex = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_EmpoweringHaste {
    public const nint bonus_movespeed_pct_self = 0x1318; // int32
    public const nint bonus_movespeed_pct_allies = 0x131C; // int32
    public const nint bonus_movespeed_pct_extra = 0x1320; // int32
    public const nint duration = 0x1324; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_EmpoweringHasteAura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_GreaterBash {
    public const nint chance_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint movespeed_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_SpiritBreaker_GreaterBash_Speed {
    public const nint bonus_movespeed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_NetherStrike {
    public const nint damage = 0x1318; // int32
    public const nint m_bStrikeLanded = 0x131C; // bool
    public const nint m_vCastLocation = 0x1320; // Vector
    public const nint m_hTarget = 0x132C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_SpiritBreaker_NetherStrike_Vision {
    public const nint invis_threshold_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_PlanarPocketAura {
    public const nint radius = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_SpecialAttack {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Spirit_Bear_Attack_Damage {
    public const nint bear_bat = 0x1318; // float32
    public const nint bear_magic_resistance = 0x131C; // int32
    public const nint bonus_bear_hp = 0x1320; // int32
    public const nint bear_movespeed = 0x1324; // int32
    public const nint bonus_bear_armor = 0x1328; // int32
    public const nint hp_gain_per_druid_level = 0x132C; // int32
    public const nint damage_gain_per_druid_level = 0x1330; // int32
}

public static class CDOTA_Modifier_Spirit_Gem {
    public const nint m_flOriginalModelScale = 0x1318; // float32
    public const nint m_nHealthBarOffsetOverride = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
    public const nint m_fScaleGainPerGem = 0x1324; // float32
    public const nint m_nLevel = 0x1328; // int32
}

public static class CDOTA_Modifier_Spring2021_DefusalBomb {
    public const nint BOMB_DURATION = 0x1318; // float32
    public const nint BOMB_FAST_TICK_START = 0x131C; // float32
    public const nint BOMB_DEFAULT_TICK = 0x1320; // float32
}

public static class CDOTA_Modifier_Spring2021_TowerDeathRing_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage = 0x1368; // int32
    public const nint windup_time = 0x136C; // float32
}

public static class CDOTA_Modifier_StaffOfWizardry {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_ElectricVortex_Pull {
    public const nint m_vDestination = 0x1318; // Vector
    public const nint electric_vortex_pull_distance = 0x1324; // int32
    public const nint electric_vortex_pull_tether_range = 0x1328; // float32
}

public static class CDOTA_Modifier_StormSpirit_ElectricVortex_SelfSlow {
    public const nint electric_vortex_self_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_Electric_Rave {
    public const nint overload_aoe = 0x1318; // int32
    public const nint overload_damage = 0x131C; // int32
    public const nint shard_attack_speed_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_StormSpirit_Overload {
    public const nint overload_aoe = 0x1318; // int32
    public const nint overload_cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_StormSpirit_OverloadSlow {
    public const nint overload_move_slow = 0x1318; // int32
    public const nint overload_attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_StormSpirit_Overload_Attack_Speed_Buff {
    public const nint hit_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_StaticRemnantThinker {
    public const nint static_remnant_radius = 0x1318; // int32
    public const nint static_remnant_damage_radius = 0x131C; // int32
    public const nint static_remnant_damage = 0x1320; // int32
    public const nint static_remnant_delay = 0x1324; // float32
    public const nint m_iSearchRadius = 0x1328; // int32
    public const nint m_iDamageRadius = 0x132C; // int32
}

public static class CDOTA_Modifier_Stormcrafter_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_GodsStrength {
    public const nint gods_strength_damage = 0x1318; // int32
    public const nint bonus_slow_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Sven_GreatCleave {
    public const nint cleave_starting_width = 0x1318; // int32
    public const nint cleave_ending_width = 0x131C; // int32
    public const nint cleave_distance = 0x1320; // int32
    public const nint great_cleave_damage = 0x1324; // int32
    public const nint strength_bonus = 0x1328; // int32
    public const nint m_nLastCleaveRecord = 0x132C; // int16
    public const nint m_nLastCleaveKills = 0x1330; // int32
}

public static class CDOTA_Modifier_Sven_Stormbolt_Hide {
    public const nint m_nHandle = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_Warcry {
    public const nint movespeed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Sven_Warcry_Aura {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_Warcry_Passive {
    public const nint shard_passive_armor = 0x1318; // int32
    public const nint shard_passive_movespeed = 0x131C; // int32
}

public static class CDOTA_Modifier_TangoHeal {
    public const nint health_regen = 0x1318; // float32
    public const nint superheal = 0x131C; // bool
    public const nint m_fHealingDone = 0x1320; // float32
}

public static class CDOTA_Modifier_Techies_LandMine {
    public const nint radius = 0x1328; // int32
    public const nint proximity_threshold = 0x132C; // float32
    public const nint damage = 0x1330; // float32
    public const nint activation_delay = 0x1334; // float32
    public const nint outer_damage = 0x1338; // float32
    public const nint min_distance = 0x133C; // int32
    public const nint bActivated = 0x1340; // bool
    public const nint m_Timer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_Techies_LandMine_Burn {
    public const nint mres_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Scepter {
    public const nint aura_radius = 0x1318; // int32
    public const nint minefield_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Scepter_Aura {
    public const nint aura_radius = 0x1318; // float32
    public const nint scepter_move_damage = 0x131C; // float32
    public const nint scepter_move_amt = 0x1320; // float32
    public const nint minefield_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Thinker {
    public const nint aura_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // float32
    public const nint minefield_duration = 0x1320; // float32
    public const nint m_bTriggered = 0x1324; // bool
}

public static class CDOTA_Modifier_Techies_ReactiveTazer {
    public const nint bonus_ms = 0x1320; // int32
    public const nint stun_radius = 0x1324; // int32
    public const nint stun_duration = 0x1328; // float32
    public const nint damage_percent = 0x132C; // int32
    public const nint m_nDamageRemaining = 0x1330; // int32
}

public static class CDOTA_Modifier_Techies_RemoteMine {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint radius_scepter = 0x1330; // int32
    public const nint damage_scepter = 0x1334; // int32
    public const nint vision_radius = 0x1338; // int32
    public const nint vision_duration = 0x133C; // float32
    public const nint model_scale = 0x1340; // int32
    public const nint bExploding = 0x1344; // bool
}

public static class CDOTA_Modifier_Techies_StasisTrap {
    public const nint activation_radius = 0x1328; // int32
    public const nint stun_radius = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
    public const nint explode_delay = 0x1334; // float32
    public const nint activation_time = 0x1338; // float32
    public const nint m_bActivated = 0x133C; // bool
    public const nint m_bTriggered = 0x133D; // bool
}

public static class CDOTA_Modifier_Techies_StickyBombThrow {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_StickyBomb_Chase {
    public const nint acceleration = 0x1318; // int32
    public const nint m_nTeamNumber = 0x131C; // int32
    public const nint speed = 0x1320; // float32
    public const nint pre_chase_time = 0x1324; // float32
    public const nint m_hAttachTarget = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_vStartPosition = 0x132C; // Vector
    public const nint m_MoveTime = 0x1338; // CountdownTimer
}

public static class CDOTA_Modifier_Techies_StickyBomb_Countdown {
    public const nint m_vLastLoc = 0x1318; // Vector
    public const nint m_hAttachTarget = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Techies_StickyBomb_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_StickyBomb_Slow_Secondary {
    public const nint secondary_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_Suicide_RespawnTime {
    public const nint m_nSuicideKillCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Teleporting {
    public const nint m_fChannelTime = 0x1318; // float32
    public const nint m_vStart = 0x131C; // Vector
    public const nint m_vEnd = 0x1328; // Vector
}

public static class CDOTA_Modifier_TemplarAssassin_Meld {
    public const nint bonus_damage = 0x1318; // int32
    public const nint launched_attack = 0x131C; // bool
    public const nint m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_nAttackRecord = 0x1324; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_MeldArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Meld_Animation {
    public const nint launched_attack = 0x1318; // bool
}

public static class CDOTA_Modifier_TemplarAssassin_PsiBlades {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint attack_spill_range = 0x131C; // float32
    public const nint attack_spill_width = 0x1320; // int32
    public const nint attack_spill_pct = 0x1324; // int32
    public const nint attack_spill_penalty = 0x1328; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_PsiBlades_Slow {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_RefractionAbsorb {
    public const nint damage_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_RefractionDamage {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint bonus_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Refraction_Holdout {
    public const nint bonus_damage = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // int32
    public const nint m_flDamageAbsorbed = 0x1320; // float32
}

public static class CDOTA_Modifier_TemplarAssassin_Trap {
    public const nint bonus_vision = 0x1328; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Trap_Slow {
    public const nint movement_speed_min = 0x1318; // int32
    public const nint movement_speed_max = 0x131C; // int32
    public const nint extra_damage = 0x1320; // int32
    public const nint trap_max_charge_duration = 0x1324; // float32
    public const nint min_silence_duration = 0x1328; // float32
    public const nint max_silence_duration = 0x132C; // float32
    public const nint stage = 0x1330; // float32
    public const nint flDamagePerTick = 0x1334; // float32
    public const nint bExtraDamage = 0x1338; // bool
}

public static class CDOTA_Modifier_Tenderizer_Weaken {
    public const nint weaken_per_hit = 0x1318; // int32
}

public static class CDOTA_Modifier_Terrorblade_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Terrorblade_Demon_Zeal {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
    public const nint berserk_bonus_armor = 0x1320; // int32
    public const nint reflection_pct = 0x1324; // int32
    public const nint melee_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Terrorblade_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Terrorblade_Metamorphosis {
    public const nint base_attack_time = 0x1318; // float32
    public const nint bonus_range = 0x131C; // int32
    public const nint m_iOriginalAttackCapabilities = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint speed_loss = 0x1328; // int32
    public const nint attack_projectile_speed_bonus = 0x132C; // int32
    public const nint m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
    public const nint m_iszOriginalRangedAttackEffect = 0x1338; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Terrorblade_Metamorphosis_Fear_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint scepter_speed = 0x1340; // int32
    public const nint scepter_radius = 0x1344; // int32
    public const nint m_bFirstThink = 0x1348; // bool
}

public static class CDOTA_Modifier_Terrorblade_Reflection_Invulnerability {
    public const nint hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Terrorblade_Reflection_Slow {
    public const nint move_slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Third_Eye {
    public const nint truesight_radius = 0x1318; // int32
    public const nint bonus_vision = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Tidehunter_AnchorSmash {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Tidehunter_AnchorSmash_Caster {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tidehunter_Anchor_Unit {
    public const nint chain_length = 0x1318; // int32
    public const nint attacks_to_destroy = 0x131C; // int32
}

public static class CDOTA_Modifier_Tidehunter_DeadInTheWater {
    public const nint max_movement_speed = 0x1318; // int32
    public const nint chain_length = 0x131C; // int32
    public const nint m_hAnchor = 0x1320; // CHandle< C_BaseEntity >
    public const nint m_bDragging = 0x1324; // bool
}

public static class CDOTA_Modifier_Tidehunter_Gush {
    public const nint movement_speed = 0x1318; // int32
    public const nint negative_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Tidehunter_KrakenShell {
    public const nint m_iDamageTaken = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint damage_cleanse = 0x1320; // int32
    public const nint bonus_reduction_per_stack = 0x1324; // int32
    public const nint damage_reset_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_Tidehunter_SmashAttack {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tinker_Defensive_Matrix {
    public const nint damage_absorb = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint cooldown_reduction = 0x1320; // int32
    public const nint m_bStartedTimer = 0x1324; // bool
    public const nint m_nDamageAbsorbed = 0x1328; // int32
}

public static class CDOTA_Modifier_Tinker_LaserBlind {
    public const nint miss_rate = 0x1318; // int32
    public const nint max_health_removed = 0x131C; // float32
}

public static class CDOTA_Modifier_Tinker_MarchOfTheMachinesThinker {
    public const nint collision_radius = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint distance = 0x1320; // int32
    public const nint distance_scepter = 0x1324; // int32
    public const nint speed = 0x1328; // int32
    public const nint machines_per_sec = 0x132C; // int32
    public const nint m_vDir = 0x1330; // Vector
}

public static class CDOTA_Modifier_Tinker_Rearmor {
    public const nint magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Tinker_Warp_Grenade {
    public const nint range_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Avalanche {
    public const nint m_pHeroesHit = 0x1318; // CUtlVector< C_DOTA_BaseNPC* >
    public const nint radius = 0x1330; // int32
    public const nint total_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint tick_count = 0x133C; // int32
    public const nint toss_multiplier = 0x1340; // float32
    public const nint m_damage = 0x1344; // int32
    public const nint m_nTicks = 0x1348; // int32
}

public static class CDOTA_Modifier_Tiny_CraggyExterior {
    public const nint stun_chance = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Tiny_Grow {
    public const nint bonus_armor = 0x1318; // int32
    public const nint attack_speed_reduction = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint tree_bonus_damage_pct = 0x1324; // float32
    public const nint slow_resistance = 0x1328; // float32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tiny_Toss {
    public const nint radius = 0x1318; // int32
    public const nint toss_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Tiny_TossTree_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_TossTree_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Tree_Channel {
    public const nint tree_grab_radius = 0x1318; // int32
    public const nint splash_radius = 0x131C; // int32
    public const nint speed = 0x1320; // int32
    public const nint interval = 0x1324; // float32
    public const nint m_vPos = 0x1328; // Vector
}

public static class CDOTA_Modifier_Tiny_Tree_Channel_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Tree_Grab {
    public const nint attack_count = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_buildings = 0x1320; // int32
    public const nint stun_duration = 0x1324; // float32
    public const nint attack_range = 0x1328; // int32
    public const nint m_nOriginalAttackCapability = 0x132C; // int32
    public const nint bat_increase = 0x1330; // float32
    public const nint speed_reduction = 0x1334; // int32
    public const nint m_nBonusAttackRange = 0x1338; // int32
    public const nint m_hStolenTree = 0x133C; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nFXAttackIndex = 0x1344; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tornado_Tempest {
    public const nint near_radius = 0x1318; // int32
    public const nint near_damage = 0x131C; // int32
    public const nint far_radius = 0x1320; // int32
    public const nint far_damage = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Tornado_Tempest_Debuff {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Tower_Armor_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Tower_Aura {
    public const nint bonus_armor = 0x1318; // int32
    public const nint m_bOverrideArmor = 0x131C; // bool
    public const nint hp_regen = 0x1320; // float32
    public const nint m_bOverrideRegen = 0x1324; // bool
    public const nint m_nRadius = 0x1328; // int32
}

public static class CDOTA_Modifier_Tower_Aura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint m_bOverrideArmor = 0x1320; // bool
    public const nint m_bOverrideRegen = 0x1321; // bool
    public const nint m_bSentFirstRefresh = 0x1322; // bool
}

public static class CDOTA_Modifier_Treant_Bonus {
    public const nint treant_hp_bonus = 0x1318; // int32
    public const nint treant_damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_Large_Bonus {
    public const nint treant_large_hp_bonus = 0x1318; // int32
    public const nint treant_large_damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_LeechSeed {
    public const nint damage_interval = 0x1318; // float32
    public const nint leech_damage = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint projectile_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Treant_LeechSeed_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Treant_Lifebomb_Explode {
    public const nint flStartTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Treant_LivingArmor {
    public const nint heal_per_second = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Creation_Thinker {
    public const nint creation_interval = 0x1318; // float32
    public const nint vines_duration = 0x131C; // float32
    public const nint vine_spawn_interval = 0x1320; // int32
    public const nint m_vInitialLoc = 0x1324; // Vector
    public const nint m_vFinalLoc = 0x1330; // Vector
    public const nint m_iVineCount = 0x133C; // int32
    public const nint m_iVinesIndex = 0x1340; // int32
    public const nint m_bFoundTree = 0x1344; // bool
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Damage {
    public const nint movement_slow = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Latch_Thinker {
    public const nint latch_range = 0x1318; // int32
    public const nint latch_vision = 0x131C; // int32
    public const nint initial_latch_delay = 0x1320; // float32
    public const nint m_bBonus = 0x132C; // bool
}

public static class CDOTA_Modifier_Treant_NaturesGuise {
    public const nint m_RevealTimer = 0x1318; // CountdownTimer
    public const nint m_InvisAttackTimer = 0x1330; // CountdownTimer
    public const nint m_CooldownTimer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_Treant_NaturesGuise_Root {
    public const nint m_flEntangleDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Treant_NaturesGuise_Tree_Walking {
    public const nint movement_bonus = 0x1318; // int32
    public const nint regen_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_Overgrowth {
    public const nint damage = 0x1318; // float32
    public const nint mute = 0x131C; // int32
    public const nint bPurgable = 0x1320; // bool
}

public static class CDOTA_Modifier_TrollWarlord_BattleTrance {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint m_hTarget = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_TrollWarlord_BerserkersRage {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_range = 0x131C; // int32
    public const nint bonus_hp = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint ensnare_chance = 0x1328; // int32
    public const nint ensnare_duration = 0x132C; // float32
    public const nint base_attack_time = 0x1330; // float32
    public const nint m_iOriginalAttackCapabilities = 0x1334; // int32
}

public static class CDOTA_Modifier_TrollWarlord_BerserkersRage_Maim {
    public const nint maim_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_Fervor {
    public const nint attack_speed = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint extra_attack_chance_per_stack = 0x1320; // int32
    public const nint base_chance = 0x1324; // int32
    public const nint m_hUnit = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_TrollWarlord_WhirlingAxes_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_WhirlingAxes_Slow {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_Whirling_Axes_Melee {
    public const nint damage = 0x1318; // int32
    public const nint hit_radius = 0x131C; // int32
    public const nint axe_movement_speed = 0x1320; // int32
    public const nint whirl_duration = 0x1324; // float32
    public const nint max_range = 0x1328; // float32
    public const nint blind_duration = 0x132C; // float32
    public const nint m_flRotation = 0x1330; // float32
    public const nint m_flAxeRadius = 0x1334; // float32
    public const nint m_flDieTime = 0x1338; // GameTime_t
    public const nint m_bPiercesMagicImmunity = 0x133C; // float32
    public const nint m_nSwapIndex = 0x1340; // int32
    public const nint m_bReturning = 0x1344; // bool
    public const nint m_nAxeFXIndex = 0x1348; // ParticleIndex_t[2]
    public const nint m_nHeroesHitForRelic = 0x1350; // int32
    public const nint hitEntities = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hAxes = 0x1370; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Troll_Warlord_Rampage {
    public const nint attack_speed = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Truesight_Aura {
    public const nint m_nAuraRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_FrozenSigil {
    public const nint aghs_shard_move_slow = 0x1318; // int32
    public const nint aghs_shard_damage = 0x131C; // int32
    public const nint attack_slow = 0x1320; // int32
    public const nint turn_rate_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Tusk_FrozenSigil_Aura {
    public const nint sigil_radius = 0x1318; // int32
    public const nint m_iIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tusk_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow {
    public const nint attack_speed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Aura {
    public const nint m_iIndex = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusKick_AirTime {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusKick_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint air_time = 0x1320; // float32
    public const nint slow_duration = 0x1324; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< C_BaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tusk_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tutorial_ForceAnimation {
    public const nint m_nActivity = 0x1318; // int32
    public const nint m_bLoop = 0x131C; // bool
    public const nint m_bFacePlayer = 0x131D; // bool
}

public static class CDOTA_Modifier_Tutorial_HideNPC {
    public const nint m_bRemoveOnDeath = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_LastHitHelper {
    public const nint m_bTargetFriendlies = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_LastHittable {
    public const nint m_bIsFriend = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_SpeechBubble {
    public const nint m_bFacePlayer = 0x1318; // bool
}

public static class CDOTA_Modifier_Twin_Gate_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
    public const nint m_fPortalRadius = 0x131C; // float32
}

public static class CDOTA_Modifier_Twin_Gate_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint animation_rate = 0x132C; // float32
    public const nint stop_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Underlord_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Underlord_Portal_Buff {
    public const nint damage_reduction = 0x1318; // int32
    public const nint bonus_ms = 0x131C; // int32
}

public static class CDOTA_Modifier_Underlord_Portal_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
    public const nint m_fPortalRadius = 0x131C; // float32
}

public static class CDOTA_Modifier_Underlord_Portal_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint animation_rate = 0x132C; // float32
    public const nint stop_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Buff {
    public const nint str_steal = 0x1318; // int32
    public const nint str_scale_up = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Debuff {
    public const nint str_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Shard {
    public const nint shard_buff_duration = 0x1318; // float32
    public const nint m_vecStackExpirationTimes = 0x1320; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_Undying_FleshGolem {
    public const nint str_percentage = 0x1318; // int32
    public const nint movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_FleshGolem_PlagueAura {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_Undying_FleshGolem_Slow {
    public const nint damage_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Bunker {
    public const nint bunker_heal_pct = 0x1318; // float32
    public const nint tombstone_grab_radius = 0x131C; // float32
    public const nint tombstone_stun_penalty = 0x1320; // float32
}

public static class CDOTA_Modifier_Undying_Tombstone_HP {
    public const nint tombstone_health = 0x1318; // int32
    public const nint zombie_damage_interval = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Aura {
    public const nint radius = 0x1318; // int32
    public const nint zombie_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathlust {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike {
    public const nint radius = 0x1318; // int32
    public const nint health_threshold_pct = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint m_hTombstoneSourceAbility = 0x1324; // CHandle< C_DOTABaseAbility >
    public const nint m_hChaseUnit = 0x1328; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow {
    public const nint slow = 0x1318; // int32
    public const nint m_flDecrementTime = 0x131C; // float32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Unwavering_Condition {
    public const nint max_health = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_UpgradedBarricade {
    public const nint armor_bonus_per_upgrade = 0x1318; // int32
    public const nint hp_bonus_per_upgrade = 0x131C; // int32
}

public static class CDOTA_Modifier_UpgradedMortar {
    public const nint bonus_per_upgrade = 0x1318; // int32
}

public static class CDOTA_Modifier_UpheavalUrn_Reincarnation {
    public const nint reincarnate_time = 0x1318; // float32
}

public static class CDOTA_Modifier_UrnUpheaval {
    public const nint m_iSlow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Earthshock {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Enrage {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Ursa_Fury_Swipes {
    public const nint damage_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Fury_Swipes_Damage_Increase {
    public const nint damage_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint slow_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura_Effect {
    public const nint bonus_base_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura_Illusion {
    public const nint hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura_Effect {
    public const nint bonus_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Hybrid_Special {
    public const nint scepter_illusion_ms_bonus_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Nether_Swap_DamageReduction {
    public const nint damage_reduction = 0x1318; // float32
    public const nint nFXIndex = 0x131C; // ParticleIndex_t
    public const nint damage = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_WaveOfTerror {
    public const nint armor_reduction = 0x1318; // int32
    public const nint attack_reduction = 0x131C; // int32
    public const nint damage_reduction_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_WaveOfTerror_Buff {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint steal_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Venom_Gland_Debuff {
    public const nint damage = 0x1318; // int32
    public const nint degen = 0x131C; // int32
}

public static class CDOTA_Modifier_Venomancer_Latent_Poison {
    public const nint duration_damage = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
    public const nint explosion_damage = 0x1320; // int32
    public const nint explosion_stun_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlaguePrimary {
    public const nint health_damage = 0x1318; // float32
    public const nint debuff_radius = 0x131C; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlagueSecondary {
    public const nint health_damage = 0x1318; // float32
    public const nint attack_slow = 0x131C; // float32
    public const nint movement_slow_max = 0x1320; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlague_Slow {
    public const nint attack_slow = 0x1318; // float32
    public const nint movement_slow_max = 0x131C; // float32
    public const nint debuff_radius = 0x1320; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonNova {
    public const nint damage = 0x1318; // float32
    public const nint magic_resist = 0x131C; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonStingBase {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint m_nTicksRemaining = 0x1320; // int32
    public const nint m_flAttackDamage = 0x1324; // float32
    public const nint hp_regen_reduction = 0x1328; // int32
}

public static class CDOTA_Modifier_Venomancer_PoisonStingWard {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint hp_regen_reduction = 0x1320; // int32
    public const nint m_nTicksRemaining = 0x1324; // int32
    public const nint m_flAttackDamage = 0x1328; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonSting_Applier {
    public const nint duration = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Venomancer_VenomousGale {
    public const nint movement_slow = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Viper_BecomeUniversal {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint is_universal = 0x131C; // int32
}

public static class CDOTA_Modifier_Viper_CorrosiveSkin {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint max_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Viper_CorrosiveSkin_Slow {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint effect_multiplier_distance = 0x1320; // int32
    public const nint effect_multiplier = 0x1324; // int32
    public const nint m_bEffectMultiplied = 0x1328; // bool
}

public static class CDOTA_Modifier_Viper_Nethertoxin {
    public const nint min_damage = 0x1318; // int32
    public const nint max_damage = 0x131C; // int32
    public const nint max_duration = 0x1320; // float32
    public const nint attack_slow = 0x1324; // int32
    public const nint m_flDamageInterval = 0x1328; // float32
    public const nint m_flTimeIncrement = 0x132C; // float32
}

public static class CDOTA_Modifier_Viper_Nethertoxin_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Viper_Nose_Dive {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_vStart = 0x1324; // Vector
    public const nint m_flZDelta = 0x1330; // float32
    public const nint radius = 0x1334; // int32
    public const nint corrosive_radius = 0x1338; // int32
    public const nint effect_duration = 0x133C; // float32
    public const nint dive_speed = 0x1340; // int32
    public const nint start_height = 0x1344; // float32
}

public static class CDOTA_Modifier_Viper_Nose_Dive_Effect {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Viper_PoisonAttack {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Viper_PoisonAttack_Slow {
    public const nint damage = 0x1318; // float32
    public const nint shard_armor_reduction = 0x131C; // int32
    public const nint shard_building_dmg_pct = 0x1320; // int32
    public const nint movement_speed = 0x1324; // int32
    public const nint magic_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Viper_ViperStrike_Slow {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Visage_GraveChill_Buff {
    public const nint movespeed_bonus = 0x1318; // int32
    public const nint attackspeed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_GraveChill_Debuff {
    public const nint movespeed_bonus = 0x1318; // int32
    public const nint attackspeed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak {
    public const nint damage_reduction = 0x1318; // int32
    public const nint max_layers = 0x131C; // int32
    public const nint minimum_damage = 0x1320; // float32
    public const nint recovery_time = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint max_damage_reduction = 0x132C; // int32
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t[4]
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint vStacks = 0x1348; // CUtlVector< CDOTA_Modifier_Visage_GravekeepersCloak_Stack* >
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak_Secondary {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak_Stack {
    public const nint m_bIsRecovering = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // int32[4]
}

public static class CDOTA_Modifier_Visage_Scepter {
    public const nint m_flReadyTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Visage_Silent_As_The_Grave {
    public const nint m_bHasMadeAttack = 0x1328; // bool
}

public static class CDOTA_Modifier_Visage_Silent_As_The_Grave_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Visage_SoulAssumption {
    public const nint radius = 0x1318; // int32
    public const nint stack_limit = 0x131C; // int32
    public const nint damage_limit = 0x1320; // int32
    public const nint stack_duration = 0x1324; // float32
    public const nint damage_min = 0x1328; // float32
    public const nint damage_max = 0x132C; // float32
    public const nint m_nFxIndexA = 0x1330; // ParticleIndex_t
    public const nint m_nFxIndexB = 0x1334; // ParticleIndex_t
    public const nint iCur_stack = 0x1338; // int32
    public const nint m_fTotalDamage = 0x1358; // float32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_DamageCharge {
    public const nint familiar_speed = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // int32
    public const nint m_nFXIndexB = 0x1320; // int32
    public const nint m_ctTimer = 0x1328; // CountdownTimer
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Buff {
    public const nint hp_regen = 0x1318; // float32
    public const nint stun_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Thinker {
    public const nint stun_radius = 0x1318; // int32
    public const nint stun_damage = 0x131C; // int32
    public const nint stun_delay = 0x1320; // float32
    public const nint stun_duration = 0x1324; // float32
    public const nint stone_duration = 0x1328; // float32
    public const nint m_iIntervalCount = 0x132C; // int32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Timer {
    public const nint stone_duration = 0x1318; // float32
    public const nint m_fStartTime = 0x131C; // GameTime_t
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_Unit {
    public const nint m_vFacingDir = 0x1318; // Vector
    public const nint m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
    public const nint m_bPiercesCreeps = 0x137C; // bool
    public const nint m_hAlreadyHit = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_WatchThinker {
    public const nint remnant_watch_radius = 0x1318; // int32
    public const nint m_flLastDamageTick = 0x131C; // GameTime_t
    public const nint damage_tick_rate = 0x1320; // float32
    public const nint flDamage = 0x1324; // float32
    public const nint m_bPiercesCreeps = 0x1328; // bool
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint pop_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Intrinsic {
    public const nint ability_chance_pct = 0x1318; // int32
    public const nint attack_chance_pct = 0x131C; // int32
    public const nint pop_damage_delay = 0x1320; // float32
}

public static class CDOTA_Modifier_VoidSpirit_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
}

public static class CDOTA_Modifier_VoidSpirit_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
    public const nint m_nMaxAbsorb = 0x1320; // int32
}

public static class CDOTA_Modifier_VoidSpirit_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint speed = 0x1340; // int32
    public const nint radius = 0x1344; // int32
    public const nint damage = 0x1348; // int32
}

public static class CDOTA_Modifier_Voidwalker_Phased {
    public const nint damage = 0x1318; // int32
    public const nint max_damage_duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint bAttackRange = 0x1340; // bool
    public const nint m_flStartTime = 0x1344; // float32
    public const nint m_flFadeTime = 0x1348; // float32
    public const nint m_flDamageScale = 0x134C; // float32
    public const nint duration = 0x1350; // float32
}

public static class CDOTA_Modifier_Warlock_FatalBonds {
    public const nint m_FatalBondsEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint damage_share_percentage = 0x1330; // int32
    public const nint imp_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Warlock_Golem_Flaming_Fists {
    public const nint damage = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Warlock_Golem_Permanent_Immolation {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Golem_Permanent_Immolation_Debuff {
    public const nint aura_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Imp_AutoAttack {
    public const nint m_hBestTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint bonus_hp = 0x131C; // float32
    public const nint bonus_dmg = 0x1320; // float32
    public const nint bonus_movespeed = 0x1324; // float32
}

public static class CDOTA_Modifier_Warlock_Imp_ExplodeThinker {
    public const nint explosion_radius = 0x1318; // float32
    public const nint explosion_dmg = 0x131C; // float32
    public const nint explosion_nonhero_reduce = 0x1320; // float32
}

public static class CDOTA_Modifier_Warlock_Rain_Of_Chaos_Golem {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_slow_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Warlock_Rain_Of_Chaos_Thinker {
    public const nint stun_duration = 0x1318; // float32
    public const nint bHasScepter = 0x131C; // bool
    public const nint aoe = 0x1320; // int32
    public const nint m_iCount = 0x1324; // int32
}

public static class CDOTA_Modifier_Warlock_Shadow_Word {
    public const nint tick_interval = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint shard_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Warlock_Upheaval {
    public const nint m_iSlow = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Upheaval_Ally {
    public const nint m_iAttackSpeed = 0x1318; // int32
}

public static class CDOTA_Modifier_WarpineRaider_SeedShot {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_WarpineRaider_SeedShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Watch_Tower {
    public const nint m_iCapturingTeam = 0x1318; // int32
    public const nint m_flCaptureProgress = 0x131C; // float32
    public const nint m_flBonusTime = 0x1320; // float32
    public const nint m_bInitialSetupDone = 0x1324; // bool
    public const nint m_iOriginalTeam = 0x1328; // int32
    public const nint m_hPreviousHero = 0x132C; // CHandle< C_BaseEntity >
    public const nint m_vecLastCreditedPlayerIDs = 0x1330; // CUtlVector< PlayerID_t >
    public const nint m_flAccumulatedCaptureTime = 0x1348; // float32
    public const nint m_iBonusCount = 0x134C; // int32
    public const nint m_nFxOutpostAmbient = 0x1350; // ParticleIndex_t
    public const nint m_nFxOutpostInitialAmbient = 0x1354; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wave_Blast_Knockback {
    public const nint disarm_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Weaver_GeminateAttack_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Weaver_Shukuchi {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint speed = 0x1330; // int32
    public const nint geminate_attack_mark_duration = 0x1334; // float32
    public const nint m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Weaver_Shukuchi_GeminateAttackManager {
    public const nint m_iAttacksRemaining = 0x1318; // int32
}

public static class CDOTA_Modifier_Weaver_Swarm {
    public const nint m_iMaxDist = 0x1318; // int32
    public const nint m_iAttackCount = 0x131C; // int32
    public const nint destroy_attacks = 0x1320; // int32
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_vStartLoc = 0x1330; // Vector
    public const nint m_hAttachTarget = 0x133C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Weaver_Swarm_Debuff {
    public const nint armor_reduction = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint m_flCurrentArmorReduction = 0x1320; // float32
}

public static class CDOTA_Modifier_Weaver_TimeLapse {
    public const nint m_PositionIndex = 0x1318; // Vector[11]
    public const nint m_flLife = 0x139C; // float32[11]
    public const nint m_flMana = 0x13C8; // float32[11]
    public const nint m_bHasValidHistory = 0x13F4; // bool
}

public static class CDOTA_Modifier_Whisper_Of_The_Dread {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_spell_damage = 0x131C; // int32
    public const nint vision_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Wildkin_Tornado {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Wind_Waker {
    public const nint m_hBlocker = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_flStartTime = 0x131C; // GameTime_t
}

public static class CDOTA_Modifier_Windrunner_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
}

public static class CDOTA_Modifier_Windrunner_FocusFire {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint focusfire_damage_reduction = 0x131C; // int32
    public const nint bActive = 0x1320; // bool
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint focusfire_fire_on_the_move = 0x1328; // int32
    public const nint m_bPause = 0x132C; // bool
    public const nint m_nNumArrowsLanded = 0x1330; // int32
    public const nint m_nDamageDealt = 0x1334; // int32
    public const nint m_nDamageDealtMax = 0x1338; // int32
    public const nint m_nTargetInitialHP = 0x133C; // int32
    public const nint m_bHeroKilled = 0x1340; // bool
    public const nint m_bRecentFocusFireAttack = 0x1341; // bool
    public const nint m_nFXFocusFire = 0x134C; // ParticleIndex_t
    public const nint m_flLastFocusFireAttackTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Windrunner_GaleForce_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Windrunner_Powershot_Slow {
    public const nint enemy_movespeed_bonus_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Windrunner_Windrun {
    public const nint radius = 0x1318; // int32
    public const nint scepter_radius = 0x131C; // int32
    public const nint movespeed_bonus_pct = 0x1320; // int32
    public const nint m_bDispellable = 0x1324; // bool
    public const nint physical_damage_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Windrunner_Windrun_Invis_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Windrunner_Windrun_Slow {
    public const nint enemy_movespeed_bonus_pct = 0x1318; // float32
    public const nint scepter_movespeed_bonus_pct = 0x131C; // float32
    public const nint scepter_blind = 0x1320; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Flight {
    public const nint attack_point = 0x1318; // float32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint projectile_speed_bonus = 0x1320; // int32
    public const nint night_vision_bonus = 0x1324; // int32
    public const nint movement_scepter = 0x1328; // int32
    public const nint m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
    public const nint max_attacks = 0x1338; // int32
    public const nint m_iNumAttacks = 0x133C; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Frost_Attack {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Slow {
    public const nint percent_damage = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Cold_Embrace {
    public const nint heal_additive = 0x1320; // int32
    public const nint heal_percentage = 0x1324; // float32
}

public static class CDOTA_Modifier_Winter_Wyvern_Splinter_Blast_Slow {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse {
    public const nint m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint damage_amplification = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
    public const nint m_flLastSeen = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Wisp_Overcharge {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint shard_bonus_slow_resistance = 0x1320; // int32
    public const nint hp_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Wisp_Relocate_Return {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_vecReturnPosition = 0x131C; // Vector
    public const nint return_time = 0x1328; // float32
    public const nint m_nFXTimeRemaining = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wisp_Relocate_Thinker {
    public const nint cast_delay = 0x1318; // float32
    public const nint m_nFXIndexEndTeam = 0x131C; // ParticleIndex_t
    public const nint m_nFXIndexChannel = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wisp_Spirits {
    public const nint creep_damage = 0x1318; // int32
    public const nint hero_damage = 0x131C; // int32
    public const nint hit_radius = 0x1320; // int32
    public const nint hero_hit_radius = 0x1324; // int32
    public const nint explode_radius = 0x1328; // int32
    public const nint min_range = 0x132C; // int32
    public const nint max_range = 0x1330; // int32
    public const nint default_radius = 0x1334; // int32
    public const nint spirit_amount = 0x1338; // int32
    public const nint m_flRotation = 0x133C; // float32
    public const nint m_flSpiritRadius = 0x1340; // float32
    public const nint spirit_movement_rate = 0x1344; // int32
    public const nint m_flNextSpawn = 0x1348; // GameTime_t
    public const nint m_strSpiritsOutSwapAbility = 0x1350; // CUtlString
}

public static class CDOTA_Modifier_Wisp_Spirits_Slow {
    public const nint scepter_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Wisp_Tentacles {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint hCurrentEntity = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Wisp_Tether {
    public const nint m_bInManaGained = 0x1318; // bool
    public const nint m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint hStunnedEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint stun_duration = 0x1338; // float32
    public const nint movespeed = 0x133C; // int32
    public const nint self_bonus = 0x1340; // int32
    public const nint m_bIsInRange = 0x1344; // bool
    public const nint radius = 0x1348; // int32
    public const nint latch_distance = 0x134C; // int32
    public const nint m_flHealthHealed = 0x1350; // float32
    public const nint m_flManaHealed = 0x1354; // float32
    public const nint tether_heal_amp = 0x1358; // float32
    public const nint m_flHealMessageTime = 0x135C; // GameTime_t
    public const nint m_flManaMessageTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Wisp_Tether_Haste {
    public const nint movespeed = 0x1318; // float32
    public const nint shard_bonus_spell_lifesteal = 0x131C; // float32
}

public static class CDOTA_Modifier_Wisp_Tether_Slow {
    public const nint slow = 0x1318; // int32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Wisp_Tether_Spell_Lifesteal {
    public const nint shard_bonus_spell_lifesteal = 0x1318; // float32
}

public static class CDOTA_Modifier_WitchDoctor_Cask_Thinker {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_WitchDoctor_DeathWard {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_iBounceRadius = 0x131C; // int32
    public const nint bonus_accuracy = 0x1320; // int32
    public const nint m_bFirstAttack = 0x1324; // bool
}

public static class CDOTA_Modifier_WitchDoctor_DeathWard_Voodoo_Switcheroo_AttackSpeedReduction {
    public const nint attack_speed_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_WitchDoctor_Maledict {
    public const nint m_iStartHealth = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_threshold = 0x1320; // int32
    public const nint ticks = 0x1324; // int32
    public const nint iCurrentTick = 0x1328; // int32
}

public static class CDOTA_Modifier_WitchDoctor_Voodoo_Restoration_Heal {
    public const nint heal = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint heal_interval = 0x1320; // float32
    public const nint enemy_damage_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_WitchDoctor_Voodoo_Switcheroo {
    public const nint m_vSavedPos = 0x1318; // Vector
    public const nint m_hSavedAbility = 0x1324; // CHandle< C_BaseEntity >
}

public static class CDOTA_Modifier_Woodland_Striders_Active {
    public const nint tree_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Yasha_And_Kaya_Maim {
    public const nint maim_slow_movement = 0x1318; // int32
    public const nint maim_slow_attack = 0x131C; // int32
    public const nint maim_slow_movement_range = 0x1320; // int32
    public const nint maim_slow_attack_range = 0x1324; // int32
}

public static class CDOTA_Modifier_Zombie_Berserk {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Zuus_ArcLightning {
    public const nint radius = 0x1318; // int32
    public const nint jump_count = 0x131C; // int32
    public const nint arc_damage = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint damage_health_pct = 0x1328; // int32
    public const nint total_damage_pct = 0x132C; // int32
    public const nint m_iCurJumpCount = 0x1330; // int32
    public const nint trigger_spell_absorb = 0x1334; // bool
    public const nint m_vCurTargetLoc = 0x1338; // Vector
    public const nint m_hHitEntities = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_Modifier_Zuus_Cloud {
    public const nint m_CloudBoltTimer = 0x1318; // CountdownTimer
    public const nint cloud_bolt_interval = 0x1330; // float32
    public const nint cloud_radius = 0x1334; // int32
}

public static class CDOTA_Modifier_Zuus_Heavenly_Jump_Boost {
    public const nint postjump_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Zuus_Lightning_Hands {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t
    public const nint arc_lightning_damage_pct = 0x1334; // int32
    public const nint arc_lightning_damage_illusion_pct = 0x1338; // int32
    public const nint attack_range_bonus = 0x133C; // int32
}

public static class CDOTA_Modifier_Zuus_Static_Field_Slow {
    public const nint move_slow = 0x1318; // int32
    public const nint aspd_slow = 0x131C; // int32
    public const nint cast_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Zuus_ThunderTrail_Debuff {
    public const nint debuff_spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Zuus_ThundergodsWrathThinker {
    public const nint damage = 0x1318; // int32
    public const nint damage_pct = 0x131C; // float32
    public const nint sight_duration = 0x1320; // float32
    public const nint second_strike_damage_percent = 0x1324; // int32
    public const nint second_strike_delay = 0x1328; // float32
}

public static class CDOTA_NPC_Observer_Ward {
    public const nint m_iDuration = 0x1768; // int32
    public const nint m_pVisionRangeFX = 0x1770; // CNewParticleEffect*
    public const nint m_nPreviewViewer = 0x1778; // int32
}

public static class CDOTA_NPC_Observer_Ward_TrueSight {
    public const nint m_iTrueSight = 0x1780; // int32
    public const nint m_hCasterEntity = 0x1784; // CEntityHandle
    public const nint m_hAbilityEntity = 0x1788; // CEntityHandle
}

public static class CDOTA_PlayerChallengeInfo {
    public const nint nType = 0x30; // int32
    public const nint nQuestID = 0x34; // int32
    public const nint nQuestChallengeID = 0x38; // int32
    public const nint nTier = 0x3C; // int32
    public const nint nParam0 = 0x40; // int32
    public const nint nParam1 = 0x44; // int32
    public const nint nSlotID = 0x48; // int32
    public const nint nProgress = 0x4C; // int32
    public const nint nCompletionThreshold = 0x50; // int32
    public const nint nPlayerID = 0x54; // PlayerID_t
    public const nint nQueryIndex = 0x58; // int32
    public const nint nEventID = 0x5C; // int32
    public const nint nSequenceID = 0x60; // int32
    public const nint nCompleted = 0x64; // int32
    public const nint nRank = 0x68; // int32
}

public static class CDOTA_Unit_Announcer {
    public const nint m_currentAnnouncer = 0x1768; // CAnnouncerDescriptor
}

public static class CDOTA_Unit_Hero_AbyssalUnderlord {
    public const nint m_iRangeFX = 0x1AC8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_ArcWarden {
    public const nint m_nTalkFXIndex = 0x1AC8; // ParticleIndex_t
    public const nint m_nFXDeath = 0x1ACC; // ParticleIndex_t
    public const nint m_nTempestFX = 0x1AD0; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Dawnbreaker {
    public const nint m_nAttackState = 0x1AC8; // int32
}

public static class CDOTA_Unit_Hero_Grimstroke {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class CDOTA_modifier_aghsfort_juggernaut_omnislash {
    public const nint m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    public const nint m_hLastTarget = 0x131C; // CHandle< C_BaseEntity >
    public const nint m_nJumps = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint omni_slash_radius = 0x132C; // int32
    public const nint attack_rate_multiplier = 0x1330; // float32
    public const nint upgraded_radius = 0x1334; // int32
    public const nint m_iTotalDamage = 0x1338; // int32
    public const nint m_iHeroDamage = 0x133C; // int32
    public const nint m_bReflection = 0x1340; // bool
    public const nint m_bFirstHit = 0x1341; // bool
    public const nint m_bEndNext = 0x1342; // bool
    public const nint m_fNextAttackTime = 0x1344; // GameTime_t
    public const nint m_vCastOrigin = 0x1348; // Vector
    public const nint m_hIllusions = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class CDOTA_modifier_aghsfort_juggernaut_omnislash_Camera {
    public const nint m_bIsDone = 0x1318; // bool
    public const nint m_hFollowEnt = 0x131C; // CHandle< C_BaseEntity >
}

public static class CDecalInfo {
    public const nint m_flAnimationScale = 0x0; // float32
    public const nint m_flAnimationLifeSpan = 0x4; // float32
    public const nint m_flPlaceTime = 0x8; // float32
    public const nint m_flFadeStartTime = 0xC; // float32
    public const nint m_flFadeDuration = 0x10; // float32
    public const nint m_nVBSlot = 0x14; // int32
    public const nint m_nBoneIndex = 0x18; // int32
    public const nint m_pNext = 0x28; // CDecalInfo*
    public const nint m_pPrev = 0x30; // CDecalInfo*
    public const nint m_nDecalMaterialIndex = 0x90; // int32
}

public static class CDeferredLightBase {
    public const nint m_LightColor = 0x10; // Color
    public const nint m_flIntensity = 0x14; // float32
    public const nint m_flLightSize = 0x18; // float32
    public const nint m_flSpotFoV = 0x1C; // float32
    public const nint m_vLightDirection = 0x20; // QAngle
    public const nint m_flStartFalloff = 0x2C; // float32
    public const nint m_flDistanceFalloff = 0x30; // float32
    public const nint m_nFlags = 0x34; // uint32
    public const nint m_ProjectedTextureName = 0x38; // char[512]
}

public static class CEffectData {
    public const nint m_vOrigin = 0x8; // Vector
    public const nint m_vStart = 0x14; // Vector
    public const nint m_vNormal = 0x20; // Vector
    public const nint m_vAngles = 0x2C; // QAngle
    public const nint m_hEntity = 0x38; // CEntityHandle
    public const nint m_hOtherEntity = 0x3C; // CEntityHandle
    public const nint m_flScale = 0x40; // float32
    public const nint m_flMagnitude = 0x44; // float32
    public const nint m_flRadius = 0x48; // float32
    public const nint m_nSurfaceProp = 0x4C; // CUtlStringToken
    public const nint m_nEffectIndex = 0x50; // CWeakHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_nDamageType = 0x58; // uint32
    public const nint m_nPenetrate = 0x5C; // uint8
    public const nint m_nMaterial = 0x5E; // uint16
    public const nint m_nHitBox = 0x60; // uint16
    public const nint m_nColor = 0x62; // uint8
    public const nint m_fFlags = 0x63; // uint8
    public const nint m_nAttachmentIndex = 0x64; // AttachmentHandle_t
    public const nint m_nAttachmentName = 0x68; // CUtlStringToken
    public const nint m_iEffectName = 0x6C; // uint16
    public const nint m_nExplosionType = 0x6E; // uint8
}

public static class CEntityIdentity {
    public const nint m_nameStringableIndex = 0x14; // int32
    public const nint m_name = 0x18; // CUtlSymbolLarge
    public const nint m_designerName = 0x20; // CUtlSymbolLarge
    public const nint m_flags = 0x30; // uint32
    public const nint m_worldGroupId = 0x38; // WorldGroupId_t
    public const nint m_fDataObjectTypes = 0x3C; // uint32
    public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
    public const nint m_pPrev = 0x58; // CEntityIdentity*
    public const nint m_pNext = 0x60; // CEntityIdentity*
    public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
    public const nint m_pNextByClass = 0x70; // CEntityIdentity*
}

public static class CEntityInstance {
    public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
    public const nint m_pEntity = 0x10; // CEntityIdentity*
    public const nint m_CScriptComponent = 0x28; // CScriptComponent*
}

public static class CFlashlightEffect {
    public const nint m_bIsOn = 0x10; // bool
    public const nint m_bMuzzleFlashEnabled = 0x20; // bool
    public const nint m_flMuzzleFlashBrightness = 0x24; // float32
    public const nint m_quatMuzzleFlashOrientation = 0x30; // Quaternion
    public const nint m_vecMuzzleFlashOrigin = 0x40; // Vector
    public const nint m_flFov = 0x4C; // float32
    public const nint m_flFarZ = 0x50; // float32
    public const nint m_flLinearAtten = 0x54; // float32
    public const nint m_bCastsShadows = 0x58; // bool
    public const nint m_flCurrentPullBackDist = 0x5C; // float32
    public const nint m_FlashlightTexture = 0x60; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_MuzzleFlashTexture = 0x68; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_textureName = 0x70; // char[64]
}

public static class CFoWBlockerRegion {
    public const nint m_vecFowBlockers = 0x538; // C_UtlVectorEmbeddedNetworkVar< FowBlocker_t >
    public const nint m_flMinX = 0x588; // float32
    public const nint m_flMaxX = 0x58C; // float32
    public const nint m_flMinY = 0x590; // float32
    public const nint m_flMaxY = 0x594; // float32
    public const nint m_flGridSize = 0x598; // float32
}

public static class CGameSceneNode {
    public const nint m_nodeToWorld = 0x10; // CTransform
    public const nint m_pOwner = 0x30; // CEntityInstance*
    public const nint m_pParent = 0x38; // CGameSceneNode*
    public const nint m_pChild = 0x40; // CGameSceneNode*
    public const nint m_pNextSibling = 0x48; // CGameSceneNode*
    public const nint m_hParent = 0x70; // CGameSceneNodeHandle
    public const nint m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
    public const nint m_angRotation = 0xB8; // QAngle
    public const nint m_flScale = 0xC4; // float32
    public const nint m_vecAbsOrigin = 0xC8; // Vector
    public const nint m_angAbsRotation = 0xD4; // QAngle
    public const nint m_flAbsScale = 0xE0; // float32
    public const nint m_nParentAttachmentOrBone = 0xE4; // int16
    public const nint m_bDebugAbsOriginChanges = 0xE6; // bool
    public const nint m_bDormant = 0xE7; // bool
    public const nint m_bForceParentToBeNetworked = 0xE8; // bool
    public const nint m_bDirtyHierarchy = 0x0; // bitfield:1
    public const nint m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
    public const nint m_bNetworkedPositionChanged = 0x0; // bitfield:1
    public const nint m_bNetworkedAnglesChanged = 0x0; // bitfield:1
    public const nint m_bNetworkedScaleChanged = 0x0; // bitfield:1
    public const nint m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
    public const nint m_bNotifyBoneTransformsChanged = 0x0; // bitfield:1
    public const nint m_bBoneMergeFlex = 0x0; // bitfield:1
    public const nint m_nLatchAbsOrigin = 0x0; // bitfield:2
    public const nint m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
    public const nint m_nHierarchicalDepth = 0xEB; // uint8
    public const nint m_nHierarchyType = 0xEC; // uint8
    public const nint m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xED; // uint8
    public const nint m_name = 0xF0; // CUtlStringToken
    public const nint m_hierarchyAttachName = 0x130; // CUtlStringToken
    public const nint m_flZOffset = 0x134; // float32
    public const nint m_vRenderOrigin = 0x138; // Vector
}

public static class CGameSceneNodeHandle {
    public const nint m_hOwner = 0x8; // CEntityHandle
    public const nint m_name = 0xC; // CUtlStringToken
}

public static class CGlobalLightBase {
    public const nint m_bSpotLight = 0x10; // bool
    public const nint m_SpotLightOrigin = 0x14; // Vector
    public const nint m_SpotLightAngles = 0x20; // QAngle
    public const nint m_ShadowDirection = 0x2C; // Vector
    public const nint m_AmbientDirection = 0x38; // Vector
    public const nint m_SpecularDirection = 0x44; // Vector
    public const nint m_InspectorSpecularDirection = 0x50; // Vector
    public const nint m_flSpecularPower = 0x5C; // float32
    public const nint m_flSpecularIndependence = 0x60; // float32
    public const nint m_SpecularColor = 0x64; // Color
    public const nint m_bStartDisabled = 0x68; // bool
    public const nint m_bEnabled = 0x69; // bool
    public const nint m_LightColor = 0x6A; // Color
    public const nint m_AmbientColor1 = 0x6E; // Color
    public const nint m_AmbientColor2 = 0x72; // Color
    public const nint m_AmbientColor3 = 0x76; // Color
    public const nint m_flSunDistance = 0x7C; // float32
    public const nint m_flFOV = 0x80; // float32
    public const nint m_flNearZ = 0x84; // float32
    public const nint m_flFarZ = 0x88; // float32
    public const nint m_bEnableShadows = 0x8C; // bool
    public const nint m_bOldEnableShadows = 0x8D; // bool
    public const nint m_bBackgroundClearNotRequired = 0x8E; // bool
    public const nint m_flCloudScale = 0x90; // float32
    public const nint m_flCloud1Speed = 0x94; // float32
    public const nint m_flCloud1Direction = 0x98; // float32
    public const nint m_flCloud2Speed = 0x9C; // float32
    public const nint m_flCloud2Direction = 0xA0; // float32
    public const nint m_flAmbientScale1 = 0xB0; // float32
    public const nint m_flAmbientScale2 = 0xB4; // float32
    public const nint m_flGroundScale = 0xB8; // float32
    public const nint m_flLightScale = 0xBC; // float32
    public const nint m_flFoWDarkness = 0xC0; // float32
    public const nint m_bEnableSeparateSkyboxFog = 0xC4; // bool
    public const nint m_vFowColor = 0xC8; // Vector
    public const nint m_ViewOrigin = 0xD4; // Vector
    public const nint m_ViewAngles = 0xE0; // QAngle
    public const nint m_flViewFoV = 0xEC; // float32
    public const nint m_WorldPoints = 0xF0; // Vector[8]
    public const nint m_vFogOffsetLayer0 = 0x4A8; // Vector2D
    public const nint m_vFogOffsetLayer1 = 0x4B0; // Vector2D
    public const nint m_hEnvWind = 0x4B8; // CHandle< C_BaseEntity >
    public const nint m_hEnvSky = 0x4BC; // CHandle< C_BaseEntity >
    public const nint m_fSmoothedAmount = 0x4C0; // float32
    public const nint m_fSlowSmoothedAmount = 0x4C4; // float32
}

public static class CGlowOverlay {
    public const nint m_vPos = 0x8; // Vector
    public const nint m_bDirectional = 0x14; // bool
    public const nint m_vDirection = 0x18; // Vector
    public const nint m_bInSky = 0x24; // bool
    public const nint m_skyObstructionScale = 0x28; // float32
    public const nint m_Sprites = 0x30; // CGlowSprite[4]
    public const nint m_nSprites = 0xB0; // int32
    public const nint m_flProxyRadius = 0xB4; // float32
    public const nint m_flHDRColorScale = 0xB8; // float32
    public const nint m_flGlowObstructionScale = 0xBC; // float32
    public const nint m_bCacheGlowObstruction = 0xC0; // bool
    public const nint m_bCacheSkyObstruction = 0xC1; // bool
    public const nint m_bActivated = 0xC2; // int16
    public const nint m_ListIndex = 0xC4; // uint16
    public const nint m_queryHandle = 0xC8; // int32
}

public static class CGlowProperty {
    public const nint m_fGlowColor = 0x8; // Vector
    public const nint m_iGlowType = 0x30; // int32
    public const nint m_iGlowTeam = 0x34; // int32
    public const nint m_nGlowRange = 0x38; // int32
    public const nint m_nGlowRangeMin = 0x3C; // int32
    public const nint m_glowColorOverride = 0x40; // Color
    public const nint m_bFlashing = 0x44; // bool
    public const nint m_flGlowTime = 0x48; // float32
    public const nint m_flGlowStartTime = 0x4C; // float32
    public const nint m_bGlowing = 0x50; // bool
}

public static class CGlowSprite {
    public const nint m_vColor = 0x0; // Vector
    public const nint m_flHorzSize = 0xC; // float32
    public const nint m_flVertSize = 0x10; // float32
    public const nint m_hMaterial = 0x18; // CStrongHandle< InfoForResourceTypeIMaterial2 >
}

public static class CHeroStatueLiked {
    public const nint m_iPlayerIDLiker = 0x30; // PlayerID_t
    public const nint m_iPlayerIDLiked = 0x34; // PlayerID_t
}

public static class CHeroesPerPlayer {
    public const nint m_vecHeroIDs = 0x30; // C_NetworkUtlVectorBase< int32 >
}

public static class CHitboxComponent {
    public const nint m_bvDisabledHitGroups = 0x24; // uint32[1]
}

public static class CInfoDynamicShadowHint {
    public const nint m_bDisabled = 0x538; // bool
    public const nint m_flRange = 0x53C; // float32
    public const nint m_nImportance = 0x540; // int32
    public const nint m_nLightChoice = 0x544; // int32
    public const nint m_hLight = 0x548; // CHandle< C_BaseEntity >
}

public static class CInfoDynamicShadowHintBox {
    public const nint m_vBoxMins = 0x550; // Vector
    public const nint m_vBoxMaxs = 0x55C; // Vector
}

public static class CInfoOffscreenPanoramaTexture {
    public const nint m_bDisabled = 0x538; // bool
    public const nint m_nResolutionX = 0x53C; // int32
    public const nint m_nResolutionY = 0x540; // int32
    public const nint m_szLayoutFileName = 0x548; // CUtlSymbolLarge
    public const nint m_RenderAttrName = 0x550; // CUtlSymbolLarge
    public const nint m_TargetEntities = 0x558; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
    public const nint m_nTargetChangeCount = 0x570; // int32
    public const nint m_vecCSSClasses = 0x578; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
    public const nint m_bCheckCSSClasses = 0x6F0; // bool
}

public static class CInfoWorldLayer {
    public const nint m_pOutputOnEntitiesSpawned = 0x538; // CEntityIOOutput
    public const nint m_worldName = 0x560; // CUtlSymbolLarge
    public const nint m_layerName = 0x568; // CUtlSymbolLarge
    public const nint m_bWorldLayerVisible = 0x570; // bool
    public const nint m_bEntitiesSpawned = 0x571; // bool
    public const nint m_bCreateAsChildSpawnGroup = 0x572; // bool
    public const nint m_hLayerSpawnGroup = 0x574; // uint32
    public const nint m_bWorldLayerActuallyVisible = 0x578; // bool
}

public static class CIngameEvent_MuertaReleaseSpring2023 {
    public const nint m_bMiniGameActive = 0x18C0; // bool
    public const nint m_vecTargetAssignments = 0x18C1; // int8[10]
    public const nint m_vecMiniGamePoints = 0x18CB; // uint8[10]
    public const nint m_vecMiniGameKills = 0x18D5; // uint8[10]
    public const nint m_activeGravestones = 0x18F0; // CUtlVector< ParticleIndex_t >
}

public static class CInterpolatedValue {
    public const nint m_flStartTime = 0x0; // float32
    public const nint m_flEndTime = 0x4; // float32
    public const nint m_flStartValue = 0x8; // float32
    public const nint m_flEndValue = 0xC; // float32
    public const nint m_nInterpType = 0x10; // int32
}

public static class CLightComponent {
    public const nint __m_pChainEntity = 0x48; // CNetworkVarChainer
    public const nint m_Color = 0x85; // Color
    public const nint m_SecondaryColor = 0x89; // Color
    public const nint m_flBrightness = 0x90; // float32
    public const nint m_flBrightnessScale = 0x94; // float32
    public const nint m_flBrightnessMult = 0x98; // float32
    public const nint m_flRange = 0x9C; // float32
    public const nint m_flFalloff = 0xA0; // float32
    public const nint m_flAttenuation0 = 0xA4; // float32
    public const nint m_flAttenuation1 = 0xA8; // float32
    public const nint m_flAttenuation2 = 0xAC; // float32
    public const nint m_flTheta = 0xB0; // float32
    public const nint m_flPhi = 0xB4; // float32
    public const nint m_hLightCookie = 0xB8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_nCascades = 0xC0; // int32
    public const nint m_nCastShadows = 0xC4; // int32
    public const nint m_nShadowWidth = 0xC8; // int32
    public const nint m_nShadowHeight = 0xCC; // int32
    public const nint m_bRenderDiffuse = 0xD0; // bool
    public const nint m_nRenderSpecular = 0xD4; // int32
    public const nint m_bRenderTransmissive = 0xD8; // bool
    public const nint m_flOrthoLightWidth = 0xDC; // float32
    public const nint m_flOrthoLightHeight = 0xE0; // float32
    public const nint m_nStyle = 0xE4; // int32
    public const nint m_Pattern = 0xE8; // CUtlString
    public const nint m_nCascadeRenderStaticObjects = 0xF0; // int32
    public const nint m_flShadowCascadeCrossFade = 0xF4; // float32
    public const nint m_flShadowCascadeDistanceFade = 0xF8; // float32
    public const nint m_flShadowCascadeDistance0 = 0xFC; // float32
    public const nint m_flShadowCascadeDistance1 = 0x100; // float32
    public const nint m_flShadowCascadeDistance2 = 0x104; // float32
    public const nint m_flShadowCascadeDistance3 = 0x108; // float32
    public const nint m_nShadowCascadeResolution0 = 0x10C; // int32
    public const nint m_nShadowCascadeResolution1 = 0x110; // int32
    public const nint m_nShadowCascadeResolution2 = 0x114; // int32
    public const nint m_nShadowCascadeResolution3 = 0x118; // int32
    public const nint m_bUsesBakedShadowing = 0x11C; // bool
    public const nint m_nShadowPriority = 0x120; // int32
    public const nint m_nBakedShadowIndex = 0x124; // int32
    public const nint m_bRenderToCubemaps = 0x128; // bool
    public const nint m_LightGroups = 0x130; // CUtlSymbolLarge
    public const nint m_nDirectLight = 0x138; // int32
    public const nint m_nIndirectLight = 0x13C; // int32
    public const nint m_flFadeMinDist = 0x140; // float32
    public const nint m_flFadeMaxDist = 0x144; // float32
    public const nint m_flShadowFadeMinDist = 0x148; // float32
    public const nint m_flShadowFadeMaxDist = 0x14C; // float32
    public const nint m_bEnabled = 0x150; // bool
    public const nint m_bFlicker = 0x151; // bool
    public const nint m_bPrecomputedFieldsValid = 0x152; // bool
    public const nint m_vPrecomputedBoundsMins = 0x154; // Vector
    public const nint m_vPrecomputedBoundsMaxs = 0x160; // Vector
    public const nint m_vPrecomputedOBBOrigin = 0x16C; // Vector
    public const nint m_vPrecomputedOBBAngles = 0x178; // QAngle
    public const nint m_vPrecomputedOBBExtent = 0x184; // Vector
    public const nint m_flPrecomputedMaxRange = 0x190; // float32
    public const nint m_nFogLightingMode = 0x194; // int32
    public const nint m_flFogContributionStength = 0x198; // float32
    public const nint m_flNearClipPlane = 0x19C; // float32
    public const nint m_SkyColor = 0x1A0; // Color
    public const nint m_flSkyIntensity = 0x1A4; // float32
    public const nint m_SkyAmbientBounce = 0x1A8; // Color
    public const nint m_bUseSecondaryColor = 0x1AC; // bool
    public const nint m_bMixedShadows = 0x1AD; // bool
    public const nint m_flLightStyleStartTime = 0x1B0; // GameTime_t
    public const nint m_flCapsuleLength = 0x1B4; // float32
    public const nint m_flMinRoughness = 0x1B8; // float32
}

public static class CLightInfoBase {
    public const nint m_origin2D = 0x10; // Vector2D
    public const nint m_Color = 0x18; // Color[2]
    public const nint m_LightScale = 0x20; // float32[2]
    public const nint m_AmbientColor = 0x28; // Color[2]
    public const nint m_AmbientScale = 0x30; // float32[2]
    public const nint m_ShadowColor = 0x38; // Color[2]
    public const nint m_ShadowSecondaryColor = 0x40; // Color[2]
    public const nint m_ShadowScale = 0x48; // float32[2]
    public const nint m_ShadowGroundScale = 0x50; // float32[2]
    public const nint m_SpecularColor = 0x58; // Color[2]
    public const nint m_flSpecularPower = 0x60; // float32[2]
    public const nint m_flSpecularIndependence = 0x68; // float32[2]
    public const nint m_SpecularDirection = 0x70; // Vector[2]
    public const nint m_InspectorSpecularDirection = 0x88; // Vector[2]
    public const nint m_LightDirection = 0xA0; // Vector[2]
    public const nint m_AmbientDirection = 0xB8; // Vector[2]
    public const nint m_FogColor = 0xD0; // Color[2]
    public const nint m_FogStart = 0xD8; // float32[2]
    public const nint m_FogEnd = 0xE0; // float32[2]
    public const nint m_HeightFogValue = 0xE8; // float32[2]
    public const nint m_HeightFogColor = 0xF0; // Color[2]
    public const nint m_FoWDarkness = 0xF8; // float32[2]
    public const nint m_FoWColorR = 0x100; // float32[2]
    public const nint m_FoWColorG = 0x108; // float32[2]
    public const nint m_FoWColorB = 0x110; // float32[2]
    public const nint m_InspectorViewFogColor = 0x118; // Color[2]
    public const nint m_windAngle = 0x120; // QAngle
    public const nint m_flWindAmount = 0x12C; // float32[2]
    public const nint m_flMinWind = 0x134; // float32
    public const nint m_flMaxWind = 0x138; // float32
    public const nint m_flMinGust = 0x13C; // float32
    public const nint m_flMaxGust = 0x140; // float32
    public const nint m_flMinGustDelay = 0x144; // float32
    public const nint m_flMaxGustDelay = 0x148; // float32
    public const nint m_flGustDuration = 0x14C; // float32
    public const nint m_flGustDirChange = 0x150; // float32
    public const nint m_skyboxAngle = 0x154; // QAngle[2]
    public const nint m_hSkyboxMaterial = 0x170; // CStrongHandle< InfoForResourceTypeIMaterial2 >[2]
    public const nint m_vSkyboxTintColor = 0x180; // Color[2]
    public const nint m_nSkyboxFogType = 0x188; // uint8
    public const nint m_flSkyboxAngularFogMaxEnd = 0x18C; // float32
    public const nint m_flSkyboxAngularFogMaxStart = 0x190; // float32
    public const nint m_flSkyboxAngularFogMinStart = 0x194; // float32
    public const nint m_flSkyboxAngularFogMinEnd = 0x198; // float32
    public const nint m_vAngularParams = 0x19C; // Vector4D
    public const nint m_vHeightFogColor = 0x1AC; // Color[2]
    public const nint m_flFogMaxZ = 0x1B4; // float32
    public const nint m_flFogDensity = 0x1B8; // float32[2]
    public const nint m_flFogFalloff = 0x1C0; // float32
    public const nint m_hFogTexture0 = 0x1C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_flFogLayer0Rotation = 0x1D0; // float32
    public const nint m_flFogLayer0Scale = 0x1D4; // float32
    public const nint m_flFoglayer0ScrollU = 0x1D8; // float32[2]
    public const nint m_flFoglayer0ScrollV = 0x1E0; // float32[2]
    public const nint m_hFogTexture1 = 0x1E8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_flFogLayer1Rotation = 0x1F0; // float32
    public const nint m_flFogLayer1Scale = 0x1F4; // float32
    public const nint m_flFoglayer1ScrollU = 0x1F8; // float32[2]
    public const nint m_flFoglayer1ScrollV = 0x200; // float32[2]
    public const nint m_hFogTextureOpacity = 0x208; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hWaterFlowMapTexture = 0x210; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hFogFlowMapTexture = 0x218; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_flFogExclusionInnerRadius = 0x220; // float32
    public const nint m_flFogExclusionHeightBias = 0x224; // float32
    public const nint m_flCausticSpeedScale = 0x22C; // float32
    public const nint m_flCausticAmplitudeScale = 0x230; // float32
    public const nint m_hColorWarp = 0x238; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_flColorWarpBlendToFull = 0x240; // float32
    public const nint m_fInnerRadius = 0x244; // float32
    public const nint m_fOuterRadius = 0x248; // float32
    public const nint m_flLightning_specular_pow_scale_min = 0x24C; // float32
    public const nint m_flLightning_specular_pow_scale_max = 0x250; // float32
    public const nint m_lightningColor = 0x254; // Color
    public const nint m_flLightningIntensityMin = 0x258; // float32
    public const nint m_flLightningIntensityMax = 0x25C; // float32
    public const nint m_flLightningElevation = 0x260; // float32
    public const nint m_flLightningSpecularIntensity = 0x264; // float32
    public const nint m_flFarZOverride = 0x268; // float32
    public const nint m_flAmbientShadowAmount = 0x26C; // float32
    public const nint m_nWeatherType = 0x270; // int32
    public const nint m_WeatherEffect = 0x278; // CUtlString
    public const nint m_flLightning_period_min = 0x280; // float32
    public const nint m_flLightning_period_max = 0x284; // float32
    public const nint m_flLightning_duration_min = 0x288; // float32
    public const nint m_flLightning_duration_max = 0x28C; // float32
    public const nint m_flLightning_fluctuation_min = 0x290; // float32
    public const nint m_flLightning_fluctuation_max = 0x294; // float32
    public const nint m_pszLightningSound = 0x298; // char[260]
    public const nint m_flNextLightningStartTime = 0x39C; // float32
    public const nint m_flNextLightningEndTime = 0x3A0; // float32
    public const nint m_flLightningFluctuationTimeStart = 0x3A4; // float32
    public const nint m_flLightningFluctuationTimeEnd = 0x3A8; // float32
    public const nint m_flLightningNumFluctuations = 0x3AC; // float32
    public const nint m_flNextLightningSoundTime = 0x3B0; // float32
    public const nint m_bPlayLightingSound = 0x3B4; // bool
    public const nint m_flLightningEventMagnitude = 0x3B8; // float32
    public const nint m_flLightningScale = 0x3BC; // float32
    public const nint m_flLightningFluctuation = 0x3C0; // float32
    public const nint m_flLightningAngle = 0x3C4; // float32
    public const nint m_flLightningEventPercentage = 0x3C8; // float32
}

public static class CLogicRelay {
    public const nint m_OnTrigger = 0x538; // CEntityIOOutput
    public const nint m_OnSpawn = 0x560; // CEntityIOOutput
    public const nint m_bDisabled = 0x588; // bool
    public const nint m_bWaitForRefire = 0x589; // bool
    public const nint m_bTriggerOnce = 0x58A; // bool
    public const nint m_bFastRetrigger = 0x58B; // bool
    public const nint m_bPassthoughCaller = 0x58C; // bool
}

public static class CModelState {
    public const nint m_hModel = 0xA0; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_ModelName = 0xA8; // CUtlSymbolLarge
    public const nint m_bClientClothCreationSuppressed = 0xE8; // bool
    public const nint m_MeshGroupMask = 0x180; // uint64
    public const nint m_nIdealMotionType = 0x222; // int8
    public const nint m_nForceLOD = 0x223; // int8
    public const nint m_nClothUpdateFlags = 0x224; // int8
}

public static class CNetworkedSequenceOperation {
    public const nint m_hSequence = 0x8; // HSequence
    public const nint m_flPrevCycle = 0xC; // float32
    public const nint m_flCycle = 0x10; // float32
    public const nint m_flWeight = 0x14; // CNetworkedQuantizedFloat
    public const nint m_bSequenceChangeNetworked = 0x1C; // bool
    public const nint m_bDiscontinuity = 0x1D; // bool
    public const nint m_flPrevCycleFromDiscontinuity = 0x20; // float32
    public const nint m_flPrevCycleForAnimEventDetection = 0x24; // float32
}

public static class CPlayer_CameraServices {
    public const nint m_PlayerFog = 0x40; // C_fogplayerparams_t
    public const nint m_hColorCorrectionCtrl = 0x80; // CHandle< C_ColorCorrection >
    public const nint m_hViewEntity = 0x84; // CHandle< C_BaseEntity >
    public const nint m_hTonemapController = 0x88; // CHandle< C_TonemapController2 >
    public const nint m_audio = 0x90; // audioparams_t
    public const nint m_PostProcessingVolumes = 0x108; // C_NetworkUtlVectorBase< CHandle< C_PostProcessingVolume > >
    public const nint m_flOldPlayerZ = 0x120; // float32
    public const nint m_flOldPlayerViewOffsetZ = 0x124; // float32
    public const nint m_CurrentFog = 0x128; // fogparams_t
    public const nint m_hOldFogController = 0x190; // CHandle< C_FogController >
    public const nint m_bOverrideFogColor = 0x194; // bool[5]
    public const nint m_OverrideFogColor = 0x199; // Color[5]
    public const nint m_bOverrideFogStartEnd = 0x1AD; // bool[5]
    public const nint m_fOverrideFogStart = 0x1B4; // float32[5]
    public const nint m_fOverrideFogEnd = 0x1C8; // float32[5]
    public const nint m_hActivePostProcessingVolume = 0x1DC; // CHandle< C_PostProcessingVolume >
    public const nint m_angDemoViewAngles = 0x1E0; // QAngle
}

public static class CPlayer_MovementServices {
    public const nint m_nImpulse = 0x40; // int32
    public const nint m_nButtons = 0x48; // CInButtonState
    public const nint m_nQueuedButtonDownMask = 0x68; // uint64
    public const nint m_nQueuedButtonChangeMask = 0x70; // uint64
    public const nint m_nButtonDoublePressed = 0x78; // uint64
    public const nint m_pButtonPressedCmdNumber = 0x80; // uint32[64]
    public const nint m_nLastCommandNumberProcessed = 0x180; // uint32
    public const nint m_nToggleButtonDownMask = 0x188; // uint64
    public const nint m_flMaxspeed = 0x190; // float32
    public const nint m_arrForceSubtickMoveWhen = 0x194; // float32[4]
    public const nint m_flForwardMove = 0x1A4; // float32
    public const nint m_flLeftMove = 0x1A8; // float32
    public const nint m_flUpMove = 0x1AC; // float32
    public const nint m_vecLastMovementImpulses = 0x1B0; // Vector
    public const nint m_vecOldViewAngles = 0x1BC; // QAngle
}

public static class CPlayer_MovementServices_Humanoid {
    public const nint m_flStepSoundTime = 0x1D0; // float32
    public const nint m_flFallVelocity = 0x1D4; // float32
    public const nint m_bInCrouch = 0x1D8; // bool
    public const nint m_nCrouchState = 0x1DC; // uint32
    public const nint m_flCrouchTransitionStartTime = 0x1E0; // GameTime_t
    public const nint m_bDucked = 0x1E4; // bool
    public const nint m_bDucking = 0x1E5; // bool
    public const nint m_bInDuckJump = 0x1E6; // bool
    public const nint m_groundNormal = 0x1E8; // Vector
    public const nint m_flSurfaceFriction = 0x1F4; // float32
    public const nint m_surfaceProps = 0x1F8; // CUtlStringToken
    public const nint m_nStepside = 0x208; // int32
}

public static class CPlayer_ObserverServices {
    public const nint m_iObserverMode = 0x40; // uint8
    public const nint m_hObserverTarget = 0x44; // CHandle< C_BaseEntity >
    public const nint m_iObserverLastMode = 0x48; // ObserverMode_t
    public const nint m_bForcedObserverMode = 0x4C; // bool
    public const nint m_flObserverChaseDistance = 0x50; // float32
    public const nint m_flObserverChaseDistanceCalcTime = 0x54; // GameTime_t
}

public static class CPlayer_WeaponServices {
    public const nint m_bAllowSwitchToNoWeapon = 0x40; // bool
    public const nint m_hMyWeapons = 0x48; // C_NetworkUtlVectorBase< CHandle< C_BasePlayerWeapon > >
    public const nint m_hActiveWeapon = 0x60; // CHandle< C_BasePlayerWeapon >
    public const nint m_hLastWeapon = 0x64; // CHandle< C_BasePlayerWeapon >
    public const nint m_iAmmo = 0x68; // uint16[32]
}

public static class CPointOffScreenIndicatorUi {
    public const nint m_bBeenEnabled = 0xA20; // bool
    public const nint m_bHide = 0xA21; // bool
    public const nint m_flSeenTargetTime = 0xA24; // float32
    public const nint m_pTargetPanel = 0xA28; // C_PointClientUIWorldPanel*
}

public static class CPointTemplate {
    public const nint m_iszWorldName = 0x538; // CUtlSymbolLarge
    public const nint m_iszSource2EntityLumpName = 0x540; // CUtlSymbolLarge
    public const nint m_iszEntityFilterName = 0x548; // CUtlSymbolLarge
    public const nint m_flTimeoutInterval = 0x550; // float32
    public const nint m_bAsynchronouslySpawnEntities = 0x554; // bool
    public const nint m_pOutputOnSpawned = 0x558; // CEntityIOOutput
    public const nint m_clientOnlyEntityBehavior = 0x580; // PointTemplateClientOnlyEntityBehavior_t
    public const nint m_ownerSpawnGroupType = 0x584; // PointTemplateOwnerSpawnGroupType_t
    public const nint m_createdSpawnGroupHandles = 0x588; // CUtlVector< uint32 >
    public const nint m_SpawnedEntityHandles = 0x5A0; // CUtlVector< CEntityHandle >
    public const nint m_ScriptSpawnCallback = 0x5B8; // HSCRIPT
    public const nint m_ScriptCallbackScope = 0x5C0; // HSCRIPT
}

public static class CPortraitData {
    public const nint m_RenderList = 0xDE0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hHero = 0xDF8; // CHandle< C_BaseEntity >
}

public static class CPrecipitationVData {
    public const nint m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint m_flInnerDistance = 0x108; // float32
    public const nint m_nAttachType = 0x10C; // ParticleAttachment_t
    public const nint m_bBatchSameVolumeType = 0x110; // bool
    public const nint m_nRTEnvCP = 0x114; // int32
    public const nint m_nRTEnvCPComponent = 0x118; // int32
    public const nint m_szModifier = 0x120; // CUtlString
}

public static class CProjectedTextureBase {
    public const nint m_hTargetEntity = 0xC; // CHandle< C_BaseEntity >
    public const nint m_bState = 0x10; // bool
    public const nint m_bAlwaysUpdate = 0x11; // bool
    public const nint m_flLightFOV = 0x14; // float32
    public const nint m_bEnableShadows = 0x18; // bool
    public const nint m_bSimpleProjection = 0x19; // bool
    public const nint m_bLightOnlyTarget = 0x1A; // bool
    public const nint m_bLightWorld = 0x1B; // bool
    public const nint m_bCameraSpace = 0x1C; // bool
    public const nint m_flBrightnessScale = 0x20; // float32
    public const nint m_LightColor = 0x24; // Color
    public const nint m_flIntensity = 0x28; // float32
    public const nint m_flLinearAttenuation = 0x2C; // float32
    public const nint m_flQuadraticAttenuation = 0x30; // float32
    public const nint m_bVolumetric = 0x34; // bool
    public const nint m_flVolumetricIntensity = 0x38; // float32
    public const nint m_flNoiseStrength = 0x3C; // float32
    public const nint m_flFlashlightTime = 0x40; // float32
    public const nint m_nNumPlanes = 0x44; // uint32
    public const nint m_flPlaneOffset = 0x48; // float32
    public const nint m_flColorTransitionTime = 0x4C; // float32
    public const nint m_flAmbient = 0x50; // float32
    public const nint m_SpotlightTextureName = 0x54; // char[512]
    public const nint m_nSpotlightTextureFrame = 0x254; // int32
    public const nint m_nShadowQuality = 0x258; // uint32
    public const nint m_flNearZ = 0x25C; // float32
    public const nint m_flFarZ = 0x260; // float32
    public const nint m_flProjectionSize = 0x264; // float32
    public const nint m_flRotation = 0x268; // float32
    public const nint m_bFlipHorizontal = 0x26C; // bool
}

public static class CRenderComponent {
    public const nint __m_pChainEntity = 0x10; // CNetworkVarChainer
    public const nint m_bIsRenderingWithViewModels = 0x50; // bool
    public const nint m_nSplitscreenFlags = 0x54; // uint32
    public const nint m_bEnableRendering = 0x60; // bool
    public const nint m_bInterpolationReadyToDraw = 0xB0; // bool
}

public static class CScriptComponent {
    public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
}

public static class CSkeletonInstance {
    public const nint m_modelState = 0x160; // CModelState
    public const nint m_bIsAnimationEnabled = 0x390; // bool
    public const nint m_bUseParentRenderBounds = 0x391; // bool
    public const nint m_bDisableSolidCollisionsForHierarchy = 0x392; // bool
    public const nint m_bDirtyMotionType = 0x0; // bitfield:1
    public const nint m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
    public const nint m_materialGroup = 0x394; // CUtlStringToken
    public const nint m_nHitboxSet = 0x398; // uint8
}

public static class CSkyboxReference {
    public const nint m_worldGroupId = 0x538; // WorldGroupId_t
    public const nint m_hSkyCamera = 0x53C; // CHandle< C_SkyCamera >
}

public static class CTimeline {
    public const nint m_flValues = 0x10; // float32[64]
    public const nint m_nValueCounts = 0x110; // int32[64]
    public const nint m_nBucketCount = 0x210; // int32
    public const nint m_flInterval = 0x214; // float32
    public const nint m_flFinalValue = 0x218; // float32
    public const nint m_nCompressionType = 0x21C; // TimelineCompression_t
    public const nint m_bStopped = 0x220; // bool
}

public static class C_BaseAnimatingController {
    public const nint m_baseLayer = 0x10; // CNetworkedSequenceOperation
    public const nint m_bSequenceFinished = 0x38; // bool
    public const nint m_flGroundSpeed = 0x3C; // float32
    public const nint m_flLastEventCycle = 0x40; // float32
    public const nint m_flLastEventAnimTime = 0x44; // float32
    public const nint m_flPlaybackRate = 0x48; // CNetworkedQuantizedFloat
    public const nint m_flPrevAnimTime = 0x50; // float32
    public const nint m_flPoseParameter = 0x54; // float32[24]
    public const nint m_bClientSideAnimation = 0xB4; // bool
    public const nint m_bNetworkedAnimationInputsChanged = 0xB5; // bool
    public const nint m_nPrevNewSequenceParity = 0xB6; // uint8
    public const nint m_nPrevResetEventsParity = 0xB7; // uint8
    public const nint m_nNewSequenceParity = 0xB8; // int32
    public const nint m_nResetEventsParity = 0xBC; // int32
    public const nint m_nAnimLoopMode = 0xC0; // AnimLoopMode_t
    public const nint m_SequenceTransitioner = 0xD8; // C_CSequenceTransitioner2
    public const nint m_hLastAnimEventSequence = 0x298; // HSequence
    public const nint m_ClientSideAnimationListHandle = 0x29C; // AnimationUpdateListHandle_t
}

public static class C_BaseAnimatingOverlayController {
    public const nint m_AnimOverlay = 0x348; // C_UtlVectorEmbeddedNetworkVar< CAnimationLayer >
}

public static class C_BaseButton {
    public const nint m_glowEntity = 0x7B8; // CHandle< C_BaseModelEntity >
    public const nint m_usable = 0x7BC; // bool
    public const nint m_szDisplayText = 0x7C0; // CUtlSymbolLarge
}

public static class C_BaseClientUIEntity {
    public const nint m_bEnabled = 0x7C0; // bool
    public const nint m_DialogXMLName = 0x7C8; // CUtlSymbolLarge
    public const nint m_PanelClassName = 0x7D0; // CUtlSymbolLarge
    public const nint m_PanelID = 0x7D8; // CUtlSymbolLarge
}

public static class C_BaseCombatCharacter {
    public const nint m_hMyWearables = 0x968; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > >
    public const nint m_bloodColor = 0x980; // int32
    public const nint m_leftFootAttachment = 0x984; // AttachmentHandle_t
    public const nint m_rightFootAttachment = 0x985; // AttachmentHandle_t
    public const nint m_nWaterWakeMode = 0x988; // C_BaseCombatCharacter::WaterWakeMode_t
    public const nint m_flWaterWorldZ = 0x98C; // float32
    public const nint m_flWaterNextTraceTime = 0x990; // float32
    public const nint m_flFieldOfView = 0x994; // float32
}

public static class C_BaseDoor {
    public const nint m_bIsUsable = 0x7B8; // bool
}

public static class C_BaseEntity {
    public const nint m_CBodyComponent = 0x30; // CBodyComponent*
    public const nint m_NetworkTransmitComponent = 0x38; // CNetworkTransmitComponent
    public const nint m_nLastThinkTick = 0x308; // GameTick_t
    public const nint m_pGameSceneNode = 0x310; // CGameSceneNode*
    public const nint m_pRenderComponent = 0x318; // CRenderComponent*
    public const nint m_pCollision = 0x320; // CCollisionProperty*
    public const nint m_iMaxHealth = 0x328; // int32
    public const nint m_iHealth = 0x32C; // int32
    public const nint m_lifeState = 0x330; // uint8
    public const nint m_takedamage = 0x331; // DamageOptions_t
    public const nint m_bTakesDamage = 0x332; // bool
    public const nint m_nTakeDamageFlags = 0x334; // TakeDamageFlags_t
    public const nint m_ubInterpolationFrame = 0x338; // uint8
    public const nint m_hSceneObjectController = 0x33C; // CHandle< C_BaseEntity >
    public const nint m_nNoInterpolationTick = 0x340; // int32
    public const nint m_nVisibilityNoInterpolationTick = 0x344; // int32
    public const nint m_flProxyRandomValue = 0x348; // float32
    public const nint m_iEFlags = 0x34C; // int32
    public const nint m_nWaterType = 0x350; // uint8
    public const nint m_bInterpolateEvenWithNoModel = 0x351; // bool
    public const nint m_bPredictionEligible = 0x352; // bool
    public const nint m_bApplyLayerMatchIDToModel = 0x353; // bool
    public const nint m_tokLayerMatchID = 0x354; // CUtlStringToken
    public const nint m_nSubclassID = 0x358; // CUtlStringToken
    public const nint m_nSimulationTick = 0x368; // int32
    public const nint m_iCurrentThinkContext = 0x36C; // int32
    public const nint m_aThinkFunctions = 0x370; // CUtlVector< thinkfunc_t >
    public const nint m_flAnimTime = 0x388; // float32
    public const nint m_flSimulationTime = 0x38C; // float32
    public const nint m_nSceneObjectOverrideFlags = 0x390; // uint8
    public const nint m_bHasSuccessfullyInterpolated = 0x391; // bool
    public const nint m_bHasAddedVarsToInterpolation = 0x392; // bool
    public const nint m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x393; // bool
    public const nint m_nInterpolationLatchDirtyFlags = 0x394; // int32[2]
    public const nint m_ListEntry = 0x39C; // uint16[11]
    public const nint m_flCreateTime = 0x3B4; // GameTime_t
    public const nint m_flSpeed = 0x3B8; // float32
    public const nint m_EntClientFlags = 0x3BC; // uint16
    public const nint m_bClientSideRagdoll = 0x3BE; // bool
    public const nint m_iTeamNum = 0x3BF; // uint8
    public const nint m_spawnflags = 0x3C0; // uint32
    public const nint m_nNextThinkTick = 0x3C4; // GameTick_t
    public const nint m_fFlags = 0x3C8; // uint32
    public const nint m_vecAbsVelocity = 0x3CC; // Vector
    public const nint m_vecVelocity = 0x3D8; // CNetworkVelocityVector
    public const nint m_hEffectEntity = 0x408; // CHandle< C_BaseEntity >
    public const nint m_hOwnerEntity = 0x40C; // CHandle< C_BaseEntity >
    public const nint m_MoveCollide = 0x410; // MoveCollide_t
    public const nint m_MoveType = 0x411; // MoveType_t
    public const nint m_flWaterLevel = 0x414; // float32
    public const nint m_fEffects = 0x418; // uint32
    public const nint m_hGroundEntity = 0x41C; // CHandle< C_BaseEntity >
    public const nint m_flFriction = 0x420; // float32
    public const nint m_flElasticity = 0x424; // float32
    public const nint m_flGravityScale = 0x428; // float32
    public const nint m_flTimeScale = 0x42C; // float32
    public const nint m_bSimulatedEveryTick = 0x430; // bool
    public const nint m_bAnimatedEveryTick = 0x431; // bool
    public const nint m_flNavIgnoreUntilTime = 0x434; // GameTime_t
    public const nint m_hThink = 0x438; // uint16
    public const nint m_fBBoxVisFlags = 0x448; // uint8
    public const nint m_bPredictable = 0x449; // bool
    public const nint m_bRenderWithViewModels = 0x44A; // bool
    public const nint m_nSplitUserPlayerPredictionSlot = 0x44C; // CSplitScreenSlot
    public const nint m_nFirstPredictableCommand = 0x450; // int32
    public const nint m_nLastPredictableCommand = 0x454; // int32
    public const nint m_hOldMoveParent = 0x458; // CHandle< C_BaseEntity >
    public const nint m_Particles = 0x460; // CParticleProperty
    public const nint m_vecPredictedScriptFloats = 0x488; // CUtlVector< float32 >
    public const nint m_vecPredictedScriptFloatIDs = 0x4A0; // CUtlVector< int32 >
    public const nint m_nNextScriptVarRecordID = 0x4D0; // int32
    public const nint m_vecAngVelocity = 0x4E0; // QAngle
    public const nint m_DataChangeEventRef = 0x4EC; // int32
    public const nint m_dependencies = 0x4F0; // CUtlVector< CEntityHandle >
    public const nint m_nCreationTick = 0x508; // int32
    public const nint m_bAnimTimeChanged = 0x521; // bool
    public const nint m_bSimulationTimeChanged = 0x522; // bool
    public const nint m_sUniqueHammerID = 0x530; // CUtlString
}

public static class C_BaseFlex {
    public const nint m_flexWeight = 0x7F0; // C_NetworkUtlVectorBase< float32 >
    public const nint m_vLookTargetPosition = 0x808; // Vector
    public const nint m_blinktoggle = 0x820; // bool
    public const nint m_nLastFlexUpdateFrameCount = 0x880; // int32
    public const nint m_CachedViewTarget = 0x884; // Vector
    public const nint m_nNextSceneEventId = 0x890; // uint32
    public const nint m_iBlink = 0x894; // int32
    public const nint m_blinktime = 0x898; // float32
    public const nint m_prevblinktoggle = 0x89C; // bool
    public const nint m_iMouthAttachment = 0x89D; // AttachmentHandle_t
    public const nint m_iEyeAttachment = 0x89E; // AttachmentHandle_t
    public const nint m_bResetFlexWeightsOnModelChange = 0x89F; // bool
    public const nint m_nEyeOcclusionRendererBone = 0x8B8; // int32
    public const nint m_mEyeOcclusionRendererCameraToBoneTransform = 0x8BC; // matrix3x4_t
    public const nint m_vEyeOcclusionRendererHalfExtent = 0x8EC; // Vector
    public const nint m_PhonemeClasses = 0x908; // C_BaseFlex::Emphasized_Phoneme[3]
}

public static class C_BaseFlex_Emphasized_Phoneme {
    public const nint m_sClassName = 0x0; // CUtlString
    public const nint m_flAmount = 0x18; // float32
    public const nint m_bRequired = 0x1C; // bool
    public const nint m_bBasechecked = 0x1D; // bool
    public const nint m_bValid = 0x1E; // bool
}

public static class C_BaseModelEntity {
    public const nint m_CRenderComponent = 0x538; // CRenderComponent*
    public const nint m_CHitboxComponent = 0x540; // CHitboxComponent
    public const nint m_bInitModelEffects = 0x588; // bool
    public const nint m_bIsStaticProp = 0x589; // bool
    public const nint m_iViewerID = 0x58C; // int32
    public const nint m_iTeamVisibilityBitmask = 0x590; // int32
    public const nint m_nLastAddDecal = 0x594; // int32
    public const nint m_nDecalsAdded = 0x598; // int32
    public const nint m_iOldHealth = 0x59C; // int32
    public const nint m_nRenderMode = 0x5A0; // RenderMode_t
    public const nint m_bVisibilityDirtyFlag = 0x5A1; // bool
    public const nint m_nRenderFX = 0x5A2; // RenderFx_t
    public const nint m_bAllowFadeInView = 0x5A3; // bool
    public const nint m_clrRender = 0x5A4; // Color
    public const nint m_vecRenderAttributes = 0x5A8; // C_UtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t >
    public const nint m_LightGroup = 0x610; // CUtlStringToken
    public const nint m_bRenderToCubemaps = 0x614; // bool
    public const nint m_Collision = 0x618; // CCollisionProperty
    public const nint m_Glow = 0x6C8; // CGlowProperty
    public const nint m_flGlowBackfaceMult = 0x720; // float32
    public const nint m_fadeMinDist = 0x724; // float32
    public const nint m_fadeMaxDist = 0x728; // float32
    public const nint m_flFadeScale = 0x72C; // float32
    public const nint m_flShadowStrength = 0x730; // float32
    public const nint m_nObjectCulling = 0x734; // uint8
    public const nint m_nAddDecal = 0x738; // int32
    public const nint m_vDecalPosition = 0x73C; // Vector
    public const nint m_vDecalForwardAxis = 0x748; // Vector
    public const nint m_flDecalHealBloodRate = 0x754; // float32
    public const nint m_flDecalHealHeightRate = 0x758; // float32
    public const nint m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x760; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
    public const nint m_vecViewOffset = 0x778; // CNetworkViewOffsetVector
    public const nint m_pClientAlphaProperty = 0x7A8; // CClientAlphaProperty*
    public const nint m_ClientOverrideTint = 0x7B0; // Color
    public const nint m_bUseClientOverrideTint = 0x7B4; // bool
}

public static class C_BasePlayerPawn {
    public const nint m_pWeaponServices = 0x9F8; // CPlayer_WeaponServices*
    public const nint m_pItemServices = 0xA00; // CPlayer_ItemServices*
    public const nint m_pAutoaimServices = 0xA08; // CPlayer_AutoaimServices*
    public const nint m_pObserverServices = 0xA10; // CPlayer_ObserverServices*
    public const nint m_pWaterServices = 0xA18; // CPlayer_WaterServices*
    public const nint m_pUseServices = 0xA20; // CPlayer_UseServices*
    public const nint m_pFlashlightServices = 0xA28; // CPlayer_FlashlightServices*
    public const nint m_pCameraServices = 0xA30; // CPlayer_CameraServices*
    public const nint m_pMovementServices = 0xA38; // CPlayer_MovementServices*
    public const nint v_angle = 0xA48; // QAngle
    public const nint v_anglePrevious = 0xA54; // QAngle
    public const nint m_iHideHUD = 0xA60; // uint32
    public const nint m_skybox3d = 0xA68; // sky3dparams_t
    public const nint m_flDeathTime = 0xAF8; // GameTime_t
    public const nint m_vecPredictionError = 0xAFC; // Vector
    public const nint m_flPredictionErrorTime = 0xB08; // GameTime_t
    public const nint m_flFOVSensitivityAdjust = 0xB0C; // float32
    public const nint m_flMouseSensitivity = 0xB10; // float32
    public const nint m_vOldOrigin = 0xB14; // Vector
    public const nint m_flOldSimulationTime = 0xB20; // float32
    public const nint m_nLastExecutedCommandNumber = 0xB24; // int32
    public const nint m_nLastExecutedCommandTick = 0xB28; // int32
    public const nint m_hController = 0xB2C; // CHandle< CBasePlayerController >
    public const nint m_bIsSwappingToPredictableController = 0xB30; // bool
}

public static class C_BasePlayerWeapon {
    public const nint m_nNextPrimaryAttackTick = 0x7E0; // GameTick_t
    public const nint m_flNextPrimaryAttackTickRatio = 0x7E4; // float32
    public const nint m_nNextSecondaryAttackTick = 0x7E8; // GameTick_t
    public const nint m_flNextSecondaryAttackTickRatio = 0x7EC; // float32
    public const nint m_iClip1 = 0x7F0; // int32
    public const nint m_iClip2 = 0x7F4; // int32
    public const nint m_pReserveAmmo = 0x7F8; // int32[2]
}

public static class C_BasePropDoor {
    public const nint m_eDoorState = 0xA68; // DoorState_t
    public const nint m_modelChanged = 0xA6C; // bool
    public const nint m_bLocked = 0xA6D; // bool
    public const nint m_closedPosition = 0xA70; // Vector
    public const nint m_closedAngles = 0xA7C; // QAngle
    public const nint m_hMaster = 0xA88; // CHandle< C_BasePropDoor >
    public const nint m_vWhereToSetLightingOrigin = 0xA8C; // Vector
}

public static class C_BaseTrigger {
    public const nint m_bDisabled = 0x7B8; // bool
    public const nint m_bClientSidePredicted = 0x7B9; // bool
}

public static class C_Beam {
    public const nint m_flFrameRate = 0x7B8; // float32
    public const nint m_flHDRColorScale = 0x7BC; // float32
    public const nint m_flFireTime = 0x7C0; // GameTime_t
    public const nint m_flDamage = 0x7C4; // float32
    public const nint m_nNumBeamEnts = 0x7C8; // uint8
    public const nint m_queryHandleHalo = 0x7CC; // int32
    public const nint m_hBaseMaterial = 0x7F0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_nHaloIndex = 0x7F8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_nBeamType = 0x800; // BeamType_t
    public const nint m_nBeamFlags = 0x804; // uint32
    public const nint m_hAttachEntity = 0x808; // CHandle< C_BaseEntity >[10]
    public const nint m_nAttachIndex = 0x830; // AttachmentHandle_t[10]
    public const nint m_fWidth = 0x83C; // float32
    public const nint m_fEndWidth = 0x840; // float32
    public const nint m_fFadeLength = 0x844; // float32
    public const nint m_fHaloScale = 0x848; // float32
    public const nint m_fAmplitude = 0x84C; // float32
    public const nint m_fStartFrame = 0x850; // float32
    public const nint m_fSpeed = 0x854; // float32
    public const nint m_flFrame = 0x858; // float32
    public const nint m_nClipStyle = 0x85C; // BeamClipStyle_t
    public const nint m_bTurnedOff = 0x860; // bool
    public const nint m_vecEndPos = 0x864; // Vector
    public const nint m_hEndEntity = 0x870; // CHandle< C_BaseEntity >
}

public static class C_BodyComponentBaseAnimating {
    public const nint m_animationController = 0x470; // C_BaseAnimatingController
    public const nint __m_pChainEntity = 0x7B8; // CNetworkVarChainer
}

public static class C_BodyComponentBaseAnimatingOverlay {
    public const nint m_animationController = 0x470; // C_BaseAnimatingOverlayController
    public const nint __m_pChainEntity = 0x828; // CNetworkVarChainer
}

public static class C_BreakableProp {
    public const nint m_OnBreak = 0x828; // CEntityIOOutput
    public const nint m_OnHealthChanged = 0x850; // CEntityOutputTemplate< float32 >
    public const nint m_OnTakeDamage = 0x878; // CEntityIOOutput
    public const nint m_impactEnergyScale = 0x8A0; // float32
    public const nint m_iMinHealthDmg = 0x8A4; // int32
    public const nint m_flPressureDelay = 0x8A8; // float32
    public const nint m_hBreaker = 0x8AC; // CHandle< C_BaseEntity >
    public const nint m_PerformanceMode = 0x8B0; // PerformanceMode_t
    public const nint m_flDmgModBullet = 0x8B4; // float32
    public const nint m_flDmgModClub = 0x8B8; // float32
    public const nint m_flDmgModExplosive = 0x8BC; // float32
    public const nint m_flDmgModFire = 0x8C0; // float32
    public const nint m_iszPhysicsDamageTableName = 0x8C8; // CUtlSymbolLarge
    public const nint m_iszBasePropData = 0x8D0; // CUtlSymbolLarge
    public const nint m_iInteractions = 0x8D8; // int32
    public const nint m_flPreventDamageBeforeTime = 0x8DC; // GameTime_t
    public const nint m_bHasBreakPiecesOrCommands = 0x8E0; // bool
    public const nint m_explodeDamage = 0x8E4; // float32
    public const nint m_explodeRadius = 0x8E8; // float32
    public const nint m_explosionDelay = 0x8F0; // float32
    public const nint m_explosionBuildupSound = 0x8F8; // CUtlSymbolLarge
    public const nint m_explosionCustomEffect = 0x900; // CUtlSymbolLarge
    public const nint m_explosionCustomSound = 0x908; // CUtlSymbolLarge
    public const nint m_explosionModifier = 0x910; // CUtlSymbolLarge
    public const nint m_hPhysicsAttacker = 0x918; // CHandle< C_BasePlayerPawn >
    public const nint m_flLastPhysicsInfluenceTime = 0x91C; // GameTime_t
    public const nint m_flDefaultFadeScale = 0x920; // float32
    public const nint m_hLastAttacker = 0x924; // CHandle< C_BaseEntity >
    public const nint m_hFlareEnt = 0x928; // CHandle< C_BaseEntity >
    public const nint m_noGhostCollision = 0x92C; // bool
}

public static class C_CSequenceTransitioner2 {
    public const nint m_currentOp = 0x8; // CNetworkedSequenceOperation
    public const nint m_flCurrentPlaybackRate = 0x30; // float32
    public const nint m_flCurrentAnimTime = 0x34; // float32
    public const nint m_transitioningLayers = 0x38; // TransitioningLayer_t[4]
    public const nint m_pOwner = 0x158; // C_BaseAnimatingController*
}

public static class C_ClientRagdoll {
    public const nint m_bFadeOut = 0x978; // bool
    public const nint m_bImportant = 0x979; // bool
    public const nint m_flEffectTime = 0x97C; // GameTime_t
    public const nint m_gibDespawnTime = 0x980; // GameTime_t
    public const nint m_iCurrentFriction = 0x984; // int32
    public const nint m_iMinFriction = 0x988; // int32
    public const nint m_iMaxFriction = 0x98C; // int32
    public const nint m_iFrictionAnimState = 0x990; // int32
    public const nint m_bReleaseRagdoll = 0x994; // bool
    public const nint m_iEyeAttachment = 0x995; // AttachmentHandle_t
    public const nint m_bFadingOut = 0x996; // bool
    public const nint m_flScaleEnd = 0x998; // float32[10]
    public const nint m_flScaleTimeStart = 0x9C0; // GameTime_t[10]
    public const nint m_flScaleTimeEnd = 0x9E8; // GameTime_t[10]
}

public static class C_ColorCorrection {
    public const nint m_vecOrigin = 0x538; // Vector
    public const nint m_MinFalloff = 0x544; // float32
    public const nint m_MaxFalloff = 0x548; // float32
    public const nint m_flFadeInDuration = 0x54C; // float32
    public const nint m_flFadeOutDuration = 0x550; // float32
    public const nint m_flMaxWeight = 0x554; // float32
    public const nint m_flCurWeight = 0x558; // float32
    public const nint m_netlookupFilename = 0x55C; // char[512]
    public const nint m_bEnabled = 0x75C; // bool
    public const nint m_bMaster = 0x75D; // bool
    public const nint m_bClientSide = 0x75E; // bool
    public const nint m_bExclusive = 0x75F; // bool
    public const nint m_bEnabledOnClient = 0x760; // bool[1]
    public const nint m_flCurWeightOnClient = 0x764; // float32[1]
    public const nint m_bFadingIn = 0x768; // bool[1]
    public const nint m_flFadeStartWeight = 0x76C; // float32[1]
    public const nint m_flFadeStartTime = 0x770; // float32[1]
    public const nint m_flFadeDuration = 0x774; // float32[1]
}

public static class C_ColorCorrectionVolume {
    public const nint m_LastEnterWeight = 0x7C0; // float32
    public const nint m_LastEnterTime = 0x7C4; // float32
    public const nint m_LastExitWeight = 0x7C8; // float32
    public const nint m_LastExitTime = 0x7CC; // float32
    public const nint m_bEnabled = 0x7D0; // bool
    public const nint m_MaxWeight = 0x7D4; // float32
    public const nint m_FadeDuration = 0x7D8; // float32
    public const nint m_Weight = 0x7DC; // float32
    public const nint m_lookupFilename = 0x7E0; // char[512]
}

public static class C_CommandContext {
    public const nint needsprocessing = 0x0; // bool
    public const nint command_number = 0x70; // int32
}

public static class C_DOTAAmbientCreatureParticleZone {
    public const nint m_szModelName = 0x7B8; // char[64]
    public const nint m_szAreaName = 0x7F8; // char[256]
}

public static class C_DOTAAppCheers {
    public const nint m_nRadiantCheers = 0x538; // int16
    public const nint m_nRadiantBronzeCheers = 0x53A; // int16
    public const nint m_nRadiantSilverCheers = 0x53C; // int16
    public const nint m_nRadiantGoldCheers = 0x53E; // int16
    public const nint m_nRadiantCrowdLevel = 0x540; // ECrowdLevel
    public const nint m_nDireCheers = 0x544; // int16
    public const nint m_nDireBronzeCheers = 0x546; // int16
    public const nint m_nDireSilverCheers = 0x548; // int16
    public const nint m_nDireGoldCheers = 0x54A; // int16
    public const nint m_nDireCrowdLevel = 0x54C; // ECrowdLevel
}

public static class C_DOTABaseAbility {
    public const nint m_bAuxCastState = 0x540; // bool
    public const nint m_iEnemyLevel = 0x544; // int32
    public const nint m_iMaxLevel = 0x548; // int32
    public const nint m_bCanLearn = 0x54C; // bool
    public const nint m_flUpgradeBlend = 0x550; // float32
    public const nint m_bUpgradedDuringQuickcastPreview = 0x554; // bool
    public const nint m_bConsiderOvershootInGetCastRange = 0x555; // bool
    public const nint m_bRefCountsModifiers = 0x556; // bool
    public const nint m_bHidden = 0x557; // bool
    public const nint m_bOldHidden = 0x558; // bool
    public const nint m_bActivated = 0x559; // bool
    public const nint m_bOldActivated = 0x55A; // bool
    public const nint m_nAbilityBarType = 0x55C; // AbilityBarType_t
    public const nint m_iDirtyButtons = 0x560; // int32
    public const nint m_bPerformDirtyParity = 0x564; // bool
    public const nint m_iLevel = 0x568; // int32
    public const nint m_bAbilityLevelDirty = 0x56C; // bool
    public const nint m_bToggleState = 0x56D; // bool
    public const nint m_flAbilityMuteDuration = 0x570; // float32
    public const nint m_bInAbilityPhase = 0x574; // bool
    public const nint m_fCooldown = 0x578; // float32
    public const nint m_flCooldownLength = 0x57C; // float32
    public const nint m_iManaCost = 0x580; // int32
    public const nint m_bAutoCastState = 0x584; // bool
    public const nint m_bAltCastState = 0x585; // bool
    public const nint m_flChannelStartTime = 0x588; // GameTime_t
    public const nint m_flCastStartTime = 0x58C; // GameTime_t
    public const nint m_bInIndefiniteCooldown = 0x590; // bool
    public const nint m_bFrozenCooldown = 0x591; // bool
    public const nint m_flOverrideCastPoint = 0x594; // float32
    public const nint m_bStolen = 0x598; // bool
    public const nint m_bStealable = 0x599; // bool
    public const nint m_bReplicated = 0x59A; // bool
    public const nint m_nAbilityCurrentCharges = 0x59C; // int32
    public const nint m_fAbilityChargeRestoreTimeRemaining = 0x5A0; // float32
    public const nint m_bUpgradeRecommended = 0x5A4; // bool
    public const nint m_nMaxLevelOverride = 0x5A8; // int32
    public const nint m_flLastCastClickTime = 0x5AC; // float32
}

public static class C_DOTABaseGameMode {
    public const nint m_ForcedHUDSkin = 0x538; // CUtlString
    public const nint m_nCustomGameForceHeroSelectionId = 0x540; // int32
    public const nint m_bAlwaysShowPlayerInventory = 0x544; // bool
    public const nint m_bGoldSoundDisabled = 0x545; // bool
    public const nint m_bRecommendedItemsDisabled = 0x546; // bool
    public const nint m_bStickyItemDisabled = 0x547; // bool
    public const nint m_bStashPurchasingDisabled = 0x548; // bool
    public const nint m_bFogOfWarDisabled = 0x549; // bool
    public const nint m_bUseUnseenFOW = 0x54A; // bool
    public const nint m_bUseCustomBuybackCost = 0x54B; // bool
    public const nint m_bUseCustomBuybackCooldown = 0x54C; // bool
    public const nint m_bBuybackEnabled = 0x54D; // bool
    public const nint m_bUseTurboCouriers = 0x54E; // bool
    public const nint m_flCameraDistanceOverride = 0x550; // float32
    public const nint m_nCameraSmoothCountOverride = 0x554; // int32
    public const nint m_hOverrideSelectionEntity = 0x558; // CHandle< C_DOTA_BaseNPC >
    public const nint m_bTopBarTeamValuesOverride = 0x55C; // bool
    public const nint m_bTopBarTeamValuesVisible = 0x55D; // bool
    public const nint m_nTeamGoodGuysTopBarValue = 0x560; // int32
    public const nint m_nTeamBadGuysTopBarValue = 0x564; // int32
    public const nint m_bAlwaysShowPlayerNames = 0x568; // bool
    public const nint m_bUseCustomHeroLevels = 0x569; // bool
    public const nint m_nCustomXPRequiredToReachNextLevel = 0x570; // C_NetworkUtlVectorBase< int32 >
    public const nint m_bTowerBackdoorProtectionEnabled = 0x588; // bool
    public const nint m_bBotThinkingEnabled = 0x589; // bool
    public const nint m_bAnnouncerDisabled = 0x58A; // bool
    public const nint m_bAnnouncerGameModeAnnounceDisabled = 0x58B; // bool
    public const nint m_bDeathTipsDisabled = 0x58C; // bool
    public const nint m_bFilterPlayerHeroAvailability = 0x58D; // bool
    public const nint m_bKillingSpreeAnnouncerDisabled = 0x58E; // bool
    public const nint m_flFixedRespawnTime = 0x590; // float32
    public const nint m_flBuybackCostScale = 0x594; // float32
    public const nint m_flRespawnTimeScale = 0x598; // float32
    public const nint m_bLoseGoldOnDeath = 0x59C; // bool
    public const nint m_bKillableTombstones = 0x59D; // bool
    public const nint m_nHUDVisibilityBits = 0x5A0; // uint32
    public const nint m_flMinimumAttackSpeed = 0x5A4; // float32
    public const nint m_flMaximumAttackSpeed = 0x5A8; // float32
    public const nint m_bIsDaynightCycleDisabled = 0x5AC; // bool
    public const nint m_flDaynightCycleAdvanceRate = 0x5B0; // float32
    public const nint m_bAreWeatherEffectsDisabled = 0x5B4; // bool
    public const nint m_bDisableHudFlip = 0x5B5; // bool
    public const nint m_bEnableFriendlyBuildingMoveTo = 0x5B6; // bool
    public const nint m_bIsDeathOverlayDisabled = 0x5B7; // bool
    public const nint m_bIsHudCombatEventsDisabled = 0x5B8; // bool
    public const nint m_strDefaultStickyItem = 0x5C0; // CUtlString
    public const nint m_sCustomTerrainWeatherEffect = 0x5C8; // CUtlString
    public const nint m_strTPScrollSlotItemOverride = 0x5D0; // CUtlString
    public const nint m_flStrengthDamage = 0x5D8; // float32
    public const nint m_flStrengthHP = 0x5DC; // float32
    public const nint m_flStrengthHPRegen = 0x5E0; // float32
    public const nint m_flAgilityDamage = 0x5E4; // float32
    public const nint m_flAgilityArmor = 0x5E8; // float32
    public const nint m_flAgilityAttackSpeed = 0x5EC; // float32
    public const nint m_flAgilityMovementSpeedPercent = 0x5F0; // float32
    public const nint m_flIntelligenceDamage = 0x5F4; // float32
    public const nint m_flIntelligenceMana = 0x5F8; // float32
    public const nint m_flIntelligenceManaRegen = 0x5FC; // float32
    public const nint m_flIntelligenceMres = 0x600; // float32
    public const nint m_flIntelligenceSpellAmpPercent = 0x604; // float32
    public const nint m_flStrengthMagicResistancePercent = 0x608; // float32
    public const nint m_flAttributeAllDamage = 0x60C; // float32
    public const nint m_flDraftingHeroPickSelectTimeOverride = 0x610; // float32
    public const nint m_flDraftingBanningTimeOverride = 0x614; // float32
    public const nint m_bPauseEnabled = 0x618; // bool
    public const nint m_iCustomScanMaxCharges = 0x61C; // int32
    public const nint m_flCustomScanCooldown = 0x620; // float32
    public const nint m_flCustomGlyphCooldown = 0x624; // float32
    public const nint m_flCustomBackpackSwapCooldown = 0x628; // float32
    public const nint m_flCustomBackpackCooldownPercent = 0x62C; // float32
    public const nint m_bDefaultRuneSpawnLogic = 0x630; // bool
    public const nint m_bEnableFreeCourierMode = 0x631; // bool
    public const nint m_bAllowNeutralItemDrops = 0x632; // bool
    public const nint m_bEnableNeutralStash = 0x633; // bool
    public const nint m_bEnableNeutralStashTeamViewOnly = 0x634; // bool
    public const nint m_bEnableNeutralItemHideUndiscovered = 0x635; // bool
    public const nint m_bEnableSendToStash = 0x636; // bool
    public const nint m_bForceRightClickAttackDisabled = 0x637; // bool
    public const nint m_vecCustomShopInfo = 0x638; // C_UtlVectorEmbeddedNetworkVar< CDOTACustomShopInfo >
    public const nint m_bCanSellAnywhere = 0x688; // bool
    public const nint m_flCameraNearZ = 0x68C; // float32
    public const nint m_flCameraFarZ = 0x690; // float32
    public const nint m_nCustomRadiantScore = 0x694; // int32
    public const nint m_nCustomDireScore = 0x698; // int32
    public const nint m_bAbilityUpgradeWhitelistEnabled = 0x69C; // bool
    public const nint m_vecAbilityUpgradeWhitelist = 0x6A0; // C_NetworkUtlVectorBase< AbilityID_t >
    public const nint m_bGiveFreeTPOnDeath = 0x6B8; // bool
    public const nint m_nInnateMeleeDamageBlockPct = 0x6BC; // int32
    public const nint m_nInnateMeleeDamageBlockAmount = 0x6C0; // int32
    public const nint m_nInnateMeleeDamageBlockPerLevelAmount = 0x6C4; // int32
    public const nint m_flWaterRuneSpawnInterval = 0x6C8; // float32
    public const nint m_nHUDVisibilityBitsPrevious = 0x6CC; // uint32
}

public static class C_DOTACameraBounds {
    public const nint m_vecBoundsMin = 0x538; // Vector
    public const nint m_vecBoundsMax = 0x544; // Vector
}

public static class C_DOTACheers {
    public const nint m_nRadiantCheers = 0x538; // int16
    public const nint m_nDireCheers = 0x53A; // int16
    public const nint m_nRadiantPremiumCheers = 0x53C; // int16
    public const nint m_nDirePremiumCheers = 0x53E; // int16
    public const nint m_nRadiantCrowdLevel = 0x540; // ECrowdLevel
    public const nint m_nDireCrowdLevel = 0x544; // ECrowdLevel
}

public static class C_DOTACustomGameHeroPickRules {
    public const nint m_Phase = 0x538; // DOTACustomHeroPickRulesPhase_t
    public const nint m_nNumBansPerTeam = 0x53C; // int32
    public const nint m_flEnterTime = 0x540; // GameTime_t
    public const nint m_nNumHeroesPicked = 0x544; // int32
}

public static class C_DOTAFogOfWarTempViewers {
    public const nint m_FoWTempViewerVersion = 0x538; // uint32
    public const nint m_TempViewerInfo = 0x540; // C_UtlVectorEmbeddedNetworkVar< TempViewerInfo_t >
    public const nint m_dota_spectator_fog_of_war_last = 0x590; // int32
}

public static class C_DOTAGameManager {
    public const nint __m_pChainEntity = 0x30; // CNetworkVarChainer
    public const nint m_bCustomGame = 0x3E8; // bool
    public const nint m_bEventGame = 0x3E9; // bool
    public const nint m_bGameModeWantsDefaultNeutralItemSchema = 0x3EA; // bool
    public const nint m_bGameModeFilteredAbilities = 0x3EB; // bool
    public const nint m_szAddOnGame = 0x3EC; // char[128]
    public const nint m_szAddOnMap = 0x46C; // char[128]
    public const nint m_pTutorialLessonKeyValues = 0x868; // KeyValues*
    public const nint m_pDivisionKeyValues = 0x870; // KeyValues*
    public const nint m_pMatchGroupsKeyValues = 0x878; // KeyValues*
    public const nint m_pAnimationStatues = 0x880; // KeyValues*
    public const nint m_pBotScriptsDedicatedServer = 0x888; // KeyValues*
    public const nint m_pkvWardPlacementLocations = 0x890; // KeyValues*
    public const nint m_pRegionKeyValues = 0x898; // KeyValues*
    public const nint m_pSurveyQuestionData = 0x8A0; // KeyValues*
    public const nint m_AddonInfoKeyValues = 0x8A8; // KeyValues3
    public const nint m_pCountryKeyValues = 0x8E0; // KeyValues*
    public const nint m_bLoadedPortraits = 0xE48; // bool[8]
    public const nint m_pControlGroupsKeyValues = 0xE50; // KeyValues*
    public const nint m_CurrentHeroAvailable = 0xE58; // bool[256]
}

public static class C_DOTAGameManagerProxy {
    public const nint m_pGameManager = 0x538; // C_DOTAGameManager*
}

public static class C_DOTAGamerules {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
    public const nint m_nTotalPausedTicks = 0x30; // int32
    public const nint m_nPauseStartTick = 0x34; // int32
    public const nint m_nRuneCycle = 0x38; // int32
    public const nint m_bGamePaused = 0x3C; // bool
    public const nint m_iMiscHeroPickCounter = 0x40; // int32
    public const nint m_hEndGameCinematicEntity = 0x44; // CHandle< C_BaseEntity >
    public const nint m_hOverlayHealthBarUnit = 0x48; // CHandle< C_DOTA_BaseNPC >
    public const nint m_nOverlayHealthBarType = 0x4C; // int32
    public const nint m_bIsInCinematicMode = 0x50; // bool
    public const nint m_bIsInClientSideCinematicMode = 0x51; // bool
    public const nint m_bFreeCourierMode = 0x52; // bool
    public const nint m_nStartingGold = 0x54; // int32
    public const nint m_nGoldPerTick = 0x58; // int32
    public const nint m_flGoldTickTime = 0x5C; // float32
    public const nint m_bItemWhiteListChanged = 0x60; // bool
    public const nint m_bEnableSuggestAbilities = 0x61; // bool
    public const nint m_bEnableSuggestItems = 0x62; // bool
    public const nint m_unFanfareGoodGuys = 0x64; // uint32
    public const nint m_unFanfareBadGuys = 0x68; // uint32
    public const nint m_iMapType = 0x6C; // int32
    public const nint m_nServerGameState = 0x70; // int32
    public const nint m_nServerHeroPickState = 0x74; // DOTA_HeroPickState
    public const nint m_nGameState = 0x78; // int32
    public const nint m_nHeroPickState = 0x7C; // DOTA_HeroPickState
    public const nint m_bAlternateHeroGridsEnabled = 0x80; // bool
    public const nint m_flStateTransitionTime = 0x84; // GameTime_t
    public const nint m_flOverride_dota_hero_selection_time = 0x88; // float32
    public const nint m_flOverride_dota_pregame_time = 0x8C; // float32
    public const nint m_flOverride_dota_postgame_time = 0x90; // float32
    public const nint m_flOverride_dota_strategy_time = 0x94; // float32
    public const nint m_flOverride_dota_team_showcase_duration = 0x98; // float32
    public const nint m_flOverride_dota_rune_spawn_time = 0x9C; // float32
    public const nint m_flShowcaseTime = 0xA0; // float32[15]
    public const nint m_flNeutralInitialSpawnOffset = 0xDC; // float32
    public const nint m_iGameMode = 0xE0; // int32
    public const nint m_hGameModeEntity = 0xE4; // CHandle< C_BaseEntity >
    public const nint m_hCustomHeroPickRulesEntity = 0xE8; // CHandle< C_BaseEntity >
    public const nint m_flHeroPickStateTransitionTime = 0xEC; // GameTime_t
    public const nint m_iPlayerIDsInControl = 0xF0; // uint64
    public const nint m_bSameHeroSelectionEnabled = 0xF8; // bool
    public const nint m_bUseCustomHeroXPValue = 0xF9; // bool
    public const nint m_bUseBaseGoldBountyOnHeroes = 0xFA; // bool
    public const nint m_bUseUniversalShopMode = 0xFB; // bool
    public const nint m_bHideKillMessageHeaders = 0xFC; // bool
    public const nint m_flHeroMinimapIconScale = 0x100; // float32
    public const nint m_flCreepMinimapIconScale = 0x104; // float32
    public const nint m_bCreepSpawningEnabled = 0x108; // bool
    public const nint m_flRuneMinimapIconScale = 0x10C; // float32
    public const nint m_CustomVictoryMessage = 0x110; // char[256]
    public const nint m_flCustomGameEndDelay = 0x210; // float32
    public const nint m_flCustomGameSetupAutoLaunchDelay = 0x214; // float32
    public const nint m_flCustomGameSetupTimeout = 0x218; // float32
    public const nint m_flCustomVictoryMessageDuration = 0x21C; // float32
    public const nint m_flHeroSelectPenaltyTime = 0x220; // float32
    public const nint m_bCustomGameSetupAutoLaunchEnabled = 0x224; // bool
    public const nint m_bCustomGameTeamSelectionLocked = 0x225; // bool
    public const nint m_bCustomGameEnablePickRules = 0x226; // bool
    public const nint m_bCustomGameAllowHeroPickMusic = 0x227; // bool
    public const nint m_bCustomGameAllowMusicAtGameStart = 0x228; // bool
    public const nint m_bCustomGameAllowBattleMusic = 0x229; // bool
    public const nint m_bCustomGameDisableIK = 0x22A; // bool
    public const nint m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x22B; // bool
    public const nint m_iCMModePickBanOrder = 0x22C; // int32
    public const nint m_iCDModePickBanOrder = 0x230; // int32
    public const nint m_nGGTeam = 0x234; // int32
    public const nint m_flGGEndsAtTime = 0x238; // GameTime_t
    public const nint m_bGGCalled = 0x23C; // bool
    public const nint m_bWhiteListEnabled = 0x23D; // bool
    public const nint m_bItemWhiteList = 0x240; // uint64[4]
    public const nint m_nLastHitUIMode = 0x260; // int32
    public const nint m_bHUDTimerTutorialMode = 0x264; // bool
    public const nint m_HeroPickMiscTimer = 0x268; // CountdownTimer
    public const nint m_ExtraTimeTimer = 0x280; // CountdownTimer
    public const nint m_fExtraTimeRemaining = 0x298; // float32[2]
    public const nint m_bHeroRespawnEnabled = 0x2A0; // bool
    public const nint m_bIsRandomingEnabled = 0x2A1; // bool
    public const nint m_iCaptainPlayerIDs = 0x2A4; // PlayerID_t[2]
    public const nint m_BannedHeroes = 0x2AC; // int32[24]
    public const nint m_SelectedHeroes = 0x30C; // int32[24]
    public const nint m_iActiveTeam = 0x36C; // int32
    public const nint m_iStartingTeam = 0x370; // int32
    public const nint m_iPenaltyLevelRadiant = 0x374; // int32
    public const nint m_iPenaltyLevelDire = 0x378; // int32
    public const nint m_bIsLoadingScenario = 0x37C; // bool
    public const nint m_vecNewBannedHeroes = 0x380; // C_NetworkUtlVectorBase< int32 >
    public const nint m_vecWhitelistedHeroes = 0x398; // C_NetworkUtlVectorBase< int32 >
    public const nint m_vecBlacklistedHeroes = 0x3B0; // C_NetworkUtlVectorBase< int32 >
    public const nint m_bHideBlacklistedHeroes = 0x3C8; // bool
    public const nint m_nSeriesType = 0x3CC; // int32
    public const nint m_nRadiantSeriesWins = 0x3D0; // int32
    public const nint m_nDireSeriesWins = 0x3D4; // int32
    public const nint m_vecAvailableHerosPerPlayerID = 0x3D8; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_vecLockedHerosByPlayerID = 0x428; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_vecDisabledRandomHerosByPlayerID = 0x478; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_CustomGameForceSelectHero = 0x4C8; // int32[24]
    public const nint m_flGoldTime = 0x528; // float32
    public const nint m_flXPTime = 0x52C; // float32
    public const nint m_flCreepSpawntime = 0x530; // GameTime_t
    public const nint m_flAnnounceStartTime = 0x534; // float32
    public const nint m_iGoodTomeCount = 0x538; // int32
    public const nint m_iBadTomeCount = 0x53C; // int32
    public const nint m_flPreGameStartTime = 0x540; // GameTime_t
    public const nint m_flGameStartTime = 0x544; // GameTime_t
    public const nint m_flGameEndTime = 0x548; // GameTime_t
    public const nint m_flGameLoadTime = 0x54C; // float32
    public const nint m_iCustomGameScore = 0x550; // int32[2]
    public const nint m_nCustomGameDifficulty = 0x558; // int32
    public const nint m_bEnemyModifiersEnabled = 0x55C; // bool
    public const nint m_iWaves = 0x560; // int32
    public const nint m_iCreepUpgradeState = 0x564; // int32
    public const nint m_fGoodGlyphCooldown = 0x568; // GameTime_t
    public const nint m_fBadGlyphCooldown = 0x56C; // GameTime_t
    public const nint m_flGlyphCooldowns = 0x570; // GameTime_t[15]
    public const nint m_fGoodRadarCooldown = 0x5AC; // GameTime_t
    public const nint m_fBadRadarCooldown = 0x5B0; // GameTime_t
    public const nint m_flRadarCooldowns = 0x5B4; // GameTime_t[15]
    public const nint m_iGoodRadarCharges = 0x5F0; // int32
    public const nint m_iBadRadarCharges = 0x5F4; // int32
    public const nint m_iRadarCharges = 0x5F8; // int32[15]
    public const nint m_flOutpostTimes = 0x634; // float32[24]
    public const nint m_bIsNightstalkerNight = 0x694; // bool
    public const nint m_bIsTemporaryNight = 0x695; // bool
    public const nint m_bIsTemporaryDay = 0x696; // bool
    public const nint m_nRiverType = 0x698; // int32
    public const nint m_nTeamFeaturedPlayerID = 0x69C; // PlayerID_t[15]
    public const nint m_nTeamVersusScreen = 0x6D8; // item_definition_index_t[15]
    public const nint m_flGoldRedistributeTime = 0x714; // float32
    public const nint m_nGoldToRedistribute = 0x718; // int32[2]
    public const nint m_flNextPreGameThink = 0x720; // GameTime_t
    public const nint m_flNextAllDraftGoldThink = 0x724; // GameTime_t
    public const nint m_flTimeEnteredState = 0x728; // float64
    public const nint m_unRiverAccountID = 0x730; // uint32
    public const nint m_ulRiverItemID = 0x738; // itemid_t
    public const nint m_vecItemStockInfo = 0x780; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
    public const nint m_AssassinMiniGameNetData = 0x7D0; // DOTA_AssassinMinigameNetworkState
    public const nint m_nGameWinner = 0x7E0; // int32
    public const nint m_unMatchID64 = 0x7E8; // MatchID_t
    public const nint m_bMatchSignoutComplete = 0x7F0; // bool
    public const nint m_hSideShop1 = 0x7F4; // CHandle< C_BaseEntity >
    public const nint m_hSideShop2 = 0x7F8; // CHandle< C_BaseEntity >
    public const nint m_hSecretShop1 = 0x7FC; // CHandle< C_BaseEntity >
    public const nint m_hSecretShop2 = 0x800; // CHandle< C_BaseEntity >
    public const nint m_hTeamFountains = 0x804; // CHandle< C_BaseEntity >[15]
    public const nint m_hTeamForts = 0x840; // CHandle< C_BaseEntity >[15]
    public const nint m_hTeamShops = 0x87C; // CHandle< C_BaseEntity >[15]
    public const nint m_hAnnouncerGood = 0x8B8; // CHandle< C_BaseEntity >
    public const nint m_hAnnouncerBad = 0x8BC; // CHandle< C_BaseEntity >
    public const nint m_hAnnouncerSpectator = 0x8C0; // CHandle< C_BaseEntity >
    public const nint m_hAnnouncerGood_KillingSpree = 0x8C4; // CHandle< C_BaseEntity >
    public const nint m_hAnnouncerBad_KillingSpree = 0x8C8; // CHandle< C_BaseEntity >
    public const nint m_hAnnouncerSpectator_KillingSpree = 0x8CC; // CHandle< C_BaseEntity >
    public const nint m_arrTier1TowerDestroyed = 0x8D0; // bool[15]
    public const nint m_arrTier2TowerDestroyed = 0x8DF; // bool[15]
    public const nint m_arrTier3TowerDestroyed = 0x8EE; // bool[15]
    public const nint m_bTier1TowerDestroyed = 0x8FD; // bool
    public const nint m_bTier2TowerDestroyed = 0x8FE; // bool
    public const nint m_bTier3TowerDestroyed = 0x8FF; // bool
    public const nint m_fTimeOfDay = 0x900; // float32
    public const nint m_iNetTimeOfDay = 0x904; // int32
    public const nint m_nLoadedPlayers = 0x908; // int32
    public const nint m_nExpectedPlayers = 0x90C; // int32
    public const nint m_iMinimapDebugGridState = 0x918; // int32
    public const nint m_iFoWFrameNumber = 0x998; // int32
    public const nint m_vWeatherWindDirection = 0x99C; // Vector
    public const nint m_vecRequiredPlaytestHeroesStorage = 0x9A8; // int32[24]
    public const nint m_vecRecommendedPlaytestHeroesStorage = 0xA08; // int32[24]
    public const nint m_bAllRequiredPlaytestHeroesPicked = 0xA68; // bool
    public const nint m_nLastPlaytestPickPhase = 0xA6C; // int32
    public const nint m_nCustomGameFowTeamCount = 0xA70; // int32
    public const nint m_bUseAlternateABRules = 0xA74; // bool
    public const nint m_bLobbyIsAssociatedWithGame = 0xA75; // bool
    public const nint m_BotDebugTimer = 0xA78; // CountdownTimer
    public const nint m_BotDebugPushLane = 0xA90; // uint8[18]
    public const nint m_BotDebugDefendLane = 0xAA2; // uint8[18]
    public const nint m_BotDebugFarmLane = 0xAB4; // uint8[6]
    public const nint m_BotDebugRoam = 0xABA; // uint8[8]
    public const nint m_hBotDebugRoamTarget = 0xAC4; // CHandle< C_BaseEntity >[2]
    public const nint m_BotDebugRoshan = 0xACC; // uint8[2]
    public const nint m_nRoshanRespawnPhase = 0xAD0; // ERoshanSpawnPhase
    public const nint m_flRoshanRespawnPhaseEndTime = 0xAD4; // GameTime_t
    public const nint m_AbilityDraftAbilities = 0xAD8; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
    public const nint m_bAbilityDraftCurrentPlayerHasPicked = 0xB28; // bool
    public const nint m_nAbilityDraftPlayerTracker = 0xB2C; // int32
    public const nint m_nAbilityDraftRoundNumber = 0xB30; // int32
    public const nint m_nAbilityDraftAdvanceSteps = 0xB34; // int32
    public const nint m_nAbilityDraftPhase = 0xB38; // int32
    public const nint m_nAbilityDraftHeroesChosen = 0xB3C; // int32[13]
    public const nint m_bIsPlayerDraft = 0xB70; // bool
    public const nint m_ePlayerDraftState = 0xB74; // DOTA_PlayerDraftState
    public const nint m_vecPlayerDraftPickOrder = 0xB78; // C_NetworkUtlVectorBase< uint8 >
    public const nint m_nPlayerDraftPick = 0xB90; // int32
    public const nint m_nPlayerDraftActiveTeam = 0xB94; // int32
    public const nint m_flPlayerDraftTimeBank = 0xB98; // float32[2]
    public const nint m_vecARDMHeroes = 0xBA0; // CUtlVector< KeyValues* >[2]
    public const nint m_nARDMHeroesPrecached = 0xBD0; // int32
    public const nint m_fLastARDMPrecache = 0xBD4; // float32
    public const nint m_nAllDraftPhase = 0xBD8; // int32
    public const nint m_bAllDraftRadiantFirst = 0xBDC; // bool
    public const nint m_bAllowOverrideVPK = 0xBDD; // bool
    public const nint m_nARDMHeroesRemaining = 0xBE0; // int32[2]
    public const nint m_bUpdateHeroStatues = 0xBE8; // bool
    public const nint m_bExperimentalGameplay = 0xC00; // bool
    public const nint m_vecPlayerMMR = 0xC40; // CUtlVector< int32 >
    public const nint m_lobbyType = 0xC58; // uint32
    public const nint m_lobbyLeagueID = 0xC5C; // LeagueID_t
    public const nint m_lobbyGameName = 0xC60; // char[256]
    public const nint m_vecHeroStatueLiked = 0xD60; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
    public const nint m_CustomGameTeamMaxPlayers = 0xDB0; // int32[15]
    public const nint m_iMutations = 0xDEC; // int32[5]
    public const nint m_vecIngameEvents = 0xE00; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > >
    public const nint m_nPrimaryIngameEventIndex = 0xE18; // int8
    public const nint m_hObsoleteIngameEvent = 0xE1C; // CHandle< C_IngameEvent_Base >
    public const nint m_nOfrendaPledges = 0xE20; // uint32
    public const nint m_nRadiantOfrendas = 0xE24; // uint32
    public const nint m_nDireOfrendas = 0xE28; // uint32
    public const nint m_bOfrendaEnabled = 0xE2C; // bool
    public const nint m_NeutralSpawnBoxes = 0xE60; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t >
    public const nint m_RegionTriggerBoxes = 0xE78; // C_NetworkUtlVectorBase< RegionTriggerBoxes_t >
    public const nint m_flLastPerfSampleTime = 0x1E48; // float64
    public const nint m_flLastPerfSampleSendTime = 0x1E50; // float64
    public const nint m_bDidSeeStrategyTime = 0x1E58; // bool
    public const nint m_flLastUnfocusedSleepTime = 0xABB0; // float64
}

public static class C_DOTAGamerulesProxy {
    public const nint m_pGameRules = 0x538; // C_DOTAGamerules*
}

public static class C_DOTAPlayerController {
    public const nint m_iMinimapMove = 0x750; // int32
    public const nint m_pClickBehaviorKeys = 0x758; // KeyValues*
    public const nint m_flCenterTime = 0x760; // GameTime_t
    public const nint m_iConfirmationIndex = 0x764; // int32
    public const nint m_bCenterOnHero = 0x768; // bool
    public const nint m_bHeroAssigned = 0x769; // bool
    public const nint m_nKeyBindHeroID = 0x76C; // int32
    public const nint m_bUsingCameraMan = 0x770; // bool
    public const nint m_bUsingAssistedCameraOperator = 0x771; // bool
    public const nint m_nPlayerAssistFlags = 0x774; // int32
    public const nint m_vLatestEvent = 0x778; // Vector
    public const nint m_hFreeDrawAbility = 0x7A8; // CHandle< C_DOTABaseAbility >
    public const nint m_vLastFreeDrawPosition = 0x7AC; // Vector
    public const nint m_nPlayerID = 0x7B8; // PlayerID_t
    public const nint m_hAssignedHero = 0x7BC; // CHandle< C_BaseEntity >
    public const nint m_hLastAssignedHero = 0x7C0; // CHandle< C_BaseEntity >
    public const nint m_hKillCamUnit = 0x7C4; // CHandle< C_BaseEntity >
    public const nint m_hPreviousKillCamUnit = 0x7C8; // CHandle< C_BaseEntity >
    public const nint m_flKillCamUnitReceivedTime = 0x7CC; // float32
    public const nint m_nRareLineClickCount = 0x7D8; // int32
    public const nint m_nRareLinesPlayed = 0x7DC; // int32
    public const nint m_nRareLineGroup = 0x7E0; // int32
    public const nint m_flLastRareLinePlayTime = 0x7E4; // float32
    public const nint m_flLastUnitOrdersSendTime = 0x7E8; // float32
    public const nint m_bTeleportRequiresHalt = 0x7EC; // bool
    public const nint m_bChannelRequiresHalt = 0x7ED; // bool
    public const nint m_bAutoPurchaseItems = 0x7EE; // bool
    public const nint m_bDisableHUDErrorMessages = 0x7EF; // bool
    public const nint m_iMouseDragStartX = 0x7F0; // int32
    public const nint m_iMouseDragStartY = 0x7F4; // int32
    public const nint m_nWeatherType = 0x7F8; // int32
    public const nint m_bDynamicWeatherSystemActive = 0x7FC; // bool
    public const nint m_bDynamicSoundHandled = 0x7FD; // bool
    public const nint m_flDynamicWeatherNextSwitchTime = 0x800; // GameTime_t
    public const nint m_flDynamicWeatherScaleFinishedTime = 0x804; // GameTime_t
    public const nint m_flDynamicWeatherIntensity = 0x808; // float32
    public const nint m_nXPRangeFXIndex = 0x80C; // ParticleIndex_t
    public const nint m_nVisionRangeFXIndex = 0x810; // ParticleIndex_t
    public const nint m_nSelectedControlGroup = 0x814; // int32
    public const nint m_nCachedCoachedTeam = 0x818; // int32
    public const nint m_hActiveAbility = 0x81C; // CHandle< C_DOTABaseAbility >
    public const nint m_unitorders = 0x820; // CUtlVector< CUnitOrders >
    public const nint m_nOutgoingOrderSequenceNumber = 0x838; // int32
    public const nint m_nServerOrderSequenceNumber = 0x83C; // int32
    public const nint m_nLastSentOutgoingOrderSequenceNumber = 0x840; // int32
    public const nint m_nSelectedUnits = 0x848; // CUtlVector< CEntityIndex >
    public const nint m_nWaypoints = 0x860; // CUtlVector< ParticleIndex_t >
    public const nint m_iActions = 0x878; // int32
    public const nint m_hQueryUnit = 0x87C; // CHandle< C_DOTA_BaseNPC >
    public const nint m_bInQuery = 0x880; // bool
    public const nint m_bSelectionChangedInDataUpdate = 0x881; // bool
    public const nint m_flQueryInhibitingActionTime = 0x8E8; // GameTime_t
    public const nint m_flQueryInhibitDuration = 0x8EC; // float32
    public const nint m_RingedEntities = 0x8F0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_ActiveRingOwners = 0x908; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bOverridingQuery = 0x920; // bool
    public const nint m_flLastAutoRepeatTime = 0x928; // float32
    public const nint m_flConsumeDoubleclickTime = 0x92C; // float32
    public const nint m_LightInfoWeatherEffect = 0x930; // CUtlString
    public const nint m_bPreviousWasLightInfoWeather = 0x938; // bool
    public const nint m_MapDefaultWeatherEffect = 0x940; // CUtlString
    public const nint m_bMapUsesDynamicWeather = 0x948; // bool
    public const nint m_nCastRangeEffectCreationRadius = 0x970; // int32
    public const nint m_vecSuggestedWardLocationEffects = 0x990; // CUtlVector< ParticleIndex_t >
    public const nint m_pSmartCastNPC = 0x9A8; // C_DOTA_BaseNPC*
    public const nint m_nTeamSprayParticleIndex = 0x9B0; // ParticleIndex_t
    public const nint m_bIsNextCastOrderFromMouseClick = 0x9B4; // bool
    public const nint m_iCursor = 0x9E8; // int32[2]
    public const nint m_iSpectatorClickBehavior = 0x9F0; // int32
    public const nint m_flAspectRatio = 0x9F4; // float32
    public const nint m_hSpectatorQueryUnit = 0x9F8; // CHandle< C_BaseEntity >
    public const nint m_iStatsPanel = 0x9FC; // int32
    public const nint m_iShopPanel = 0xA00; // int32
    public const nint m_iShopViewMode = 0xA04; // ShopItemViewMode_t
    public const nint m_iStatsDropdownCategory = 0xA08; // int32
    public const nint m_iStatsDropdownSort = 0xA0C; // int32
    public const nint m_szShopString = 0xA10; // char[64]
    public const nint m_vecClientQuickBuyState = 0xA50; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState >
    public const nint m_bInShowCaseMode = 0xAA0; // bool
    public const nint m_flCameraZoomAmount = 0xAA4; // float32
    public const nint m_iHighPriorityScore = 0xAA8; // int32
    public const nint m_quickBuyItems = 0xAAC; // AbilityID_t[9]
    public const nint m_quickBuyIsPurchasable = 0xAD0; // bool[9]
    public const nint m_flFrameTime = 0xADC; // float32
    public const nint m_flFrameTimeStdDev = 0xAE0; // float32
    public const nint m_flUnfilteredFrameTime = 0xAE4; // float32
    public const nint m_NeutralCampAlarms = 0xAE8; // CUtlVector< NeutralCampStackPullAlarm_t >
    public const nint m_iPrevCursor = 0xB00; // int32[2]
    public const nint m_iPositionHistoryTail = 0xBA8; // int32
    public const nint m_iMusicStatus = 0xBAC; // int32
    public const nint m_iPreviousMusicStatus = 0xBB0; // int32
    public const nint m_bRequestedInventory = 0xBB4; // bool
    public const nint m_flMusicOperatorVals = 0xBB8; // float32[3]
    public const nint m_iMusicOperatorVals = 0xBC4; // int32[4]
    public const nint m_ControlGroups = 0xBD8; // CUtlVector< sControlGroupElem >[10]
    public const nint m_pkvControlGroupKV = 0xCC8; // KeyValues*
    public const nint m_flAltHeldStartTime = 0xD28; // float32
}

public static class C_DOTAPropCustomTexture {
    public const nint m_unTeamID = 0xA58; // uint32
    public const nint m_bSetupMaterialProxy = 0xA68; // bool
}

public static class C_DOTASceneEntity {
    public const nint m_nCustomStackIndex = 0x598; // int32
    public const nint m_flVolume = 0x59C; // float32
}

public static class C_DOTASpectatorGraphManager {
    public const nint __m_pChainEntity = 0x28; // CNetworkVarChainer
    public const nint m_bTrackingTeamStats = 0x50; // bool
    public const nint m_flStartTime = 0x54; // GameTime_t
    public const nint m_rgRadiantTotalEarnedGold = 0x58; // int32[64]
    public const nint m_rgDireTotalEarnedGold = 0x158; // int32[64]
    public const nint m_rgRadiantTotalEarnedXP = 0x258; // int32[64]
    public const nint m_rgDireTotalEarnedXP = 0x358; // int32[64]
    public const nint m_rgRadiantNetWorth = 0x458; // int32[64]
    public const nint m_rgDireNetWorth = 0x558; // int32[64]
    public const nint m_flTotalEarnedGoldStartTime = 0x658; // GameTime_t
    public const nint m_flTotalEarnedGoldEndTime = 0x65C; // GameTime_t
    public const nint m_nGoldGraphVersion = 0x660; // int32
    public const nint m_rgRadiantWinChance = 0x664; // int32[64]
    public const nint m_TeamStatsUpdateTimer = 0x768; // CountdownTimer
    public const nint m_HeroInventorySnapshotTimer = 0x780; // CountdownTimer
    public const nint m_vecPlayerSnapshots = 0x798; // CUtlVector< sPlayerSnapshot >[24]
    public const nint m_unDataChangedCount = 0x9F0; // uint32
}

public static class C_DOTASpectatorGraphManagerProxy {
    public const nint m_pGraphManager = 0x538; // C_DOTASpectatorGraphManager*
}

public static class C_DOTATeam {
    public const nint m_iHeroKills = 0x5F0; // int32
    public const nint m_iTowerKills = 0x5F4; // int32
    public const nint m_iBarracksKills = 0x5F8; // int32
    public const nint m_unTournamentTeamID = 0x5FC; // uint32
    public const nint m_ulTeamLogo = 0x600; // uint64
    public const nint m_ulTeamBaseLogo = 0x608; // uint64
    public const nint m_ulTeamBannerLogo = 0x610; // uint64
    public const nint m_bTeamComplete = 0x618; // bool
    public const nint m_bTeamIsHomeTeam = 0x619; // bool
    public const nint m_CustomHealthbarColor = 0x61A; // Color
    public const nint m_szTag = 0x61E; // char[33]
}

public static class C_DOTATurboHeroPickRules {
    public const nint m_Phase = 0x538; // DOTACustomHeroPickRulesPhase_t
}

public static class C_DOTAWearableItem {
    public const nint m_bOwnerModelChanged = 0xAF8; // bool
    public const nint m_bIsGeneratingEconItem = 0xAF9; // bool
    public const nint m_bIsItemVisibleOnGeneratedEntity = 0xAFA; // bool
    public const nint m_bHideWearableButDrawAdditionalWearables = 0xAFB; // bool
    public const nint m_hAdditionalWearable = 0xAFC; // CHandle< CBaseAnimatingActivity >
    public const nint m_hDrawWearable = 0xB00; // CHandle< C_DOTAWearableItem >
    public const nint m_bHiddenByCombiner = 0xB04; // bool
    public const nint m_bHiddenByEquipmentSlot = 0xB05; // bool
    public const nint m_bIsPortrait = 0xB06; // bool
    public const nint m_fZDelta = 0xB08; // float32
    public const nint m_combinerMaterialOverrideList = 0xB10; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
    public const nint m_bCombinerMaterialOverrideListChanged = 0xB30; // bool
    public const nint m_bRubickFollower = 0xB31; // bool
    public const nint m_bHasPlayerModel = 0xB32; // bool
}

public static class C_DOTAWorldParticleSystem {
    public const nint m_nType = 0x7B8; // int32
    public const nint m_iClientEffectIndex = 0x7BC; // ParticleIndex_t
    public const nint m_szEffectName = 0x7C0; // CUtlSymbolLarge
    public const nint m_szTargetName = 0x7C8; // CUtlSymbolLarge
    public const nint m_szControlPoint = 0x7D0; // CUtlSymbolLarge
    public const nint m_hOverrideSequence = 0x7D8; // HSequence
    public const nint m_hOverrideModel = 0x7E0; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_vModelScale = 0x7E8; // Vector
    public const nint m_nSkinOverride = 0x7F4; // int32
    public const nint m_bDayTime = 0x7F8; // bool
    public const nint m_bNightTime = 0x7F9; // bool
    public const nint m_bShowInFow = 0x7FA; // bool
    public const nint m_bShowWhileDynamicWeatherActive = 0x7FB; // bool
    public const nint m_bAnimateDuringGameplayPause = 0x7FC; // bool
}

public static class C_DOTA_Ability_AbyssalUnderlord_DarkRift {
    public const nint teleport_delay = 0x5B0; // float32
    public const nint m_hTeleportTarget = 0x5B4; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_AbyssalUnderlord_Dark_Portal {
    public const nint duration = 0x5B0; // float32
    public const nint distance_from_fountain = 0x5B4; // float32
}

public static class C_DOTA_Ability_AbyssalUnderlord_Portal_Warp {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_flChannelTime = 0x5B4; // float32
}

public static class C_DOTA_Ability_Aghanim_UrnUpheaval {
    public const nint m_vPosition = 0x5B0; // Vector
    public const nint aoe = 0x5BC; // float32
    public const nint slow_rate = 0x5C0; // float32
    public const nint slow_rate_duration = 0x5C4; // float32
    public const nint duration = 0x5C8; // float32
    public const nint max_slow = 0x5CC; // float32
    public const nint burn_damage = 0x5D0; // float32
    public const nint m_flCurrentSlow = 0x5D4; // float32
    public const nint m_nFXIndex = 0x5D8; // ParticleIndex_t
    public const nint m_SlowTimer = 0x5E0; // CountdownTimer
    public const nint m_timer = 0x5F8; // CountdownTimer
}

public static class C_DOTA_Ability_AghsFort_BossDarkWillow_ShadowRealm {
    public const nint projectile_damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_AghsFort_Creature_Phoenix_FireSpirits {
    public const nint hp_cost_perc = 0x5B0; // int32
}

public static class C_DOTA_Ability_AghsFort_Creature_Venomancer_PoisonNova {
    public const nint m_nFXPreview = 0x5B0; // ParticleIndex_t
    public const nint radius = 0x5B4; // int32
}

public static class C_DOTA_Ability_AghsFort_EarthSpiritBoss_Magnetize {
    public const nint cast_radius = 0x5B0; // int32
    public const nint rock_explosion_radius = 0x5B4; // int32
    public const nint damage_duration = 0x5B8; // float32
}

public static class C_DOTA_Ability_AghsFort_Juggernaut_BladeDance {
    public const nint m_hBladeFuryThinker = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_AghsFort_Kunkka_GhostShip {
    public const nint buff_duration = 0x5B0; // float32
    public const nint stun_duration = 0x5B4; // float32
    public const nint ghostship_width = 0x5B8; // int32
    public const nint ghostship_width_scepter = 0x5BC; // int32
    public const nint m_vFinalDestination = 0x5C0; // Vector
    public const nint m_vStartingPoint = 0x5CC; // Vector
}

public static class C_DOTA_Ability_AghsFort_Kunkka_Tidal_Wave {
    public const nint m_WaveData = 0x5B0; // WaveData_t[2]
}

public static class C_DOTA_Ability_AghsFort_Kunkka_Torrent {
    public const nint torrent_storm_chance = 0x5B0; // int32
}

public static class C_DOTA_Ability_AghsFort_Kunkka_XMarksTheSpot {
    public const nint m_hThinkerEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_AghsFort_Lich_ChainFrost {
    public const nint jump_range = 0x5B0; // int32
    public const nint jumps = 0x5B4; // int32
    public const nint slow_duration = 0x5B8; // float32
    public const nint vision_radius = 0x5BC; // int32
    public const nint projectile_speed = 0x5C0; // int32
}

public static class C_DOTA_Ability_AghsFort_Lich_Ice_Spire {
    public const nint aura_radius = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
}

public static class C_DOTA_Ability_AghsFort_Lich_Sinister_Gaze {
    public const nint m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_vPullLocation = 0x5B4; // Vector
    public const nint m_flIntervalRate = 0x5C0; // float32
}

public static class C_DOTA_Ability_AghsFort_Phoenix_FireSpirits {
    public const nint hp_cost_perc = 0x5B0; // int32
    public const nint spirit_count = 0x5B4; // int32
}

public static class C_DOTA_Ability_AghsFort_QueenOfPain_ScreamOfPain {
    public const nint damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_AghsFort_QueenOfPain_ShadowStrike {
    public const nint projectile_speed = 0x5B0; // Vector
}

public static class C_DOTA_Ability_AghsFort_QueenOfPain_SonicWave {
    public const nint m_fStartTime = 0x5B0; // GameTime_t
    public const nint m_fTotalTime = 0x5B4; // float32
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
    public const nint m_nSonicTrailRadius = 0x5BC; // int32
    public const nint m_vLastTrailThinkerLocation = 0x5C0; // Vector
    public const nint bTrailStartedBurning = 0x5CC; // bool
    public const nint damage = 0x5D0; // int32
    public const nint starting_aoe = 0x5D4; // int32
    public const nint final_aoe = 0x5D8; // int32
}

public static class C_DOTA_Ability_AghsFort_RockGolem_Smash {
    public const nint m_nPreviewFX = 0x5B0; // ParticleIndex_t
    public const nint m_vTargetLoc = 0x5B4; // Vector
    public const nint radius = 0x5C8; // int32
}

public static class C_DOTA_Ability_AghsFort_ShadowShaman_Shackles {
    public const nint m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint nShackleFXIndex = 0x5B4; // ParticleIndex_t
}

public static class C_DOTA_Ability_AghsFort_Sniper_Concussive_Grenade {
    public const nint m_iProjectile = 0x5B0; // int32
}

public static class C_DOTA_Ability_AghsFort_StonehallGeneral_OverwhelmingOdds {
    public const nint max_steps = 0x5B0; // int32
    public const nint m_vTarget = 0x5B4; // Vector
    public const nint m_vDir = 0x5C0; // Vector
    public const nint m_nSteps = 0x5CC; // int32
    public const nint m_flChannelStartTime = 0x5D0; // GameTime_t
    public const nint m_nFXIndex = 0x5D4; // ParticleIndex_t
}

public static class C_DOTA_Ability_AghsFort_TrapRoom_Hookshot {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x5B4; // Vector
    public const nint m_bRetract = 0x5C0; // bool
}

public static class C_DOTA_Ability_AghsFort_Wave_Blast {
    public const nint damage = 0x5B0; // int32
    public const nint knockback_duration = 0x5B4; // float32
    public const nint disarm_duration = 0x5B8; // float32
}

public static class C_DOTA_Ability_Aghsfort2_DrowRanger_Multishot {
    public const nint m_vHitTargets = 0x5B0; // CUtlVector< CUtlVector< CHandle< C_BaseEntity > > >
}

public static class C_DOTA_Ability_Aghsfort2_DrowRanger_WaveOfSilence {
    public const nint wave_length = 0x5B0; // int32
    public const nint wave_width = 0x5B4; // int32
    public const nint wave_speed = 0x5B8; // float32
    public const nint silence_duration = 0x5BC; // float32
    public const nint knockback_distance_max = 0x5C0; // float32
    public const nint knockback_duration = 0x5C4; // float32
}

public static class C_DOTA_Ability_Aghsfort_Aziyog_Underlord_Dark_Portal {
    public const nint duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Aghsfort_Aziyog_Underlord_Portal_Warp {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Aghsfort_Bane_BrainSap {
    public const nint cast_range = 0x5B0; // int32
    public const nint brain_sap_damage = 0x5B4; // int32
}

public static class C_DOTA_Ability_Aghsfort_Bane_FiendsGrip {
    public const nint m_hGripTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint fiend_grip_damage = 0x5B4; // int32
    public const nint fiend_grip_spread_radius = 0x5B8; // int32
    public const nint channel_time = 0x5BC; // float32
    public const nint fiend_grip_tick_interval = 0x5C0; // float32
    public const nint m_flLastSpreadTime = 0x5C4; // GameTime_t
}

public static class C_DOTA_Ability_Aghsfort_Dawnbreaker_Solar_Guardian {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_bJumping = 0x5B4; // bool
    public const nint m_vecDeathThinkers = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hTeleportTarget = 0x5D0; // CHandle< C_BaseEntity >
    public const nint m_nTPFXIndex = 0x5D4; // ParticleIndex_t
    public const nint m_nAoEFXIndex = 0x5D8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Aghsfort_Elemental_Wisp_Tether {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_vProjectileLocation = 0x5B4; // Vector
    public const nint m_bProjectileActive = 0x5C0; // bool
    public const nint latch_distance = 0x5C4; // int32
    public const nint m_iProjectileIndex = 0x5C8; // int32
}

public static class C_DOTA_Ability_Aghsfort_Gyrocopter_Rocket_Barrage {
    public const nint duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Aghsfort_Lina_DragonSlave {
    public const nint dragon_slave_distance = 0x5B0; // int32
    public const nint m_vLastTrailThinkerLocation = 0x5B4; // Vector
    public const nint dragon_slave_damage = 0x5C0; // int32
    public const nint m_flLSADistance = 0x5C4; // float32
    public const nint m_nLSAPower = 0x5C8; // int32
    public const nint m_flLSADelay = 0x5CC; // float32
}

public static class C_DOTA_Ability_Aghsfort_Lina_LagunaBlade {
    public const nint m_hHitEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nMaxBounces = 0x5C8; // int32
}

public static class C_DOTA_Ability_Aghsfort_Magnataur_Empower {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Aghsfort_Magnataur_FriendlySkewer {
    public const nint skewer_radius = 0x5B0; // int32
    public const nint skewer_speed = 0x5B4; // int32
    public const nint max_targets = 0x5B8; // int32
    public const nint range = 0x5BC; // int32
    public const nint tree_radius = 0x5C0; // int32
    public const nint affects_creeps = 0x5C4; // int32
    public const nint m_nTargetsHit = 0x5C8; // int32
}

public static class C_DOTA_Ability_Aghsfort_Magnataur_ReversePolarity {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vPullLocation = 0x5B4; // Vector
}

public static class C_DOTA_Ability_Aghsfort_Magnataur_Shockwave {
    public const nint m_nFXIndices = 0x5B0; // CUtlVector< ParticleIndex_t >
}

public static class C_DOTA_Ability_Aghsfort_Magnataur_Skewer {
    public const nint skewer_radius = 0x5B0; // int32
    public const nint skewer_speed = 0x5B4; // int32
    public const nint range = 0x5B8; // int32
    public const nint tree_radius = 0x5BC; // int32
    public const nint m_vSkewerDirection = 0x5C0; // Vector
    public const nint m_nTargetsHit = 0x5CC; // int32
}

public static class C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_Onslaught {
    public const nint max_charge_time = 0x5B0; // float32
}

public static class C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_Pummel {
    public const nint m_hTarget = 0x5B0; // C_DOTA_BaseNPC*
}

public static class C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_RoarAttack {
    public const nint speed = 0x5B0; // int32
    public const nint projectile_count = 0x5B4; // int32
    public const nint rotation_angle = 0x5B8; // float32
    public const nint damage = 0x5BC; // float32
    public const nint radius = 0x5C0; // float32
    public const nint ctTimer = 0x5C8; // CountdownTimer
    public const nint m_vecStartRot = 0x5E0; // Vector
    public const nint m_vecEndRot = 0x5EC; // Vector
}

public static class C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_TectonicShift {
    public const nint damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_Aghsfort_Sand_King_BurrowStrike {
    public const nint burrow_width = 0x5B0; // int32
    public const nint burrow_speed = 0x5B4; // int32
    public const nint burrow_anim_time = 0x5B8; // float32
    public const nint m_vStartLocation = 0x5BC; // Vector
}

public static class C_DOTA_Ability_Aghsfort_Sand_King_Epicenter {
    public const nint m_nFXEpicenterIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Aghsfort_Sand_King_SandStorm {
    public const nint m_iRadius = 0x5B0; // int32
}

public static class C_DOTA_Ability_Aghsfort_Special_Magnataur_ReversePolarity_Polarity {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vPullLocation = 0x5B4; // Vector
    public const nint pAbilityPrimaryPolarity = 0x5C0; // C_DOTABaseAbility*
}

public static class C_DOTA_Ability_Aghsfort_TuskBoss_IceShards {
    public const nint m_iProjectile = 0x5B0; // int32
    public const nint shard_width = 0x5B4; // int32
    public const nint shard_damage = 0x5B8; // int32
    public const nint shard_count = 0x5BC; // int32
    public const nint shard_speed = 0x5C0; // float32
    public const nint shard_duration = 0x5C4; // float32
    public const nint shard_angle_step = 0x5C8; // float32
    public const nint shard_distance = 0x5CC; // int32
    public const nint m_vSpawnOrigin = 0x5D0; // Vector
    public const nint m_vDirection = 0x5DC; // Vector
}

public static class C_DOTA_Ability_Aghsfort_TuskBoss_Snowball {
    public const nint snowball_windup_radius = 0x5B0; // int32
    public const nint snowball_radius = 0x5B4; // int32
    public const nint snowball_grow_rate = 0x5B8; // int32
    public const nint snowball_damage = 0x5BC; // int32
    public const nint snowball_damage_bonus = 0x5C0; // int32
    public const nint stun_duration = 0x5C4; // float32
    public const nint bonus_damage = 0x5C8; // int32
    public const nint bonus_stun = 0x5CC; // float32
    public const nint snowball_speed = 0x5D0; // int32
    public const nint snowball_duration = 0x5D4; // float32
    public const nint m_vProjectileLocation = 0x5D8; // Vector
    public const nint m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXIndex = 0x600; // ParticleIndex_t
    public const nint ctSnowball = 0x608; // CountdownTimer
    public const nint m_bSpeakAlly = 0x620; // bool
    public const nint m_bIsExpired = 0x621; // bool
    public const nint m_bInWindup = 0x622; // bool
    public const nint m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
    public const nint m_nContainedValidUnits = 0x628; // int32
    public const nint m_bEndingSnowball = 0x62C; // bool
}

public static class C_DOTA_Ability_Aghsfort_Tusk_IceShards {
    public const nint m_iProjectile = 0x5B0; // int32
    public const nint shard_width = 0x5B4; // int32
    public const nint shard_damage = 0x5B8; // int32
    public const nint shard_count = 0x5BC; // int32
    public const nint shard_speed = 0x5C0; // float32
    public const nint shard_duration = 0x5C4; // float32
    public const nint shard_angle_step = 0x5C8; // float32
    public const nint shard_distance = 0x5CC; // int32
    public const nint secondary_damage_pct = 0x5D0; // int32
    public const nint m_vSpawnOrigin = 0x5D4; // Vector
    public const nint m_vDirection = 0x5E0; // Vector
}

public static class C_DOTA_Ability_Aghsfort_Tusk_Snowball {
    public const nint snowball_windup_radius = 0x5B0; // int32
    public const nint snowball_radius = 0x5B4; // int32
    public const nint snowball_grow_rate = 0x5B8; // int32
    public const nint snowball_damage = 0x5BC; // int32
    public const nint snowball_damage_bonus = 0x5C0; // int32
    public const nint stun_duration = 0x5C4; // float32
    public const nint bonus_damage = 0x5C8; // int32
    public const nint bonus_stun = 0x5CC; // float32
    public const nint snowball_speed = 0x5D0; // int32
    public const nint snowball_duration = 0x5D4; // float32
    public const nint m_vProjectileLocation = 0x5D8; // Vector
    public const nint m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXIndex = 0x600; // ParticleIndex_t
    public const nint ctSnowball = 0x608; // CountdownTimer
    public const nint m_bSpeakAlly = 0x620; // bool
    public const nint m_bIsExpired = 0x621; // bool
    public const nint m_bInWindup = 0x622; // bool
    public const nint m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
    public const nint m_nContainedValidUnits = 0x628; // int32
    public const nint m_bEndingSnowball = 0x62C; // bool
}

public static class C_DOTA_Ability_Aghsfort_Tusk_Snowball_Dummy {
    public const nint snowball_radius = 0x5B0; // int32
    public const nint snowball_grow_rate = 0x5B4; // int32
    public const nint snowball_damage = 0x5B8; // int32
    public const nint snowball_damage_bonus = 0x5BC; // int32
    public const nint stun_duration = 0x5C0; // float32
    public const nint bonus_damage = 0x5C4; // int32
    public const nint bonus_stun = 0x5C8; // float32
    public const nint snowball_speed = 0x5CC; // int32
    public const nint snowball_duration = 0x5D0; // float32
    public const nint m_bIsExpired = 0x5D4; // bool
    public const nint m_vProjectileLocation = 0x5D8; // Vector
    public const nint ctSnowball = 0x5E8; // CountdownTimer
    public const nint m_hSnowballedUnits = 0x600; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXIndex = 0x618; // ParticleIndex_t
    public const nint m_hPrimaryTarget = 0x61C; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Aghsfort_Viper_Aghsfort_ViperStrike {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nTargetTeam = 0x5B4; // int32
    public const nint m_flNextViperStrikeTime = 0x5B8; // float32
}

public static class C_DOTA_Ability_Aghsfort_Weaver_Shukuchi {
    public const nint duration = 0x5B0; // float32
    public const nint radius = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
    public const nint fade_time = 0x5BC; // float32
}

public static class C_DOTA_Ability_Aghsfort_Weaver_TimeLapse {
    public const nint m_nNPCSpawnedID = 0x5B0; // int32
}

public static class C_DOTA_Ability_Aghsfort_Wildwing_Tornado_Blast {
    public const nint disable_duration = 0x5B0; // float32
    public const nint damage = 0x5B4; // float32
    public const nint m_nPreviewFX = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Aghsfort_WitchDoctor_DeathWard {
    public const nint m_iDamage = 0x5B0; // int32
    public const nint m_iBounceRadius = 0x5B4; // int32
    public const nint m_iProjectileSpeed = 0x5B8; // int32
    public const nint m_iBounces = 0x5BC; // int32
    public const nint m_hWard = 0x5C0; // CHandle< C_BaseEntity >
    public const nint m_fWardExpireTime = 0x5C4; // GameTime_t
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x5CC; // int32
    public const nint m_BounceInfo = 0x5D0; // CUtlVector< sAghsfortWardBounceInfo >
}

public static class C_DOTA_Ability_Aghsfort_WitchDoctor_DeathWard_No_Channel {
    public const nint m_iDamage = 0x5B0; // int32
    public const nint m_iBounceRadius = 0x5B4; // int32
    public const nint m_iProjectileSpeed = 0x5B8; // int32
    public const nint m_iBounces = 0x5BC; // int32
    public const nint m_hWard = 0x5C0; // CHandle< C_BaseEntity >
    public const nint m_fWardExpireTime = 0x5C4; // float32
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x5CC; // int32
    public const nint m_BounceInfo = 0x5D0; // CUtlVector< sAghsfortWardBounceInfo >
}

public static class C_DOTA_Ability_Aghsfort_WitchDoctor_ParalyzingCask {
    public const nint bounces = 0x5B0; // int32
    public const nint bounce_bonus_damage = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
}

public static class C_DOTA_Ability_Animation_Attack {
    public const nint animation_time = 0x5B0; // float32
}

public static class C_DOTA_Ability_Animation_TailSpin {
    public const nint animation_time = 0x5B0; // float32
}

public static class C_DOTA_Ability_ArcWarden_SparkWraith {
    public const nint duration = 0x5B0; // float32
    public const nint activation_delay = 0x5B4; // float32
    public const nint wraith_vision_duration = 0x5B8; // float32
    public const nint wraith_vision_radius = 0x5BC; // int32
    public const nint spark_damage = 0x5C0; // float32
    public const nint creep_damage_bonus_pct = 0x5C4; // int32
}

public static class C_DOTA_Ability_ArcWarden_TempestDouble {
    public const nint m_hDoubles = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Axe_BattleHunger {
    public const nint damage_per_second = 0x5B0; // int32
}

public static class C_DOTA_Ability_Axe_CullingBlade {
    public const nint m_bInterrupted = 0x5B0; // bool
    public const nint m_vProjectileLocation = 0x5B4; // Vector
    public const nint m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Bane_BrainSap {
    public const nint brain_sap_damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_Bane_FiendsGrip {
    public const nint m_hGripTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint fiend_grip_damage = 0x5B4; // int32
}

public static class C_DOTA_Ability_Beastmaster_CallOfTheWild_Hawk {
    public const nint m_HawkList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_flRotation = 0x5C8; // float32
}

public static class C_DOTA_Ability_Beastmaster_WildAxes {
    public const nint axe_damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_BountyHunter_Track {
    public const nint m_hTrap = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Brewmaster_DrunkenBrawler {
    public const nint m_iBrawlActive = 0x5B0; // int32
    public const nint m_bUpdateIcons = 0x5B4; // bool
    public const nint m_nDrunkenBrawlerFX = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Brewmaster_HurlBoulder {
    public const nint m_iBounces = 0x5B0; // int32
    public const nint m_hHitEntities = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Brewmaster_PrimalSplit {
    public const nint m_hPrimary = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_hSecondary = 0x5B4; // CHandle< C_BaseEntity >
    public const nint m_hTertiary = 0x5B8; // CHandle< C_BaseEntity >
    public const nint m_hFourth = 0x5BC; // CHandle< C_BaseEntity >
    public const nint m_fHurlBoulder_CooldownTime = 0x5C0; // GameTime_t
    public const nint m_fHDispelMagic_CooldownTime = 0x5C4; // GameTime_t
    public const nint m_fCyclone_CooldownTime = 0x5C8; // GameTime_t
    public const nint m_fWindWalk_CooldownTime = 0x5CC; // GameTime_t
    public const nint m_fAstralPulse_CooldownTime = 0x5D0; // GameTime_t
}

public static class C_DOTA_Ability_Broodmother_SpinWeb {
    public const nint m_hWebs = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Broodmother_StickySnare {
    public const nint m_vEndpoint = 0x5B0; // Vector
    public const nint duration = 0x5BC; // float32
    public const nint width = 0x5C0; // int32
    public const nint m_bStolenSnareCheck = 0x5C4; // bool
    public const nint m_vecSnares = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_ChaosKnight_Chaos_Bolt {
    public const nint hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_ChaosKnight_Reality_Rift {
    public const nint m_flPercentage = 0x5B0; // float32
    public const nint m_FXIndex = 0x5B8; // CUtlVector< ParticleIndex_t >
    public const nint m_hRiftIllusion = 0x5D0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Chen_HolyPersuasion {
    public const nint m_hDominatedUnits = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Clinkz_BurningBarrage {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_iArrowProjectile = 0x5BC; // int32
    public const nint m_nFXIndex = 0x5C0; // int32
    public const nint arrow_speed = 0x5C4; // float32
}

public static class C_DOTA_Ability_Clinkz_Burning_Army {
    public const nint range = 0x5B0; // int32
}

public static class C_DOTA_Ability_Clinkz_DeathPact {
    public const nint m_nDevourFirstSlot = 0x5B0; // int32
}

public static class C_DOTA_Ability_Creature_Fire_Breath {
    public const nint speed = 0x5B0; // int32
    public const nint projectile_count = 0x5B4; // int32
    public const nint rotation_angle = 0x5B8; // float32
    public const nint damage = 0x5BC; // float32
    public const nint radius = 0x5C0; // float32
    public const nint ctTimer = 0x5C8; // CountdownTimer
    public const nint m_vecStartRot = 0x5E0; // Vector
    public const nint m_vecEndRot = 0x5EC; // Vector
}

public static class C_DOTA_Ability_Creature_Ice_Breath {
    public const nint speed = 0x5B0; // int32
    public const nint projectile_count = 0x5B4; // int32
    public const nint rotation_angle = 0x5B8; // float32
    public const nint damage = 0x5BC; // float32
    public const nint radius = 0x5C0; // float32
    public const nint slow_duration = 0x5C4; // float32
    public const nint ctTimer = 0x5C8; // CountdownTimer
    public const nint m_vecStartRot = 0x5E0; // Vector
    public const nint m_vecEndRot = 0x5EC; // Vector
}

public static class C_DOTA_Ability_CrystalMaiden_CrystalNova {
    public const nint nova_damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_DarkSeer_Surge {
    public const nint m_bIsAltCastState = 0x5B0; // bool
}

public static class C_DOTA_Ability_DarkSeer_Vacuum {
    public const nint m_vPullLocation = 0x5B0; // Vector
}

public static class C_DOTA_Ability_DarkSeer_WallOfReplica {
    public const nint width = 0x5B0; // int32
}

public static class C_DOTA_Ability_DarkWillow_Terrorize {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_DataDriven {
    public const nint m_bProcsMagicStick = 0x5B0; // bool
    public const nint m_bIsSharedWithTeammates = 0x5B1; // bool
    public const nint m_bCastFilterRejectCaster = 0x5B2; // bool
    public const nint m_fAOERadius = 0x5B4; // float32
    public const nint m_CastAnimation = 0x5B8; // int32
    public const nint m_ModifierKVDescriptions = 0x5C0; // CUtlVector< KeyValues* >
    public const nint m_pOnChannelFinishKV = 0x5D8; // KeyValues*
    public const nint m_pOnChannelSucceededKV = 0x5E0; // KeyValues*
    public const nint m_pOnChannelInterruptedKV = 0x5E8; // KeyValues*
    public const nint m_pOnOwnerSpawnedKV = 0x5F0; // KeyValues*
    public const nint m_pOnOwnerDiedKV = 0x5F8; // KeyValues*
    public const nint m_pOnUpgradeKV = 0x600; // KeyValues*
    public const nint m_pOnProjectileHitUnitKV = 0x608; // KeyValues*
    public const nint m_pOnProjectileFinishKV = 0x610; // KeyValues*
    public const nint m_pOnSpellStartKV = 0x618; // KeyValues*
    public const nint m_pOnAbilityPhaseStartKV = 0x620; // KeyValues*
    public const nint m_pOnAbilityPhaseInterruptedKV = 0x628; // KeyValues*
    public const nint m_pOnToggleOnKV = 0x630; // KeyValues*
    public const nint m_pOnToggleOffKV = 0x638; // KeyValues*
    public const nint m_pOnCreatedKV = 0x640; // KeyValues*
}

public static class C_DOTA_Ability_Dawnbreaker_Solar_Guardian {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_bJumping = 0x5B4; // bool
    public const nint m_hTeleportTarget = 0x5B8; // CHandle< C_BaseEntity >
    public const nint m_nTPFXIndex = 0x5BC; // ParticleIndex_t
    public const nint m_nAoEFXIndex = 0x5C0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Dazzle_ShadowWave {
    public const nint m_hHitEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint bounce_radius = 0x5C8; // int32
    public const nint damage_radius = 0x5CC; // int32
    public const nint damage = 0x5D0; // int32
    public const nint max_targets = 0x5D4; // int32
    public const nint scepter_heal_pct = 0x5D8; // float32
}

public static class C_DOTA_Ability_DeathProphet_CarrionSwarm {
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint m_fStartTime = 0x5B8; // GameTime_t
    public const nint m_fTotalTime = 0x5BC; // float32
    public const nint m_nProjectileHandle = 0x5C0; // int32
    public const nint m_nFXIndex = 0x5C4; // ParticleIndex_t
}

public static class C_DOTA_Ability_DeathProphet_Exorcism {
    public const nint m_SpiritInfos = 0x5B0; // CUtlVector< sSpiritInfo* >
}

public static class C_DOTA_Ability_DeathProphet_Silence {
    public const nint m_vPos = 0x5B0; // Vector
}

public static class C_DOTA_Ability_DeathProphet_SpiritSiphon {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_iArrowProjectile = 0x5BC; // int32
    public const nint m_nFXIndex = 0x5C0; // int32
}

public static class C_DOTA_Ability_DoomBringer_Devour {
    public const nint m_nDevourFirstSlot = 0x5B0; // int32
    public const nint m_bIsAltCastState = 0x5B4; // bool
}

public static class C_DOTA_Ability_DragonKnight_BreatheFire {
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint damage = 0x5B8; // float32
    public const nint m_vStartPos = 0x5BC; // Vector
    public const nint m_fStartTime = 0x5C8; // GameTime_t
    public const nint m_fTotalTime = 0x5CC; // float32
}

public static class C_DOTA_Ability_DrowRanger_FrostArrows {
    public const nint shard_burst_damage_per_stack = 0x5B0; // int32
    public const nint shard_burst_slow_duration = 0x5B4; // float32
}

public static class C_DOTA_Ability_DrowRanger_Multishot {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_iArrowProjectile = 0x5BC; // int32
    public const nint m_nFXIndex = 0x5C0; // int32
    public const nint arrow_speed = 0x5C4; // float32
    public const nint arrow_spread = 0x5C8; // int32
    public const nint m_vHitTargets0 = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets1 = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets2 = 0x600; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets3 = 0x618; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets4 = 0x630; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets5 = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vHitTargets6 = 0x660; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_DrowRanger_WaveOfSilence {
    public const nint wave_width = 0x5B0; // int32
    public const nint wave_speed = 0x5B4; // float32
    public const nint silence_duration = 0x5B8; // float32
    public const nint knockback_distance_max = 0x5BC; // float32
    public const nint m_nHeroesHit = 0x5C0; // int32
}

public static class C_DOTA_Ability_Drow_Ranger_Glacier {
    public const nint shard_width = 0x5B0; // int32
    public const nint shard_count = 0x5B4; // int32
    public const nint shard_duration = 0x5B8; // float32
    public const nint shard_angle_step = 0x5BC; // float32
    public const nint shard_distance = 0x5C0; // int32
    public const nint m_vSpawnOrigin = 0x5C4; // Vector
    public const nint m_vDirection = 0x5D0; // Vector
    public const nint m_vecShards = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_EarthSpirit_BoulderSmash {
    public const nint speed = 0x5B0; // int32
    public const nint rock_damage = 0x5B4; // int32
    public const nint creep_multiplier = 0x5B8; // float32
    public const nint radius = 0x5BC; // int32
    public const nint rock_search_aoe = 0x5C0; // int32
    public const nint unit_distance = 0x5C4; // float32
    public const nint rock_distance = 0x5C8; // float32
    public const nint m_nProjectileID = 0x5CC; // int32
    public const nint m_hCursorTarget = 0x5D0; // CHandle< C_BaseEntity >
    public const nint m_bUsedStone = 0x5D4; // bool
    public const nint m_hTarget = 0x5D8; // CHandle< C_BaseEntity >
    public const nint m_bTargetStone = 0x5DC; // bool
}

public static class C_DOTA_Ability_EarthSpirit_GeomagneticGrip {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_EarthSpirit_Magnetize {
    public const nint cast_radius = 0x5B0; // int32
    public const nint rock_explosion_radius = 0x5B4; // int32
    public const nint damage_duration = 0x5B8; // float32
}

public static class C_DOTA_Ability_EarthSpirit_RollingBoulder {
    public const nint radius = 0x5B0; // int32
    public const nint speed = 0x5B4; // int32
    public const nint rock_speed = 0x5B8; // int32
    public const nint damage = 0x5BC; // int32
    public const nint damage_str = 0x5C0; // int32
    public const nint distance = 0x5C4; // float32
    public const nint rock_distance = 0x5C8; // float32
    public const nint rock_distance_multiplier = 0x5CC; // float32
    public const nint slow_duration = 0x5D0; // float32
    public const nint m_nFXIndex = 0x5D4; // ParticleIndex_t
    public const nint m_boulderSetposBool = 0x5D8; // bool
    public const nint m_nProjectileID = 0x5DC; // int32
    public const nint m_vStartingLocation = 0x5E0; // Vector
    public const nint m_vProjectileLocation = 0x5EC; // Vector
    public const nint m_vDir = 0x5F8; // Vector
    public const nint m_vVel = 0x604; // Vector
    public const nint m_bUsedStone = 0x610; // bool
    public const nint m_vRollDirection = 0x614; // Vector
}

public static class C_DOTA_Ability_Earthshaker_EchoSlam {
    public const nint echo_slam_damage_range = 0x5B0; // int32
    public const nint echo_slam_echo_search_range = 0x5B4; // int32
    public const nint echo_slam_echo_range = 0x5B8; // int32
    public const nint echo_slam_echo_damage = 0x5BC; // int32
    public const nint echo_slam_initial_damage = 0x5C0; // int32
}

public static class C_DOTA_Ability_Elder_Titan_AncestralSpirit {
    public const nint speed = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint buff_duration = 0x5B8; // float32
    public const nint spirit_duration = 0x5BC; // float32
    public const nint m_nCreepsHit = 0x5C0; // int32
    public const nint m_nHeroesHit = 0x5C4; // int32
    public const nint m_bIsReturning = 0x5C8; // bool
    public const nint m_hAncestralSpirit = 0x5CC; // CHandle< C_BaseEntity >
    public const nint m_nReturnFXIndex = 0x5D0; // ParticleIndex_t
    public const nint m_strMoveSpiritSwapAbility = 0x5D8; // CUtlString
}

public static class C_DOTA_Ability_Elder_Titan_EchoStomp {
    public const nint m_nFXIndexTitan = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndexSpirit = 0x5B4; // ParticleIndex_t
    public const nint m_nFXIndexTitanB = 0x5B8; // ParticleIndex_t
    public const nint m_nFXIndexSpiritB = 0x5BC; // ParticleIndex_t
    public const nint radius = 0x5C0; // int32
    public const nint stomp_damage = 0x5C4; // int32
    public const nint sleep_duration = 0x5C8; // float32
    public const nint cast_time = 0x5CC; // float32
    public const nint m_vecStompedHeroes = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vecStompedHeroes_BuffCounted = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bStompedInvisibleHero = 0x600; // bool
}

public static class C_DOTA_Ability_EmberSpirit_Activate_FireRemnant {
    public const nint m_nProjectileID = 0x5B0; // int32
    public const nint m_vStartLocation = 0x5B4; // Vector
    public const nint m_vProjectileLocation = 0x5C0; // Vector
    public const nint m_ProjectileAngles = 0x5CC; // QAngle
    public const nint m_hRemnantToKill = 0x5D8; // CHandle< C_BaseEntity >
    public const nint m_bProjectileStarted = 0x5DC; // bool
    public const nint hAlreadyHitList = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_EmberSpirit_FireRemnant {
    public const nint m_vRemnantData = 0x5B0; // CUtlVector< RemnantData_t >
}

public static class C_DOTA_Ability_EmberSpirit_SleightOfFist {
    public const nint m_vCastLoc = 0x5B0; // Vector
    public const nint m_nHeroesKilled = 0x5BC; // int32
    public const nint m_hAttackEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXMarkerIndex = 0x5D8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Enchantress_Little_Friends {
    public const nint duration = 0x5B0; // float32
    public const nint radius = 0x5B4; // int32
}

public static class C_DOTA_Ability_Enigma_Malefice {
    public const nint tick_rate = 0x5B0; // float32
    public const nint stun_instances = 0x5B4; // int32
    public const nint m_flDuration = 0x5B8; // float32
}

public static class C_DOTA_Ability_EnragedWildkin_Tornado {
    public const nint m_hTornado = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_hNeutralTarget = 0x5B4; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_FacelessVoid_TimeWalk {
    public const nint speed = 0x5B0; // int32
    public const nint range = 0x5B4; // int32
    public const nint radius = 0x5B8; // int32
}

public static class C_DOTA_Ability_FacelessVoid_TimeWalk_Reverse {
    public const nint speed = 0x5B0; // int32
}

public static class C_DOTA_Ability_Frostivus2018_Huskar_Life_Break {
    public const nint m_vProjectileLocation = 0x5B0; // Vector
    public const nint m_hTarget = 0x5BC; // CHandle< C_BaseEntity >
    public const nint m_bInterrupted = 0x5C0; // bool
    public const nint max_damage = 0x5C4; // int32
}

public static class C_DOTA_Ability_Frostivus2018_Magnataur_Skewer {
    public const nint skewer_radius = 0x5B0; // int32
    public const nint skewer_speed = 0x5B4; // int32
    public const nint range = 0x5B8; // int32
    public const nint tree_radius = 0x5BC; // int32
    public const nint m_nTargetsHit = 0x5C0; // int32
}

public static class C_DOTA_Ability_Frostivus2018_Puck_DreamCoil {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Frostivus2018_Rubick_GhostShip {
    public const nint buff_duration = 0x5B0; // float32
    public const nint stun_duration = 0x5B4; // float32
    public const nint ghostship_width = 0x5B8; // int32
    public const nint ghostship_speed = 0x5BC; // int32
    public const nint ghostship_distance = 0x5C0; // int32
    public const nint m_vFinalDestination = 0x5C4; // Vector
    public const nint m_vStartingPoint = 0x5D0; // Vector
}

public static class C_DOTA_Ability_Frostivus2018_TrollWarlord_BattleTrance {
    public const nint trance_duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Frostivus2018_Windrunner_Shackleshot {
    public const nint shackle_count = 0x5B0; // int32
    public const nint m_vArrowStartPos = 0x5B4; // Vector
    public const nint m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
    public const nint m_hEntitiesAffected = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Furion_Sprout {
    public const nint m_iShardCount = 0x5B0; // int32
}

public static class C_DOTA_Ability_Furion_Teleportation {
    public const nint m_nFXIndexStart = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndexEnd = 0x5B4; // ParticleIndex_t
    public const nint m_nFXIndexEndTeam = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Greevil_Miniboss_Blue_IceVortex {
    public const nint vision_aoe = 0x5B0; // int32
}

public static class C_DOTA_Ability_Greevil_Miniboss_Purple_VenomousGale {
    public const nint duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Hoodwink_AcornShot {
    public const nint m_nAcornTree = 0x5B0; // uint32
    public const nint projectile_speed = 0x5B4; // float32
    public const nint bounce_delay = 0x5B8; // float32
    public const nint bounce_range = 0x5BC; // int32
    public const nint bounce_count = 0x5C0; // int32
    public const nint m_bIsAltCastState = 0x5C4; // bool
}

public static class C_DOTA_Ability_Hoodwink_Bushwhack {
    public const nint trap_radius = 0x5B0; // int32
    public const nint m_nProjectileHandle = 0x5B4; // int32
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Hoodwink_HuntersBoomerang {
    public const nint radius = 0x5B0; // int32
    public const nint speed = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
    public const nint mark_duration = 0x5BC; // float32
    public const nint m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
    public const nint m_vecHitEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Hoodwink_Sharpshooter {
    public const nint max_charge_time = 0x5B0; // float32
    public const nint m_vStartPos = 0x5B4; // Vector
    public const nint m_nFXIndex = 0x5C0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Huskar_Life_Break {
    public const nint m_vProjectileLocation = 0x5B0; // Vector
    public const nint m_hTarget = 0x5BC; // CHandle< C_BaseEntity >
    public const nint m_bInterrupted = 0x5C0; // bool
}

public static class C_DOTA_Ability_IceShaman_IncendiaryBomb {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Invoker_ChaosMeteor {
    public const nint area_of_effect = 0x5C0; // int32
    public const nint damage_interval = 0x5C4; // float32
    public const nint vision_distance = 0x5C8; // int32
    public const nint end_vision_duration = 0x5CC; // float32
    public const nint main_damage = 0x5D0; // float32
    public const nint burn_duration = 0x5D4; // float32
    public const nint burn_dps = 0x5D8; // float32
}

public static class C_DOTA_Ability_Invoker_DeafeningBlast {
    public const nint end_vision_duration = 0x5C0; // float32
    public const nint damage = 0x5C4; // float32
    public const nint knockback_duration = 0x5C8; // float32
    public const nint disarm_duration = 0x5CC; // float32
}

public static class C_DOTA_Ability_Invoker_Invoke {
    public const nint max_invoked_spells = 0x5B0; // int32
}

public static class C_DOTA_Ability_Invoker_Tornado {
    public const nint vision_distance = 0x5C0; // int32
    public const nint end_vision_duration = 0x5C4; // float32
    public const nint lift_duration = 0x5C8; // float32
    public const nint base_damage = 0x5CC; // float32
    public const nint quas_damage = 0x5D0; // float32
    public const nint wex_damage = 0x5D4; // float32
}

public static class C_DOTA_Ability_Juggernaut_BladeFury {
    public const nint blade_fury_damage_per_tick = 0x5B0; // int32
}

public static class C_DOTA_Ability_JungleSpirit_Volcano_Eruption {
    public const nint m_iProjectile = 0x5B8; // int32
    public const nint primary_explosion_radius = 0x5BC; // int32
    public const nint secondary_explosion_radius = 0x5C0; // int32
    public const nint split_radius = 0x5C4; // int32
    public const nint szProjectileFXName = 0x5C8; // char*
    public const nint szGroundMarkerFXName = 0x5D0; // char*
}

public static class C_DOTA_Ability_KeeperOfTheLight_Illuminate {
    public const nint m_fStartTime = 0x5B0; // GameTime_t
    public const nint m_iProjectile = 0x5B4; // int32
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x5BC; // ParticleIndex_t
    public const nint m_vPos = 0x5C0; // Vector
    public const nint total_damage = 0x5CC; // int32
    public const nint m_bStarted = 0x5D0; // bool
}

public static class C_DOTA_Ability_KeeperOfTheLight_SpiritFormIlluminate {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    public const nint max_channel_time = 0x5B4; // float32
    public const nint total_damage = 0x5B8; // int32
    public const nint m_fPower = 0x5BC; // float32
    public const nint m_fStartTime = 0x5C0; // GameTime_t
    public const nint m_nFXIndex = 0x5C4; // ParticleIndex_t
}

public static class C_DOTA_Ability_Kunkka_GhostShip {
    public const nint buff_duration = 0x5B0; // float32
    public const nint stun_duration = 0x5B4; // float32
    public const nint ghostship_width = 0x5B8; // int32
    public const nint ghostship_width_scepter = 0x5BC; // int32
    public const nint m_vFinalDestination = 0x5C0; // Vector
    public const nint m_vStartingPoint = 0x5CC; // Vector
}

public static class C_DOTA_Ability_Kunkka_Tidal_Wave {
    public const nint hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_vStart = 0x5C8; // Vector
}

public static class C_DOTA_Ability_Kunkka_XMarksTheSpot {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Lich_ChainFrost {
    public const nint jump_range = 0x5B0; // int32
    public const nint jumps = 0x5B4; // int32
    public const nint slow_duration = 0x5B8; // float32
    public const nint vision_radius = 0x5BC; // int32
    public const nint projectile_speed = 0x5C0; // int32
    public const nint initial_projectile_speed = 0x5C4; // int32
}

public static class C_DOTA_Ability_Lich_Ice_Spire {
    public const nint aura_radius = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
}

public static class C_DOTA_Ability_Lich_Sinister_Gaze {
    public const nint m_flLongestGazeDuration = 0x5B0; // float32
    public const nint m_hAffectedEntities = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Lina_DragonSlave {
    public const nint dragon_slave_distance = 0x5B0; // int32
    public const nint dragon_slave_burn_duration = 0x5B4; // float32
    public const nint m_flDamage = 0x5B8; // float32
}

public static class C_DOTA_Ability_Lina_LagunaBlade {
    public const nint m_iDamage = 0x5B0; // int32
}

public static class C_DOTA_Ability_Lion_FingerOfDeath {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Lion_Impale {
    public const nint width = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
    public const nint speed = 0x5B8; // int32
    public const nint length_buffer = 0x5BC; // float32
    public const nint range = 0x5C0; // float32
    public const nint m_iDefaultCastRange = 0x5C4; // int32
    public const nint pierces_immunity = 0x5C8; // int32
    public const nint m_hHitEntities = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Lion_ManaDrain {
    public const nint m_Victims = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_LoneDruid_Rabid {
    public const nint rabid_duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_LoneDruid_SpiritBear {
    public const nint m_bLevelChanged = 0x5B0; // bool
    public const nint m_hBear = 0x5B4; // CHandle< C_BaseEntity >
    public const nint m_hPreBear = 0x5B8; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_LoneDruid_SpiritBear_Return {
    public const nint m_nFXOrigin = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_LoneDruid_TrueForm_BattleCry {
    public const nint cry_duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Luna_MoonGlaive {
    public const nint m_iAttackIndex = 0x5B0; // int32
    public const nint m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfo >
}

public static class C_DOTA_Ability_Lycan_SummonWolves {
    public const nint szUnitName = 0x5B0; // char[260]
    public const nint wolf_index = 0x6B4; // int32
    public const nint wolf_duration = 0x6B8; // float32
    public const nint m_hExistingUnits = 0x6C0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Magnataur_ReversePolarity {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vPullLocation = 0x5B4; // Vector
}

public static class C_DOTA_Ability_Magnataur_Shockwave {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint hAlreadyHitList = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint hAlreadyHitListReturning = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Magnataur_Skewer {
    public const nint skewer_radius = 0x5B0; // int32
    public const nint skewer_speed = 0x5B4; // int32
    public const nint range = 0x5B8; // int32
    public const nint tree_radius = 0x5BC; // int32
    public const nint m_nTargetsHit = 0x5C0; // int32
}

public static class C_DOTA_Ability_Medusa_MysticSnake {
    public const nint radius = 0x5B0; // int32
    public const nint snake_jumps = 0x5B4; // int32
    public const nint snake_damage = 0x5B8; // int32
    public const nint snake_damage_pct = 0x5BC; // int32
    public const nint snake_mana_steal = 0x5C0; // int32
    public const nint snake_scale = 0x5C4; // int32
    public const nint snake_speed_scale = 0x5C8; // int32
    public const nint initial_speed = 0x5CC; // int32
    public const nint return_speed = 0x5D0; // int32
    public const nint jump_delay = 0x5D4; // float32
    public const nint slow_duration = 0x5D8; // float32
}

public static class C_DOTA_Ability_Meepo_DividedWeStand {
    public const nint m_nWhichDividedWeStand = 0x5B0; // int32
    public const nint m_nNumDividedWeStand = 0x5B4; // int32
    public const nint m_entPrimeDividedWeStand = 0x5B8; // CHandle< C_DOTA_Ability_Meepo_DividedWeStand >
    public const nint m_entNextDividedWeStand = 0x5BC; // CHandle< C_DOTA_Ability_Meepo_DividedWeStand >
}

public static class C_DOTA_Ability_Meepo_MegaMeepo {
    public const nint hPreviousMeepo = 0x5B0; // CHandle< C_BaseEntity >
    public const nint hMegameepoFrame = 0x5B4; // CHandle< C_BaseEntity >
    public const nint hListOfMeepos = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bHasSwappedAbilities = 0x5D0; // bool
}

public static class C_DOTA_Ability_Meepo_Megameepo_Fling {
    public const nint vision_radius = 0x5B0; // int32
}

public static class C_DOTA_Ability_Mirana_Arrow {
    public const nint scepter_radius = 0x5B0; // int32
    public const nint m_vStartPos = 0x5B4; // Vector
    public const nint m_nFXIndex = 0x5C0; // ParticleIndex_t
    public const nint hAlreadyHitList = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >[2]
    public const nint hStarfallList = 0x5F8; // CUtlVector< CHandle< C_BaseEntity > >[2]
    public const nint m_nActiveArrow = 0x628; // int32
}

public static class C_DOTA_Ability_Mirana_Leap {
    public const nint m_bIsVectorTargeted = 0x5B0; // bool
    public const nint m_vEndpoint = 0x5B4; // Vector
    public const nint m_vLandPosition = 0x5C0; // Vector
}

public static class C_DOTA_Ability_Mirana_Starfall {
    public const nint damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_MonkeyKing_Boundless_Strike {
    public const nint strike_cast_range = 0x5B0; // int32
    public const nint strike_radius = 0x5B4; // int32
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
    public const nint m_bIsAltCastState = 0x5BC; // bool
}

public static class C_DOTA_Ability_MonkeyKing_FurArmy {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x5B4; // ParticleIndex_t
    public const nint num_first_soldiers = 0x5B8; // int32
    public const nint num_second_soldiers = 0x5BC; // int32
    public const nint m_bCreateMonkeys = 0x5C0; // bool
    public const nint m_flNextCreationTime = 0x5C4; // GameTime_t
    public const nint m_flScepterTime = 0x5C8; // GameTime_t
    public const nint m_vecSoldiers = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_MonkeyKing_Spring {
    public const nint m_vPos = 0x5B0; // Vector
    public const nint m_fStartChannelTime = 0x5BC; // GameTime_t
    public const nint m_hThinker = 0x5C0; // CHandle< C_BaseEntity >
    public const nint m_nFxIndex = 0x5C4; // ParticleIndex_t
    public const nint m_nRefCount = 0x5C8; // int32
}

public static class C_DOTA_Ability_MonkeyKing_TreeDance {
    public const nint perched_jump_distance = 0x5B0; // int32
    public const nint ground_jump_distance = 0x5B4; // int32
}

public static class C_DOTA_Ability_Morphling_MorphReplicate {
    public const nint m_flOldHealthPct = 0x5B0; // float32
    public const nint m_flOldManaPct = 0x5B4; // float32
}

public static class C_DOTA_Ability_Morphling_Replicate {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_hScepterIllusion = 0x5B4; // CHandle< C_BaseEntity >
    public const nint m_bIsAltCastState = 0x5B8; // bool
}

public static class C_DOTA_Ability_Morty_Hop {
    public const nint max_distance = 0x5B0; // float32
    public const nint m_vTarget = 0x5B4; // Vector
    public const nint m_iTrackerProjectile = 0x5C0; // int32
}

public static class C_DOTA_Ability_Muerta_DeadShot {
    public const nint radius = 0x5B0; // int32
    public const nint ricochet_radius_start = 0x5B4; // int32
    public const nint ricochet_radius_end = 0x5B8; // int32
}

public static class C_DOTA_Ability_Muerta_PartingShot {
    public const nint m_hAbilitySoulEntity = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_hTarget = 0x5B4; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_NagaSiren_MirrorImage {
    public const nint m_hIllusions = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Naga_Siren_Reel_In {
    public const nint affectedEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Necrolyte_Death_Pulse {
    public const nint m_bIsDeathSeekerCast = 0x5B8; // bool
}

public static class C_DOTA_Ability_Nevermore_Requiem {
    public const nint requiem_line_width_start = 0x5B0; // int32
    public const nint requiem_line_width_end = 0x5B4; // int32
    public const nint m_nCachedSouls = 0x5B8; // int32
    public const nint m_nFXIndex = 0x5BC; // ParticleIndex_t
    public const nint m_nKilleater_nLines = 0x5C0; // int32
    public const nint m_vecHeroesReqd = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Nevermore_Shadowraze {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x5B4; // ParticleIndex_t
}

public static class C_DOTA_Ability_Nian_Apocalypse {
    public const nint area_of_effect = 0x5B0; // int32
    public const nint m_nfxIndex_roar = 0x5B4; // ParticleIndex_t
    public const nint fire_interval = 0x5B8; // float32
    public const nint delay = 0x5BC; // float32
    public const nint target_range = 0x5C0; // float32
    public const nint m_ctTimer = 0x5C8; // CountdownTimer
    public const nint m_flTiming = 0x5E0; // float32
}

public static class C_DOTA_Ability_Nian_Hurricane {
    public const nint min_distance = 0x5B0; // int32
    public const nint max_distance = 0x5B4; // int32
    public const nint torrent_count = 0x5B8; // int32
    public const nint fire_interval = 0x5BC; // float32
    public const nint pull_switch_interval = 0x5C0; // float32
    public const nint game_time_wind_activation = 0x5C4; // float32
    public const nint m_ctPullTimer = 0x5C8; // CountdownTimer
    public const nint m_ctTimer = 0x5E0; // CountdownTimer
    public const nint m_flTiming = 0x5F8; // float32
    public const nint m_bForward = 0x5FC; // bool
    public const nint m_bUseWind = 0x5FD; // bool
    public const nint m_nFXIndex = 0x600; // ParticleIndex_t
    public const nint m_nfxIndex_roar = 0x604; // ParticleIndex_t
}

public static class C_DOTA_Ability_Nian_Roar {
    public const nint base_projectiles = 0x5B0; // int32
    public const nint max_projectiles = 0x5B4; // int32
    public const nint projectile_step = 0x5B8; // int32
    public const nint base_speed = 0x5BC; // int32
    public const nint speed_step = 0x5C0; // int32
    public const nint initial_radius = 0x5C4; // int32
    public const nint end_radius = 0x5C8; // int32
    public const nint damage = 0x5CC; // int32
    public const nint base_interval = 0x5D0; // float32
    public const nint interval_step = 0x5D4; // float32
    public const nint m_nCastCount = 0x5D8; // int32
    public const nint m_nProjectiles = 0x5DC; // int32
    public const nint m_nWaveCount = 0x5E0; // int32
    public const nint m_ctTimer = 0x5E8; // CountdownTimer
    public const nint m_flTiming = 0x600; // float32
    public const nint m_bScriptRoar = 0x604; // bool
}

public static class C_DOTA_Ability_Nian_Waterball {
    public const nint m_ctTimer = 0x5B0; // CountdownTimer
    public const nint m_hEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Nian_Whirlpool {
    public const nint pool_count = 0x5B0; // int32
    public const nint min_distance = 0x5B4; // int32
    public const nint max_distance = 0x5B8; // int32
    public const nint pull_radius = 0x5BC; // int32
    public const nint fire_interval = 0x5C0; // float32
    public const nint m_ctTimer = 0x5C8; // CountdownTimer
    public const nint m_flTiming = 0x5E0; // float32
}

public static class C_DOTA_Ability_Nyx_Assassin_Impale {
    public const nint hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint width = 0x5C8; // int32
    public const nint duration = 0x5CC; // float32
    public const nint length = 0x5D0; // int32
    public const nint speed = 0x5D4; // int32
    public const nint vOriginalCast = 0x5D8; // Vector
}

public static class C_DOTA_Ability_Obsidian_Destroyer_AstralImprisonment {
    public const nint m_hImprisonedUnit = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_OgreBruiser_OgreSmash {
    public const nint radius = 0x5B0; // int32
    public const nint hero_stun_duration = 0x5B4; // float32
    public const nint damage = 0x5B8; // int32
    public const nint damage_pct = 0x5BC; // float32
    public const nint flCooldown = 0x5C0; // GameTime_t
}

public static class C_DOTA_Ability_Ogre_Magi_Fireblast {
    public const nint m_nMostRecentMulticastCount = 0x5B0; // int32
}

public static class C_DOTA_Ability_Ogre_Magi_Ignite {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nMostRecentMulticastCount = 0x5B4; // int32
}

public static class C_DOTA_Ability_Ogre_Magi_Unrefined_Fireblast {
    public const nint m_nMostRecentMulticastCount = 0x5B8; // int32
}

public static class C_DOTA_Ability_Oracle_FatesEdict {
    public const nint m_bTargetIsAlly = 0x5B0; // bool
}

public static class C_DOTA_Ability_Oracle_FortunesEnd {
    public const nint damage = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint bolt_speed = 0x5B8; // int32
    public const nint maximum_purge_duration = 0x5BC; // float32
    public const nint minimum_purge_duration = 0x5C0; // float32
    public const nint m_flStartTime = 0x5C4; // GameTime_t
    public const nint m_flDuration = 0x5C8; // float32
    public const nint m_flDamage = 0x5CC; // float32
    public const nint m_bAbsorbed = 0x5D0; // bool
    public const nint m_hTarget = 0x5D4; // CHandle< C_BaseEntity >
    public const nint m_nFXIndex = 0x5D8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Oracle_PurifyingFlames {
    public const nint m_bTargetIsAlly = 0x5B0; // bool
    public const nint m_hRecentTarget = 0x5B4; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Pangolier_Gyroshell {
    public const nint m_nFxIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Pangolier_Rollup {
    public const nint m_nFxIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Pangolier_Swashbuckle {
    public const nint dash_speed = 0x5B0; // int32
    public const nint start_radius = 0x5B4; // int32
    public const nint end_radius = 0x5B8; // int32
    public const nint range = 0x5BC; // int32
    public const nint damage = 0x5C0; // int32
}

public static class C_DOTA_Ability_Phoenix_IcarusDive {
    public const nint hp_cost_perc = 0x5B0; // int32
}

public static class C_DOTA_Ability_Phoenix_LaunchFireSpirit {
    public const nint spirit_speed = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
    public const nint radius = 0x5B8; // int32
    public const nint m_nFXIndex = 0x5BC; // ParticleIndex_t
}

public static class C_DOTA_Ability_PineCone_AcornShot {
    public const nint m_nAcornTree = 0x5B0; // uint32
    public const nint projectile_speed = 0x5B4; // float32
    public const nint bounce_delay = 0x5B8; // float32
    public const nint bounce_range = 0x5BC; // int32
    public const nint bounce_count = 0x5C0; // int32
}

public static class C_DOTA_Ability_PrimalBeast_Onslaught {
    public const nint max_charge_time = 0x5B0; // float32
    public const nint knockback_distance = 0x5B4; // float32
    public const nint knockback_damage = 0x5B8; // int32
    public const nint collision_radius = 0x5BC; // int32
    public const nint max_distance = 0x5C0; // int32
    public const nint m_vStartPos = 0x5C4; // Vector
    public const nint m_nFXIndex = 0x5D0; // ParticleIndex_t
    public const nint m_nProjectileID = 0x5D4; // int32
}

public static class C_DOTA_Ability_PrimalBeast_Pulverize {
    public const nint m_hTarget = 0x5B0; // C_DOTA_BaseNPC*
}

public static class C_DOTA_Ability_PrimalBeast_Uproar {
    public const nint m_iUproarStatus = 0x5B0; // int32
    public const nint m_bUpdateIcons = 0x5B4; // bool
}

public static class C_DOTA_Ability_Primal_Companion {
    public const nint m_hCurrentBrewling = 0x5B0; // CHandle< C_DOTA_BaseNPC >
}

public static class C_DOTA_Ability_Puck_DreamCoil {
    public const nint m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Puck_IllusoryOrb {
    public const nint m_iProjectile = 0x5B0; // int32
    public const nint m_ViewerTimer = 0x5B8; // CountdownTimer
    public const nint orb_vision = 0x5D0; // int32
    public const nint vision_duration = 0x5D4; // float32
    public const nint damage = 0x5D8; // int32
}

public static class C_DOTA_Ability_Pudge_FleshHeap {
    public const nint m_iKills = 0x5B0; // int32
}

public static class C_DOTA_Ability_Pudge_Rot {
    public const nint rot_damage = 0x5B0; // int32
    public const nint m_flLastRotTime = 0x5B4; // GameTime_t
}

public static class C_DOTA_Ability_Pugna_LifeDrain {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Pugna_NetherWard {
    public const nint vecAbilitiesUsed = 0x5B0; // CUtlVector< sAbilityHistory >
}

public static class C_DOTA_Ability_QueenOfPain_ScreamOfPain {
    public const nint damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_QueenOfPain_ShadowStrike {
    public const nint projectile_speed = 0x5B0; // Vector
}

public static class C_DOTA_Ability_QueenOfPain_SonicWave {
    public const nint m_fStartTime = 0x5B0; // GameTime_t
    public const nint m_fTotalTime = 0x5B4; // float32
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
    public const nint starting_aoe = 0x5BC; // int32
    public const nint final_aoe = 0x5C0; // int32
}

public static class C_DOTA_Ability_Rattletrap_Hookshot {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x5B4; // Vector
    public const nint m_bRetract = 0x5C0; // bool
}

public static class C_DOTA_Ability_Rattletrap_RocketFlare {
    public const nint m_vecEnemyHeroesInFog = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Razor_StaticLink {
    public const nint m_iLinkIndex = 0x5B0; // int32
    public const nint m_ViewerTimer = 0x5B8; // CountdownTimer
    public const nint vision_duration = 0x5D0; // float32
    public const nint m_bIsAltCastState = 0x5D4; // bool
}

public static class C_DOTA_Ability_Roshan_Teleport {
    public const nint m_nFXIndexStart = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndexEnd = 0x5B4; // ParticleIndex_t
    public const nint m_nFXIndexEndTeam = 0x5B8; // ParticleIndex_t
}

public static class C_DOTA_Ability_Rubick_SpellSteal {
    public const nint m_ActivityModifier = 0x5B0; // char[256]
    public const nint m_fStolenCastPoint = 0x6B0; // float32
    public const nint m_hStealTarget = 0x6B4; // CHandle< C_BaseEntity >
    public const nint m_hStealAbility = 0x6B8; // CHandle< C_DOTABaseAbility >
}

public static class C_DOTA_Ability_Rubick_Telekinesis {
    public const nint m_vStartLocation = 0x5B0; // Vector
    public const nint m_vLandLocation = 0x5BC; // Vector
    public const nint m_flStartTime = 0x5C8; // GameTime_t
    public const nint m_pTarget = 0x5D0; // C_DOTA_BaseNPC*
}

public static class C_DOTA_Ability_SandKing_BurrowStrike {
    public const nint burrow_width = 0x5B0; // int32
    public const nint burrow_speed = 0x5B4; // int32
    public const nint burrow_speed_scepter = 0x5B8; // int32
    public const nint burrow_anim_time = 0x5BC; // float32
}

public static class C_DOTA_Ability_SandKing_Epicenter {
    public const nint m_nFXEpicenterIndex = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndex = 0x5B4; // ParticleIndex_t
}

public static class C_DOTA_Ability_SatyrSoulstealer_ManaBurn {
    public const nint hNeutralTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_flTimeBuffer = 0x5B4; // GameTime_t
}

public static class C_DOTA_Ability_SatyrTrickster_Purge {
    public const nint m_flTargetTime = 0x5B0; // GameTime_t
}

public static class C_DOTA_Ability_ShadowShaman_Serpentine {
    public const nint length = 0x5B0; // int32
    public const nint count = 0x5B4; // int32
}

public static class C_DOTA_Ability_ShadowShaman_Shackles {
    public const nint m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint nShackleFXIndex = 0x5B4; // ParticleIndex_t
    public const nint hWardList = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Shadow_Demon_Demonic_Cleanse {
    public const nint m_bGrantedScepterCharges = 0x5B0; // bool
}

public static class C_DOTA_Ability_Shadow_Demon_Demonic_Purge {
    public const nint m_bGrantedScepterCharges = 0x5B0; // bool
}

public static class C_DOTA_Ability_Shadow_Demon_Disruption {
    public const nint m_hDisruptedUnit = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Shredder_Chakram {
    public const nint radius = 0x5B0; // float32
    public const nint speed = 0x5B4; // float32
    public const nint pass_slow_duration = 0x5B8; // float32
    public const nint pass_damage = 0x5BC; // int32
    public const nint m_vEndLocation = 0x5C0; // Vector
    public const nint m_fZCoord = 0x5CC; // float32
    public const nint m_bIsReturning = 0x5D0; // bool
    public const nint m_nFXIndex = 0x5D4; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x5D8; // ParticleIndex_t
    public const nint m_nFXIndexC = 0x5DC; // ParticleIndex_t
    public const nint m_nProjectileIndex = 0x5E0; // int32
    public const nint m_hThinker = 0x5E4; // CHandle< C_BaseEntity >
    public const nint m_hReturnHits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Shredder_TimberChain {
    public const nint chain_radius = 0x5B0; // int32
    public const nint m_nFXIndex = 0x5B4; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x5B8; // Vector
    public const nint m_bRetract = 0x5C4; // bool
}

public static class C_DOTA_Ability_Shredder_WhirlingDeath {
    public const nint whirling_radius = 0x5B0; // int32
    public const nint whirling_damage = 0x5B4; // int32
    public const nint whirling_tick = 0x5B8; // float32
    public const nint duration = 0x5BC; // float32
    public const nint tree_damage_scale = 0x5C0; // int32
}

public static class C_DOTA_Ability_Silencer_GlaivesOfWisdom {
    public const nint m_iAttackIndex = 0x5B0; // int32
    public const nint m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfoSilencer >
}

public static class C_DOTA_Ability_SkeletonKing_Reincarnation {
    public const nint m_bShouldUseResources = 0x5B0; // bool
}

public static class C_DOTA_Ability_Skywrath_Mage_Arcane_Bolt {
    public const nint bolt_vision = 0x5B0; // int32
    public const nint vision_duration = 0x5B4; // float32
    public const nint m_flDamage = 0x5B8; // float32
    public const nint m_nFXIndex = 0x5BC; // int32
}

public static class C_DOTA_Ability_Skywrath_Mage_Concussive_Shot {
    public const nint speed = 0x5B0; // int32
    public const nint slow_radius = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
    public const nint shot_vision = 0x5BC; // int32
    public const nint slow_duration = 0x5C0; // float32
    public const nint vision_duration = 0x5C4; // float32
}

public static class C_DOTA_Ability_Sniper_Assassinate {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_iIndex = 0x5B4; // ParticleIndex_t
    public const nint cooldown_reduction_on_kill = 0x5B8; // float32
}

public static class C_DOTA_Ability_Sniper_Concussive_Grenade {
    public const nint m_iProjectile = 0x5B0; // int32
}

public static class C_DOTA_Ability_Spectre_SpectralDagger {
    public const nint dagger_path_duration = 0x5B0; // float32
    public const nint hero_path_duration = 0x5B4; // float32
    public const nint m_fCreateInterval = 0x5B8; // float32
    public const nint m_fLastCreate = 0x5BC; // GameTime_t
    public const nint m_vecLastPosition = 0x5C0; // Vector
    public const nint m_bIsTrackingProjectile = 0x5CC; // bool
    public const nint m_hTrackingProjectileHits = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hUnitsHit = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_hTrackingTarget = 0x600; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_SpiritBreaker_ChargeOfDarkness {
    public const nint m_vChargeStartPos = 0x5B0; // Vector
}

public static class C_DOTA_Ability_StormSpirit_BallLightning {
    public const nint m_bHasAutoRemnantTalent = 0x5B0; // bool
    public const nint m_fAutoRemnantInterval = 0x5B4; // float32
    public const nint ball_lightning_initial_mana_base = 0x5B8; // int32
    public const nint ball_lightning_initial_mana_percentage = 0x5BC; // float32
    public const nint ball_lightning_travel_cost_base = 0x5C0; // int32
    public const nint ball_lightning_travel_cost_percent = 0x5C4; // float32
    public const nint m_iProjectileID = 0x5C8; // int32
    public const nint m_vStartLocation = 0x5CC; // Vector
    public const nint m_vProjectileLocation = 0x5D8; // Vector
    public const nint m_fDistanceAccumulator = 0x5E4; // float32
    public const nint m_fTalentDistanceAccumulator = 0x5E8; // float32
    public const nint scepter_remnant_interval = 0x5EC; // int32
}

public static class C_DOTA_Ability_StormSpirit_Overload {
    public const nint m_iAttackIndex = 0x5B0; // int32
    public const nint m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfoStorm >
}

public static class C_DOTA_Ability_StormSpirit_StaticRemnant {
    public const nint m_vecCastPos = 0x5B0; // Vector
}

public static class C_DOTA_Ability_Sven_StormBolt {
    public const nint vision_radius = 0x5B0; // int32
    public const nint m_bIsAltCastState = 0x5B4; // bool
}

public static class C_DOTA_Ability_Techies_Suicide {
    public const nint m_unSuicideKills = 0x5B0; // uint32
}

public static class C_DOTA_Ability_TemplarAssassin_Trap_Teleport {
    public const nint m_hTrap = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Terrorblade_Reflection {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Tidehunter_ArmOfTheDeep {
    public const nint hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint duration = 0x5C8; // float32
    public const nint speed = 0x5CC; // int32
    public const nint damage = 0x5D0; // float32
    public const nint range = 0x5D4; // float32
}

public static class C_DOTA_Ability_Tidehunter_DeadInTheWater {
    public const nint radius = 0x5B0; // int32
    public const nint duration = 0x5B4; // float32
    public const nint chain_length = 0x5B8; // int32
}

public static class C_DOTA_Ability_Tidehunter_Gush {
    public const nint gush_damage = 0x5B0; // int32
}

public static class C_DOTA_Ability_Tidehunter_Ravage {
    public const nint m_hEntsHit = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bAwardedKillEater = 0x5C8; // bool
    public const nint duration = 0x5CC; // float32
}

public static class C_DOTA_Ability_Tinker_HeatSeekingMissile {
    public const nint m_nTargetsKilled = 0x5B0; // int32
}

public static class C_DOTA_Ability_Tinker_Keen_Teleport {
    public const nint m_hTeleportTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_nFXOrigin = 0x5B4; // ParticleIndex_t
    public const nint m_nFXDestination = 0x5B8; // ParticleIndex_t
    public const nint m_vDestination = 0x5BC; // Vector
    public const nint m_iMinDistance = 0x5C8; // int32
    public const nint m_flBaseTeleportTime = 0x5CC; // float32
    public const nint m_flExtraTeleportTime = 0x5D0; // float32
}

public static class C_DOTA_Ability_Tinker_Laser {
    public const nint m_vProjectileLocation = 0x5B0; // Vector
    public const nint bBlocked = 0x5BC; // bool
    public const nint m_hHitEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Tinker_MarchOfTheMachines {
    public const nint splash_radius = 0x5B0; // int32
    public const nint damage = 0x5B4; // int32
}

public static class C_DOTA_Ability_Tinker_Rearm {
    public const nint m_vProjectileLocation = 0x5B0; // Vector
}

public static class C_DOTA_Ability_Tiny_Avalanche {
    public const nint m_vTargetLoc = 0x5B0; // Vector
}

public static class C_DOTA_Ability_Tiny_Tree_Grab {
    public const nint m_hStolenTree = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_TrollWarlord_BattleTrance {
    public const nint trance_duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_TrollWarlord_BerserkersRage {
    public const nint m_iOriginalAttackCapabilities = 0x5B0; // int32
}

public static class C_DOTA_Ability_TrollWarlord_WhirlingAxes_Ranged {
    public const nint m_vStartPos = 0x5B0; // Vector
    public const nint m_iArrowProjectile = 0x5BC; // int32
    public const nint axe_width = 0x5C0; // int32
    public const nint axe_speed = 0x5C4; // float32
    public const nint axe_range = 0x5C8; // float32
    public const nint axe_spread = 0x5CC; // int32
    public const nint axe_count = 0x5D0; // int32
    public const nint m_hHitUnits = 0x5D8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_TrollWarlord_Whirling_Axes_Melee {
    public const nint m_hAxes = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nAxeIdx = 0x5C8; // int32
}

public static class C_DOTA_Ability_Tusk_IceShards {
    public const nint m_iProjectile = 0x5B0; // int32
    public const nint shard_width = 0x5B4; // int32
    public const nint shard_damage = 0x5B8; // int32
    public const nint shard_count = 0x5BC; // int32
    public const nint shard_speed = 0x5C0; // float32
    public const nint shard_duration = 0x5C4; // float32
    public const nint shard_angle_step = 0x5C8; // float32
    public const nint shard_distance = 0x5CC; // int32
    public const nint m_vSpawnOrigin = 0x5D0; // Vector
    public const nint m_vDirection = 0x5DC; // Vector
    public const nint m_vecShards = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Tusk_Snowball {
    public const nint snowball_windup_radius = 0x5B0; // int32
    public const nint snowball_radius = 0x5B4; // int32
    public const nint snowball_grow_rate = 0x5B8; // int32
    public const nint snowball_damage = 0x5BC; // int32
    public const nint snowball_damage_bonus = 0x5C0; // int32
    public const nint stun_duration = 0x5C4; // float32
    public const nint bonus_damage = 0x5C8; // int32
    public const nint bonus_stun = 0x5CC; // float32
    public const nint snowball_speed = 0x5D0; // int32
    public const nint snowball_speed_bonus = 0x5D4; // int32
    public const nint snowball_duration = 0x5D8; // float32
    public const nint m_vProjectileLocation = 0x5DC; // Vector
    public const nint m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nFXIndex = 0x600; // ParticleIndex_t
    public const nint ctSnowball = 0x608; // CountdownTimer
    public const nint m_bSpeakAlly = 0x620; // bool
    public const nint m_bIsExpired = 0x621; // bool
    public const nint m_bInWindup = 0x622; // bool
    public const nint m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
    public const nint m_nContainedValidUnits = 0x628; // int32
    public const nint m_bEndingSnowball = 0x62C; // bool
}

public static class C_DOTA_Ability_Twin_Gate_Portal_Warp {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Undying_Decay {
    public const nint decay_damage = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint decay_duration = 0x5B8; // float32
    public const nint str_steal = 0x5BC; // int32
    public const nint creep_damage_multiplier = 0x5C0; // float32
}

public static class C_DOTA_Ability_Undying_SoulRip {
    public const nint damage_per_unit = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint max_units = 0x5B8; // int32
    public const nint tombstone_heal = 0x5BC; // int32
}

public static class C_DOTA_Ability_Undying_Tombstone {
    public const nint m_vZombies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint hTombstone = 0x5C8; // CHandle< C_BaseEntity >
    public const nint radius = 0x5CC; // int32
    public const nint duration = 0x5D0; // float32
}

public static class C_DOTA_Ability_VengefulSpirit_Command_Aura {
    public const nint m_hScepterIllusion = 0x5B0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_VengefulSpirit_Nether_Swap {
    public const nint m_nFXIndex = 0x5B0; // int32
    public const nint damage = 0x5B4; // int32
    public const nint damage_reduction = 0x5B8; // float32
    public const nint damage_reduction_duration = 0x5BC; // float32
}

public static class C_DOTA_Ability_VengefulSpirit_WaveOfTerror {
    public const nint wave_width = 0x5B0; // int32
    public const nint wave_speed = 0x5B4; // float32
    public const nint m_iProjectile = 0x5B8; // int32
    public const nint vision_aoe = 0x5BC; // float32
    public const nint vision_duration = 0x5C0; // float32
    public const nint steal_pct = 0x5C4; // int32
    public const nint damage = 0x5C8; // int32
    public const nint m_nNumHeroesHit = 0x5CC; // int32
    public const nint m_ViewerTimer = 0x5D0; // CountdownTimer
}

public static class C_DOTA_Ability_Venomancer_Latent_Poison {
    public const nint projectile_speed = 0x5B0; // Vector
}

public static class C_DOTA_Ability_Venomancer_PoisonSting {
    public const nint radius = 0x5B0; // int32
}

public static class C_DOTA_Ability_Venomancer_VenomousGale {
    public const nint duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Viper_ViperStrike {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
}

public static class C_DOTA_Ability_Visage_Silent_As_The_Grave {
    public const nint invis_duration = 0x5B0; // float32
}

public static class C_DOTA_Ability_Visage_SoulAssumption {
    public const nint m_fDamage = 0x5B0; // float32
    public const nint m_nFXIndex = 0x5B4; // ParticleIndex_t
    public const nint m_iForcedStacks = 0x5B8; // int32
}

public static class C_DOTA_Ability_Visage_SummonFamiliars {
    public const nint szUnitName = 0x5B0; // char[260]
    public const nint m_hExistingUnits = 0x6B8; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Ability_Warlock_RainOfChaos {
    public const nint aoe = 0x5B0; // int32
    public const nint m_bHasScepter = 0x5B4; // bool
}

public static class C_DOTA_Ability_Warlock_Upheaval {
    public const nint m_vPosition = 0x5B0; // Vector
    public const nint aoe = 0x5BC; // float32
    public const nint slow_per_second = 0x5C0; // int32
    public const nint aspd_per_second = 0x5C4; // int32
    public const nint max_slow = 0x5C8; // int32
    public const nint damage_per_second = 0x5CC; // int32
    public const nint max_damage = 0x5D0; // int32
    public const nint damage_tick_interval = 0x5D4; // float32
    public const nint m_timer = 0x5D8; // CountdownTimer
    public const nint m_shardTimer = 0x5F0; // CountdownTimer
    public const nint duration = 0x608; // float32
    public const nint m_flElapsedTime = 0x60C; // GameTime_t
    public const nint m_flCurrentSlow = 0x610; // float32
    public const nint m_nFXIndex = 0x614; // ParticleIndex_t
    public const nint m_bTargetCast = 0x620; // bool
    public const nint m_hTarget = 0x624; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_WarpineRaider_SeedShot {
    public const nint m_iBounces = 0x5B0; // int32
    public const nint bounces = 0x5B4; // int32
}

public static class C_DOTA_Ability_Weaver_Shukuchi {
    public const nint duration = 0x5B0; // float32
    public const nint radius = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
    public const nint fade_time = 0x5BC; // float32
}

public static class C_DOTA_Ability_Weaver_TimeLapse {
    public const nint m_nNPCSpawnedID = 0x5B0; // int32
}

public static class C_DOTA_Ability_Windrunner_GaleForce {
    public const nint m_vEndpoint = 0x5B0; // Vector
    public const nint m_vFlowPosition = 0x5BC; // Vector
    public const nint duration = 0x5C8; // float32
}

public static class C_DOTA_Ability_Windrunner_Powershot {
    public const nint m_fStartTime = 0x5B8; // GameTime_t
    public const nint m_fPower = 0x5BC; // float32
    public const nint m_iProjectile = 0x5C0; // int32
    public const nint damage_reduction = 0x5C4; // float32
    public const nint arrow_width = 0x5C8; // int32
    public const nint powershot_damage = 0x5CC; // int32
    public const nint tree_width = 0x5D0; // float32
    public const nint slow = 0x5D4; // float32
    public const nint slow_duration = 0x5D8; // float32
    public const nint m_bAwardedKillEater = 0x5DC; // bool
    public const nint m_nHeroesHit = 0x5E0; // int32
    public const nint m_nFXIndex = 0x5E4; // ParticleIndex_t
}

public static class C_DOTA_Ability_Windrunner_Shackleshot {
    public const nint shackle_count = 0x5B0; // int32
    public const nint m_vArrowAvgPos = 0x5B4; // Vector
    public const nint m_vArrowStartPos = 0x5C0; // Vector
    public const nint m_vArrowStartPos2 = 0x5CC; // Vector
    public const nint m_vArrowStartPos3 = 0x5D8; // Vector
    public const nint m_hTarget = 0x5E4; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Ability_Wisp_Relocate {
    public const nint m_nFXIndexEndTeam = 0x5B0; // ParticleIndex_t
    public const nint m_nFXIndexChannel = 0x5B4; // ParticleIndex_t
    public const nint cast_delay = 0x5B8; // float32
    public const nint return_time = 0x5BC; // float32
}

public static class C_DOTA_Ability_Wisp_Spirits {
    public const nint m_SpiritDefs = 0x5B0; // CUtlVector< sSpiritDef >
    public const nint m_nWispDirection = 0x5C8; // int32
    public const nint spirit_amount = 0x5CC; // int32
}

public static class C_DOTA_Ability_Wisp_Tether {
    public const nint m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_vProjectileLocation = 0x5B4; // Vector
    public const nint m_bProjectileActive = 0x5C0; // bool
    public const nint latch_distance = 0x5C4; // int32
    public const nint m_iProjectileIndex = 0x5C8; // int32
}

public static class C_DOTA_Ability_WitchDoctor_DeathWard {
    public const nint m_hWard = 0x5B0; // CHandle< C_BaseEntity >
    public const nint m_iDamage = 0x5B4; // int32
    public const nint m_iBounceRadius = 0x5B8; // int32
    public const nint m_iProjectileSpeed = 0x5BC; // int32
    public const nint m_fWardExpireTime = 0x5C0; // GameTime_t
    public const nint m_nFXIndex = 0x5C4; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x5C8; // int32
    public const nint m_BounceInfo = 0x5D0; // CUtlVector< sBounceInfo >
}

public static class C_DOTA_Ability_WitchDoctor_ParalyzingCask {
    public const nint m_iBounces = 0x5B0; // int32
    public const nint bounces = 0x5B4; // int32
    public const nint bounce_bonus_damage = 0x5B8; // int32
}

public static class C_DOTA_Ability_Zuus_ThundergodsWrath {
    public const nint m_nFXIndex = 0x5B0; // ParticleIndex_t
    public const nint m_bZeusHasArcana = 0x5B4; // bool
}

public static class C_DOTA_AghsFort_Ability_ArcWardenBoss_SparkWraith {
    public const nint duration = 0x5B0; // float32
    public const nint activation_delay = 0x5B4; // float32
    public const nint wraith_vision_duration = 0x5B8; // float32
    public const nint wraith_vision_radius = 0x5BC; // int32
    public const nint spark_damage = 0x5C0; // int32
}

public static class C_DOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble {
    public const nint m_nNumDoubles = 0x5B0; // int32
}

public static class C_DOTA_AghsFort_Ability_Undying_Decay {
    public const nint decay_damage = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint decay_duration = 0x5B8; // float32
    public const nint str_steal = 0x5BC; // float32
    public const nint str_steal_captain_mult = 0x5C0; // float32
    public const nint str_steal_boss_mult = 0x5C4; // float32
}

public static class C_DOTA_AghsFort_Ability_Undying_SoulRip {
    public const nint damage_per_unit = 0x5B0; // int32
    public const nint radius = 0x5B4; // int32
    public const nint max_units = 0x5B8; // int32
    public const nint tombstone_heal = 0x5BC; // int32
    public const nint damage_bonus_percent = 0x5C0; // int32
}

public static class C_DOTA_AghsFort_Ability_Undying_Tombstone {
    public const nint m_vZombies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint hTombstone = 0x5C8; // CHandle< C_BaseEntity >
    public const nint duration = 0x5CC; // float32
}

public static class C_DOTA_AghsFort_Unit_Undying_Zombie {
    public const nint m_ctRespawn = 0x1770; // CountdownTimer
    public const nint m_pTombstone = 0x1788; // C_DOTA_BaseNPC*
}

public static class C_DOTA_Aghsfort_AbilityCrystalMaiden_FreezingField {
    public const nint m_nWarningFX = 0x5B0; // ParticleIndex_t
    public const nint m_nRadiusFX = 0x5B4; // ParticleIndex_t
}

public static class C_DOTA_Aghsfort_Ability_Creature_Magnus_Push_Skewer {
    public const nint skewer_radius = 0x5B0; // int32
    public const nint skewer_speed = 0x5B4; // int32
    public const nint range = 0x5B8; // int32
    public const nint tree_radius = 0x5BC; // int32
}

public static class C_DOTA_Aghsfort_Ability_CrystalMaiden_CrystalNova {
    public const nint nova_damage = 0x5B0; // int32
}

public static class C_DOTA_Aghsfort_Ability_Hoodwink_HuntersBoomerang {
    public const nint min_distance = 0x5B0; // int32
}

public static class C_DOTA_ArcanaDataEntity {
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_DrowRanger = 0x538; // CDOTA_ArcanaDataEntity_DrowRanger*
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_FacelessVoid = 0x540; // CDOTA_ArcanaDataEntity_FacelessVoid*
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_Razor = 0x548; // CDOTA_ArcanaDataEntity_Razor*
}

public static class C_DOTA_BaseNPC {
    public const nint m_bIsPhantom = 0xA30; // bool
    public const nint m_iUnitType = 0xA34; // uint32
    public const nint m_bSelectionRingVisible = 0xA48; // bool
    public const nint m_iCurrentLevel = 0xA4C; // int32
    public const nint m_bIsAncient = 0xA50; // bool
    public const nint m_bIsBossCreature = 0xA51; // bool
    public const nint m_bStolenScepter = 0xA52; // bool
    public const nint m_bIsNeutralUnitType = 0xA53; // bool
    public const nint m_bSelectOnSpawn = 0xA54; // bool
    public const nint m_bCachedReplicatedMorphlingIllusion = 0xA55; // bool
    public const nint m_bIgnoreAddSummonedToSelection = 0xA56; // bool
    public const nint m_bConsideredHero = 0xA57; // bool
    public const nint m_bUsesConstantGesture = 0xA58; // bool
    public const nint m_bUseHeroAbilityNumbers = 0xA59; // bool
    public const nint m_bHasSharedAbilities = 0xA5A; // bool
    public const nint m_bIsSummoned = 0xA5B; // bool
    public const nint m_bCanBeDominated = 0xA5C; // bool
    public const nint m_bHasUpgradeableAbilities = 0xA5D; // bool
    public const nint m_flHealthThinkRegen = 0xA60; // float32
    public const nint m_iIsControllableByPlayer64 = 0xA68; // uint64
    public const nint m_nHealthBarOffsetOverride = 0xA70; // int32
    public const nint m_bCanRespawn = 0xA74; // bool
    public const nint m_iAttackRange = 0xA78; // int32
    public const nint m_colorGemColor = 0xA7C; // Color
    public const nint m_bHasColorGem = 0xA80; // bool
    public const nint m_nFXDeniableIndex = 0xA84; // ParticleIndex_t
    public const nint m_iMoveSpeed = 0xA88; // int32
    public const nint m_iBaseAttackSpeed = 0xA8C; // int32
    public const nint m_flBaseAttackTime = 0xA90; // float32
    public const nint m_iUnitNameIndex = 0xA94; // int32
    public const nint m_iHealthBarOffset = 0xA98; // int32
    public const nint m_iHealthBarHighlightColor = 0xA9C; // Color
    public const nint m_flMana = 0xAA0; // float32
    public const nint m_flMaxMana = 0xAA4; // float32
    public const nint m_flManaThinkRegen = 0xAA8; // float32
    public const nint m_iBKBChargesUsed = 0xAAC; // int32
    public const nint m_iAeonChargesUsed = 0xAB0; // int32
    public const nint m_flRefresherUseTime = 0xAB4; // GameTime_t
    public const nint m_flRefresherLastCooldown = 0xAB8; // float32
    public const nint m_flLastDealtDamageTime = 0xABC; // GameTime_t
    public const nint m_iBotDebugData = 0xAC0; // int32
    public const nint m_bIsIllusion = 0xAC4; // bool
    public const nint m_bHasClientSeenIllusionModifier = 0xAC5; // bool
    public const nint m_hAbilities = 0xAC8; // CHandle< C_BaseEntity >[35]
    public const nint m_flInvisibilityLevel = 0xB54; // float32
    public const nint m_flHullRadius = 0xB58; // float32
    public const nint m_flCollisionPadding = 0xB5C; // float32
    public const nint m_flRingRadius = 0xB60; // float32
    public const nint m_flProjectileCollisionSize = 0xB64; // float32
    public const nint m_iszUnitName = 0xB68; // CUtlSymbolLarge
    public const nint m_iszParticleFolder = 0xB70; // CUtlSymbolLarge
    public const nint m_iszSoundSet = 0xB78; // CUtlSymbolLarge
    public const nint m_iszSelectionGroup = 0xB80; // CUtlSymbolLarge
    public const nint m_iszVoiceFile = 0xB88; // CUtlSymbolLarge
    public const nint m_iszGameSoundsFile = 0xB90; // CUtlSymbolLarge
    public const nint m_iszVoiceBackgroundSound = 0xB98; // CUtlSymbolLarge
    public const nint m_iszIdleSoundLoop = 0xBA0; // CUtlSymbolLarge
    public const nint m_szUnitLabel = 0xBA8; // CUtlString
    public const nint m_szScaleset = 0xBB0; // CUtlString
    public const nint m_nUnitLabelIndex = 0xBB8; // uint8
    public const nint m_strAnimationModifier = 0xBC0; // CUtlString
    public const nint m_TerrainSpecificFootstepEffect = 0xBC8; // CUtlString
    public const nint m_bUseCustomTerrainWeatherEffect = 0xBD0; // bool
    public const nint m_bHasClientSoundReplacement = 0xBD1; // bool
    public const nint m_bHasClientReplacementParticle = 0xBD2; // bool
    public const nint m_bResourcesLoaded = 0xBDC; // bool
    public const nint m_flTauntCooldown = 0xBE0; // GameTime_t
    public const nint m_flTauntCooldown2 = 0xBE4; // GameTime_t
    public const nint m_iCurShop = 0xBE8; // DOTA_SHOP_TYPE
    public const nint m_szCurShopEntName = 0xBF0; // CUtlSymbolLarge
    public const nint m_iDayTimeVisionRange = 0xBF8; // int32
    public const nint m_iNightTimeVisionRange = 0xBFC; // int32
    public const nint m_iDamageMin = 0xC00; // int32
    public const nint m_iDamageMax = 0xC04; // int32
    public const nint m_iDamageBonus = 0xC08; // int32
    public const nint m_iTaggedAsVisibleByTeam = 0xC0C; // int32
    public const nint m_ModifierManager = 0xC10; // CDOTA_ModifierManager
    public const nint m_Inventory = 0xEB0; // C_DOTA_UnitInventory
    public const nint m_nUnitState64 = 0xF70; // uint64
    public const nint m_nUnitDebuffState = 0xF80; // uint64
    public const nint m_bHasInventory = 0xF88; // bool
    public const nint m_iAcquisitionRange = 0xF8C; // int32
    public const nint m_FoWViewID = 0xF90; // int32
    public const nint m_iPrevHealthPct = 0xF94; // int32
    public const nint m_iPrevLifeState = 0xF98; // int32
    public const nint m_iPrevTeam = 0xF9C; // int32
    public const nint m_bPrevProvidesVision = 0xFA0; // bool
    public const nint m_nPrevControllableMask = 0xFA8; // uint64
    public const nint m_TagTime = 0xFB8; // CountdownTimer
    public const nint m_ClickedTime = 0xFD0; // CountdownTimer
    public const nint m_flIdleRunPoseStartTime = 0xFE8; // GameTime_t[2]
    public const nint m_flIdleRunPoseDuration = 0xFF0; // float32[2]
    public const nint m_bAnimationTransitionActive = 0xFF8; // bool
    public const nint m_nAnimationTransitionPoseParameters = 0xFFC; // int32[2]
    public const nint m_nAnimationTransitionInjuredPoseParameters = 0x1004; // int32[2]
    public const nint m_nAnimationTransitionAggressivePoseParameters = 0x100C; // int32[2]
    public const nint m_flTimeSinceLastAbilityNag = 0x1070; // GameTime_t
    public const nint m_iAttackCapabilities = 0x1074; // int32
    public const nint m_iSpecialAbility = 0x1078; // int32
    public const nint m_iMoveCapabilities = 0x107C; // int32
    public const nint m_nPlayerOwnerID = 0x1080; // PlayerID_t
    public const nint m_flLastDamageTime = 0x1084; // GameTime_t
    public const nint m_flLastAttackTime = 0x1088; // GameTime_t
    public const nint m_iszMinimapIcon = 0x1090; // CUtlSymbolLarge
    public const nint m_flMinimapIconSize = 0x10A0; // float32
    public const nint m_bMinimapDisableTint = 0x10A4; // bool
    public const nint m_bMinimapDisableRotation = 0x10A5; // bool
    public const nint m_colorHeroGlow = 0x10A6; // Color
    public const nint m_iNearShopMask = 0x10AC; // int32
    public const nint m_nPoseParameterTurn = 0x10B0; // int32
    public const nint m_nPoseParameterRun = 0x10B4; // int32
    public const nint m_flLean = 0x10B8; // float32
    public const nint m_flRun = 0x10BC; // float32
    public const nint m_anglediff = 0x10C0; // int32
    public const nint m_bInfoKeyActive = 0x10C4; // bool
    public const nint m_bNewUpdateAssetModifiersNetworked = 0x10C5; // bool
    public const nint m_nAssetModifiersLastUpdatedTick = 0x10C8; // GameTick_t
    public const nint m_bSuppressGlow = 0x10CC; // bool
    public const nint m_bWasSinking = 0x10CD; // bool
    public const nint m_flRangeDisplayDist = 0x10D0; // float32
    public const nint m_szDefaultIdle = 0x12B8; // CUtlSymbolLarge
    public const nint m_szDefaultRareIdle = 0x12C0; // CUtlSymbolLarge
    public const nint m_damagetimer = 0x12C8; // CountdownTimer
    public const nint m_vRenderOrigin = 0x12E0; // Vector
    public const nint m_fZDelta = 0x12EC; // float32
    public const nint m_flDeathTime = 0x12F0; // GameTime_t
    public const nint m_bBaseStatsChanged = 0x12F4; // bool
    public const nint m_bNeedsSoundEmitterRefresh = 0x12F5; // bool
    public const nint m_flPhysicalArmorValue = 0x12F8; // float32
    public const nint m_flMagicalResistanceValue = 0x12FC; // float32
    public const nint m_nPrevSequenceParity = 0x1300; // int32
    public const nint m_flPrevInvisLevel = 0x13A8; // float32
    public const nint m_nOriginalModelIndex = 0x13B0; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_nClientOriginalModelIndex = 0x13B8; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_nClientReplacementModelIndex = 0x13C0; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_bClientReplacementModelNeedsRebuild = 0x13C8; // bool
    public const nint m_nClientReplacementModelReloadCount = 0x13CC; // int32
    public const nint m_nUnitModelVariant = 0x13D0; // int8
    public const nint m_nUnitModelVariantCount = 0x13D1; // int8
    public const nint m_iPrevSequence = 0x13D4; // int32
    public const nint m_pLastWeatherEffectName = 0x13D8; // char*
    public const nint m_VoiceBackgroundSoundTimer = 0x13E8; // CountdownTimer
    public const nint m_bIsWaitingToSpawn = 0x1400; // bool
    public const nint m_nTotalDamageTaken = 0x1408; // int64
    public const nint m_flManaRegen = 0x1410; // float32
    public const nint m_flHealthRegen = 0x1414; // float32
    public const nint m_bIsMoving = 0x1418; // bool
    public const nint m_fRevealRadius = 0x141C; // float32
    public const nint m_bCanUseWards = 0x1420; // bool
    public const nint m_bCanUseAllItems = 0x1421; // bool
    public const nint m_iXPBounty = 0x1424; // int32
    public const nint m_iXPBountyExtra = 0x1428; // int32
    public const nint m_iGoldBountyMin = 0x142C; // int32
    public const nint m_iGoldBountyMax = 0x1430; // int32
    public const nint m_hOwnerNPC = 0x1434; // CHandle< C_BaseEntity >
    public const nint m_hGoalEntity = 0x1438; // CHandle< C_BaseEntity >
    public const nint m_hNeutralSpawner = 0x143C; // CHandle< C_DOTA_NeutralSpawner >
    public const nint m_hClientOverrideMaterial = 0x1440; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_bCombinerMaterialOverrideListChanged = 0x1448; // bool
    public const nint m_nBaseModelMeshCount = 0x144C; // int32
    public const nint m_combinerMaterialOverrideList = 0x1450; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
    public const nint m_nArcanaLevel = 0x1468; // int8
    public const nint m_nDefaultArcanaLevel = 0x1469; // int8
    public const nint m_defaultColorGemColor = 0x146A; // Color
    public const nint m_bHasBuiltWearableSpawnList = 0x1488; // bool
    public const nint m_bHasCostume = 0x1489; // bool
    public const nint m_bRecreateParticleSystemsOnModifiersChange = 0x148A; // bool
    public const nint m_NetworkActivity = 0x15A8; // int32
    public const nint m_PrevNetworkActivity = 0x15AC; // int32
    public const nint m_NetworkSequenceIndex = 0x15B0; // int32
    public const nint m_bShouldDoFlyHeightVisual = 0x15B4; // bool
    public const nint m_flStartSequenceCycle = 0x15B8; // float32
    public const nint m_ActivityModifiers = 0x15C0; // CUtlVector< CUtlSymbol >
    public const nint m_hBackgroundSceneEnt = 0x15D8; // CHandle< C_SceneEntity >
    public const nint m_hSpeakingSceneEnt = 0x15DC; // CHandle< C_SceneEntity >
    public const nint m_hOldWearables = 0x15F0; // CUtlVector< CHandle< C_EconWearable > >
    public const nint m_hOldWearableSkins = 0x1608; // CUtlVector< CUtlStringToken >
    public const nint m_CustomHealthLabel = 0x1620; // char[256]
    public const nint m_CustomHealthLabelColor = 0x1720; // Color
    public const nint m_nWearableDefIndex = 0x1724; // item_definition_index_t
    public const nint m_gibTintColor = 0x1729; // Color
    public const nint m_bForceMaterialCombine = 0x172D; // bool
    public const nint m_bShouldDrawParticlesWhileHidden = 0x172E; // bool
    public const nint m_bIsClientThinkPending = 0x172F; // bool
    public const nint m_bActivityModifiersDirty = 0x1730; // bool
    public const nint m_bUnitModelVariantChanged = 0x1731; // bool
    public const nint m_bWearablesAreTaunting = 0x1732; // bool
    public const nint m_bShowCannotBeDisabledIcon = 0x1748; // bool
}

public static class C_DOTA_BaseNPC_Building {
    public const nint m_iDamageLevel = 0x1768; // int32
    public const nint m_nAmbientFXIndex = 0x176C; // ParticleIndex_t
    public const nint m_nTPFXIndex = 0x1770; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x1774; // ParticleIndex_t
    public const nint m_nFXIndex = 0x1778; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_nFXIndexDestruction = 0x1780; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_angInitialAngles = 0x1788; // QAngle
    public const nint m_hHeroStatueSequence = 0x1794; // HSequence
    public const nint m_hConstantLayerSequence = 0x1798; // HSequence
    public const nint m_fHeroStatueCycle = 0x179C; // float32
    public const nint m_iHeroStatueStatusEffectIndex = 0x17A0; // int32
    public const nint m_bHeroStatue = 0x17A4; // bool
    public const nint m_bBattleCup = 0x17A5; // bool
    public const nint m_HeroStatueInscription = 0x17A6; // char[32]
    public const nint m_iHeroStatueOwnerPlayerID = 0x17C8; // PlayerID_t
    public const nint m_ParticleTintColor = 0x17CC; // Color
}

public static class C_DOTA_BaseNPC_Creature {
    public const nint m_bIsCurrentlyChanneling = 0x1770; // bool
    public const nint m_flChannelCycle = 0x1774; // float32
}

public static class C_DOTA_BaseNPC_Creep {
    public const nint m_flAim = 0x1768; // float32
}

public static class C_DOTA_BaseNPC_Creep_Neutral {
    public const nint m_sDisplayName = 0x1770; // CUtlString
}

public static class C_DOTA_BaseNPC_HallofFame {
    public const nint m_HallofFame = 0x17D0; // int32
}

public static class C_DOTA_BaseNPC_Healer {
    public const nint m_iRangeFX = 0x17D0; // ParticleIndex_t
}

public static class C_DOTA_BaseNPC_Hero {
    public const nint m_iCurrentXP = 0x1770; // int32
    public const nint m_iAbilityPoints = 0x1774; // int32
    public const nint m_flRespawnTime = 0x1778; // GameTime_t
    public const nint m_flRespawnTimePenalty = 0x177C; // float32
    public const nint m_flStrength = 0x1780; // float32
    public const nint m_flAgility = 0x1784; // float32
    public const nint m_flIntellect = 0x1788; // float32
    public const nint m_flStrengthTotal = 0x178C; // float32
    public const nint m_flAgilityTotal = 0x1790; // float32
    public const nint m_flIntellectTotal = 0x1794; // float32
    public const nint m_flDeathTime = 0x1798; // GameTime_t
    public const nint m_iRecentDamage = 0x179C; // int32
    public const nint m_fPainFactor = 0x17A0; // float32
    public const nint m_fTargetPainFactor = 0x17A4; // float32
    public const nint m_bLifeState = 0x17A8; // bool
    public const nint m_nFXStunIndex = 0x17AC; // ParticleIndex_t
    public const nint m_nFXSilenceIndex = 0x17B0; // ParticleIndex_t
    public const nint m_nFXDeathIndex = 0x17B4; // ParticleIndex_t
    public const nint m_iPlayerID = 0x17D8; // PlayerID_t
    public const nint m_hReplicatingOtherHeroModel = 0x17DC; // CHandle< C_DOTA_BaseNPC_Hero >
    public const nint m_bReincarnating = 0x17E0; // bool
    public const nint m_bCustomKillEffect = 0x17E1; // bool
    public const nint m_flSpawnedAt = 0x17E4; // GameTime_t
    public const nint m_bScriptDisableRespawns = 0x17E8; // bool
    public const nint m_iPrimaryAttribute = 0x17EC; // int32
    public const nint m_nLastDrawnHealth = 0x17F0; // int32
    public const nint m_flHurtAmount = 0x17F4; // float32
    public const nint m_flLastHurtTime = 0x17F8; // GameTime_t
    public const nint m_flHurtDecayRate = 0x17FC; // float32
    public const nint m_flLastHealTime = 0x1800; // GameTime_t
    public const nint m_flLastTreeShakeTime = 0x1804; // GameTime_t
    public const nint m_CenterOnHeroCooldownTimer = 0x1808; // CountdownTimer
    public const nint m_CombinedModels = 0x1A28; // CStrongHandle< InfoForResourceTypeCModel >[4]
    public const nint m_nCurrentCombinedModelIndex = 0x1A48; // int32
    public const nint m_nPendingCombinedModelIndex = 0x1A4C; // int32
    public const nint m_iHeroID = 0x1A50; // int32
    public const nint m_flCheckLegacyItemsAt = 0x1A54; // float32
    public const nint m_bDisplayAdditionalHeroes = 0x1A58; // bool
    public const nint m_CombinedParticleModels = 0x1A68; // CStrongHandle< InfoForResourceTypeCModel >[4]
    public const nint m_vecAttachedParticleIndeces = 0x1A88; // CUtlVector< ParticleIndex_t >
    public const nint m_hPets = 0x1AA0; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_nKillStreakFX = 0x1AB8; // ParticleIndex_t
    public const nint m_nKillStreakFXTier = 0x1ABC; // int32
    public const nint m_bBuybackDisabled = 0x0; // bitfield:1
    public const nint m_bWasFrozen = 0x0; // bitfield:1
    public const nint m_bUpdateClientsideWearables = 0x0; // bitfield:1
    public const nint m_bForceBuildCombinedModel = 0x0; // bitfield:1
    public const nint m_bRecombineForMaterialsOnly = 0x0; // bitfield:1
    public const nint m_bBuildingCombinedModel = 0x0; // bitfield:1
    public const nint m_bInReloadEvent = 0x0; // bitfield:1
    public const nint m_bStoreOldVisibility = 0x0; // bitfield:1
    public const nint m_bResetVisibility = 0x0; // bitfield:1
    public const nint m_bStoredVisibility = 0x0; // bitfield:1
}

public static class C_DOTA_BaseNPC_HoldoutTower {
    public const nint m_iTowerType = 0x1840; // DOTA_HOLDOUT_TOWER_TYPE
}

public static class C_DOTA_BaseNPC_NeutralItemStash {
    public const nint m_vecNewItemFX = 0x17E0; // CUtlVector< ParticleIndex_t >
    public const nint m_bHasFoundProps = 0x17F8; // bool
    public const nint m_bDidHaveNewItems = 0x17F9; // bool
    public const nint m_vecProps = 0x1800; // CUtlVector< CHandle< C_DynamicPropClientside > >
}

public static class C_DOTA_BaseNPC_RotatableBuilding {
    public const nint m_hObsoleteHeroStatueSequence = 0x1768; // HSequence
    public const nint m_hObsoleteConstantLayerSequence = 0x176C; // HSequence
}

public static class C_DOTA_BaseNPC_ShadowShaman_SerpentWard {
    public const nint m_angle = 0x1768; // QAngle
    public const nint m_iPoseParameterAim = 0x1774; // int32
}

public static class C_DOTA_BaseNPC_Shop {
    public const nint m_ShopType = 0x17D0; // DOTA_SHOP_TYPE
    public const nint m_nShopFX = 0x17F8; // ParticleIndex_t
    public const nint m_vShopFXOrigin = 0x17FC; // Vector
    public const nint m_flLastSpeech = 0x1808; // float32
}

public static class C_DOTA_BaseNPC_Tower {
    public const nint m_nAltHeldRangeFX = 0x17D0; // ParticleIndex_t
    public const nint m_bWasInRange = 0x17D4; // bool
    public const nint m_iRangeFX = 0x17D8; // ParticleIndex_t
    public const nint m_iPulseFX = 0x17DC; // ParticleIndex_t
    public const nint m_unTowerTier = 0x17E0; // uint8
    public const nint m_fTowerAggroDangerAmount = 0x17E4; // float32
    public const nint m_flControlledUnitInRangeAmount = 0x17E8; // float32
    public const nint m_flControlledUnitTargettedAmount = 0x17EC; // float32
    public const nint m_iAnticipationFX = 0x17F0; // ParticleIndex_t
    public const nint m_szAnticipationFXName = 0x17F8; // CUtlSymbolLarge
    public const nint m_hPrevTowerAttackTarget = 0x1800; // CHandle< C_BaseEntity >
    public const nint m_hTowerAttackTarget = 0x1804; // CHandle< C_BaseEntity >
    public const nint m_hTowerHighFiveTarget = 0x1808; // CHandle< C_BaseEntity >
    public const nint m_iPoseParameterAim = 0x180C; // int32
    public const nint m_angDefaultCustomTowerAngle = 0x1810; // QAngle
    public const nint m_flLastAimYaw = 0x181C; // float32
    public const nint m_bClientSideCustomTower = 0x1820; // bool
    public const nint m_IdleRareAnimationTime = 0x1828; // CountdownTimer
}

public static class C_DOTA_BaseNPC_Tusk_Sigil {
    public const nint m_angInitialAngles = 0x1768; // QAngle
}

public static class C_DOTA_BaseNPC_Venomancer_PlagueWard {
    public const nint m_angle = 0x1768; // QAngle
    public const nint m_iPoseParameterAim = 0x1774; // int32
}

public static class C_DOTA_BaseNPC_Watch_Tower {
    public const nint m_iRangeFX = 0x17D0; // ParticleIndex_t
    public const nint m_szOutpostName = 0x17D8; // CUtlSymbolLarge
    public const nint m_szInteractAbilityName = 0x17E0; // CUtlSymbolLarge
}

public static class C_DOTA_BinaryObject {
    public const nint m_bActive = 0x7E0; // bool
    public const nint m_nBinaryID = 0x7E4; // int32
}

public static class C_DOTA_CDOTA_Item_BagOfGold_Caster_Only {
    public const nint m_hThinker = 0x648; // CHandle< C_BaseEntity >
}

public static class C_DOTA_CombatLogQueryProgress {
    public const nint m_nPlayerID = 0x28; // PlayerID_t
    public const nint m_nQueryID = 0x2C; // int32
    public const nint m_nQueryRank = 0x30; // int32
    public const nint m_nMultiQueryID = 0x34; // int32
}

public static class C_DOTA_DataNonSpectator {
    public const nint m_vecDataTeam = 0x538; // C_UtlVectorEmbeddedNetworkVar< DataTeamPlayer_t >
    public const nint m_bWorldTreeState = 0x588; // uint64[256]
    public const nint m_vecWorldTreeModelReplacements = 0xD88; // C_UtlVectorEmbeddedNetworkVar< TreeModelReplacement_t >
    public const nint m_vDesiredWardPlacement = 0xDD8; // Vector2D[2]
    public const nint m_nEnemyStartingPosition = 0xDE8; // int32[5]
    public const nint m_nTotalEventPoints = 0xDFC; // int32
    public const nint m_nCaptainInspectedHeroID = 0xE00; // int32
    public const nint m_nFeaturedPlayerID = 0xE04; // int32
    public const nint m_flSuggestedWardWeights = 0xE08; // float32[20]
    public const nint m_nSuggestedWardIndexes = 0xE58; // uint8[20]
    public const nint m_iSuggestedLanes = 0xE6C; // int32[5]
    public const nint m_iSuggestedLaneWeights = 0xE80; // float32[5]
    public const nint m_bSuggestedLaneRoam = 0xE94; // bool[5]
    public const nint m_bSuggestedLaneJungle = 0xE99; // bool[5]
    public const nint m_vecNeutralItemsTierInfo = 0xEA0; // C_UtlVectorEmbeddedNetworkVar< TierNeutralInfo_t >
    public const nint m_vecNeutralStashItems = 0xEF0; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
    public const nint m_vecNeutralItemsConsumed = 0xF08; // C_NetworkUtlVectorBase< AbilityID_t >
    public const nint m_PingConfirmationStates = 0xF20; // C_UtlVectorEmbeddedNetworkVar< PingConfirmationState_t >
    public const nint m_vecKnownClearCamps = 0xF70; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
    public const nint m_vPossibleWardPlacement = 0xF88; // Vector2D[100]
    public const nint m_vPossibleWardRadii = 0x12A8; // float32[100]
    public const nint m_vecTrackedTeleports = 0x1438; // C_UtlVectorEmbeddedNetworkVar< DOTATeleportInfo_t >
}

public static class C_DOTA_DataSpectator {
    public const nint m_hPowerupRune_1 = 0x1488; // CHandle< C_BaseEntity >
    public const nint m_hPowerupRune_2 = 0x148C; // CHandle< C_BaseEntity >
    public const nint m_hBountyRune_1 = 0x1490; // CHandle< C_BaseEntity >
    public const nint m_hBountyRune_2 = 0x1494; // CHandle< C_BaseEntity >
    public const nint m_hBountyRune_3 = 0x1498; // CHandle< C_BaseEntity >
    public const nint m_hBountyRune_4 = 0x149C; // CHandle< C_BaseEntity >
    public const nint m_hXPRune_1 = 0x14A0; // CHandle< C_BaseEntity >
    public const nint m_hXPRune_2 = 0x14A4; // CHandle< C_BaseEntity >
    public const nint m_iNetWorth = 0x14A8; // int32[24]
    public const nint m_fRadiantWinProbability = 0x1508; // float32
    public const nint m_iGoldSpentOnSupport = 0x150C; // int32[24]
    public const nint m_iHeroDamage = 0x156C; // int32[24]
    public const nint m_nWardsPurchased = 0x15CC; // int32[24]
    public const nint m_nWardsPlaced = 0x162C; // int32[24]
    public const nint m_nWardsDestroyed = 0x168C; // int32[24]
    public const nint m_nRunesActivated = 0x16EC; // int32[24]
    public const nint m_nCampsStacked = 0x174C; // int32[24]
    public const nint m_ThreatLevelInfos = 0x17B0; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
}

public static class C_DOTA_DisplacementVisibility {
    public const nint m_HiddenDisplacement = 0x538; // int32
}

public static class C_DOTA_GuildBannerDynamic {
    public const nint m_bRespawnClientEntity = 0xA58; // bool
    public const nint m_bPlaySpawnAnimation = 0xA59; // bool
    public const nint m_unGuildTier = 0xA5A; // uint8
    public const nint m_unPrimaryColor = 0xA5B; // uint8
    public const nint m_unSecondaryColor = 0xA5C; // uint8
    public const nint m_unPattern = 0xA5D; // uint8
    public const nint m_unLogo = 0xA60; // uint64
    public const nint m_unGuildID = 0xA68; // GuildID_t
    public const nint m_unGuildFlags = 0xA6C; // uint32
    public const nint m_bUsePanelCache = 0xA70; // bool
    public const nint m_hClientEntity = 0xA74; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Hero_Recorder {
    public const nint m_bStartRecording = 0x538; // bool
    public const nint m_hHero = 0x53C; // CHandle< C_DOTA_BaseNPC >
    public const nint m_hPlayer = 0x540; // CHandle< C_DOTAPlayerController >
    public const nint m_bRecording = 0x544; // bool
    public const nint m_bLastStartRecording = 0x545; // bool
    public const nint m_flLastCycle = 0x548; // float32
    public const nint m_nCompletedCycles = 0x54C; // int32
    public const nint m_nFramesThisCycle = 0x550; // int32
    public const nint m_nRecordedFrames = 0x554; // int32
    public const nint m_flHeroAdvanceTime = 0x558; // float32
    public const nint m_flStartTime = 0x55C; // float32
    public const nint m_flCycles = 0x560; // CUtlVector< float32 >
    public const nint m_pBatchFiles = 0x578; // CUtlVector< CUtlString* >
}

public static class C_DOTA_Item {
    public const nint m_bCombinable = 0x5B0; // bool
    public const nint m_bPermanent = 0x5B1; // bool
    public const nint m_bStackable = 0x5B2; // bool
    public const nint m_iStackableMax = 0x5B4; // int32
    public const nint m_bRecipe = 0x5B8; // bool
    public const nint m_bRecipeConsumesCharges = 0x5B9; // bool
    public const nint m_iSharability = 0x5BC; // int32
    public const nint m_bDroppable = 0x5C0; // bool
    public const nint m_bPurchasable = 0x5C1; // bool
    public const nint m_bSellable = 0x5C2; // bool
    public const nint m_bInitiallySellable = 0x5C3; // bool
    public const nint m_bForceUnsellable = 0x5C4; // bool
    public const nint m_bRequiresCharges = 0x5C5; // bool
    public const nint m_bDisplayCharges = 0x5C6; // bool
    public const nint m_bHideCharges = 0x5C7; // bool
    public const nint m_bKillable = 0x5C8; // bool
    public const nint m_bGloballyCombinable = 0x5C9; // bool
    public const nint m_bDisassemblable = 0x5CA; // bool
    public const nint m_bIsNeutralDrop = 0x5CB; // bool
    public const nint m_nNeutralDropTeam = 0x5CC; // int32
    public const nint m_bAlertable = 0x5D0; // bool
    public const nint m_iInitialCharges = 0x5D4; // int32
    public const nint m_bCastOnPickup = 0x5D8; // bool
    public const nint m_bOnlyPlayerHeroPickup = 0x5D9; // bool
    public const nint m_bCreepHeroPickup = 0x5DA; // bool
    public const nint m_iValuelessCharges = 0x5DC; // int32
    public const nint m_iCurrentCharges = 0x5E0; // int32
    public const nint m_iSecondaryCharges = 0x5E4; // int32
    public const nint m_iMaxCharges = 0x5E8; // int32
    public const nint m_bCombineLocked = 0x5EC; // bool
    public const nint m_flPurchaseTime = 0x5F0; // GameTime_t
    public const nint m_flAssembledTime = 0x5F4; // GameTime_t
    public const nint m_bPurchasedWhileDead = 0x5F8; // bool
    public const nint m_bCanBeUsedOutOfInventory = 0x5F9; // bool
    public const nint m_bItemEnabled = 0x5FA; // bool
    public const nint m_flEnableTime = 0x5FC; // GameTime_t
    public const nint m_flReclaimTime = 0x600; // GameTime_t
    public const nint m_bDisplayOwnership = 0x604; // bool
    public const nint m_bShowOnMinimap = 0x605; // bool
    public const nint m_flMinimapIconSize = 0x608; // float32
    public const nint m_bIsUpgradeable = 0x60C; // bool
    public const nint m_nUpgradeProgress = 0x610; // int32
    public const nint m_nUpgradeGoal = 0x614; // int32
    public const nint m_hOldOwnerEntity = 0x618; // CHandle< C_BaseEntity >
    public const nint m_iOldCharges = 0x61C; // int32
    public const nint m_iPlayerOwnerID = 0x620; // PlayerID_t
    public const nint m_vecPreGameTransferPlayerIDs = 0x628; // C_NetworkUtlVectorBase< uint8 >
}

public static class C_DOTA_Item_AeonDisk {
    public const nint m_nUses = 0x648; // int32
    public const nint max_level = 0x64C; // int32
}

public static class C_DOTA_Item_AetherialHalo {
    public const nint m_nFXIndex = 0x648; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x64C; // ParticleIndex_t
}

public static class C_DOTA_Item_Ancient_Janggo {
    public const nint radius = 0x648; // int32
}

public static class C_DOTA_Item_Arcane_Scout {
    public const nint m_hScout = 0x648; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Item_Armlet {
    public const nint toggle_cooldown = 0x648; // float32
}

public static class C_DOTA_Item_Barricade {
    public const nint m_hScout = 0x648; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Item_Black_King_Bar {
    public const nint m_bActive = 0x648; // bool
}

public static class C_DOTA_Item_BootsOfTravel {
    public const nint m_flTeleportTimeOverride = 0x648; // float32
    public const nint m_bPendingSellExcessScrolls = 0x64C; // bool
    public const nint m_bQueueSellScrolls = 0x64D; // bool
}

public static class C_DOTA_Item_Boots_Of_Bearing {
    public const nint radius = 0x648; // int32
}

public static class C_DOTA_Item_Bottomless_Chalice {
    public const nint m_iStoredRuneType = 0x648; // int32
    public const nint m_fStoredRuneTime = 0x64C; // GameTime_t
    public const nint stored_rune_duration = 0x650; // float32
}

public static class C_DOTA_Item_Bracer {
    public const nint counter = 0x648; // int32
}

public static class C_DOTA_Item_DataDriven {
    public const nint m_bProcsMagicStick = 0x648; // bool
    public const nint m_bIsSharedWithTeammates = 0x649; // bool
    public const nint m_bCastFilterRejectCaster = 0x64A; // bool
    public const nint m_fAnimationPlaybackRate = 0x64C; // float32
    public const nint m_fAOERadius = 0x650; // float32
    public const nint m_CastAnimation = 0x654; // int32
    public const nint m_ModifierKVDescriptions = 0x658; // CUtlVector< KeyValues* >
    public const nint m_pOnChannelFinishKV = 0x670; // KeyValues*
    public const nint m_pOnChannelSucceededKV = 0x678; // KeyValues*
    public const nint m_pOnChannelInterruptedKV = 0x680; // KeyValues*
    public const nint m_pOnOwnerSpawnedKV = 0x688; // KeyValues*
    public const nint m_pOnOwnerDiedKV = 0x690; // KeyValues*
    public const nint m_pOnProjectileHitUnitKV = 0x698; // KeyValues*
    public const nint m_pOnProjectileFinishKV = 0x6A0; // KeyValues*
    public const nint m_pOnSpellStartKV = 0x6A8; // KeyValues*
    public const nint m_pOnAbilityPhaseStartKV = 0x6B0; // KeyValues*
    public const nint m_pOnToggleOnKV = 0x6B8; // KeyValues*
    public const nint m_pOnToggleOffKV = 0x6C0; // KeyValues*
    public const nint m_pOnEquipKV = 0x6C8; // KeyValues*
    public const nint m_pOnUnequipKV = 0x6D0; // KeyValues*
    public const nint m_pOnCreatedKV = 0x6D8; // KeyValues*
}

public static class C_DOTA_Item_EagleEye {
    public const nint m_iTempViewer = 0x648; // int32
    public const nint m_iTeam = 0x64C; // int32
    public const nint m_nFXIndex = 0x650; // int32
}

public static class C_DOTA_Item_EmptyBottle {
    public const nint m_iStoredRuneType = 0x648; // int32
    public const nint m_fStoredRuneTime = 0x64C; // GameTime_t
    public const nint rune_expire_time = 0x650; // float32
}

public static class C_DOTA_Item_GemOfTrueSight {
    public const nint m_iTempViewer = 0x648; // int32
    public const nint m_iTeam = 0x64C; // int32
    public const nint m_nFXIndex = 0x650; // int32
}

public static class C_DOTA_Item_Grandmasters_Glaive {
    public const nint m_iStat = 0x648; // int32
}

public static class C_DOTA_Item_MeteorHammer {
    public const nint m_nFXIndex = 0x648; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x64C; // ParticleIndex_t
}

public static class C_DOTA_Item_Muertas_Gun {
    public const nint radius = 0x648; // int32
    public const nint ricochet_radius_start = 0x64C; // int32
    public const nint ricochet_radius_end = 0x650; // int32
    public const nint m_iTempViewerRadiant = 0x654; // int32
    public const nint m_iTempViewerDire = 0x658; // int32
}

public static class C_DOTA_Item_Necronomicon {
    public const nint m_hWarrior = 0x648; // CHandle< C_BaseEntity >
    public const nint m_hArcher = 0x64C; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Item_NullTalisman {
    public const nint counter = 0x648; // int32
}

public static class C_DOTA_Item_Orb_Of_Revelations {
    public const nint m_ViewerTimer = 0x648; // CountdownTimer
    public const nint m_iProjectile = 0x660; // int32
}

public static class C_DOTA_Item_Overflowing_Elixir {
    public const nint m_iStoredRuneType = 0x648; // int32
    public const nint m_fStoredRuneTime = 0x64C; // GameTime_t
}

public static class C_DOTA_Item_Physical {
    public const nint m_hItem = 0x7E0; // CHandle< C_DOTA_Item >
    public const nint m_bIsLowPriorityHoverItem = 0x7E4; // bool
    public const nint m_hOldItem = 0x7E8; // CHandle< C_DOTA_Item >
    public const nint m_pszParticleName = 0x7F0; // char*
    public const nint m_nFXIndex = 0x7F8; // ParticleIndex_t
    public const nint m_bShowingTooltip = 0x7FC; // bool
    public const nint m_bShowingSimpleTooltip = 0x7FD; // bool
}

public static class C_DOTA_Item_PowerTreads {
    public const nint m_iStat = 0x648; // int32
}

public static class C_DOTA_Item_RiverPainter {
    public const nint m_iRiverPaintColor = 0x648; // int32
}

public static class C_DOTA_Item_Rune {
    public const nint m_iRuneType = 0x7E0; // int32
    public const nint m_flRuneTime = 0x7E4; // float32
    public const nint m_nMapLocationTeam = 0x7E8; // int32
    public const nint m_szLocation = 0x7EC; // char[512]
    public const nint m_iOldRuneType = 0x9EC; // int32
    public const nint m_bShowingTooltip = 0x9F0; // bool
}

public static class C_DOTA_Item_RuneSpawner {
    public const nint m_nRuneType = 0x7E0; // DOTA_RUNES
    public const nint m_flLastSpawnTime = 0x7E4; // float32
    public const nint m_flNextSpawnTime = 0x7E8; // float32
}

public static class C_DOTA_Item_RuneSpawner_Bounty {
    public const nint m_nRuneType = 0x7E0; // DOTA_RUNES
    public const nint m_flLastSpawnTime = 0x7E4; // float32
    public const nint m_flNextSpawnTime = 0x7E8; // float32
}

public static class C_DOTA_Item_RuneSpawner_Powerup {
    public const nint m_nRuneType = 0x7E0; // DOTA_RUNES
    public const nint m_flLastSpawnTime = 0x7E4; // float32
    public const nint m_flNextSpawnTime = 0x7E8; // float32
    public const nint m_bNextRuneIsWater = 0x7EC; // bool
}

public static class C_DOTA_Item_RuneSpawner_XP {
    public const nint m_nRuneType = 0x7E0; // DOTA_RUNES
    public const nint m_flLastSpawnTime = 0x7E4; // float32
    public const nint m_flNextSpawnTime = 0x7E8; // float32
}

public static class C_DOTA_Item_Safety_Bubble {
    public const nint m_bUnequipped = 0x648; // bool
}

public static class C_DOTA_Item_SheepStick {
    public const nint upgrade_radius = 0x648; // int32
}

public static class C_DOTA_Item_SpookyTeleportScroll {
    public const nint m_hTeleportTarget = 0x648; // CHandle< C_BaseEntity >
    public const nint m_nFXOrigin = 0x64C; // ParticleIndex_t
    public const nint m_nFXDestination = 0x650; // ParticleIndex_t
    public const nint m_vDestination = 0x654; // Vector
    public const nint m_iMinDistance = 0x660; // int32
    public const nint m_flBaseTeleportTime = 0x664; // float32
    public const nint m_flExtraTeleportTime = 0x668; // float32
}

public static class C_DOTA_Item_Spring2021_DefusalBomb {
    public const nint m_bInBombSite = 0x648; // bool
}

public static class C_DOTA_Item_TeleportScroll {
    public const nint m_hTeleportTarget = 0x648; // CHandle< C_BaseEntity >
    public const nint m_nFXOrigin = 0x64C; // ParticleIndex_t
    public const nint m_nFXDestination = 0x650; // ParticleIndex_t
    public const nint m_vDestination = 0x654; // Vector
    public const nint m_iMinDistance = 0x660; // int32
    public const nint m_flBaseTeleportTime = 0x664; // float32
    public const nint m_flExtraTeleportTime = 0x668; // float32
}

public static class C_DOTA_Item_TierToken {
    public const nint m_vecChoices = 0x648; // AbilityID_t[5]
}

public static class C_DOTA_Item_Tombstone {
    public const nint m_flTimer = 0x648; // float32
    public const nint m_nFXIndex = 0x64C; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x650; // ParticleIndex_t
}

public static class C_DOTA_Item_TranquilBoots {
    public const nint break_count = 0x648; // int32
    public const nint m_DamageList = 0x650; // CUtlVector< GameTime_t >
}

public static class C_DOTA_Item_TranquilBoots2 {
    public const nint break_count = 0x648; // int32
    public const nint m_DamageList = 0x650; // CUtlVector< GameTime_t >
}

public static class C_DOTA_Item_TurtleShell {
    public const nint duration = 0x648; // float32
}

public static class C_DOTA_Item_Vambrace {
    public const nint m_iStat = 0x648; // int32
}

public static class C_DOTA_Item_WraithBand {
    public const nint counter = 0x648; // int32
}

public static class C_DOTA_Item_WraithPact {
    public const nint m_hWard = 0x648; // CHandle< C_BaseEntity >
}

public static class C_DOTA_LinearProjectileInfo {
    public const nint m_transform = 0x20; // CTransform
    public const nint m_iHandle = 0x40; // int32
    public const nint m_vInitPosition = 0x44; // Vector
    public const nint m_vPosition = 0x50; // Vector
    public const nint m_vOriginalVelocity = 0x5C; // Vector
    public const nint m_vVelocity = 0x68; // Vector
    public const nint m_vAcceleration = 0x74; // Vector
    public const nint m_flMaxSpeed = 0x80; // float32
    public const nint m_flFowRadius = 0x84; // float32
    public const nint m_bStickyFoWReveal = 0x88; // bool
    public const nint m_flDistance = 0x8C; // float32
    public const nint m_hSource = 0x90; // CHandle< C_BaseEntity >
}

public static class C_DOTA_MapTree {
    public const nint m_bInitialized = 0x818; // bool
}

public static class C_DOTA_MinibossSpawner {
    public const nint m_bIsRadiantMiniboss = 0x538; // bool
}

public static class C_DOTA_NPC_Aghsfort_WitchDoctor_Ward {
    public const nint m_nFXSkullIndex = 0x1768; // ParticleIndex_t
    public const nint m_nTargetType = 0x176C; // int32
    public const nint m_nTargetFlags = 0x1770; // int32
}

public static class C_DOTA_NPC_Lantern {
    public const nint m_szInteractAbilityName = 0x17D0; // CUtlSymbolLarge
    public const nint m_pVisionRangeFX = 0x17D8; // CNewParticleEffect*
    public const nint m_iFxIndex = 0x17E0; // ParticleIndex_t
    public const nint m_nPreviewViewer = 0x17E4; // int32
    public const nint m_nTeamNumberShown = 0x17E8; // int32
}

public static class C_DOTA_NPC_TechiesMines {
    public const nint m_iRangeFX = 0x1768; // ParticleIndex_t
}

public static class C_DOTA_NPC_WitchDoctor_Ward {
    public const nint m_nFXSkullIndex = 0x1768; // ParticleIndex_t
    public const nint m_nTargetType = 0x176C; // int32
    public const nint m_nTargetFlags = 0x1770; // int32
}

public static class C_DOTA_NeutralSpawner {
    public const nint m_Type = 0x538; // int32
}

public static class C_DOTA_PhantomAssassin_Gravestone {
    public const nint m_nVictimPlayerID = 0x1768; // PlayerID_t
}

public static class C_DOTA_PlayerResource {
    public const nint m_bWasDataUpdateCreated = 0x548; // bool
    public const nint m_vecPlayerTeamData = 0x550; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
    public const nint m_vecPlayerData = 0x5A0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
    public const nint m_vecBrodcasterData = 0x5F0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
    public const nint m_vecEventsForDisplay = 0x640; // C_NetworkUtlVectorBase< uint32 >
    public const nint m_nPrimaryEventIndex = 0x658; // int8
    public const nint m_nObsoleteEventIDAssociatedWithEventData = 0x65C; // uint32
    public const nint m_playerIDToPlayer = 0x660; // CHandle< C_BaseEntity >[64]
    public const nint m_iszName = 0x760; // CUtlSymbolLarge[64]
    public const nint m_iszHTMLSafeName = 0x960; // CUtlSymbolLarge[64]
    public const nint m_iszFilteredHTMLSafeName = 0xB60; // CUtlSymbolLarge[64]
    public const nint m_bDirtySuggestedItems = 0x2560; // bool
    public const nint m_bDirtyEstimatedMatchDuration = 0x2561; // bool
    public const nint m_bDirtySelection = 0x2562; // bool
    public const nint m_bHasWorldTreesChanged = 0x2563; // bool
    public const nint m_bWorldTreeModelsChanged = 0x2564; // bool
    public const nint m_bSwapWillingness = 0x2565; // bool[24]
    public const nint m_hTeamCouriers = 0x25C0; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[15]
    public const nint m_hPlayerCouriers = 0x2728; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[64]
    public const nint m_vecOnstageHomeTeams = 0x2D28; // CUtlVector< uint32 >
    public const nint m_pPlayerIDToOnstageSlot = 0x2D40; // PlayerSeatAssignment_t*[24]
    public const nint m_vecOnstagePlayerSeats = 0x2E00; // CUtlVector< PlayerSeatAssignment_t >
    public const nint m_nEventNPCReplaced = 0x2E18; // int32
    public const nint m_nEventPlayerInfo = 0x2E1C; // int32
    public const nint m_nInventoryUpdated = 0x2E20; // int32
}

public static class C_DOTA_PortraitBuilding {
    public const nint m_nAmbientFXIndex = 0x7E0; // ParticleIndex_t
    public const nint m_nFXIndex = 0x7E8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_ParticleTintColor = 0x7F0; // Color
}

public static class C_DOTA_PortraitEntity {
    public const nint m_PetIdleTimer = 0x1768; // CountdownTimer
    public const nint m_nMouthFX = 0x1780; // ParticleIndex_t
    public const nint m_nMouthControlPoint = 0x1784; // int32
    public const nint m_iPortraitParticle = 0x1788; // ParticleIndex_t
    public const nint m_PortraitActivity = 0x178C; // int32
    public const nint m_CustomActivityModifiers = 0x1790; // CUtlVector< CUtlSymbol >
    public const nint m_bIsSimulationActive = 0x17A8; // bool
    public const nint m_hAppearanceFromNPC = 0x17AC; // CEntityHandle
}

public static class C_DOTA_RoshanSpawner {
    public const nint m_iLastKillerTeam = 0x538; // int32
    public const nint m_iKillCount = 0x53C; // int32
    public const nint m_vRoshanAltLocation = 0x540; // Vector
}

public static class C_DOTA_Samurai_Tabi {
    public const nint m_iStat = 0x648; // int32
}

public static class C_DOTA_SimpleObstruction {
    public const nint m_bEnabled = 0x538; // bool
    public const nint m_bBlockFoW = 0x539; // bool
    public const nint m_unOccluderID = 0x53C; // uint32
    public const nint m_bBlockingGridNav = 0x540; // bool
    public const nint m_bPrevEnabled = 0x541; // bool
}

public static class C_DOTA_TempTree {
    public const nint m_fExpireTime = 0x810; // GameTime_t
    public const nint m_vecTreeCircleCenter = 0x814; // Vector
    public const nint m_bCanApplyTreeCostume = 0x820; // bool
    public const nint m_bIsMangoTree = 0x821; // bool
    public const nint m_Particles = 0x828; // CUtlVector< ParticleIndex_t >
    public const nint m_bIsPartOfFowSystem = 0x840; // bool
    public const nint m_bHasClientSideAnimation = 0x841; // bool
}

public static class C_DOTA_TrackingProjectileInfo {
    public const nint m_iHandle = 0x0; // int32
    public const nint m_iOriginalMoveSpeed = 0x4; // int32
    public const nint m_iMoveSpeed = 0x8; // int32
    public const nint m_vLocation = 0xC; // Vector
    public const nint m_hSource = 0x18; // CHandle< C_BaseEntity >
    public const nint m_hTarget = 0x1C; // CHandle< C_BaseEntity >
    public const nint m_hAbility = 0x20; // CHandle< C_BaseEntity >
    public const nint m_vTargetLocation = 0x24; // Vector
    public const nint m_bDodgeable = 0x30; // bool
    public const nint m_bIsAttack = 0x31; // bool
    public const nint m_bIsEvaded = 0x32; // bool
    public const nint m_flExpireTime = 0x34; // GameTime_t
    public const nint m_flMaxImpactTime = 0x38; // GameTime_t
}

public static class C_DOTA_UnitInventory {
    public const nint m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
    public const nint m_hItems = 0x20; // CHandle< C_BaseEntity >[19]
    public const nint m_bItemQueried = 0x6C; // bool[21]
    public const nint m_iParity = 0x84; // int32
    public const nint m_hInventoryParent = 0x88; // CHandle< C_BaseEntity >
    public const nint m_bIsActive = 0x8C; // bool
    public const nint m_bStashEnabled = 0x8D; // bool
    public const nint m_hTransientCastItem = 0x90; // CHandle< C_BaseEntity >
    public const nint m_bSendChangedMsg = 0xB0; // bool
}

public static class C_DOTA_Unit_AghsFort_Creature_DungeonBat {
    public const nint m_nFXAmbient = 0x1778; // ParticleIndex_t
}

public static class C_DOTA_Unit_Aghsfort_Aziyog_Underlord_Portal {
    public const nint m_hOtherPortal = 0x1768; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_Brewmaster_PrimalEarth {
    public const nint m_nFXEarthAmbient1 = 0x1770; // ParticleIndex_t
    public const nint m_nFXEarthAmbient2 = 0x1774; // ParticleIndex_t
}

public static class C_DOTA_Unit_Brewmaster_PrimalFire {
    public const nint m_nFXAmbient = 0x1770; // ParticleIndex_t
}

public static class C_DOTA_Unit_Brewmaster_PrimalStorm {
    public const nint m_nFXStormAmbient1 = 0x1770; // ParticleIndex_t
    public const nint m_nFXStormAmbient2 = 0x1774; // ParticleIndex_t
}

public static class C_DOTA_Unit_Brewmaster_PrimalVoid {
    public const nint m_nFXAmbient = 0x1770; // ParticleIndex_t
}

public static class C_DOTA_Unit_Broodmother_Web {
    public const nint m_nFXIndex = 0x1768; // ParticleIndex_t
    public const nint m_vecOrigin = 0x176C; // Vector
}

public static class C_DOTA_Unit_Courier {
    public const nint m_bUnitRespawned = 0x1768; // bool
    public const nint m_bPreUpdateFlyingCourier = 0x1769; // bool
    public const nint m_nSoleControllingPlayer = 0x176C; // PlayerID_t
    public const nint m_bFlyingCourier = 0x1770; // bool
    public const nint m_flRespawnTime = 0x1774; // GameTime_t
    public const nint m_nCourierState = 0x1778; // CourierState_t
    public const nint m_hCourierStateEntity = 0x177C; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_Diretide_Portal {
    public const nint m_hPartnerPortal = 0x17D0; // CHandle< C_BaseEntity >
    public const nint m_nRuneType = 0x17D4; // int32
    public const nint m_nOriginalTeamNumber = 0x17D8; // int32
    public const nint m_nActiveFXIndex = 0x17DC; // ParticleIndex_t
    public const nint m_nRuneFXIndex = 0x17E0; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_CrystalMaiden {
    public const nint m_iParticleMouthIndex = 0x1AC8; // int32
    public const nint m_iParticleHandRIndex = 0x1ACC; // int32
}

public static class C_DOTA_Unit_Hero_DarkSeer {
    public const nint m_nNormalPunchBuffIndex = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Earthshaker {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Juggernaut {
    public const nint m_unOmniKills = 0x1AC8; // uint32
}

public static class C_DOTA_Unit_Hero_Kunkka {
    public const nint m_nFXIndex = 0x1AC8; // int32
}

public static class C_DOTA_Unit_Hero_Legion_Commander {
    public const nint m_unDuelsWon = 0x1AC8; // uint32
}

public static class C_DOTA_Unit_Hero_Lion {
    public const nint m_unFingerPrestigeKills = 0x1AC8; // uint32
}

public static class C_DOTA_Unit_Hero_Meepo {
    public const nint m_nWhichMeepo = 0x1AC8; // int32
}

public static class C_DOTA_Unit_Hero_MonkeyKing {
    public const nint mb_MonkeyHasArcana = 0x1AC8; // bool
    public const nint m_nTreeDisguise = 0x1ACC; // uint32
    public const nint m_nPerchedTree = 0x1AD0; // uint32
    public const nint m_hTreeDisguiseEnt = 0x1AD4; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_Hero_Muerta {
    public const nint m_hDoubleShotTarget = 0x1AC8; // CHandle< C_BaseEntity >
    public const nint m_qStartAngle = 0x1ACC; // QAngle
}

public static class C_DOTA_Unit_Hero_Nevermore {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Obsidian_Destroyer {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Oracle {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_PhantomAssassin {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
    public const nint m_nArcanaLevel = 0x1ACC; // uint32
}

public static class C_DOTA_Unit_Hero_PhantomLancer {
    public const nint m_bInventoryEnabled = 0x1AC8; // bool
}

public static class C_DOTA_Unit_Hero_Razor {
    public const nint m_iPoseParameterAim = 0x1AC8; // int32
    public const nint m_iPoseParameterRange = 0x1ACC; // int32
    public const nint m_nTargetAngle = 0x1AD0; // int32
    public const nint m_nTargetRange = 0x1AD4; // int32
}

public static class C_DOTA_Unit_Hero_Rubick {
    public const nint m_stolenAbilityColorHSV1 = 0x1AC8; // Vector
    public const nint m_stolenAbilityColorHSV2 = 0x1AD4; // Vector
    public const nint m_stolenAbilityFXColorHSV = 0x1AE0; // Vector
    public const nint m_bHasInitializedAbilityColors = 0x1AEC; // bool
    public const nint m_startAbilityColorHSV1 = 0x1AF0; // Vector
    public const nint m_startAbilityColorHSV2 = 0x1AFC; // Vector
    public const nint m_startAbilityFXColorHSV = 0x1B08; // Vector
    public const nint m_currAbilityColorHSV1 = 0x1B14; // Vector
    public const nint m_currAbilityColorHSV2 = 0x1B20; // Vector
    public const nint m_currAbilityFXColorHSV = 0x1B2C; // Vector
    public const nint m_flStartTime = 0x1B38; // GameTime_t
}

public static class C_DOTA_Unit_Hero_SkeletonKing {
    public const nint m_nSkeletonWarriors = 0x1AC8; // int32
    public const nint m_vecInitialHeroKillBitmask = 0x1ACC; // int32[5]
    public const nint m_vecInGameHeroKillBitmask = 0x1AE0; // int32[5]
}

public static class C_DOTA_Unit_Hero_Spectre {
    public const nint m_unCurrentArcanaKillStreak = 0x1AC8; // uint8
    public const nint m_unBestArcanaKillStreak = 0x1AC9; // uint8
    public const nint m_nVictimPlayerID = 0x1ACC; // PlayerID_t
    public const nint m_bArcanaKillstreakRecordBroken = 0x1AD0; // bool
}

public static class C_DOTA_Unit_Hero_Techies {
    public const nint m_bLastDeathFromSuicide = 0x1AC8; // bool
}

public static class C_DOTA_Unit_Hero_Terrorblade {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
    public const nint m_szResponseCriteria = 0x1AD0; // CUtlString
    public const nint m_nArcanaColor = 0x1AD8; // uint32
}

public static class C_DOTA_Unit_Hero_Tiny {
    public const nint m_hTreeWearable = 0x1AC8; // CHandle< C_BaseEntity >
    public const nint m_nFXIndexScepterAmbient = 0x1ACC; // ParticleIndex_t
    public const nint m_hIllusionOwner = 0x1AD0; // CHandle< C_DOTA_BaseNPC >
    public const nint m_bIllusionHasTree = 0x1AD4; // bool
}

public static class C_DOTA_Unit_Hero_Windrunner {
    public const nint m_nTargetAngle = 0x1AC8; // int32
    public const nint m_iPoseParameterAim = 0x1ACC; // int32
    public const nint m_nFXDeath = 0x1AD0; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Winter_Wyvern {
    public const nint m_nFXDeath = 0x1AC8; // ParticleIndex_t
}

public static class C_DOTA_Unit_Hero_Wisp {
    public const nint m_nAmbientFXIndex = 0x1AC8; // ParticleIndex_t
    public const nint m_nStunnedFXIndex = 0x1ACC; // ParticleIndex_t
    public const nint m_nTalkFXIndex = 0x1AD0; // ParticleIndex_t
    public const nint m_nIllusionFXIndex = 0x1AD4; // ParticleIndex_t
    public const nint m_bParticleHexed = 0x1AD8; // bool
    public const nint m_bParticleStunned = 0x1AD9; // bool
    public const nint m_bDetermineAmbientEffect = 0x1ADA; // bool
    public const nint m_flPrevHealth = 0x1ADC; // float32
}

public static class C_DOTA_Unit_LoopingSound {
    public const nint m_nPrevLoopingSoundParity = 0x1770; // int32
    public const nint m_pszNetworkedSoundLoop = 0x1774; // char[256]
    public const nint m_nLoopingSoundParity = 0x1874; // int32
}

public static class C_DOTA_Unit_Miniboss {
    public const nint m_nTimesSpawned = 0x1768; // int32
    public const nint m_nTempViewer = 0x176C; // int32
    public const nint m_hAttackingHeroes = 0x1770; // CUtlVector< CHandle< C_BaseEntity > >
}

public static class C_DOTA_Unit_Roshan {
    public const nint m_iKillerTeam = 0x1768; // int32
    public const nint m_iLastHealthPercent = 0x176C; // int32
    public const nint m_nFXIndex = 0x1770; // ParticleIndex_t
    public const nint m_hAttackingHeroes = 0x1778; // CUtlVector< CHandle< C_BaseEntity > >
    public const nint m_bGoldenRoshan = 0x1790; // bool
    public const nint m_bIsNightTimeMode = 0x1791; // bool
}

public static class C_DOTA_Unit_Scout {
    public const nint m_bUnitRespawned = 0x1768; // bool
    public const nint m_nSoleControllingPlayer = 0x176C; // PlayerID_t
    public const nint m_flRespawnTime = 0x1770; // GameTime_t
    public const nint m_nScoutState = 0x1774; // ScoutState_t
    public const nint m_hScoutStateEntity = 0x1778; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_SpiritBear {
    public const nint m_bShouldRespawn = 0x1AC8; // bool
    public const nint m_bStolen = 0x1AC9; // bool
}

public static class C_DOTA_Unit_TargetDummy {
    public const nint m_flDamageTaken = 0x1AC8; // float32
    public const nint m_flLastHit = 0x1ACC; // float32
    public const nint m_flStartDamageTime = 0x1AD0; // GameTime_t
    public const nint m_flLastTargetDummyDamageTime = 0x1AD4; // GameTime_t
    public const nint m_bIsMoving = 0x1AD8; // bool
}

public static class C_DOTA_Unit_Tidehunter_Anchor {
    public const nint m_hTarget = 0x1768; // CHandle< C_BaseEntity >
    public const nint m_vProjectilePosition = 0x176C; // Vector
}

public static class C_DOTA_Unit_Twin_Gate {
    public const nint m_hOtherPortal = 0x17D0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_Underlord_Portal {
    public const nint m_hOtherPortal = 0x17D0; // CHandle< C_BaseEntity >
}

public static class C_DOTA_Unit_Undying_Zombie {
    public const nint m_ctRespawn = 0x1770; // CountdownTimer
    public const nint m_pTombstone = 0x1788; // C_DOTA_BaseNPC*
}

public static class C_DOTA_Unit_VisageFamiliar {
    public const nint m_nFXAmbient = 0x1770; // ParticleIndex_t
}

public static class C_DotaQuest {
    public const nint m_pszQuestTitle = 0x538; // char[256]
    public const nint m_pszQuestText = 0x638; // char[256]
    public const nint m_nQuestType = 0x738; // int32
    public const nint m_hSubquests = 0x73C; // CHandle< C_DotaSubquestBase >[8]
    public const nint m_bHidden = 0x75C; // bool
    public const nint m_bCompleted = 0x75D; // bool
    public const nint m_bWinIfCompleted = 0x75E; // bool
    public const nint m_bLoseIfCompleted = 0x75F; // bool
    public const nint m_pszGameEndText = 0x760; // char[256]
    public const nint m_pnTextReplaceValuesCDotaQuest = 0x860; // int32[4]
    public const nint m_pszTextReplaceString = 0x870; // char[64]
    public const nint m_nTextReplaceValueVersion = 0x8B0; // int32
    public const nint m_bWasCompleted = 0x8B4; // bool
}

public static class C_DotaSubquestBase {
    public const nint m_pszSubquestText = 0x538; // char[256]
    public const nint m_bHidden = 0x638; // bool
    public const nint m_bCompleted = 0x639; // bool
    public const nint m_bShowProgressBar = 0x63A; // bool
    public const nint m_nProgressBarHueShift = 0x63C; // int32
    public const nint m_pnTextReplaceValuesCDotaSubquestBase = 0x640; // int32[2]
    public const nint m_pszTextReplaceString = 0x648; // char[64]
    public const nint m_nTextReplaceValueVersion = 0x688; // int32
    public const nint m_bWasCompleted = 0x68C; // bool
}

public static class C_DotaTree {
    public const nint m_unOccluderID = 0x2C; // uint32
}

public static class C_DotaTutorialNetworker {
    public const nint m_nTutorialState = 0x538; // int32
    public const nint m_nTaskProgress = 0x53C; // int32
    public const nint m_nTaskSteps = 0x540; // int32
    public const nint m_nTaskSecondsRemianing = 0x544; // int32
    public const nint m_nUIState = 0x548; // int32
    public const nint m_nShopState = 0x54C; // int32
    public const nint m_TargetLocation = 0x550; // Vector
    public const nint m_TargetEntity = 0x55C; // CHandle< C_BaseEntity >
    public const nint m_SpeechBubbles = 0x560; // C_UtlVectorEmbeddedNetworkVar< C_SpeechBubbleInfo >
    public const nint m_nLocationID = 0xAC0; // int32
    public const nint m_GuideStr = 0xAC4; // char[256]
    public const nint m_QuickBuyStr = 0xBC4; // char[256]
    public const nint m_nPreTutorialState = 0xCC4; // int32
    public const nint m_nPreUIState = 0xCC8; // int32
    public const nint m_nPreShopState = 0xCCC; // int32
    public const nint m_vecPrevTargetLocation = 0xCD0; // Vector
    public const nint m_hPrevTargetEntity = 0xCDC; // CHandle< C_BaseEntity >
}

public static class C_DynamicLight {
    public const nint m_Flags = 0x7B8; // uint8
    public const nint m_LightStyle = 0x7B9; // uint8
    public const nint m_Radius = 0x7BC; // float32
    public const nint m_Exponent = 0x7C0; // int32
    public const nint m_InnerAngle = 0x7C4; // float32
    public const nint m_OuterAngle = 0x7C8; // float32
    public const nint m_SpotRadius = 0x7CC; // float32
}

public static class C_DynamicProp {
    public const nint m_bRandomAnimator = 0x930; // bool
    public const nint m_flNextRandAnim = 0x934; // GameTime_t
    public const nint m_flMinRandAnimDuration = 0x938; // float32
    public const nint m_flMaxRandAnimDuration = 0x93C; // float32
    public const nint m_bUseHitboxesForRenderBox = 0x940; // bool
    public const nint m_bUseAnimGraph = 0x941; // bool
    public const nint m_pOutputAnimBegun = 0x948; // CEntityIOOutput
    public const nint m_pOutputAnimOver = 0x970; // CEntityIOOutput
    public const nint m_pOutputAnimLoopCycleOver = 0x998; // CEntityIOOutput
    public const nint m_OnAnimReachedStart = 0x9C0; // CEntityIOOutput
    public const nint m_OnAnimReachedEnd = 0x9E8; // CEntityIOOutput
    public const nint m_iszDefaultAnim = 0xA10; // CUtlSymbolLarge
    public const nint m_nDefaultAnimLoopMode = 0xA18; // AnimLoopMode_t
    public const nint m_bAnimateOnServer = 0xA1C; // bool
    public const nint m_bRandomizeCycle = 0xA1D; // bool
    public const nint m_bStartDisabled = 0xA1E; // bool
    public const nint m_bScriptedMovement = 0xA1F; // bool
    public const nint m_bFiredStartEndOutput = 0xA20; // bool
    public const nint m_bForceNpcExclude = 0xA21; // bool
    public const nint m_bCreateNonSolid = 0xA22; // bool
    public const nint m_bIsOverrideProp = 0xA23; // bool
    public const nint m_iInitialGlowState = 0xA24; // int32
    public const nint m_nGlowRange = 0xA28; // int32
    public const nint m_nGlowRangeMin = 0xA2C; // int32
    public const nint m_glowColor = 0xA30; // Color
    public const nint m_nGlowTeam = 0xA34; // int32
    public const nint m_iCachedFrameCount = 0xA38; // int32
    public const nint m_vecCachedRenderMins = 0xA3C; // Vector
    public const nint m_vecCachedRenderMaxs = 0xA48; // Vector
}

public static class C_DynamicPropClientside {
    public const nint m_bSetupMaterialProxy = 0xA60; // bool
    public const nint m_bNoInterpolate = 0xA61; // bool
}

public static class C_EconEntity {
    public const nint m_AttributeManager = 0x978; // CAttributeContainer
    public const nint m_bClientside = 0xAA0; // bool
    public const nint m_nDisableMode = 0xAA4; // EconEntityParticleDisableMode_t
    public const nint m_bParticleSystemsCreated = 0xAA8; // bool
    public const nint m_bForceDestroyAttachedParticlesImmediately = 0xAA9; // bool
    public const nint m_vecAttachedParticles = 0xAB0; // CUtlVector< C_EconEntity::AttachedParticleInfo_t >
    public const nint m_hViewmodelAttachment = 0xAC8; // CHandle< CBaseAnimatingActivity >
    public const nint m_iOldTeam = 0xACC; // int32
    public const nint m_bAttachmentDirty = 0xAD0; // bool
    public const nint m_iOldStyle = 0xAD1; // style_index_t
    public const nint m_hOldProvidee = 0xAD4; // CHandle< C_BaseEntity >
    public const nint m_vecAttachedModels = 0xAD8; // CUtlVector< C_EconEntity::AttachedModelData_t >
}

public static class C_EconEntity_AttachedModelData_t {
    public const nint m_iModelDisplayFlags = 0x0; // int32
}

public static class C_EconEntity_AttachedParticleInfo_t {
    public const nint m_nAttachedParticleIndex = 0x0; // ParticleIndex_t
    public const nint m_customType = 0x4; // CUtlStringToken
    public const nint m_bShouldDestroyImmediately = 0x8; // bool
}

public static class C_EconItemAttribute {
    public const nint m_iAttributeDefinitionIndex = 0x30; // attrib_definition_index_t
    public const nint m_flValue = 0x34; // float32
}

public static class C_EconItemView {
    public const nint m_iItemDefinitionIndex = 0x8; // item_definition_index_t
    public const nint m_iEntityQuality = 0xC; // int32
    public const nint m_iEntityLevel = 0x10; // uint32
    public const nint m_iItemID = 0x18; // itemid_t
    public const nint m_iAccountID = 0x20; // uint32
    public const nint m_iInventoryPosition = 0x24; // uint32
    public const nint m_bInitialized = 0x30; // bool
    public const nint m_nOverrideStyle = 0x31; // style_index_t
    public const nint m_bIsStoreItem = 0x32; // bool
    public const nint m_bIsTradeItem = 0x33; // bool
    public const nint m_bHasComputedAttachedParticles = 0x34; // bool
    public const nint m_bHasAttachedParticles = 0x35; // bool
    public const nint m_iEntityQuantity = 0x38; // int32
    public const nint m_unClientFlags = 0x3C; // uint8
    public const nint m_unOverrideOrigin = 0x40; // eEconItemOrigin
    public const nint m_pszGrayedOutReason = 0x50; // char*
    public const nint m_AttributeList = 0x58; // CAttributeList
}

public static class C_EntityDissolve {
    public const nint m_flStartTime = 0x7C0; // GameTime_t
    public const nint m_flFadeInStart = 0x7C4; // float32
    public const nint m_flFadeInLength = 0x7C8; // float32
    public const nint m_flFadeOutModelStart = 0x7CC; // float32
    public const nint m_flFadeOutModelLength = 0x7D0; // float32
    public const nint m_flFadeOutStart = 0x7D4; // float32
    public const nint m_flFadeOutLength = 0x7D8; // float32
    public const nint m_flNextSparkTime = 0x7DC; // GameTime_t
    public const nint m_nDissolveType = 0x7E0; // EntityDisolveType_t
    public const nint m_vDissolverOrigin = 0x7E4; // Vector
    public const nint m_nMagnitude = 0x7F0; // uint32
    public const nint m_bCoreExplode = 0x7F4; // bool
    public const nint m_bLinkedToServerEnt = 0x7F5; // bool
}

public static class C_EntityFlame {
    public const nint m_hEntAttached = 0x538; // CHandle< C_BaseEntity >
    public const nint m_hOldAttached = 0x560; // CHandle< C_BaseEntity >
    public const nint m_bCheapEffect = 0x564; // bool
}

public static class C_EnvCombinedLightProbeVolume {
    public const nint m_Color = 0x15A0; // Color
    public const nint m_flBrightness = 0x15A4; // float32
    public const nint m_hCubemapTexture = 0x15A8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bCustomCubemapTexture = 0x15B0; // bool
    public const nint m_hLightProbeTexture = 0x15B8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightIndicesTexture = 0x15C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightScalarsTexture = 0x15C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightShadowsTexture = 0x15D0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vBoxMins = 0x15D8; // Vector
    public const nint m_vBoxMaxs = 0x15E4; // Vector
    public const nint m_LightGroups = 0x15F0; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x15F8; // bool
    public const nint m_nHandshake = 0x15FC; // int32
    public const nint m_nEnvCubeMapArrayIndex = 0x1600; // int32
    public const nint m_nPriority = 0x1604; // int32
    public const nint m_bStartDisabled = 0x1608; // bool
    public const nint m_flEdgeFadeDist = 0x160C; // float32
    public const nint m_vEdgeFadeDists = 0x1610; // Vector
    public const nint m_nLightProbeSizeX = 0x161C; // int32
    public const nint m_nLightProbeSizeY = 0x1620; // int32
    public const nint m_nLightProbeSizeZ = 0x1624; // int32
    public const nint m_nLightProbeAtlasX = 0x1628; // int32
    public const nint m_nLightProbeAtlasY = 0x162C; // int32
    public const nint m_nLightProbeAtlasZ = 0x1630; // int32
    public const nint m_bEnabled = 0x1649; // bool
}

public static class C_EnvCubemap {
    public const nint m_hCubemapTexture = 0x5C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bCustomCubemapTexture = 0x5C8; // bool
    public const nint m_flInfluenceRadius = 0x5CC; // float32
    public const nint m_vBoxProjectMins = 0x5D0; // Vector
    public const nint m_vBoxProjectMaxs = 0x5DC; // Vector
    public const nint m_LightGroups = 0x5E8; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x5F0; // bool
    public const nint m_nHandshake = 0x5F4; // int32
    public const nint m_nEnvCubeMapArrayIndex = 0x5F8; // int32
    public const nint m_nPriority = 0x5FC; // int32
    public const nint m_flEdgeFadeDist = 0x600; // float32
    public const nint m_vEdgeFadeDists = 0x604; // Vector
    public const nint m_flDiffuseScale = 0x610; // float32
    public const nint m_bStartDisabled = 0x614; // bool
    public const nint m_bDefaultEnvMap = 0x615; // bool
    public const nint m_bDefaultSpecEnvMap = 0x616; // bool
    public const nint m_bIndoorCubeMap = 0x617; // bool
    public const nint m_bCopyDiffuseFromDefaultCubemap = 0x618; // bool
    public const nint m_bEnabled = 0x628; // bool
}

public static class C_EnvCubemapFog {
    public const nint m_flEndDistance = 0x538; // float32
    public const nint m_flStartDistance = 0x53C; // float32
    public const nint m_flFogFalloffExponent = 0x540; // float32
    public const nint m_bHeightFogEnabled = 0x544; // bool
    public const nint m_flFogHeightWidth = 0x548; // float32
    public const nint m_flFogHeightEnd = 0x54C; // float32
    public const nint m_flFogHeightStart = 0x550; // float32
    public const nint m_flFogHeightExponent = 0x554; // float32
    public const nint m_flLODBias = 0x558; // float32
    public const nint m_bActive = 0x55C; // bool
    public const nint m_bStartDisabled = 0x55D; // bool
    public const nint m_flFogMaxOpacity = 0x560; // float32
    public const nint m_nCubemapSourceType = 0x564; // int32
    public const nint m_hSkyMaterial = 0x568; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_iszSkyEntity = 0x570; // CUtlSymbolLarge
    public const nint m_hFogCubemapTexture = 0x578; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bHasHeightFogEnd = 0x580; // bool
    public const nint m_bFirstTime = 0x581; // bool
}

public static class C_EnvDecal {
    public const nint m_hDecalMaterial = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_flWidth = 0x7C0; // float32
    public const nint m_flHeight = 0x7C4; // float32
    public const nint m_flDepth = 0x7C8; // float32
    public const nint m_nRenderOrder = 0x7CC; // uint32
    public const nint m_bProjectOnWorld = 0x7D0; // bool
    public const nint m_bProjectOnCharacters = 0x7D1; // bool
    public const nint m_bProjectOnWater = 0x7D2; // bool
    public const nint m_flDepthSortBias = 0x7D4; // float32
}

public static class C_EnvDetailController {
    public const nint m_flFadeStartDist = 0x538; // float32
    public const nint m_flFadeEndDist = 0x53C; // float32
}

public static class C_EnvLightProbeVolume {
    public const nint m_hLightProbeTexture = 0x1518; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightIndicesTexture = 0x1520; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightScalarsTexture = 0x1528; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightShadowsTexture = 0x1530; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vBoxMins = 0x1538; // Vector
    public const nint m_vBoxMaxs = 0x1544; // Vector
    public const nint m_LightGroups = 0x1550; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x1558; // bool
    public const nint m_nHandshake = 0x155C; // int32
    public const nint m_nPriority = 0x1560; // int32
    public const nint m_bStartDisabled = 0x1564; // bool
    public const nint m_nLightProbeSizeX = 0x1568; // int32
    public const nint m_nLightProbeSizeY = 0x156C; // int32
    public const nint m_nLightProbeSizeZ = 0x1570; // int32
    public const nint m_nLightProbeAtlasX = 0x1574; // int32
    public const nint m_nLightProbeAtlasY = 0x1578; // int32
    public const nint m_nLightProbeAtlasZ = 0x157C; // int32
    public const nint m_bEnabled = 0x1589; // bool
}

public static class C_EnvParticleGlow {
    public const nint m_flAlphaScale = 0xD68; // float32
    public const nint m_flRadiusScale = 0xD6C; // float32
    public const nint m_flSelfIllumScale = 0xD70; // float32
    public const nint m_ColorTint = 0xD74; // Color
    public const nint m_hTextureOverride = 0xD78; // CStrongHandle< InfoForResourceTypeCTextureBase >
}

public static class C_EnvScreenOverlay {
    public const nint m_iszOverlayNames = 0x538; // CUtlSymbolLarge[10]
    public const nint m_flOverlayTimes = 0x588; // float32[10]
    public const nint m_flStartTime = 0x5B0; // GameTime_t
    public const nint m_iDesiredOverlay = 0x5B4; // int32
    public const nint m_bIsActive = 0x5B8; // bool
    public const nint m_bWasActive = 0x5B9; // bool
    public const nint m_iCachedDesiredOverlay = 0x5BC; // int32
    public const nint m_iCurrentOverlay = 0x5C0; // int32
    public const nint m_flCurrentOverlayTime = 0x5C4; // GameTime_t
}

public static class C_EnvSky {
    public const nint m_hSkyMaterial = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_hSkyMaterialLightingOnly = 0x7C0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_bStartDisabled = 0x7C8; // bool
    public const nint m_vTintColor = 0x7C9; // Color
    public const nint m_vTintColorLightingOnly = 0x7CD; // Color
    public const nint m_flBrightnessScale = 0x7D4; // float32
    public const nint m_nFogType = 0x7D8; // int32
    public const nint m_flFogMinStart = 0x7DC; // float32
    public const nint m_flFogMinEnd = 0x7E0; // float32
    public const nint m_flFogMaxStart = 0x7E4; // float32
    public const nint m_flFogMaxEnd = 0x7E8; // float32
    public const nint m_bEnabled = 0x7EC; // bool
}

public static class C_EnvVolumetricFogController {
    public const nint m_flScattering = 0x538; // float32
    public const nint m_flAnisotropy = 0x53C; // float32
    public const nint m_flFadeSpeed = 0x540; // float32
    public const nint m_flDrawDistance = 0x544; // float32
    public const nint m_flFadeInStart = 0x548; // float32
    public const nint m_flFadeInEnd = 0x54C; // float32
    public const nint m_flIndirectStrength = 0x550; // float32
    public const nint m_nIndirectTextureDimX = 0x554; // int32
    public const nint m_nIndirectTextureDimY = 0x558; // int32
    public const nint m_nIndirectTextureDimZ = 0x55C; // int32
    public const nint m_vBoxMins = 0x560; // Vector
    public const nint m_vBoxMaxs = 0x56C; // Vector
    public const nint m_bActive = 0x578; // bool
    public const nint m_flStartAnisoTime = 0x57C; // GameTime_t
    public const nint m_flStartScatterTime = 0x580; // GameTime_t
    public const nint m_flStartDrawDistanceTime = 0x584; // GameTime_t
    public const nint m_flStartAnisotropy = 0x588; // float32
    public const nint m_flStartScattering = 0x58C; // float32
    public const nint m_flStartDrawDistance = 0x590; // float32
    public const nint m_flDefaultAnisotropy = 0x594; // float32
    public const nint m_flDefaultScattering = 0x598; // float32
    public const nint m_flDefaultDrawDistance = 0x59C; // float32
    public const nint m_bStartDisabled = 0x5A0; // bool
    public const nint m_bEnableIndirect = 0x5A1; // bool
    public const nint m_bIsMaster = 0x5A2; // bool
    public const nint m_hFogIndirectTexture = 0x5A8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_nForceRefreshCount = 0x5B0; // int32
    public const nint m_bFirstTime = 0x5B4; // bool
}

public static class C_EnvVolumetricFogVolume {
    public const nint m_bActive = 0x538; // bool
    public const nint m_vBoxMins = 0x53C; // Vector
    public const nint m_vBoxMaxs = 0x548; // Vector
    public const nint m_bStartDisabled = 0x554; // bool
    public const nint m_flStrength = 0x558; // float32
    public const nint m_nFalloffShape = 0x55C; // int32
    public const nint m_flFalloffExponent = 0x560; // float32
}

public static class C_EnvWind {
    public const nint m_EnvWindShared = 0x538; // C_EnvWindShared
}

public static class C_EnvWindClientside {
    public const nint m_EnvWindShared = 0x538; // C_EnvWindShared
}

public static class C_EnvWindShared {
    public const nint m_flStartTime = 0x8; // GameTime_t
    public const nint m_iWindSeed = 0xC; // uint32
    public const nint m_iMinWind = 0x10; // uint16
    public const nint m_iMaxWind = 0x12; // uint16
    public const nint m_windRadius = 0x14; // int32
    public const nint m_iMinGust = 0x18; // uint16
    public const nint m_iMaxGust = 0x1A; // uint16
    public const nint m_flMinGustDelay = 0x1C; // float32
    public const nint m_flMaxGustDelay = 0x20; // float32
    public const nint m_flGustDuration = 0x24; // float32
    public const nint m_iGustDirChange = 0x28; // uint16
    public const nint m_location = 0x2C; // Vector
    public const nint m_iszGustSound = 0x38; // int32
    public const nint m_iWindDir = 0x3C; // int32
    public const nint m_flWindSpeed = 0x40; // float32
    public const nint m_currentWindVector = 0x44; // Vector
    public const nint m_CurrentSwayVector = 0x50; // Vector
    public const nint m_PrevSwayVector = 0x5C; // Vector
    public const nint m_iInitialWindDir = 0x68; // uint16
    public const nint m_flInitialWindSpeed = 0x6C; // float32
    public const nint m_flVariationTime = 0x70; // GameTime_t
    public const nint m_flSwayTime = 0x74; // GameTime_t
    public const nint m_flSimTime = 0x78; // GameTime_t
    public const nint m_flSwitchTime = 0x7C; // GameTime_t
    public const nint m_flAveWindSpeed = 0x80; // float32
    public const nint m_bGusting = 0x84; // bool
    public const nint m_flWindAngleVariation = 0x88; // float32
    public const nint m_flWindSpeedVariation = 0x8C; // float32
    public const nint m_iEntIndex = 0x90; // CEntityIndex
}

public static class C_EnvWindShared_WindAveEvent_t {
    public const nint m_flStartWindSpeed = 0x0; // float32
    public const nint m_flAveWindSpeed = 0x4; // float32
}

public static class C_EnvWindShared_WindVariationEvent_t {
    public const nint m_flWindAngleVariation = 0x0; // float32
    public const nint m_flWindSpeedVariation = 0x4; // float32
}

public static class C_FoWRevealerEntity {
    public const nint m_unViewerTeam = 0x538; // uint32
    public const nint m_nVisionRange = 0x53C; // int32
}

public static class C_FogController {
    public const nint m_fog = 0x538; // fogparams_t
    public const nint m_bUseAngles = 0x5A0; // bool
    public const nint m_iChangedVariables = 0x5A4; // int32
}

public static class C_FuncElectrifiedVolume {
    public const nint m_nAmbientEffect = 0x7B8; // ParticleIndex_t
    public const nint m_EffectName = 0x7C0; // CUtlSymbolLarge
    public const nint m_bState = 0x7C8; // bool
}

public static class C_FuncTrackTrain {
    public const nint m_nLongAxis = 0x7B8; // int32
    public const nint m_flRadius = 0x7BC; // float32
    public const nint m_flLineLength = 0x7C0; // float32
}

public static class C_GlobalLight {
    public const nint m_WindClothForceHandle = 0xA60; // uint16
}

public static class C_InfoPlayerStartDota {
    public const nint m_bDisabled = 0x538; // bool
}

public static class C_InfoVisibilityBox {
    public const nint m_nMode = 0x53C; // int32
    public const nint m_vBoxSize = 0x540; // Vector
    public const nint m_bEnabled = 0x54C; // bool
}

public static class C_IngameEvent_Base {
    public const nint m_bInitialized = 0x548; // bool
    public const nint m_CompendiumChallengeEventID = 0x54C; // int32[24]
    public const nint m_CompendiumChallengeSequenceID = 0x5AC; // int32[24]
    public const nint m_CompendiumChallengeCoinReward = 0x60C; // int32[24]
    public const nint m_CompendiumChallengeCoinSplash = 0x66C; // int32[24]
    public const nint m_CompendiumChallengePointReward = 0x6CC; // int32[24]
    public const nint m_CompendiumChallengeCompleted = 0x72C; // bool[24]
    public const nint m_CompendiumChallengeFailed = 0x744; // bool[24]
    public const nint m_CompendiumChallengeProgress = 0x75C; // int32[24]
    public const nint m_QueryIDForProgress = 0x7BC; // int32[24]
    public const nint m_SubChallenges = 0x820; // C_UtlVectorEmbeddedNetworkVar< CDOTASubChallengeInfo >
    public const nint m_CompendiumCoinWager = 0x870; // int32[10]
    public const nint m_CompendiumTokenWagerItemID = 0x898; // itemid_t[10]
    public const nint m_CompendiumWagerTokenBonusPct = 0x8E8; // int32[10]
    public const nint m_CompendiumCoinWagerResults = 0x910; // int32[10]
    public const nint m_CompendiumRankWagers = 0x938; // int32[10]
    public const nint m_flWagerTimer = 0x960; // float32
    public const nint m_flWagerEndTime = 0x964; // GameTime_t
    public const nint m_CompendiumChallengeInfo = 0x968; // C_UtlVectorEmbeddedNetworkVar< CDOTA_PlayerChallengeInfo >
    public const nint m_PlayerQueryIDs = 0x1428; // C_UtlVectorEmbeddedNetworkVar< C_DOTA_CombatLogQueryProgress >
    public const nint m_ProgressForQueryID = 0x1478; // int32[100]
    public const nint m_GoalForQueryID = 0x1608; // int32[100]
    public const nint m_PlayerQuestRankPreviouslyCompleted = 0x1798; // int32[10]
    public const nint m_PlayerQuestRankCompleted = 0x17C0; // int32[10]
    public const nint m_PlayerBountyTarget = 0x17E8; // PlayerID_t[10]
    public const nint m_flPlayerBountyTimestamp = 0x1810; // GameTime_t[10]
    public const nint m_PlayerBountyCount = 0x1838; // int32[10]
    public const nint m_PlayerBountyTimestamp_Obsolete = 0x1860; // int32[24]
}

public static class C_LightEntity {
    public const nint m_CLightComponent = 0x7B8; // CLightComponent*
}

public static class C_LocalTempEntity {
    public const nint flags = 0x7F8; // int32
    public const nint die = 0x7FC; // GameTime_t
    public const nint m_flFrameMax = 0x800; // float32
    public const nint x = 0x804; // float32
    public const nint y = 0x808; // float32
    public const nint fadeSpeed = 0x80C; // float32
    public const nint bounceFactor = 0x810; // float32
    public const nint hitSound = 0x814; // int32
    public const nint priority = 0x818; // int32
    public const nint tentOffset = 0x81C; // Vector
    public const nint m_vecTempEntAngVelocity = 0x828; // QAngle
    public const nint tempent_renderamt = 0x834; // int32
    public const nint m_vecNormal = 0x838; // Vector
    public const nint m_flSpriteScale = 0x844; // float32
    public const nint m_nFlickerFrame = 0x848; // int32
    public const nint m_flFrameRate = 0x84C; // float32
    public const nint m_flFrame = 0x850; // float32
    public const nint m_pszImpactEffect = 0x858; // char*
    public const nint m_pszParticleEffect = 0x860; // char*
    public const nint m_bParticleCollision = 0x868; // bool
    public const nint m_iLastCollisionFrame = 0x86C; // int32
    public const nint m_vLastCollisionOrigin = 0x870; // Vector
    public const nint m_vecTempEntVelocity = 0x87C; // Vector
    public const nint m_vecPrevAbsOrigin = 0x888; // Vector
    public const nint m_vecTempEntAcceleration = 0x894; // Vector
}

public static class C_NextBotCombatCharacter {
    public const nint m_shadowTimer = 0x9F8; // CountdownTimer
    public const nint m_bInFrustum = 0xA10; // bool
    public const nint m_nInFrustumFrame = 0xA14; // int32
    public const nint m_flFrustumDistanceSqr = 0xA18; // float32
    public const nint m_nLod = 0xA1C; // uint8
}

public static class C_ParticleSystem {
    public const nint m_szSnapshotFileName = 0x7B8; // char[512]
    public const nint m_bActive = 0x9B8; // bool
    public const nint m_bFrozen = 0x9B9; // bool
    public const nint m_flFreezeTransitionDuration = 0x9BC; // float32
    public const nint m_nStopType = 0x9C0; // int32
    public const nint m_bAnimateDuringGameplayPause = 0x9C4; // bool
    public const nint m_iEffectIndex = 0x9C8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_flStartTime = 0x9D0; // GameTime_t
    public const nint m_flPreSimTime = 0x9D4; // float32
    public const nint m_vServerControlPoints = 0x9D8; // Vector[4]
    public const nint m_iServerControlPointAssignments = 0xA08; // uint8[4]
    public const nint m_hControlPointEnts = 0xA0C; // CHandle< C_BaseEntity >[64]
    public const nint m_bNoSave = 0xB0C; // bool
    public const nint m_bNoFreeze = 0xB0D; // bool
    public const nint m_bNoRamp = 0xB0E; // bool
    public const nint m_bStartActive = 0xB0F; // bool
    public const nint m_iszEffectName = 0xB10; // CUtlSymbolLarge
    public const nint m_iszControlPointNames = 0xB18; // CUtlSymbolLarge[64]
    public const nint m_nDataCP = 0xD18; // int32
    public const nint m_vecDataCPValue = 0xD1C; // Vector
    public const nint m_nTintCP = 0xD28; // int32
    public const nint m_clrTint = 0xD2C; // Color
    public const nint m_bOldActive = 0xD50; // bool
    public const nint m_bOldFrozen = 0xD51; // bool
}

public static class C_PathParticleRope {
    public const nint m_bStartActive = 0x538; // bool
    public const nint m_flMaxSimulationTime = 0x53C; // float32
    public const nint m_iszEffectName = 0x540; // CUtlSymbolLarge
    public const nint m_PathNodes_Name = 0x548; // CUtlVector< CUtlSymbolLarge >
    public const nint m_flParticleSpacing = 0x560; // float32
    public const nint m_flSlack = 0x564; // float32
    public const nint m_flRadius = 0x568; // float32
    public const nint m_ColorTint = 0x56C; // Color
    public const nint m_nEffectState = 0x570; // int32
    public const nint m_iEffectIndex = 0x578; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_PathNodes_Position = 0x580; // C_NetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_TangentIn = 0x598; // C_NetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_TangentOut = 0x5B0; // C_NetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_Color = 0x5C8; // C_NetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_PinEnabled = 0x5E0; // C_NetworkUtlVectorBase< bool >
    public const nint m_PathNodes_RadiusScale = 0x5F8; // C_NetworkUtlVectorBase< float32 >
}

public static class C_PhysPropClientside {
    public const nint m_flTouchDelta = 0x930; // GameTime_t
    public const nint m_fDeathTime = 0x934; // GameTime_t
    public const nint m_impactEnergyScale = 0x938; // float32
    public const nint m_inertiaScale = 0x93C; // float32
    public const nint m_flDmgModBullet = 0x940; // float32
    public const nint m_flDmgModClub = 0x944; // float32
    public const nint m_flDmgModExplosive = 0x948; // float32
    public const nint m_flDmgModFire = 0x94C; // float32
    public const nint m_iszPhysicsDamageTableName = 0x950; // CUtlSymbolLarge
    public const nint m_iszBasePropData = 0x958; // CUtlSymbolLarge
    public const nint m_iInteractions = 0x960; // int32
    public const nint m_bHasBreakPiecesOrCommands = 0x964; // bool
    public const nint m_vecDamagePosition = 0x968; // Vector
    public const nint m_vecDamageDirection = 0x974; // Vector
    public const nint m_nDamageType = 0x980; // int32
}

public static class C_PhysicsProp {
    public const nint m_bAwake = 0x930; // bool
}

public static class C_PlayerCosmeticPropClientside {
    public const nint m_iPlayerNum = 0xA68; // int32
    public const nint m_iCosmeticType = 0xA6C; // int32
    public const nint m_szProxyTextureName = 0xA70; // char[260]
    public const nint m_hProxyTexture = 0xB78; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bGeneratedShowcaseProps = 0xC20; // bool
    public const nint m_vecShowcaseProps = 0xC28; // CUtlVector< C_PlayerCosmeticPropClientside* >
    public const nint m_pShowcaseItem = 0xC40; // C_EconItemView*
}

public static class C_PlayerVisibility {
    public const nint m_flVisibilityStrength = 0x538; // float32
    public const nint m_flFogDistanceMultiplier = 0x53C; // float32
    public const nint m_flFogMaxDensityMultiplier = 0x540; // float32
    public const nint m_flFadeTime = 0x544; // float32
    public const nint m_bStartDisabled = 0x548; // bool
    public const nint m_bIsEnabled = 0x549; // bool
}

public static class C_PointCamera {
    public const nint m_FOV = 0x538; // float32
    public const nint m_Resolution = 0x53C; // float32
    public const nint m_bFogEnable = 0x540; // bool
    public const nint m_FogColor = 0x541; // Color
    public const nint m_flFogStart = 0x548; // float32
    public const nint m_flFogEnd = 0x54C; // float32
    public const nint m_flFogMaxDensity = 0x550; // float32
    public const nint m_bActive = 0x554; // bool
    public const nint m_bUseScreenAspectRatio = 0x555; // bool
    public const nint m_flAspectRatio = 0x558; // float32
    public const nint m_bNoSky = 0x55C; // bool
    public const nint m_fBrightness = 0x560; // float32
    public const nint m_flZFar = 0x564; // float32
    public const nint m_flZNear = 0x568; // float32
    public const nint m_bCanHLTVUse = 0x56C; // bool
    public const nint m_flOverrideShadowFarZ = 0x570; // float32
    public const nint m_bDofEnabled = 0x574; // bool
    public const nint m_flDofNearBlurry = 0x578; // float32
    public const nint m_flDofNearCrisp = 0x57C; // float32
    public const nint m_flDofFarCrisp = 0x580; // float32
    public const nint m_flDofFarBlurry = 0x584; // float32
    public const nint m_flDofTiltToGround = 0x588; // float32
    public const nint m_TargetFOV = 0x58C; // float32
    public const nint m_DegreesPerSecond = 0x590; // float32
    public const nint m_bIsOn = 0x594; // bool
    public const nint m_pNext = 0x598; // C_PointCamera*
}

public static class C_PointCameraVFOV {
    public const nint m_flVerticalFOV = 0x5A0; // float32
}

public static class C_PointClientUIDialog {
    public const nint m_hActivator = 0x7E8; // CHandle< C_BaseEntity >
    public const nint m_bStartEnabled = 0x7EC; // bool
}

public static class C_PointClientUIHUD {
    public const nint m_bCheckCSSClasses = 0x7F0; // bool
    public const nint m_bIgnoreInput = 0x978; // bool
    public const nint m_flWidth = 0x97C; // float32
    public const nint m_flHeight = 0x980; // float32
    public const nint m_flDPI = 0x984; // float32
    public const nint m_flInteractDistance = 0x988; // float32
    public const nint m_flDepthOffset = 0x98C; // float32
    public const nint m_unOwnerContext = 0x990; // uint32
    public const nint m_unHorizontalAlign = 0x994; // uint32
    public const nint m_unVerticalAlign = 0x998; // uint32
    public const nint m_unOrientation = 0x99C; // uint32
    public const nint m_bAllowInteractionFromAllSceneWorlds = 0x9A0; // bool
    public const nint m_vecCSSClasses = 0x9A8; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
}

public static class C_PointClientUIWorldPanel {
    public const nint m_bForceRecreateNextUpdate = 0x7F0; // bool
    public const nint m_bMoveViewToPlayerNextThink = 0x7F1; // bool
    public const nint m_bCheckCSSClasses = 0x7F2; // bool
    public const nint m_anchorDeltaTransform = 0x800; // CTransform
    public const nint m_pOffScreenIndicator = 0x9A0; // CPointOffScreenIndicatorUi*
    public const nint m_bIgnoreInput = 0x9C8; // bool
    public const nint m_bLit = 0x9C9; // bool
    public const nint m_bFollowPlayerAcrossTeleport = 0x9CA; // bool
    public const nint m_flWidth = 0x9CC; // float32
    public const nint m_flHeight = 0x9D0; // float32
    public const nint m_flDPI = 0x9D4; // float32
    public const nint m_flInteractDistance = 0x9D8; // float32
    public const nint m_flDepthOffset = 0x9DC; // float32
    public const nint m_unOwnerContext = 0x9E0; // uint32
    public const nint m_unHorizontalAlign = 0x9E4; // uint32
    public const nint m_unVerticalAlign = 0x9E8; // uint32
    public const nint m_unOrientation = 0x9EC; // uint32
    public const nint m_bAllowInteractionFromAllSceneWorlds = 0x9F0; // bool
    public const nint m_vecCSSClasses = 0x9F8; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
    public const nint m_bOpaque = 0xA10; // bool
    public const nint m_bNoDepth = 0xA11; // bool
    public const nint m_bRenderBackface = 0xA12; // bool
    public const nint m_bUseOffScreenIndicator = 0xA13; // bool
    public const nint m_bExcludeFromSaveGames = 0xA14; // bool
    public const nint m_bGrabbable = 0xA15; // bool
    public const nint m_bOnlyRenderToTexture = 0xA16; // bool
    public const nint m_bDisableMipGen = 0xA17; // bool
    public const nint m_nExplicitImageLayout = 0xA18; // int32
}

public static class C_PointClientUIWorldTextPanel {
    public const nint m_messageText = 0xA20; // char[512]
}

public static class C_PointCommentaryNode {
    public const nint m_bActive = 0x7E8; // bool
    public const nint m_bWasActive = 0x7E9; // bool
    public const nint m_flEndTime = 0x7EC; // GameTime_t
    public const nint m_flStartTime = 0x7F0; // GameTime_t
    public const nint m_flStartTimeInCommentary = 0x7F4; // float32
    public const nint m_iszCommentaryFile = 0x7F8; // CUtlSymbolLarge
    public const nint m_iszTitle = 0x800; // CUtlSymbolLarge
    public const nint m_iszSpeakers = 0x808; // CUtlSymbolLarge
    public const nint m_iNodeNumber = 0x810; // int32
    public const nint m_iNodeNumberMax = 0x814; // int32
    public const nint m_bListenedTo = 0x818; // bool
    public const nint m_hViewPosition = 0x828; // CHandle< C_BaseEntity >
    public const nint m_bRestartAfterRestore = 0x82C; // bool
}

public static class C_PointValueRemapper {
    public const nint m_bDisabled = 0x538; // bool
    public const nint m_bDisabledOld = 0x539; // bool
    public const nint m_bUpdateOnClient = 0x53A; // bool
    public const nint m_nInputType = 0x53C; // ValueRemapperInputType_t
    public const nint m_hRemapLineStart = 0x540; // CHandle< C_BaseEntity >
    public const nint m_hRemapLineEnd = 0x544; // CHandle< C_BaseEntity >
    public const nint m_flMaximumChangePerSecond = 0x548; // float32
    public const nint m_flDisengageDistance = 0x54C; // float32
    public const nint m_flEngageDistance = 0x550; // float32
    public const nint m_bRequiresUseKey = 0x554; // bool
    public const nint m_nOutputType = 0x558; // ValueRemapperOutputType_t
    public const nint m_hOutputEntities = 0x560; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
    public const nint m_nHapticsType = 0x578; // ValueRemapperHapticsType_t
    public const nint m_nMomentumType = 0x57C; // ValueRemapperMomentumType_t
    public const nint m_flMomentumModifier = 0x580; // float32
    public const nint m_flSnapValue = 0x584; // float32
    public const nint m_flCurrentMomentum = 0x588; // float32
    public const nint m_nRatchetType = 0x58C; // ValueRemapperRatchetType_t
    public const nint m_flRatchetOffset = 0x590; // float32
    public const nint m_flInputOffset = 0x594; // float32
    public const nint m_bEngaged = 0x598; // bool
    public const nint m_bFirstUpdate = 0x599; // bool
    public const nint m_flPreviousValue = 0x59C; // float32
    public const nint m_flPreviousUpdateTickTime = 0x5A0; // GameTime_t
    public const nint m_vecPreviousTestPoint = 0x5A4; // Vector
}

public static class C_PointWorldText {
    public const nint m_bForceRecreateNextUpdate = 0x7C0; // bool
    public const nint m_messageText = 0x7D0; // char[512]
    public const nint m_FontName = 0x9D0; // char[64]
    public const nint m_bEnabled = 0xA10; // bool
    public const nint m_bFullbright = 0xA11; // bool
    public const nint m_flWorldUnitsPerPx = 0xA14; // float32
    public const nint m_flFontSize = 0xA18; // float32
    public const nint m_flDepthOffset = 0xA1C; // float32
    public const nint m_Color = 0xA20; // Color
    public const nint m_nJustifyHorizontal = 0xA24; // PointWorldTextJustifyHorizontal_t
    public const nint m_nJustifyVertical = 0xA28; // PointWorldTextJustifyVertical_t
    public const nint m_nReorientMode = 0xA2C; // PointWorldTextReorientMode_t
}

public static class C_PortraitHero {
    public const nint m_nHeroID = 0x1768; // int32
    public const nint m_actQueuedActivity = 0x176C; // int32
    public const nint m_szQueuedActivityModifier = 0x1770; // char[64]
}

public static class C_PortraitWorldLight {
    public const nint m_flLatitude = 0xA80; // float32
    public const nint m_flLongitude = 0xA84; // float32
    public const nint m_flAdditionalRadius = 0xA88; // float32
    public const nint m_flBoundsRadiusMultiplier = 0xA8C; // float32
    public const nint m_hTarget = 0xA90; // CHandle< C_PortraitWorldUnit >
    public const nint m_bShowGizmos = 0xA94; // bool
    public const nint m_hitboxSetName = 0xA98; // CUtlStringToken
    public const nint m_vPreviousCenter = 0xA9C; // Vector
    public const nint m_vCenterVelocity = 0xAA8; // Vector
    public const nint m_flPreviousBoundingSphereRadius = 0xAB4; // float32
    public const nint m_flBoundingSphereRadiusChangeSpeed = 0xAB8; // float32
    public const nint m_bPreviousValuesInitialized = 0xABC; // bool
}

public static class C_PortraitWorldUnit {
    public const nint m_bSuppressIntroEffects = 0x1768; // bool
    public const nint m_bIsAlternateLoadout = 0x1769; // bool
    public const nint m_bSpawnBackgroundModels = 0x176A; // bool
    public const nint m_bDeferredPortrait = 0x176B; // bool
    public const nint m_bShowParticleAssetModifiers = 0x176C; // bool
    public const nint m_bIgnorePortraitInfo = 0x176D; // bool
    public const nint m_bFlyingCourier = 0x176E; // bool
    public const nint m_bDisableDefaultModifiers = 0x176F; // bool
    public const nint m_nEffigyStatusEffect = 0x1770; // int32
    public const nint m_effigySequenceName = 0x1778; // CUtlSymbolLarge
    public const nint m_flStartingAnimationCycle = 0x1780; // float32
    public const nint m_flAnimationPlaybackSpeed = 0x1784; // float32
    public const nint m_flRareLoadoutAnimChance = 0x1788; // float32
    public const nint m_vecActivityModifiers = 0x1790; // CUtlVector< CUtlSymbolLarge >
    public const nint m_environment = 0x17A8; // DOTAPortraitEnvironmentType_t
    public const nint m_nStartupBehavior = 0x17B0; // StartupBehavior_t
    public const nint m_cameraName = 0x1998; // CUtlSymbolLarge
    public const nint m_nPortraitParticle = 0x19F0; // ParticleIndex_t
    public const nint m_nCourierType = 0x19F4; // int32
}

public static class C_PostProcessingVolume {
    public const nint m_hPostSettings = 0x7D0; // CStrongHandle< InfoForResourceTypeCPostProcessingResource >
    public const nint m_flFadeDuration = 0x7D8; // float32
    public const nint m_flMinLogExposure = 0x7DC; // float32
    public const nint m_flMaxLogExposure = 0x7E0; // float32
    public const nint m_flMinExposure = 0x7E4; // float32
    public const nint m_flMaxExposure = 0x7E8; // float32
    public const nint m_flExposureCompensation = 0x7EC; // float32
    public const nint m_flExposureFadeSpeedUp = 0x7F0; // float32
    public const nint m_flExposureFadeSpeedDown = 0x7F4; // float32
    public const nint m_flTonemapEVSmoothingRange = 0x7F8; // float32
    public const nint m_bMaster = 0x7FC; // bool
    public const nint m_bExposureControl = 0x7FD; // bool
}

public static class C_RagdollManager {
    public const nint m_iCurrentMaxRagdollCount = 0x538; // int8
}

public static class C_RagdollProp {
    public const nint m_ragPos = 0x980; // C_NetworkUtlVectorBase< Vector >
    public const nint m_ragAngles = 0x998; // C_NetworkUtlVectorBase< QAngle >
    public const nint m_flBlendWeight = 0x9B0; // float32
    public const nint m_hRagdollSource = 0x9B4; // CHandle< C_BaseEntity >
    public const nint m_iEyeAttachment = 0x9B8; // AttachmentHandle_t
    public const nint m_flBlendWeightCurrent = 0x9BC; // float32
    public const nint m_parentPhysicsBoneIndices = 0x9C0; // CUtlVector< int32 >
    public const nint m_worldSpaceBoneComputationOrder = 0x9D8; // CUtlVector< int32 >
}

public static class C_RagdollPropAttached {
    public const nint m_boneIndexAttached = 0x9F0; // uint32
    public const nint m_ragdollAttachedObjectIndex = 0x9F4; // uint32
    public const nint m_attachmentPointBoneSpace = 0x9F8; // Vector
    public const nint m_attachmentPointRagdollSpace = 0xA04; // Vector
    public const nint m_vecOffset = 0xA10; // Vector
    public const nint m_parentTime = 0xA1C; // float32
    public const nint m_bHasParent = 0xA20; // bool
}

public static class C_RopeKeyframe {
    public const nint m_LinksTouchingSomething = 0x7C0; // CBitVec< 10 >
    public const nint m_nLinksTouchingSomething = 0x7C4; // int32
    public const nint m_bApplyWind = 0x7C8; // bool
    public const nint m_fPrevLockedPoints = 0x7CC; // int32
    public const nint m_iForcePointMoveCounter = 0x7D0; // int32
    public const nint m_bPrevEndPointPos = 0x7D4; // bool[2]
    public const nint m_vPrevEndPointPos = 0x7D8; // Vector[2]
    public const nint m_flCurScroll = 0x7F0; // float32
    public const nint m_flScrollSpeed = 0x7F4; // float32
    public const nint m_RopeFlags = 0x7F8; // uint16
    public const nint m_iRopeMaterialModelIndex = 0x800; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_LightValues = 0xA78; // Vector[10]
    public const nint m_nSegments = 0xAF0; // uint8
    public const nint m_hStartPoint = 0xAF4; // CHandle< C_BaseEntity >
    public const nint m_hEndPoint = 0xAF8; // CHandle< C_BaseEntity >
    public const nint m_iStartAttachment = 0xAFC; // AttachmentHandle_t
    public const nint m_iEndAttachment = 0xAFD; // AttachmentHandle_t
    public const nint m_Subdiv = 0xAFE; // uint8
    public const nint m_RopeLength = 0xB00; // int16
    public const nint m_Slack = 0xB02; // int16
    public const nint m_TextureScale = 0xB04; // float32
    public const nint m_fLockedPoints = 0xB08; // uint8
    public const nint m_nChangeCount = 0xB09; // uint8
    public const nint m_Width = 0xB0C; // float32
    public const nint m_PhysicsDelegate = 0xB10; // C_RopeKeyframe::CPhysicsDelegate
    public const nint m_hMaterial = 0xB20; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_TextureHeight = 0xB28; // int32
    public const nint m_vecImpulse = 0xB2C; // Vector
    public const nint m_vecPreviousImpulse = 0xB38; // Vector
    public const nint m_flCurrentGustTimer = 0xB44; // float32
    public const nint m_flCurrentGustLifetime = 0xB48; // float32
    public const nint m_flTimeToNextGust = 0xB4C; // float32
    public const nint m_vWindDir = 0xB50; // Vector
    public const nint m_vColorMod = 0xB5C; // Vector
    public const nint m_vCachedEndPointAttachmentPos = 0xB68; // Vector[2]
    public const nint m_vCachedEndPointAttachmentAngle = 0xB80; // QAngle[2]
    public const nint m_bConstrainBetweenEndpoints = 0xB98; // bool
    public const nint m_bEndPointAttachmentPositionsDirty = 0x0; // bitfield:1
    public const nint m_bEndPointAttachmentAnglesDirty = 0x0; // bitfield:1
    public const nint m_bNewDataThisFrame = 0x0; // bitfield:1
    public const nint m_bPhysicsInitted = 0x0; // bitfield:1
}

public static class C_RopeKeyframe_CPhysicsDelegate {
    public const nint m_pKeyframe = 0x8; // C_RopeKeyframe*
}

public static class C_SceneEntity {
    public const nint m_bIsPlayingBack = 0x540; // bool
    public const nint m_bPaused = 0x541; // bool
    public const nint m_bMultiplayer = 0x542; // bool
    public const nint m_bAutogenerated = 0x543; // bool
    public const nint m_flForceClientTime = 0x544; // float32
    public const nint m_nSceneStringIndex = 0x548; // uint16
    public const nint m_bClientOnly = 0x54A; // bool
    public const nint m_hOwner = 0x54C; // CHandle< C_BaseFlex >
    public const nint m_hActorList = 0x550; // C_NetworkUtlVectorBase< CHandle< C_BaseFlex > >
    public const nint m_bWasPlaying = 0x568; // bool
    public const nint m_QueuedEvents = 0x578; // CUtlVector< C_SceneEntity::QueuedEvents_t >
    public const nint m_flCurrentTime = 0x590; // float32
}

public static class C_SceneEntity_QueuedEvents_t {
    public const nint starttime = 0x0; // float32
}

public static class C_SkyCamera {
    public const nint m_skyboxData = 0x538; // sky3dparams_t
    public const nint m_skyboxSlotToken = 0x5C8; // CUtlStringToken
    public const nint m_bUseAngles = 0x5CC; // bool
    public const nint m_pNext = 0x5D0; // C_SkyCamera*
}

public static class C_SoundAreaEntityBase {
    public const nint m_bDisabled = 0x538; // bool
    public const nint m_bWasEnabled = 0x540; // bool
    public const nint m_iszSoundAreaType = 0x548; // CUtlSymbolLarge
    public const nint m_vPos = 0x550; // Vector
}

public static class C_SoundAreaEntityOrientedBox {
    public const nint m_vMin = 0x560; // Vector
    public const nint m_vMax = 0x56C; // Vector
}

public static class C_SoundAreaEntitySphere {
    public const nint m_flRadius = 0x560; // float32
}

public static class C_SoundOpvarSetPointBase {
    public const nint m_iszStackName = 0x538; // CUtlSymbolLarge
    public const nint m_iszOperatorName = 0x540; // CUtlSymbolLarge
    public const nint m_iszOpvarName = 0x548; // CUtlSymbolLarge
    public const nint m_iOpvarIndex = 0x550; // int32
    public const nint m_bUseAutoCompare = 0x554; // bool
}

public static class C_SpeechBubbleInfo {
    public const nint m_LocalizationStr = 0x30; // char[256]
    public const nint m_hNPC = 0x130; // CHandle< C_BaseEntity >
    public const nint m_flStartTime = 0x134; // GameTime_t
    public const nint m_flDuration = 0x138; // float32
    public const nint m_unOffsetX = 0x13C; // uint32
    public const nint m_unOffsetY = 0x140; // uint32
    public const nint m_unCount = 0x144; // uint16
}

public static class C_SpeechBubbleManager {
    public const nint m_SpeechBubbles = 0x538; // C_UtlVectorEmbeddedNetworkVar< C_SpeechBubbleInfo >
    public const nint m_nLastCountInQueue = 0x12D8; // uint32[4]
}

public static class C_Sprite {
    public const nint m_hSpriteMaterial = 0x7D0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_hAttachedToEntity = 0x7D8; // CHandle< C_BaseEntity >
    public const nint m_nAttachment = 0x7DC; // AttachmentHandle_t
    public const nint m_flSpriteFramerate = 0x7E0; // float32
    public const nint m_flFrame = 0x7E4; // float32
    public const nint m_flDieTime = 0x7E8; // GameTime_t
    public const nint m_nBrightness = 0x7F8; // uint32
    public const nint m_flBrightnessDuration = 0x7FC; // float32
    public const nint m_flSpriteScale = 0x800; // float32
    public const nint m_flScaleDuration = 0x804; // float32
    public const nint m_bWorldSpaceScale = 0x808; // bool
    public const nint m_flGlowProxySize = 0x80C; // float32
    public const nint m_flHDRColorScale = 0x810; // float32
    public const nint m_flLastTime = 0x814; // GameTime_t
    public const nint m_flMaxFrame = 0x818; // float32
    public const nint m_flStartScale = 0x81C; // float32
    public const nint m_flDestScale = 0x820; // float32
    public const nint m_flScaleTimeStart = 0x824; // GameTime_t
    public const nint m_nStartBrightness = 0x828; // int32
    public const nint m_nDestBrightness = 0x82C; // int32
    public const nint m_flBrightnessTimeStart = 0x830; // GameTime_t
    public const nint m_hOldSpriteMaterial = 0x838; // CWeakHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_nSpriteWidth = 0x8E0; // int32
    public const nint m_nSpriteHeight = 0x8E4; // int32
}

public static class C_Team {
    public const nint m_aPlayerControllers = 0x538; // C_NetworkUtlVectorBase< CHandle< CBasePlayerController > >
    public const nint m_aPlayers = 0x550; // C_NetworkUtlVectorBase< CHandle< C_BasePlayerPawn > >
    public const nint m_iScore = 0x568; // int32
    public const nint m_szTeamname = 0x56C; // char[129]
}

public static class C_TextureBasedAnimatable {
    public const nint m_bLoop = 0x7B8; // bool
    public const nint m_flFPS = 0x7BC; // float32
    public const nint m_hPositionKeys = 0x7C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hRotationKeys = 0x7C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vAnimationBoundsMin = 0x7D0; // Vector
    public const nint m_vAnimationBoundsMax = 0x7DC; // Vector
    public const nint m_flStartTime = 0x7E8; // float32
    public const nint m_flStartFrame = 0x7EC; // float32
}

public static class C_TonemapController2 {
    public const nint m_flAutoExposureMin = 0x538; // float32
    public const nint m_flAutoExposureMax = 0x53C; // float32
    public const nint m_flTonemapPercentTarget = 0x540; // float32
    public const nint m_flTonemapPercentBrightPixels = 0x544; // float32
    public const nint m_flTonemapMinAvgLum = 0x548; // float32
    public const nint m_flExposureAdaptationSpeedUp = 0x54C; // float32
    public const nint m_flExposureAdaptationSpeedDown = 0x550; // float32
    public const nint m_flTonemapEVSmoothingRange = 0x554; // float32
}

public static class C_World {
    public const nint m_skyBoxFaces = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >[6]
    public const nint m_hHeightFogTexture = 0x7E8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hHeightFogMaskTexture = 0x7F0; // CStrongHandle< InfoForResourceTypeCTextureBase >
}

public static class C_fogplayerparams_t {
    public const nint m_hCtrl = 0x8; // CHandle< C_FogController >
    public const nint m_flTransitionTime = 0xC; // float32
    public const nint m_OldColor = 0x10; // Color
    public const nint m_flOldStart = 0x14; // float32
    public const nint m_flOldEnd = 0x18; // float32
    public const nint m_flOldMaxDensity = 0x1C; // float32
    public const nint m_flOldHDRColorScale = 0x20; // float32
    public const nint m_flOldFarZ = 0x24; // float32
    public const nint m_NewColor = 0x28; // Color
    public const nint m_flNewStart = 0x2C; // float32
    public const nint m_flNewEnd = 0x30; // float32
    public const nint m_flNewMaxDensity = 0x34; // float32
    public const nint m_flNewHDRColorScale = 0x38; // float32
    public const nint m_flNewFarZ = 0x3C; // float32
}

public static class CandyShopCandyType_t {
    public const nint m_unCandyTypeID = 0x0; // CandyShopCandyTypeID_t
    public const nint m_sLocName = 0x8; // CUtlString
    public const nint m_sImage = 0x10; // CPanoramaImageName
}

public static class CandyShopRewardOption_t {
    public const nint m_unRewardOptionID = 0x0; // CandyShopRewardOptionID_t
    public const nint m_sRewardClass = 0x8; // CUtlString
    public const nint m_unRewardOptionMaxCount = 0x10; // uint32
    public const nint m_unWeight = 0x14; // uint32
    public const nint m_unCandyPrice = 0x18; // uint32
    public const nint m_eOptionType = 0x1C; // ECandyShopRewardOptionType
    public const nint m_unSingleItemDef = 0x20; // item_definition_index_t
    public const nint m_sLootList = 0x28; // CUtlString
    public const nint m_eEvent = 0x30; // EEvent
    public const nint m_unEventActionID = 0x34; // uint32
    public const nint m_unEventPoints = 0x38; // uint32
}

public static class CandyShopRewardSlot_t {
    public const nint m_sSlotClass = 0x0; // CUtlString
    public const nint m_vecSlotRewardOptions = 0x8; // CUtlVector< CandyShopRewardOption_t >
}

public static class ClientQuickBuyItemState {
    public const nint nItemType = 0x30; // int16
    public const nint bPurchasable = 0x32; // bool
}

public static class CountdownTimer {
    public const nint m_duration = 0x8; // float32
    public const nint m_timestamp = 0xC; // GameTime_t
    public const nint m_timescale = 0x10; // float32
    public const nint m_nWorldGroupId = 0x14; // WorldGroupId_t
}

public static class DOTATeleportInfo_t {
    public const nint m_flTime = 0x30; // GameTime_t
    public const nint m_vPosition = 0x34; // Vector2D
    public const nint m_bIsOutpost = 0x3C; // bool
}

public static class DOTAThreatLevelInfo_t {
    public const nint m_flKillability = 0x30; // float32
    public const nint m_nEntIndex = 0x34; // int32
}

public static class DOTA_AssassinMinigameNetworkState {
    public const nint nAssassinState = 0x8; // uint16
    public const nint nVictimHeroID = 0xA; // uint16
}

public static class DataTeamPlayer_t {
    public const nint m_iReliableGold = 0x30; // int32
    public const nint m_iUnreliableGold = 0x34; // int32
    public const nint m_iStartingPosition = 0x38; // int32
    public const nint m_iTotalEarnedGold = 0x3C; // int32
    public const nint m_iTotalEarnedXP = 0x40; // int32
    public const nint m_iSharedGold = 0x44; // int32
    public const nint m_iHeroKillGold = 0x48; // int32
    public const nint m_iCreepKillGold = 0x4C; // int32
    public const nint m_iNeutralKillGold = 0x50; // int32
    public const nint m_iCourierGold = 0x54; // int32
    public const nint m_iBountyGold = 0x58; // int32
    public const nint m_iRoshanGold = 0x5C; // int32
    public const nint m_iBuildingGold = 0x60; // int32
    public const nint m_iOtherGold = 0x64; // int32
    public const nint m_iComebackGold = 0x68; // int32
    public const nint m_iExperimentalGold = 0x6C; // int32
    public const nint m_iExperimental2Gold = 0x70; // int32
    public const nint m_iCreepDenyGold = 0x74; // int32
    public const nint m_iTPScrollsPurchased = 0x78; // int32
    public const nint m_flCustomStats = 0x7C; // float32
    public const nint m_iIncomeGold = 0x80; // int32
    public const nint m_iWardKillGold = 0x84; // int32
    public const nint m_iAbilityGold = 0x88; // int32
    public const nint m_iNetWorth = 0x8C; // int32
    public const nint m_iDenyCount = 0x90; // int32
    public const nint m_iLastHitCount = 0x94; // int32
    public const nint m_iLastHitStreak = 0x98; // int32
    public const nint m_iLastHitMultikill = 0x9C; // int32
    public const nint m_iNearbyCreepDeathCount = 0xA0; // int32
    public const nint m_iClaimedDenyCount = 0xA4; // int32
    public const nint m_iClaimedMissCount = 0xA8; // int32
    public const nint m_iMissCount = 0xAC; // int32
    public const nint m_nPossibleHeroSelection = 0xB0; // int32
    public const nint m_iMetaLevel = 0xB4; // uint16
    public const nint m_iMetaExperience = 0xB6; // uint16
    public const nint m_iMetaExperienceAwarded = 0xB8; // uint16
    public const nint m_flBuybackCooldownTime = 0xBC; // GameTime_t
    public const nint m_flBuybackGoldLimitTime = 0xC0; // GameTime_t
    public const nint m_flBuybackCostTime = 0xC4; // float32
    public const nint m_flCustomBuybackCooldown = 0xC8; // float32
    public const nint m_fStuns = 0xCC; // float32
    public const nint m_fHealing = 0xD0; // float32
    public const nint m_fRegeneratedHealth = 0xD4; // float32
    public const nint m_iTowerKills = 0xD8; // int32
    public const nint m_iRoshanKills = 0xDC; // int32
    public const nint m_hCameraTarget = 0xE0; // CHandle< C_BaseEntity >
    public const nint m_hOverrideSelectionEntity = 0xE4; // CHandle< C_BaseEntity >
    public const nint m_iObserverWardsPlaced = 0xE8; // int32
    public const nint m_iSentryWardsPlaced = 0xEC; // int32
    public const nint m_iCreepsStacked = 0xF0; // int32
    public const nint m_iCampsStacked = 0xF4; // int32
    public const nint m_iRunePickups = 0xF8; // int32
    public const nint m_iGoldSpentOnSupport = 0xFC; // int32
    public const nint m_iHeroDamage = 0x100; // int32
    public const nint m_iTowerDamage = 0x104; // int32
    public const nint m_iWardsPurchased = 0x108; // int32
    public const nint m_iWardsDestroyed = 0x10C; // int32
    public const nint m_PreGameInventory = 0x110; // C_DOTA_UnitInventory
    public const nint m_nKillsPerOpposingTeamMember = 0x1C8; // int32[24]
    public const nint m_iSuggestedAbilities = 0x228; // AbilityID_t[5]
    public const nint m_fSuggestedAbilityWeights = 0x23C; // float32[5]
    public const nint m_iSuggestedPregameItems = 0x250; // AbilityID_t[15]
    public const nint m_iSuggestedItemSequences = 0x28C; // AbilityID_t[30]
    public const nint m_iSuggestedWeightedItems = 0x304; // WeightedAbilitySuggestion_t[15]
    public const nint m_iSuggestedTopNItems = 0x37C; // WeightedAbilitySuggestion_t[3]
    public const nint m_iSuggestedNeutralItems = 0x394; // WeightedAbilitySuggestion_t[25]
    public const nint m_iSuggestedHeroes = 0x45C; // uint32[10]
    public const nint m_flSuggestedHeroesWeights = 0x484; // float32[10]
    public const nint m_iDamageByTypeReceivedPreReduction = 0x4AC; // int32[3]
    public const nint m_iDamageByTypeReceivedPostReduction = 0x4B8; // int32[3]
    public const nint m_iOutgoingDamageByTypePreReduction = 0x4C4; // int32[3]
    public const nint m_iOutgoingDamageByTypePostReduction = 0x4D0; // int32[3]
    public const nint m_iCommandsIssued = 0x4DC; // int32
    public const nint m_iGoldSpentOnConsumables = 0x4E0; // int32
    public const nint m_iGoldSpentOnItems = 0x4E4; // int32
    public const nint m_iGoldSpentOnBuybacks = 0x4E8; // int32
    public const nint m_iGoldLostToDeath = 0x4EC; // int32
    public const nint m_bIsNewPlayer = 0x4F0; // bool
    public const nint m_bIsGuidePlayer = 0x4F1; // bool
    public const nint m_iPlayerSteamID = 0x4F8; // uint64
    public const nint m_iSmokesUsed = 0x500; // int32
    public const nint m_iNeutralTokensFound = 0x504; // int32
    public const nint m_iWatchersTaken = 0x508; // int32
    public const nint m_iLotusesTaken = 0x50C; // int32
    public const nint m_iTormentorKills = 0x510; // int32
    public const nint m_iCourierKills = 0x514; // int32
}

public static class EngineCountdownTimer {
    public const nint m_duration = 0x8; // float32
    public const nint m_timestamp = 0xC; // float32
    public const nint m_timescale = 0x10; // float32
}

public static class EntityRenderAttribute_t {
    public const nint m_ID = 0x30; // CUtlStringToken
    public const nint m_Values = 0x34; // Vector4D
}

public static class FowBlocker_t {
    public const nint m_flMinX = 0x30; // float32
    public const nint m_flMaxX = 0x34; // float32
    public const nint m_flMinY = 0x38; // float32
    public const nint m_flMaxY = 0x3C; // float32
    public const nint m_fowBlockerShape = 0x40; // FowBlockerShape_t
    public const nint m_bClearRegion = 0x44; // bool
}

public static class InGamePredictionData_t {
    public const nint m_nID = 0x28; // uint32
    public const nint m_nValue = 0x2C; // uint32
    public const nint m_nRawValue = 0x30; // uint32
    public const nint m_nValueState = 0x34; // uint8
    public const nint m_bValueIsMask = 0x35; // bool
}

public static class IntervalTimer {
    public const nint m_timestamp = 0x8; // GameTime_t
    public const nint m_nWorldGroupId = 0xC; // WorldGroupId_t
}

public static class Modifier_Pluck_Famango_Channel {
    public const nint famango_rate = 0x1318; // float32
    public const nint m_hMangoTree = 0x131C; // CHandle< C_BaseEntity >
}

public static class NagaSiren_SongOfTheSiren_Healing {
    public const nint heal_pct = 0x1318; // int32
}

public static class NeutralCampStackPullAlarm_t {
    public const nint m_vPosition = 0x0; // Vector
    public const nint m_flPullAlarmTime = 0xC; // float32
    public const nint m_flStackAlarmTime = 0x10; // float32
    public const nint m_nCampIndex = 0x14; // int32
    public const nint m_nAlarmTypes = 0x18; // int32
}

public static class PhysicsRagdollPose_t {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
    public const nint m_Transforms = 0x30; // C_NetworkUtlVectorBase< CTransform >
    public const nint m_hOwner = 0x48; // CHandle< C_BaseEntity >
    public const nint m_bDirty = 0x68; // bool
}

public static class PingConfirmationState_t {
    public const nint m_nInitiatingPlayerID = 0x30; // int32
    public const nint m_PingWheelMessageID = 0x34; // int32
    public const nint m_flActiveUntilTime = 0x38; // float32
    public const nint m_vLocation = 0x3C; // Vector2D
    public const nint m_nPingedEntityEntIndex = 0x44; // int32
    public const nint m_nID = 0x48; // int32
    public const nint m_IconType = 0x4C; // PingConfirmationIconType
    public const nint m_nAgreeState = 0x50; // int32[24]
}

public static class PlayerResourceBroadcasterData_t {
    public const nint m_iszBroadcasterChannelDescription = 0x30; // CUtlSymbolLarge
    public const nint m_iszBroadcasterChannelCountryCode = 0x38; // CUtlSymbolLarge
    public const nint m_iszBroadcasterChannelLanguageCode = 0x40; // CUtlSymbolLarge
}

public static class PlayerResourcePlayerData_t {
    public const nint m_bIsValid = 0x30; // bool
    public const nint m_iszPlayerName = 0x38; // CUtlSymbolLarge
    public const nint m_iPlayerTeam = 0x40; // int32
    public const nint m_bFullyJoinedServer = 0x44; // bool
    public const nint m_bFakeClient = 0x45; // bool
    public const nint m_bIsBroadcaster = 0x46; // bool
    public const nint m_iBroadcasterChannel = 0x48; // uint32
    public const nint m_iBroadcasterChannelSlot = 0x4C; // uint32
    public const nint m_bIsBroadcasterChannelCameraman = 0x50; // bool
    public const nint m_iConnectionState = 0x54; // int32
    public const nint m_iPlayerSteamID = 0x58; // uint64
    public const nint m_eCoachTeam = 0x60; // DOTATeam_t
    public const nint m_vecPrivateCoachPlayerIDs = 0x68; // C_NetworkUtlVectorBase< PlayerID_t >
    public const nint m_unCoachRating = 0x80; // uint32
    public const nint m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
    public const nint m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
    public const nint m_bIsPlusSubscriber = 0x8C; // bool
    public const nint m_bWasMVPLastGame = 0x8D; // bool
    public const nint m_nCavernCrawlMapVariant = 0x8E; // CavernCrawlMapVariant_t
    public const nint m_eAccoladeType = 0x90; // int32[3]
    public const nint m_unAccoladeData = 0xA0; // uint64[3]
    public const nint m_iRankTier = 0xB8; // int32
    public const nint m_iTitle = 0xBC; // int32
    public const nint m_unFavTeamPacked = 0xC0; // uint64
    public const nint m_nPlayerSlot = 0xC8; // CPlayerSlot
    public const nint m_bIsBot = 0xCC; // bool
    public const nint m_bHasNeutralTier = 0xCD; // bool[5]
    public const nint m_bHasRedeemedNeutralTier = 0xD2; // bool[5]
    public const nint m_nCommLevel = 0xD8; // int32
    public const nint m_nBehaviorLevel = 0xDC; // int32
    public const nint m_flLastCommsTime = 0xE0; // float32
}

public static class PlayerResourcePlayerEventData_t {
    public const nint m_iEventID = 0x30; // uint32
    public const nint m_iEventPoints = 0x34; // uint32
    public const nint m_iEventPremiumPoints = 0x38; // uint32
    public const nint m_iEventEffectsMask = 0x3C; // uint32
    public const nint m_iEventRanks = 0x40; // uint16
    public const nint m_bIsEventOwned = 0x42; // bool
    public const nint m_iFavoriteTeam = 0x44; // uint32
    public const nint m_iFavoriteTeamQuality = 0x48; // uint16
    public const nint m_iAvailableSalutes = 0x4A; // uint8
    public const nint m_iSaluteAmountIndex = 0x4B; // uint8
    public const nint m_iEventWagerStreak = 0x4C; // uint32
    public const nint m_iEventTeleportFXLevel = 0x50; // uint8
    public const nint m_nCandyPointsReason = 0x54; // int32[5]
    public const nint m_vecPeriodicResources = 0x68; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerPeriodicResourceData_t >
    public const nint m_iObsoleteSaluteAmounts = 0xB8; // uint8
    public const nint m_iObsoleteEventArcanaPeriodicResourceRemaining = 0xBC; // uint32
    public const nint m_iObsoleteEventArcanaPeriodicResourceMax = 0xC0; // uint32
    public const nint m_iObsoleteEventWagerTokensRemaining = 0xC4; // uint32
    public const nint m_iObsoleteEventWagerTokensMax = 0xC8; // uint32
    public const nint m_iObsoleteEventBountiesRemaining = 0xCC; // uint32
    public const nint m_iObsoleteRankWagersAvailable = 0xD0; // uint32
    public const nint m_iObsoleteRankWagersMax = 0xD4; // uint32
    public const nint m_iObsoleteEventPointAdjustmentsRemaining = 0xD8; // uint32
}

public static class PlayerResourcePlayerPeriodicResourceData_t {
    public const nint m_unPeriodicResourceID = 0x30; // PeriodicResourceID_t
    public const nint m_unPeriodicResourceMax = 0x34; // uint32
    public const nint m_unPeriodicResourceRemaining = 0x38; // uint32
}

public static class PlayerResourcePlayerTeamData_t {
    public const nint m_ThreatLevelInfos = 0x30; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
    public const nint m_nSelectedHeroID = 0x80; // int32
    public const nint m_iKills = 0x84; // int32
    public const nint m_iAssists = 0x88; // int32
    public const nint m_iDeaths = 0x8C; // int32
    public const nint m_iStreak = 0x90; // int32
    public const nint m_iLevel = 0x94; // int32
    public const nint m_iCustomIntParam = 0x98; // int32
    public const nint m_iRespawnSeconds = 0x9C; // int32
    public const nint m_flLastBuybackTime = 0xA0; // GameTime_t
    public const nint m_iLastBuybackTime_Obsolete = 0xA4; // int32
    public const nint m_hSelectedHero = 0xA8; // CHandle< C_BaseEntity >
    public const nint m_bAFK = 0xAC; // bool
    public const nint m_nSuggestedHeroes = 0xB0; // int32[4]
    public const nint m_bBanSuggestedHeroes = 0xC0; // bool[4]
    public const nint m_iTimedRewardDrops = 0xC4; // item_definition_index_t
    public const nint m_iTimedRewardDropOrigins = 0xC8; // int32
    public const nint m_iTimedRewardCrates = 0xCC; // item_definition_index_t
    public const nint m_iTimedRewardEvents = 0xD0; // item_definition_index_t
    public const nint m_unCompendiumLevel = 0xD4; // uint16
    public const nint m_bCanRepick = 0xD6; // bool
    public const nint m_bCanEarnRewards = 0xD7; // bool
    public const nint m_bHasRandomed = 0xD8; // bool
    public const nint m_nRandomedHeroID = 0xDC; // int32
    public const nint m_bBattleBonusActive = 0xE0; // bool
    public const nint m_iBattleBonusRate = 0xE2; // uint16
    public const nint m_iCustomBuybackCost = 0xE4; // int32
    public const nint m_CustomPlayerColor = 0xE8; // Color
    public const nint m_bQualifiesForPAContractReward = 0xEC; // bool
    public const nint m_bHasPredictedVictory = 0xED; // bool
    public const nint m_UnitShareMasks = 0xF0; // int32
    public const nint m_iTeamSlot = 0xF4; // int32
    public const nint m_iBattleCupWinStreak = 0xF8; // uint8
    public const nint m_iBattleCupWinDate = 0x100; // uint64
    public const nint m_iBattleCupSkillLevel = 0x108; // uint16
    public const nint m_iBattleCupTeamID = 0x10C; // uint32
    public const nint m_iBattleCupTournamentID = 0x110; // uint32
    public const nint m_iBattleCupDivision = 0x114; // uint8
    public const nint m_flTeamFightParticipation = 0x118; // float32
    public const nint m_iFirstBloodClaimed = 0x11C; // int32
    public const nint m_iFirstBloodGiven = 0x120; // int32
    public const nint m_unPickOrder = 0x124; // uint32
    public const nint m_flTimeOfLastSaluteSent = 0x128; // GameTime_t
    public const nint m_vecPlayerEventData = 0x130; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerEventData_t >
    public const nint m_unSelectedHeroBadgeXP = 0x180; // uint32
    public const nint m_iBountyRunes = 0x184; // uint8
    public const nint m_iPowerRunes = 0x185; // uint8
    public const nint m_iWaterRunes = 0x186; // uint8
    public const nint m_iOutpostsCaptured = 0x187; // uint8
    public const nint m_unGuildTier = 0x188; // uint8
    public const nint m_unGuildLevel = 0x18A; // uint16
    public const nint m_unGuildPrimaryColor = 0x18C; // uint8
    public const nint m_unGuildSecondaryColor = 0x18D; // uint8
    public const nint m_unGuildPattern = 0x18E; // uint8
    public const nint m_unGuildLogo = 0x190; // uint64
    public const nint m_unGuildFlags = 0x198; // uint32
    public const nint m_bIsPartyGuild = 0x19C; // bool
    public const nint m_unGuildID = 0x1A0; // GuildID_t
    public const nint m_unHeroStickerDefIndex = 0x1A4; // item_definition_index_t
    public const nint m_eHeroStickerQuality = 0x1A8; // uint8
    public const nint m_eLaneSelectionFlags = 0x1A9; // uint8
    public const nint m_nPlayerDraftPreferredRoles = 0x1AA; // uint8
    public const nint m_nPlayerDraftPreferredTeam = 0x1AB; // int8
    public const nint m_iObsoleteEventPoints = 0x1AC; // uint32
    public const nint m_iObsoleteEventPremiumPoints = 0x1B0; // uint32
    public const nint m_iObsoleteEventWagerTokensRemaining = 0x1B4; // uint32
    public const nint m_iObsoleteEventWagerTokensMax = 0x1B8; // uint32
    public const nint m_iObsoleteEventEffectsMask = 0x1BC; // uint32
    public const nint m_iObsoleteEventRanks = 0x1C0; // uint16
    public const nint m_bObsoleteIsEventOwned = 0x1C2; // bool
    public const nint m_iObsoleteRankWagersAvailable = 0x1C4; // uint32
    public const nint m_iObsoleteRankWagersMax = 0x1C8; // uint32
    public const nint m_iObsoleteEventPointAdjustmentsRemaining = 0x1CC; // uint32
    public const nint m_iObsoleteAvailableSalutes = 0x1D0; // uint32
    public const nint m_iObsoleteSaluteAmounts = 0x1D4; // uint32
}

public static class PlayerSeatAssignment_t {
    public const nint unAccountID = 0x0; // uint32
    public const nint unSeat = 0x4; // uint32
    public const nint unReversedSeat = 0x8; // uint32
    public const nint unTeamID = 0xC; // uint32
}

public static class PortraitWorldLightConfig_t {
    public const nint m_strName = 0x0; // CUtlString
    public const nint m_flLatitude = 0x8; // float32
    public const nint m_flLongitude = 0xC; // float32
    public const nint m_flIntensity = 0x10; // float32
    public const nint m_flAdditionalRadius = 0x14; // float32
    public const nint m_flSpotFov = 0x18; // float32
    public const nint m_flAnimatedNoiseFrequency = 0x1C; // float32
    public const nint m_flAnimatedNoiseMinValue = 0x20; // float32
    public const nint m_color = 0x24; // Color
    public const nint m_bShowGizmos = 0x28; // bool
    public const nint m_bShadows = 0x29; // bool
}

public static class RoadToTIQuestDefinition_t {
    public const nint m_unID = 0x0; // RoadToTIQuestID_t
    public const nint m_eQuestType = 0x4; // ERoadToTIQuestType
    public const nint m_unPeriod = 0x8; // uint32
    public const nint m_unMatchID = 0x10; // MatchID_t
    public const nint m_unSeriesID = 0x18; // uint32
    public const nint m_unLeagueID = 0x1C; // uint32
    public const nint m_unPlayerID = 0x20; // uint32
    public const nint m_unTeamID = 0x24; // uint32
    public const nint m_vecHeroes = 0x28; // CUtlVector< uint8 >
    public const nint m_bDeveloper = 0x40; // bool
}

public static class SZooSetAnnotation_t {
    public const nint m_strSetTag = 0x0; // CUtlString
}

public static class SZooSetAnnotationsConfig_t {
    public const nint m_allAnnotations = 0x0; // CUtlVector< SZooSetAnnotations_t >
}

public static class SZooSetAnnotations_t {
    public const nint m_strSetName = 0x0; // CUtlString
    public const nint m_annotations = 0x8; // CUtlVector< SZooSetAnnotation_t >
}

public static class TempViewerInfo_t {
    public const nint m_nGridX = 0x30; // int32
    public const nint m_nGridY = 0x34; // int32
    public const nint m_nRadius = 0x38; // int32
    public const nint m_nViewerType = 0x3C; // int8
    public const nint m_bObstructedVision = 0x3D; // bool
    public const nint m_bValid = 0x3E; // bool
    public const nint m_bDirty = 0x3F; // bool
    public const nint flEndTime = 0x40; // GameTime_t
    public const nint nFoWID = 0x44; // int32
    public const nint hOwner = 0x48; // CHandle< C_BaseEntity >
}

public static class TierNeutralInfo_t {
    public const nint m_nTier = 0x30; // int32
    public const nint m_nAbilityID = 0x38; // C_NetworkUtlVectorBase< AbilityID_t >
}

public static class TimedEvent {
    public const nint m_TimeBetweenEvents = 0x0; // float32
    public const nint m_fNextEvent = 0x4; // float32
}

public static class TransitioningLayer_t {
    public const nint m_op = 0x8; // CNetworkedSequenceOperation
    public const nint m_flStartAnimTime = 0x30; // float32
    public const nint m_flStartWeight = 0x34; // float32
    public const nint m_flAnimTime = 0x38; // float32
    public const nint m_nOrder = 0x3C; // int32
    public const nint m_flPlaybackRate = 0x40; // float32
    public const nint m_flFadeOutDuration = 0x44; // float32
}

public static class TreeModelReplacement_t {
    public const nint m_nBinaryObjectID = 0x30; // int32
    public const nint m_szModel = 0x34; // char[512]
}

public static class VPhysicsCollisionAttribute_t {
    public const nint m_nInteractsAs = 0x8; // uint64
    public const nint m_nInteractsWith = 0x10; // uint64
    public const nint m_nInteractsExclude = 0x18; // uint64
    public const nint m_nEntityId = 0x20; // uint32
    public const nint m_nOwnerId = 0x24; // uint32
    public const nint m_nHierarchyId = 0x28; // uint16
    public const nint m_nCollisionGroup = 0x2A; // uint8
    public const nint m_nCollisionFunctionMask = 0x2B; // uint8
}

public static class audioparams_t {
    public const nint localSound = 0x8; // Vector[8]
    public const nint soundscapeIndex = 0x68; // int32
    public const nint localBits = 0x6C; // uint8
    public const nint soundscapeEntityListIndex = 0x70; // int32
    public const nint soundEventHash = 0x74; // uint32
}

public static class fogparams_t {
    public const nint dirPrimary = 0x8; // Vector
    public const nint colorPrimary = 0x14; // Color
    public const nint colorSecondary = 0x18; // Color
    public const nint colorPrimaryLerpTo = 0x1C; // Color
    public const nint colorSecondaryLerpTo = 0x20; // Color
    public const nint start = 0x24; // float32
    public const nint end = 0x28; // float32
    public const nint farz = 0x2C; // float32
    public const nint maxdensity = 0x30; // float32
    public const nint exponent = 0x34; // float32
    public const nint HDRColorScale = 0x38; // float32
    public const nint skyboxFogFactor = 0x3C; // float32
    public const nint skyboxFogFactorLerpTo = 0x40; // float32
    public const nint startLerpTo = 0x44; // float32
    public const nint endLerpTo = 0x48; // float32
    public const nint maxdensityLerpTo = 0x4C; // float32
    public const nint lerptime = 0x50; // GameTime_t
    public const nint duration = 0x54; // float32
    public const nint blendtobackground = 0x58; // float32
    public const nint scattering = 0x5C; // float32
    public const nint locallightscale = 0x60; // float32
    public const nint enable = 0x64; // bool
    public const nint blend = 0x65; // bool
    public const nint m_bNoReflectionFog = 0x66; // bool
    public const nint m_bPadding = 0x67; // bool
}

public static class sControlGroupElem {
    public const nint m_UnitName = 0x0; // char[260]
    public const nint m_UnitLabel = 0x104; // char[260]
    public const nint m_unUnitLabelIndex = 0x208; // uint8
    public const nint m_hEntity = 0x20C; // CHandle< C_BaseEntity >
    public const nint m_bIsIllusion = 0x210; // bool
    public const nint m_IllusionLabel = 0x211; // char[260]
}

public static class sky3dparams_t {
    public const nint scale = 0x8; // int16
    public const nint origin = 0xC; // Vector
    public const nint bClip3DSkyBoxNearToWorldFar = 0x18; // bool
    public const nint flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
    public const nint fog = 0x20; // fogparams_t
    public const nint m_nWorldGroupID = 0x88; // WorldGroupId_t
}