public static class AbilityID_t {
    public const nint m_Value = 0x0; // int32
}

public static class ActiveModelConfig_t {
    public const nint m_Handle = 0x28; // ModelConfigHandle_t
    public const nint m_Name = 0x30; // CUtlSymbolLarge
    public const nint m_AssociatedEntities = 0x38; // CNetworkUtlVectorBase< CHandle< CBaseModelEntity > >
    public const nint m_AssociatedEntityNames = 0x50; // CNetworkUtlVectorBase< CUtlSymbolLarge >
}

public static class AmmoIndex_t {
    public const nint m_Value = 0x0; // int8
}

public static class AmmoTypeInfo_t {
    public const nint m_nMaxCarry = 0x10; // int32
    public const nint m_nSplashSize = 0x1C; // CRangeInt
    public const nint m_nFlags = 0x24; // AmmoFlags_t
    public const nint m_flMass = 0x28; // float32
    public const nint m_flSpeed = 0x2C; // CRangeFloat
}

public static class AnimationUpdateListHandle_t {
    public const nint m_Value = 0x0; // uint32
}

public static class BlessingID_t {
    public const nint m_Value = 0x0; // int32
}

public static class BlessingPathID_t {
    public const nint m_Value = 0x0; // int32
}

public static class BlessingPath_t {
    public const nint Node1 = 0x8; // CUtlString
    public const nint Node2 = 0x18; // CUtlString
    public const nint bOneWay = 0x24; // bool
    public const nint flCircleInvRadius = 0x28; // float32
    public const nint color = 0x2C; // Color
}

public static class BlessingTypeID_t {
    public const nint m_Value = 0x0; // int32
}

public static class BlessingType_t {
    public const nint nID = 0x0; // BlessingTypeID_t
    public const nint szIconImage = 0x10; // CPanoramaImageName
}

public static class Blessing_t {
    public const nint nID = 0x0; // BlessingID_t
    public const nint BlessingType = 0x8; // CUtlString
    public const nint nCost = 0x14; // int32
    public const nint nValue = 0x18; // int32
    public const nint bStartNode = 0x1C; // bool
    public const nint vecPos = 0x28; // Vector2D
    public const nint flSize = 0x30; // float32
    public const nint color = 0x34; // Color
}

public static class CAISound {
    public const nint m_iSoundType = 0x4A8; // int32
    public const nint m_iSoundContext = 0x4AC; // int32
    public const nint m_iVolume = 0x4B0; // int32
    public const nint m_iSoundIndex = 0x4B4; // int32
    public const nint m_flDuration = 0x4B8; // float32
    public const nint m_iszProxyEntityName = 0x4C0; // CUtlSymbolLarge
}

public static class CAI_ChangeHintGroup {
    public const nint m_iSearchType = 0x4A8; // int32
    public const nint m_strSearchName = 0x4B0; // CUtlSymbolLarge
    public const nint m_strNewHintGroup = 0x4B8; // CUtlSymbolLarge
    public const nint m_flRadius = 0x4C0; // float32
}

public static class CAI_ChangeTarget {
    public const nint m_iszNewTarget = 0x4A8; // CUtlSymbolLarge
}

public static class CAI_Expresser {
    public const nint m_flStopTalkTime = 0x38; // GameTime_t
    public const nint m_flStopTalkTimeWithoutDelay = 0x3C; // GameTime_t
    public const nint m_flBlockedTalkTime = 0x40; // GameTime_t
    public const nint m_voicePitch = 0x44; // int32
    public const nint m_flLastTimeAcceptedSpeak = 0x48; // GameTime_t
    public const nint m_bAllowSpeakingInterrupts = 0x4C; // bool
    public const nint m_bConsiderSceneInvolvementAsSpeech = 0x4D; // bool
    public const nint m_nLastSpokenPriority = 0x50; // int32
    public const nint m_pOuter = 0x58; // CBaseFlex*
}

public static class CAI_ExpresserWithFollowup {
    public const nint m_pPostponedFollowup = 0x60; // ResponseFollowup*
}

public static class CAmbientGeneric {
    public const nint m_radius = 0x4A8; // float32
    public const nint m_flMaxRadius = 0x4AC; // float32
    public const nint m_iSoundLevel = 0x4B0; // soundlevel_t
    public const nint m_dpv = 0x4B4; // dynpitchvol_t
    public const nint m_fActive = 0x518; // bool
    public const nint m_fLooping = 0x519; // bool
    public const nint m_iszSound = 0x520; // CUtlSymbolLarge
    public const nint m_sSourceEntName = 0x528; // CUtlSymbolLarge
    public const nint m_hSoundSource = 0x530; // CHandle< CBaseEntity >
    public const nint m_nSoundSourceEntIndex = 0x534; // CEntityIndex
}

public static class CAnimGraphNetworkedVariables {
    public const nint m_PredNetBoolVariables = 0x8; // CNetworkUtlVectorBase< uint32 >
    public const nint m_PredNetByteVariables = 0x20; // CNetworkUtlVectorBase< uint8 >
    public const nint m_PredNetUInt16Variables = 0x38; // CNetworkUtlVectorBase< uint16 >
    public const nint m_PredNetIntVariables = 0x50; // CNetworkUtlVectorBase< int32 >
    public const nint m_PredNetUInt32Variables = 0x68; // CNetworkUtlVectorBase< uint32 >
    public const nint m_PredNetUInt64Variables = 0x80; // CNetworkUtlVectorBase< uint64 >
    public const nint m_PredNetFloatVariables = 0x98; // CNetworkUtlVectorBase< float32 >
    public const nint m_PredNetVectorVariables = 0xB0; // CNetworkUtlVectorBase< Vector >
    public const nint m_PredNetQuaternionVariables = 0xC8; // CNetworkUtlVectorBase< Quaternion >
    public const nint m_OwnerOnlyPredNetBoolVariables = 0xE0; // CNetworkUtlVectorBase< uint32 >
    public const nint m_OwnerOnlyPredNetByteVariables = 0xF8; // CNetworkUtlVectorBase< uint8 >
    public const nint m_OwnerOnlyPredNetUInt16Variables = 0x110; // CNetworkUtlVectorBase< uint16 >
    public const nint m_OwnerOnlyPredNetIntVariables = 0x128; // CNetworkUtlVectorBase< int32 >
    public const nint m_OwnerOnlyPredNetUInt32Variables = 0x140; // CNetworkUtlVectorBase< uint32 >
    public const nint m_OwnerOnlyPredNetUInt64Variables = 0x158; // CNetworkUtlVectorBase< uint64 >
    public const nint m_OwnerOnlyPredNetFloatVariables = 0x170; // CNetworkUtlVectorBase< float32 >
    public const nint m_OwnerOnlyPredNetVectorVariables = 0x188; // CNetworkUtlVectorBase< Vector >
    public const nint m_OwnerOnlyPredNetQuaternionVariables = 0x1A0; // CNetworkUtlVectorBase< Quaternion >
    public const nint m_nBoolVariablesCount = 0x1B8; // int32
    public const nint m_nOwnerOnlyBoolVariablesCount = 0x1BC; // int32
    public const nint m_nRandomSeedOffset = 0x1C0; // int32
    public const nint m_flLastTeleportTime = 0x1C4; // float32
}

public static class CAnimGraphTagRef {
    public const nint m_nTagIndex = 0x0; // int32
    public const nint m_tagName = 0x10; // CGlobalSymbol
}

public static class CAnimationLayer {
    public const nint m_op = 0x30; // CNetworkedSequenceOperation
    public const nint m_nOrder = 0x58; // int32
    public const nint m_flPlaybackRate = 0x5C; // CNetworkedQuantizedFloat
    public const nint m_bLooping = 0x64; // bool
    public const nint m_nNewSequenceParity = 0x68; // int32
    public const nint m_nFlags = 0x6C; // int32
    public const nint m_bSequenceFinished = 0x70; // bool
    public const nint m_flKillRate = 0x74; // float32
    public const nint m_flKillDelay = 0x78; // float32
    public const nint m_flLayerAnimtime = 0x7C; // float32
    public const nint m_flLayerFadeOuttime = 0x80; // float32
    public const nint m_nActivity = 0x84; // int32
    public const nint m_nPriority = 0x88; // int32
    public const nint m_flLastEventCycle = 0x8C; // float32
    public const nint m_flLastAccess = 0x90; // float32
}

public static class CAttributeContainer {
    public const nint m_Item = 0x68; // CEconItemView
}

public static class CAttributeList {
    public const nint m_Attributes = 0x8; // CUtlVectorEmbeddedNetworkVar< CEconItemAttribute >
    public const nint m_pManager = 0x58; // CAttributeManager*
}

public static class CAttributeManager {
    public const nint m_Providers = 0x8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_Receivers = 0x20; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_iReapplyProvisionParity = 0x38; // int32
    public const nint m_hOuter = 0x3C; // CHandle< CBaseEntity >
    public const nint m_bPreventLoopback = 0x40; // bool
    public const nint m_ProviderType = 0x44; // attributeprovidertypes_t
    public const nint m_CachedResults = 0x48; // CUtlVector< CAttributeManager::cached_attribute_float_t >
}

public static class CAttributeManager_cached_attribute_float_t {
    public const nint flIn = 0x0; // float32
    public const nint iAttribHook = 0x8; // CUtlSymbolLarge
    public const nint flOut = 0x10; // float32
}

public static class CBaseAchievement {
    public const nint m_pszName = 0x18; // char*
    public const nint m_iAchievementID = 0x20; // int32
    public const nint m_iFlags = 0x24; // int32
    public const nint m_iGoal = 0x28; // int32
    public const nint m_iProgressMsgIncrement = 0x2C; // int32
    public const nint m_iProgressMsgMinimum = 0x30; // int32
    public const nint m_iPointValue = 0x34; // int32
    public const nint m_bHideUntilAchieved = 0x38; // bool
    public const nint m_bStoreProgressInSteam = 0x39; // bool
    public const nint m_pInflictorClassNameFilter = 0x40; // char*
    public const nint m_pInflictorEntityNameFilter = 0x48; // char*
    public const nint m_pVictimClassNameFilter = 0x50; // char*
    public const nint m_pAttackerClassNameFilter = 0x58; // char*
    public const nint m_pMapNameFilter = 0x60; // char*
    public const nint m_pGameDirFilter = 0x68; // char*
    public const nint m_pszComponentNames = 0x70; // char**
    public const nint m_pszComponentDisplayNames = 0x78; // char**
    public const nint m_iNumComponents = 0x80; // int32
    public const nint m_pszComponentPrefix = 0x88; // char*
    public const nint m_iComponentPrefixLen = 0x90; // int32
    public const nint m_bAchieved = 0x94; // bool
    public const nint m_iCount = 0x98; // int32
    public const nint m_iProgressShown = 0x9C; // int32
    public const nint m_iComponentBits = 0xA0; // uint64
    public const nint m_nUserSlot = 0xB0; // int32
    public const nint m_iDisplayOrder = 0xB4; // int32
    public const nint m_bShowOnHUD = 0xB8; // bool
    public const nint m_iAssetAwardID = 0xBC; // int32
}

public static class CBaseAnimGraph {
    public const nint m_bInitiallyPopulateInterpHistory = 0x758; // bool
    public const nint m_bShouldAnimateDuringGameplayPause = 0x759; // bool
    public const nint m_pChoreoServices = 0x760; // IChoreoServices*
    public const nint m_bAnimGraphUpdateEnabled = 0x768; // bool
    public const nint m_flMaxSlopeDistance = 0x76C; // float32
    public const nint m_vLastSlopeCheckPos = 0x770; // Vector
    public const nint m_bAnimGraphDirty = 0x77C; // bool
    public const nint m_vecForce = 0x780; // Vector
    public const nint m_nForceBone = 0x78C; // int32
    public const nint m_pRagdollPose = 0x7A0; // PhysicsRagdollPose_t*
    public const nint m_bClientRagdoll = 0x7A8; // bool
}

public static class CBaseAnimGraphController {
    public const nint m_baseLayer = 0x18; // CNetworkedSequenceOperation
    public const nint m_bSequenceFinished = 0x40; // bool
    public const nint m_flLastEventCycle = 0x44; // float32
    public const nint m_flLastEventAnimTime = 0x48; // float32
    public const nint m_flPlaybackRate = 0x4C; // CNetworkedQuantizedFloat
    public const nint m_flPrevAnimTime = 0x54; // float32
    public const nint m_bClientSideAnimation = 0x58; // bool
    public const nint m_bNetworkedAnimationInputsChanged = 0x59; // bool
    public const nint m_nNewSequenceParity = 0x5C; // int32
    public const nint m_nResetEventsParity = 0x60; // int32
    public const nint m_nAnimLoopMode = 0x64; // AnimLoopMode_t
    public const nint m_hAnimationUpdate = 0x104; // AnimationUpdateListHandle_t
}

public static class CBaseAnimatingActivity {
    public const nint m_bShouldAnimateDuringGameplayPause = 0x758; // bool
    public const nint m_bInitiallyPopulateInterpHistory = 0x759; // bool
    public const nint m_pSuppressedAnimEventTags = 0x760; // CUtlVector< CUtlString >*
}

public static class CBaseAnimatingController {
    public const nint m_baseLayer = 0x10; // CNetworkedSequenceOperation
    public const nint m_bSequenceFinished = 0x38; // bool
    public const nint m_flGroundSpeed = 0x3C; // float32
    public const nint m_flLastEventCycle = 0x40; // float32
    public const nint m_flLastEventAnimTime = 0x44; // float32
    public const nint m_flPlaybackRate = 0x48; // CNetworkedQuantizedFloat
    public const nint m_flPrevAnimTime = 0x50; // float32
    public const nint m_flPoseParameter = 0x54; // float32[24]
    public const nint m_bClientSideAnimation = 0xB4; // bool
    public const nint m_bNetworkedAnimationInputsChanged = 0xB5; // bool
    public const nint m_nNewSequenceParity = 0xB8; // int32
    public const nint m_nResetEventsParity = 0xBC; // int32
    public const nint m_nAnimLoopMode = 0xC0; // AnimLoopMode_t
    public const nint m_SequenceTransitioner = 0xD8; // CSequenceTransitioner2
}

public static class CBaseAnimatingOverlayController {
    public const nint m_AnimOverlay = 0x238; // CUtlVectorEmbeddedNetworkVar< CAnimationLayer >
}

public static class CBaseClientUIEntity {
    public const nint m_bEnabled = 0x758; // bool
    public const nint m_DialogXMLName = 0x760; // CUtlSymbolLarge
    public const nint m_PanelClassName = 0x768; // CUtlSymbolLarge
    public const nint m_PanelID = 0x770; // CUtlSymbolLarge
    public const nint m_CustomOutput0 = 0x778; // CEntityIOOutput
    public const nint m_CustomOutput1 = 0x7A0; // CEntityIOOutput
    public const nint m_CustomOutput2 = 0x7C8; // CEntityIOOutput
    public const nint m_CustomOutput3 = 0x7F0; // CEntityIOOutput
    public const nint m_CustomOutput4 = 0x818; // CEntityIOOutput
    public const nint m_CustomOutput5 = 0x840; // CEntityIOOutput
    public const nint m_CustomOutput6 = 0x868; // CEntityIOOutput
    public const nint m_CustomOutput7 = 0x890; // CEntityIOOutput
    public const nint m_CustomOutput8 = 0x8B8; // CEntityIOOutput
    public const nint m_CustomOutput9 = 0x8E0; // CEntityIOOutput
}

public static class CBaseCombatCharacter {
    public const nint m_bForceServerRagdoll = 0x7F8; // bool
    public const nint m_hMyWearables = 0x800; // CNetworkUtlVectorBase< CHandle< CEconWearable > >
    public const nint m_flFieldOfView = 0x818; // float32
    public const nint m_impactEnergyScale = 0x81C; // float32
    public const nint m_LastHitGroup = 0x820; // HitGroup_t
    public const nint m_bApplyStressDamage = 0x824; // bool
    public const nint m_bloodColor = 0x828; // int32
    public const nint m_navMeshID = 0x888; // int32
    public const nint m_iDamageCount = 0x88C; // int32
    public const nint m_pVecRelationships = 0x890; // CUtlVector< RelationshipOverride_t >*
    public const nint m_strRelationships = 0x898; // CUtlSymbolLarge
    public const nint m_eHull = 0x8A0; // Hull_t
    public const nint m_nNavHullIdx = 0x8A4; // uint32
}

public static class CBaseDMStart {
    public const nint m_Master = 0x4A8; // CUtlSymbolLarge
}

public static class CBaseEntity {
    public const nint m_CBodyComponent = 0x30; // CBodyComponent*
    public const nint m_NetworkTransmitComponent = 0x38; // CNetworkTransmitComponent
    public const nint m_aThinkFunctions = 0x228; // CUtlVector< thinkfunc_t >
    public const nint m_iCurrentThinkContext = 0x240; // int32
    public const nint m_nLastThinkTick = 0x244; // GameTick_t
    public const nint m_isSteadyState = 0x250; // CBitVec< 64 >
    public const nint m_lastNetworkChange = 0x258; // float32
    public const nint m_ResponseContexts = 0x268; // CUtlVector< ResponseContext_t >
    public const nint m_iszResponseContext = 0x280; // CUtlSymbolLarge
    public const nint m_iHealth = 0x2A8; // int32
    public const nint m_iMaxHealth = 0x2AC; // int32
    public const nint m_lifeState = 0x2B0; // uint8
    public const nint m_flDamageAccumulator = 0x2B4; // float32
    public const nint m_takedamage = 0x2B8; // DamageOptions_t
    public const nint m_bTakesDamage = 0x2B9; // bool
    public const nint m_nTakeDamageFlags = 0x2BC; // TakeDamageFlags_t
    public const nint m_MoveCollide = 0x2C1; // MoveCollide_t
    public const nint m_MoveType = 0x2C2; // MoveType_t
    public const nint m_nWaterTouch = 0x2C3; // uint8
    public const nint m_nSlimeTouch = 0x2C4; // uint8
    public const nint m_bRestoreInHierarchy = 0x2C5; // bool
    public const nint m_target = 0x2C8; // CUtlSymbolLarge
    public const nint m_flMoveDoneTime = 0x2D0; // float32
    public const nint m_hDamageFilter = 0x2D4; // CHandle< CBaseFilter >
    public const nint m_iszDamageFilterName = 0x2D8; // CUtlSymbolLarge
    public const nint m_nSubclassID = 0x2E0; // CUtlStringToken
    public const nint m_flAnimTime = 0x2F0; // float32
    public const nint m_flSimulationTime = 0x2F4; // float32
    public const nint m_flCreateTime = 0x2F8; // GameTime_t
    public const nint m_bClientSideRagdoll = 0x2FC; // bool
    public const nint m_ubInterpolationFrame = 0x2FD; // uint8
    public const nint m_vPrevVPhysicsUpdatePos = 0x300; // Vector
    public const nint m_iTeamNum = 0x30C; // uint8
    public const nint m_iGlobalname = 0x310; // CUtlSymbolLarge
    public const nint m_iSentToClients = 0x318; // int32
    public const nint m_flSpeed = 0x31C; // float32
    public const nint m_sUniqueHammerID = 0x320; // CUtlString
    public const nint m_spawnflags = 0x328; // uint32
    public const nint m_nNextThinkTick = 0x32C; // GameTick_t
    public const nint m_nSimulationTick = 0x330; // int32
    public const nint m_OnKilled = 0x338; // CEntityIOOutput
    public const nint m_fFlags = 0x360; // uint32
    public const nint m_vecAbsVelocity = 0x364; // Vector
    public const nint m_vecVelocity = 0x370; // CNetworkVelocityVector
    public const nint m_nPushEnumCount = 0x3A0; // int32
    public const nint m_pCollision = 0x3A8; // CCollisionProperty*
    public const nint m_hEffectEntity = 0x3B0; // CHandle< CBaseEntity >
    public const nint m_hOwnerEntity = 0x3B4; // CHandle< CBaseEntity >
    public const nint m_fEffects = 0x3B8; // uint32
    public const nint m_hGroundEntity = 0x3BC; // CHandle< CBaseEntity >
    public const nint m_flFriction = 0x3C0; // float32
    public const nint m_flElasticity = 0x3C4; // float32
    public const nint m_flGravityScale = 0x3C8; // float32
    public const nint m_flTimeScale = 0x3CC; // float32
    public const nint m_flWaterLevel = 0x3D0; // float32
    public const nint m_bSimulatedEveryTick = 0x3D4; // bool
    public const nint m_bAnimatedEveryTick = 0x3D5; // bool
    public const nint m_bDisableLowViolence = 0x3D6; // bool
    public const nint m_nWaterType = 0x3D7; // uint8
    public const nint m_iEFlags = 0x3D8; // int32
    public const nint m_OnUser1 = 0x3E0; // CEntityIOOutput
    public const nint m_OnUser2 = 0x408; // CEntityIOOutput
    public const nint m_OnUser3 = 0x430; // CEntityIOOutput
    public const nint m_OnUser4 = 0x458; // CEntityIOOutput
    public const nint m_iInitialTeamNum = 0x480; // int32
    public const nint m_flNavIgnoreUntilTime = 0x484; // GameTime_t
    public const nint m_vecAngVelocity = 0x488; // QAngle
    public const nint m_bNetworkQuantizeOriginAndAngles = 0x494; // bool
    public const nint m_bLagCompensate = 0x495; // bool
    public const nint m_flOverriddenFriction = 0x498; // float32
    public const nint m_pBlocker = 0x49C; // CHandle< CBaseEntity >
    public const nint m_flLocalTime = 0x4A0; // float32
    public const nint m_flVPhysicsUpdateLocalTime = 0x4A4; // float32
}

public static class CBaseFilter {
    public const nint m_bNegated = 0x4A8; // bool
    public const nint m_OnPass = 0x4B0; // CEntityIOOutput
    public const nint m_OnFail = 0x4D8; // CEntityIOOutput
}

public static class CBaseFlex {
    public const nint m_flexWeight = 0x768; // CNetworkUtlVectorBase< float32 >
    public const nint m_vLookTargetPosition = 0x780; // Vector
    public const nint m_blinktoggle = 0x78C; // bool
    public const nint m_flAllowResponsesEndTime = 0x7E0; // GameTime_t
    public const nint m_flLastFlexAnimationTime = 0x7E4; // GameTime_t
    public const nint m_nNextSceneEventId = 0x7E8; // uint32
    public const nint m_bUpdateLayerPriorities = 0x7EC; // bool
}

public static class CBaseModelEntity {
    public const nint m_CRenderComponent = 0x4A8; // CRenderComponent*
    public const nint m_CHitboxComponent = 0x4B0; // CHitboxComponent
    public const nint m_flDissolveStartTime = 0x4D8; // GameTime_t
    public const nint m_OnIgnite = 0x4E0; // CEntityIOOutput
    public const nint m_iViewerID = 0x508; // int32
    public const nint m_iTeamVisibilityBitmask = 0x550; // int32
    public const nint m_nRenderMode = 0x554; // RenderMode_t
    public const nint m_bVisibilityDirtyFlag = 0x555; // bool
    public const nint m_iFOWTempViewerID = 0x556; // int16[10]
    public const nint m_nRenderFX = 0x56A; // RenderFx_t
    public const nint m_bAllowFadeInView = 0x56B; // bool
    public const nint m_clrRender = 0x56C; // Color
    public const nint m_vecRenderAttributes = 0x570; // CUtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t >
    public const nint m_LightGroup = 0x5C0; // CUtlStringToken
    public const nint m_bRenderToCubemaps = 0x5C4; // bool
    public const nint m_Collision = 0x5C8; // CCollisionProperty
    public const nint m_Glow = 0x678; // CGlowProperty
    public const nint m_flGlowBackfaceMult = 0x6D0; // float32
    public const nint m_fadeMinDist = 0x6D4; // float32
    public const nint m_fadeMaxDist = 0x6D8; // float32
    public const nint m_flFadeScale = 0x6DC; // float32
    public const nint m_flShadowStrength = 0x6E0; // float32
    public const nint m_nObjectCulling = 0x6E4; // uint8
    public const nint m_nAddDecal = 0x6E8; // int32
    public const nint m_vDecalPosition = 0x6EC; // Vector
    public const nint m_vDecalForwardAxis = 0x6F8; // Vector
    public const nint m_flDecalHealBloodRate = 0x704; // float32
    public const nint m_flDecalHealHeightRate = 0x708; // float32
    public const nint m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x710; // CNetworkUtlVectorBase< CHandle< CBaseModelEntity > >
    public const nint m_vecViewOffset = 0x728; // CNetworkViewOffsetVector
}

public static class CBaseMoveBehavior {
    public const nint m_iPositionInterpolator = 0x500; // int32
    public const nint m_iRotationInterpolator = 0x504; // int32
    public const nint m_flAnimStartTime = 0x508; // float32
    public const nint m_flAnimEndTime = 0x50C; // float32
    public const nint m_flAverageSpeedAcrossFrame = 0x510; // float32
    public const nint m_pCurrentKeyFrame = 0x518; // CPathKeyFrame*
    public const nint m_pTargetKeyFrame = 0x520; // CPathKeyFrame*
    public const nint m_pPreKeyFrame = 0x528; // CPathKeyFrame*
    public const nint m_pPostKeyFrame = 0x530; // CPathKeyFrame*
    public const nint m_flTimeIntoFrame = 0x538; // float32
    public const nint m_iDirection = 0x53C; // int32
}

public static class CBasePlatTrain {
    public const nint m_NoiseMoving = 0x7D8; // CUtlSymbolLarge
    public const nint m_NoiseArrived = 0x7E0; // CUtlSymbolLarge
    public const nint m_volume = 0x7F0; // float32
    public const nint m_flTWidth = 0x7F4; // float32
    public const nint m_flTLength = 0x7F8; // float32
}

public static class CBasePlayerController {
    public const nint m_nInButtonsWhichAreToggles = 0x4B0; // uint64
    public const nint m_nTickBase = 0x4B8; // uint32
    public const nint m_hPawn = 0x4E8; // CHandle< CBasePlayerPawn >
    public const nint m_nSplitScreenSlot = 0x4EC; // CSplitScreenSlot
    public const nint m_hSplitOwner = 0x4F0; // CHandle< CBasePlayerController >
    public const nint m_hSplitScreenPlayers = 0x4F8; // CUtlVector< CHandle< CBasePlayerController > >
    public const nint m_bIsHLTV = 0x510; // bool
    public const nint m_iConnected = 0x514; // PlayerConnectedState
    public const nint m_iszPlayerName = 0x518; // char[128]
    public const nint m_szNetworkIDString = 0x598; // CUtlString
    public const nint m_fLerpTime = 0x5A0; // float32
    public const nint m_bLagCompensation = 0x5A4; // bool
    public const nint m_bPredict = 0x5A5; // bool
    public const nint m_bAutoKickDisabled = 0x5A6; // bool
    public const nint m_bIsLowViolence = 0x5A7; // bool
    public const nint m_bGamePaused = 0x5A8; // bool
    public const nint m_nHighestCommandNumberReceived = 0x618; // int32
    public const nint m_nUsecTimestampLastUserCmdReceived = 0x620; // int64
    public const nint m_iIgnoreGlobalChat = 0x638; // ChatIgnoreType_t
    public const nint m_flLastPlayerTalkTime = 0x63C; // float32
    public const nint m_flLastEntitySteadyState = 0x640; // float32
    public const nint m_nAvailableEntitySteadyState = 0x644; // int32
    public const nint m_bHasAnySteadyStateEnts = 0x648; // bool
    public const nint m_steamID = 0x658; // uint64
    public const nint m_iDesiredFOV = 0x660; // uint32
}

public static class CBasePlayerPawn {
    public const nint m_pWeaponServices = 0x8A8; // CPlayer_WeaponServices*
    public const nint m_pItemServices = 0x8B0; // CPlayer_ItemServices*
    public const nint m_pAutoaimServices = 0x8B8; // CPlayer_AutoaimServices*
    public const nint m_pObserverServices = 0x8C0; // CPlayer_ObserverServices*
    public const nint m_pWaterServices = 0x8C8; // CPlayer_WaterServices*
    public const nint m_pUseServices = 0x8D0; // CPlayer_UseServices*
    public const nint m_pFlashlightServices = 0x8D8; // CPlayer_FlashlightServices*
    public const nint m_pCameraServices = 0x8E0; // CPlayer_CameraServices*
    public const nint m_pMovementServices = 0x8E8; // CPlayer_MovementServices*
    public const nint v_angle = 0x8F8; // QAngle
    public const nint v_anglePrevious = 0x904; // QAngle
    public const nint m_iHideHUD = 0x910; // uint32
    public const nint m_skybox3d = 0x918; // sky3dparams_t
    public const nint m_fTimeLastHurt = 0x9A8; // GameTime_t
    public const nint m_flDeathTime = 0x9AC; // GameTime_t
    public const nint m_fNextSuicideTime = 0x9B0; // GameTime_t
    public const nint m_fInitHUD = 0x9B4; // bool
    public const nint m_pExpresser = 0x9B8; // CAI_Expresser*
    public const nint m_hController = 0x9C0; // CHandle< CBasePlayerController >
    public const nint m_fHltvReplayDelay = 0x9C8; // float32
    public const nint m_fHltvReplayEnd = 0x9CC; // float32
    public const nint m_iHltvReplayEntity = 0x9D0; // CEntityIndex
}

public static class CBasePlayerVData {
    public const nint m_sModelName = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
    public const nint m_flHeadDamageMultiplier = 0x108; // CSkillFloat
    public const nint m_flChestDamageMultiplier = 0x118; // CSkillFloat
    public const nint m_flStomachDamageMultiplier = 0x128; // CSkillFloat
    public const nint m_flArmDamageMultiplier = 0x138; // CSkillFloat
    public const nint m_flLegDamageMultiplier = 0x148; // CSkillFloat
    public const nint m_flHoldBreathTime = 0x158; // float32
    public const nint m_flDrowningDamageInterval = 0x15C; // float32
    public const nint m_nDrowningDamageInitial = 0x160; // int32
    public const nint m_nDrowningDamageMax = 0x164; // int32
    public const nint m_nWaterSpeed = 0x168; // int32
    public const nint m_flUseRange = 0x16C; // float32
    public const nint m_flUseAngleTolerance = 0x170; // float32
    public const nint m_flCrouchTime = 0x174; // float32
}

public static class CBasePlayerWeapon {
    public const nint m_nNextPrimaryAttackTick = 0x768; // GameTick_t
    public const nint m_flNextPrimaryAttackTickRatio = 0x76C; // float32
    public const nint m_nNextSecondaryAttackTick = 0x770; // GameTick_t
    public const nint m_flNextSecondaryAttackTickRatio = 0x774; // float32
    public const nint m_iClip1 = 0x778; // int32
    public const nint m_iClip2 = 0x77C; // int32
    public const nint m_pReserveAmmo = 0x780; // int32[2]
    public const nint m_OnPlayerUse = 0x788; // CEntityIOOutput
}

public static class CBasePlayerWeaponVData {
    public const nint m_szClassName = 0x10; // CUtlString
    public const nint m_szWorldModel = 0x18; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
    public const nint m_bBuiltRightHanded = 0xF8; // bool
    public const nint m_bAllowFlipping = 0xF9; // bool
    public const nint m_bIsFullAuto = 0xFA; // bool
    public const nint m_nNumBullets = 0xFC; // int32
    public const nint m_sMuzzleAttachment = 0x100; // CUtlString
    public const nint m_szMuzzleFlashParticle = 0x108; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint m_iFlags = 0x1E8; // ItemFlagTypes_t
    public const nint m_nPrimaryAmmoType = 0x1E9; // AmmoIndex_t
    public const nint m_nSecondaryAmmoType = 0x1EA; // AmmoIndex_t
    public const nint m_iMaxClip1 = 0x1EC; // int32
    public const nint m_iMaxClip2 = 0x1F0; // int32
    public const nint m_iDefaultClip1 = 0x1F4; // int32
    public const nint m_iDefaultClip2 = 0x1F8; // int32
    public const nint m_iWeight = 0x1FC; // int32
    public const nint m_bAutoSwitchTo = 0x200; // bool
    public const nint m_bAutoSwitchFrom = 0x201; // bool
    public const nint m_iRumbleEffect = 0x204; // RumbleEffect_t
    public const nint m_aShootSounds = 0x208; // CUtlMap< WeaponSound_t, CSoundEventName >
    public const nint m_iSlot = 0x228; // int32
    public const nint m_iPosition = 0x22C; // int32
}

public static class CBaseProp {
    public const nint m_bModelOverrodeBlockLOS = 0x768; // bool
    public const nint m_iShapeType = 0x76C; // int32
    public const nint m_bConformToCollisionBounds = 0x770; // bool
    public const nint m_mPreferredCatchTransform = 0x774; // matrix3x4_t
}

public static class CBaseToggle {
    public const nint m_toggle_state = 0x758; // TOGGLE_STATE
    public const nint m_flMoveDistance = 0x75C; // float32
    public const nint m_flWait = 0x760; // float32
    public const nint m_flLip = 0x764; // float32
    public const nint m_bAlwaysFireBlockedOutputs = 0x768; // bool
    public const nint m_vecPosition1 = 0x76C; // Vector
    public const nint m_vecPosition2 = 0x778; // Vector
    public const nint m_vecMoveAng = 0x784; // QAngle
    public const nint m_vecAngle1 = 0x790; // QAngle
    public const nint m_vecAngle2 = 0x79C; // QAngle
    public const nint m_flHeight = 0x7A8; // float32
    public const nint m_hActivator = 0x7AC; // CHandle< CBaseEntity >
    public const nint m_vecFinalDest = 0x7B0; // Vector
    public const nint m_vecFinalAngle = 0x7BC; // QAngle
    public const nint m_movementType = 0x7C8; // int32
    public const nint m_sMaster = 0x7D0; // CUtlSymbolLarge
}

public static class CBaseTrigger {
    public const nint m_bDisabled = 0x7D8; // bool
    public const nint m_iFilterName = 0x7E0; // CUtlSymbolLarge
    public const nint m_hFilter = 0x7E8; // CHandle< CBaseFilter >
    public const nint m_OnStartTouch = 0x7F0; // CEntityIOOutput
    public const nint m_OnStartTouchAll = 0x818; // CEntityIOOutput
    public const nint m_OnEndTouch = 0x840; // CEntityIOOutput
    public const nint m_OnEndTouchAll = 0x868; // CEntityIOOutput
    public const nint m_OnTouching = 0x890; // CEntityIOOutput
    public const nint m_OnNotTouching = 0x8B8; // CEntityIOOutput
    public const nint m_hTouchingEntities = 0x8E0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bClientSidePredicted = 0x8F8; // bool
}

public static class CBeam {
    public const nint m_flFrameRate = 0x758; // float32
    public const nint m_flHDRColorScale = 0x75C; // float32
    public const nint m_flFireTime = 0x760; // GameTime_t
    public const nint m_flDamage = 0x764; // float32
    public const nint m_nNumBeamEnts = 0x768; // uint8
    public const nint m_hBaseMaterial = 0x770; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_nHaloIndex = 0x778; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_nBeamType = 0x780; // BeamType_t
    public const nint m_nBeamFlags = 0x784; // uint32
    public const nint m_hAttachEntity = 0x788; // CHandle< CBaseEntity >[10]
    public const nint m_nAttachIndex = 0x7B0; // AttachmentHandle_t[10]
    public const nint m_fWidth = 0x7BC; // float32
    public const nint m_fEndWidth = 0x7C0; // float32
    public const nint m_fFadeLength = 0x7C4; // float32
    public const nint m_fHaloScale = 0x7C8; // float32
    public const nint m_fAmplitude = 0x7CC; // float32
    public const nint m_fStartFrame = 0x7D0; // float32
    public const nint m_fSpeed = 0x7D4; // float32
    public const nint m_flFrame = 0x7D8; // float32
    public const nint m_nClipStyle = 0x7DC; // BeamClipStyle_t
    public const nint m_bTurnedOff = 0x7E0; // bool
    public const nint m_vecEndPos = 0x7E4; // Vector
    public const nint m_hEndEntity = 0x7F0; // CHandle< CBaseEntity >
    public const nint m_nDissolveType = 0x7F4; // int32
}

public static class CBodyComponent {
    public const nint m_pSceneNode = 0x8; // CGameSceneNode*
    public const nint __m_pChainEntity = 0x20; // CNetworkVarChainer
}

public static class CBodyComponentBaseAnimGraph {
    public const nint m_animationController = 0x470; // CBaseAnimGraphController
    public const nint __m_pChainEntity = 0x578; // CNetworkVarChainer
}

public static class CBodyComponentBaseAnimating {
    public const nint m_animationController = 0x470; // CBaseAnimatingController
    public const nint __m_pChainEntity = 0x6A8; // CNetworkVarChainer
}

public static class CBodyComponentBaseAnimatingOverlay {
    public const nint m_animationController = 0x470; // CBaseAnimatingOverlayController
    public const nint __m_pChainEntity = 0x700; // CNetworkVarChainer
}

public static class CBodyComponentBaseModelEntity {
    public const nint __m_pChainEntity = 0x470; // CNetworkVarChainer
}

public static class CBodyComponentPoint {
    public const nint m_sceneNode = 0x50; // CGameSceneNode
    public const nint __m_pChainEntity = 0x1A0; // CNetworkVarChainer
}

public static class CBodyComponentSkeletonInstance {
    public const nint m_skeletonInstance = 0x50; // CSkeletonInstance
    public const nint __m_pChainEntity = 0x440; // CNetworkVarChainer
}

public static class CBreakable {
    public const nint m_Material = 0x768; // Materials
    public const nint m_hBreaker = 0x76C; // CHandle< CBaseEntity >
    public const nint m_Explosion = 0x770; // Explosions
    public const nint m_iszSpawnObject = 0x778; // CUtlSymbolLarge
    public const nint m_flPressureDelay = 0x780; // float32
    public const nint m_iMinHealthDmg = 0x784; // int32
    public const nint m_iszPropData = 0x788; // CUtlSymbolLarge
    public const nint m_impactEnergyScale = 0x790; // float32
    public const nint m_nOverrideBlockLOS = 0x794; // EOverrideBlockLOS_t
    public const nint m_OnBreak = 0x798; // CEntityIOOutput
    public const nint m_OnHealthChanged = 0x7C0; // CEntityOutputTemplate< float32 >
    public const nint m_flDmgModBullet = 0x7E8; // float32
    public const nint m_flDmgModClub = 0x7EC; // float32
    public const nint m_flDmgModExplosive = 0x7F0; // float32
    public const nint m_flDmgModFire = 0x7F4; // float32
    public const nint m_iszPhysicsDamageTableName = 0x7F8; // CUtlSymbolLarge
    public const nint m_iszBasePropData = 0x800; // CUtlSymbolLarge
    public const nint m_iInteractions = 0x808; // int32
    public const nint m_PerformanceMode = 0x80C; // PerformanceMode_t
    public const nint m_hPhysicsAttacker = 0x810; // CHandle< CBasePlayerPawn >
    public const nint m_flLastPhysicsInfluenceTime = 0x814; // GameTime_t
}

public static class CBreakableProp {
    public const nint m_OnBreak = 0x7B8; // CEntityIOOutput
    public const nint m_OnHealthChanged = 0x7E0; // CEntityOutputTemplate< float32 >
    public const nint m_OnTakeDamage = 0x808; // CEntityIOOutput
    public const nint m_impactEnergyScale = 0x830; // float32
    public const nint m_iMinHealthDmg = 0x834; // int32
    public const nint m_preferredCarryAngles = 0x838; // QAngle
    public const nint m_flPressureDelay = 0x844; // float32
    public const nint m_hBreaker = 0x848; // CHandle< CBaseEntity >
    public const nint m_PerformanceMode = 0x84C; // PerformanceMode_t
    public const nint m_flDmgModBullet = 0x850; // float32
    public const nint m_flDmgModClub = 0x854; // float32
    public const nint m_flDmgModExplosive = 0x858; // float32
    public const nint m_flDmgModFire = 0x85C; // float32
    public const nint m_iszPhysicsDamageTableName = 0x860; // CUtlSymbolLarge
    public const nint m_iszBasePropData = 0x868; // CUtlSymbolLarge
    public const nint m_iInteractions = 0x870; // int32
    public const nint m_flPreventDamageBeforeTime = 0x874; // GameTime_t
    public const nint m_bHasBreakPiecesOrCommands = 0x878; // bool
    public const nint m_explodeDamage = 0x87C; // float32
    public const nint m_explodeRadius = 0x880; // float32
    public const nint m_explosionDelay = 0x888; // float32
    public const nint m_explosionBuildupSound = 0x890; // CUtlSymbolLarge
    public const nint m_explosionCustomEffect = 0x898; // CUtlSymbolLarge
    public const nint m_explosionCustomSound = 0x8A0; // CUtlSymbolLarge
    public const nint m_explosionModifier = 0x8A8; // CUtlSymbolLarge
    public const nint m_hPhysicsAttacker = 0x8B0; // CHandle< CBasePlayerPawn >
    public const nint m_flLastPhysicsInfluenceTime = 0x8B4; // GameTime_t
    public const nint m_bOriginalBlockLOS = 0x8B8; // bool
    public const nint m_flDefaultFadeScale = 0x8BC; // float32
    public const nint m_hLastAttacker = 0x8C0; // CHandle< CBaseEntity >
    public const nint m_hFlareEnt = 0x8C4; // CHandle< CBaseEntity >
    public const nint m_bUsePuntSound = 0x8C8; // bool
    public const nint m_iszPuntSound = 0x8D0; // CUtlSymbolLarge
    public const nint m_noGhostCollision = 0x8D8; // bool
}

public static class CBreakableStageHelper {
    public const nint m_nCurrentStage = 0x8; // int32
    public const nint m_nStageCount = 0xC; // int32
}

public static class CBuoyancyHelper {
    public const nint m_flFluidDensity = 0x18; // float32
}

public static class CChangeLevel {
    public const nint m_sMapName = 0x900; // CUtlString
    public const nint m_sLandmarkName = 0x908; // CUtlString
    public const nint m_OnChangeLevel = 0x910; // CEntityIOOutput
    public const nint m_bTouched = 0x938; // bool
    public const nint m_bNoTouch = 0x939; // bool
    public const nint m_bNewChapter = 0x93A; // bool
    public const nint m_bOnChangeLevelFired = 0x93B; // bool
}

public static class CCollisionProperty {
    public const nint m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
    public const nint m_vecMins = 0x40; // Vector
    public const nint m_vecMaxs = 0x4C; // Vector
    public const nint m_usSolidFlags = 0x5A; // uint8
    public const nint m_nSolidType = 0x5B; // SolidType_t
    public const nint m_triggerBloat = 0x5C; // uint8
    public const nint m_nSurroundType = 0x5D; // SurroundingBoundsType_t
    public const nint m_CollisionGroup = 0x5E; // uint8
    public const nint m_nEnablePhysics = 0x5F; // uint8
    public const nint m_flBoundingRadius = 0x60; // float32
    public const nint m_vecSpecifiedSurroundingMins = 0x64; // Vector
    public const nint m_vecSpecifiedSurroundingMaxs = 0x70; // Vector
    public const nint m_vecSurroundingMaxs = 0x7C; // Vector
    public const nint m_vecSurroundingMins = 0x88; // Vector
    public const nint m_vCapsuleCenter1 = 0x94; // Vector
    public const nint m_vCapsuleCenter2 = 0xA0; // Vector
    public const nint m_flCapsuleRadius = 0xAC; // float32
}

public static class CColorCorrection {
    public const nint m_flFadeInDuration = 0x4A8; // float32
    public const nint m_flFadeOutDuration = 0x4AC; // float32
    public const nint m_flStartFadeInWeight = 0x4B0; // float32
    public const nint m_flStartFadeOutWeight = 0x4B4; // float32
    public const nint m_flTimeStartFadeIn = 0x4B8; // GameTime_t
    public const nint m_flTimeStartFadeOut = 0x4BC; // GameTime_t
    public const nint m_flMaxWeight = 0x4C0; // float32
    public const nint m_bStartDisabled = 0x4C4; // bool
    public const nint m_bEnabled = 0x4C5; // bool
    public const nint m_bMaster = 0x4C6; // bool
    public const nint m_bClientSide = 0x4C7; // bool
    public const nint m_bExclusive = 0x4C8; // bool
    public const nint m_MinFalloff = 0x4CC; // float32
    public const nint m_MaxFalloff = 0x4D0; // float32
    public const nint m_flCurWeight = 0x4D4; // float32
    public const nint m_netlookupFilename = 0x4D8; // char[512]
    public const nint m_lookupFilename = 0x6D8; // CUtlSymbolLarge
}

public static class CColorCorrectionVolume {
    public const nint m_bEnabled = 0x900; // bool
    public const nint m_MaxWeight = 0x904; // float32
    public const nint m_FadeDuration = 0x908; // float32
    public const nint m_bStartDisabled = 0x90C; // bool
    public const nint m_Weight = 0x910; // float32
    public const nint m_lookupFilename = 0x914; // char[512]
    public const nint m_LastEnterWeight = 0xB14; // float32
    public const nint m_LastEnterTime = 0xB18; // GameTime_t
    public const nint m_LastExitWeight = 0xB1C; // float32
    public const nint m_LastExitTime = 0xB20; // GameTime_t
}

public static class CCommentaryAuto {
    public const nint m_OnCommentaryNewGame = 0x4A8; // CEntityIOOutput
    public const nint m_OnCommentaryMidGame = 0x4D0; // CEntityIOOutput
    public const nint m_OnCommentaryMultiplayerSpawn = 0x4F8; // CEntityIOOutput
}

public static class CCommentarySystem {
    public const nint m_bCommentaryConvarsChanging = 0x11; // bool
    public const nint m_bCommentaryEnabledMidGame = 0x12; // bool
    public const nint m_flNextTeleportTime = 0x14; // GameTime_t
    public const nint m_iTeleportStage = 0x18; // int32
    public const nint m_bCheatState = 0x1C; // bool
    public const nint m_bIsFirstSpawnGroupToLoad = 0x1D; // bool
    public const nint m_hCurrentNode = 0x38; // CHandle< CPointCommentaryNode >
    public const nint m_hActiveCommentaryNode = 0x3C; // CHandle< CPointCommentaryNode >
    public const nint m_hLastCommentaryNode = 0x40; // CHandle< CPointCommentaryNode >
    public const nint m_vecNodes = 0x48; // CUtlVector< CHandle< CPointCommentaryNode > >
}

public static class CConstantForceController {
    public const nint m_linear = 0xC; // Vector
    public const nint m_angular = 0x18; // RotationVector
    public const nint m_linearSave = 0x24; // Vector
    public const nint m_angularSave = 0x30; // RotationVector
}

public static class CConstraintAnchor {
    public const nint m_massScale = 0x768; // float32
}

public static class CCopyRecipientFilter {
    public const nint m_Flags = 0x8; // int32
    public const nint m_Recipients = 0x10; // CUtlVector< CPlayerSlot >
}

public static class CCredits {
    public const nint m_OnCreditsDone = 0x4A8; // CEntityIOOutput
    public const nint m_bRolledOutroCredits = 0x4D0; // bool
    public const nint m_flLogoLength = 0x4D4; // float32
}

public static class CDOTAAppCheers {
    public const nint m_nRadiantCheers = 0x53E; // int16
    public const nint m_nRadiantBronzeCheers = 0x540; // int16
    public const nint m_nRadiantSilverCheers = 0x542; // int16
    public const nint m_nRadiantGoldCheers = 0x544; // int16
    public const nint m_nRadiantCrowdLevel = 0x548; // ECrowdLevel
    public const nint m_nDireCheers = 0x54C; // int16
    public const nint m_nDireBronzeCheers = 0x54E; // int16
    public const nint m_nDireSilverCheers = 0x550; // int16
    public const nint m_nDireGoldCheers = 0x552; // int16
    public const nint m_nDireCrowdLevel = 0x554; // ECrowdLevel
}

public static class CDOTABaseAbility {
    public const nint m_iAbilityIndex = 0x4B0; // int32
    public const nint m_nStolenActivity = 0x4B4; // int32
    public const nint m_bChanneling = 0x4B8; // bool
    public const nint m_bReflection = 0x4B9; // bool
    public const nint m_bRefCountsModifiers = 0x4BA; // bool
    public const nint m_iModifierRefCount = 0x4BC; // int32
    public const nint m_bWantsToNeutralCast = 0x4C0; // bool
    public const nint m_hNeutralCastTarget = 0x4C4; // CHandle< CBaseEntity >
    public const nint m_bServerOnlyAbility = 0x4C8; // bool
    public const nint m_bGrantedAbilityChargesFromScepter = 0x4C9; // bool
    public const nint m_bGrantedAbilityChargesFromShard = 0x4CA; // bool
    public const nint m_bIsDefaultHeroAbility = 0x4CB; // bool
    public const nint m_bConsiderOvershootInGetCastRange = 0x4CC; // bool
    public const nint m_bHidden = 0x4CD; // bool
    public const nint m_bActivated = 0x4CE; // bool
    public const nint m_nAbilityBarType = 0x4D0; // AbilityBarType_t
    public const nint m_iDirtyButtons = 0x4D4; // int32
    public const nint m_iLevel = 0x4D8; // int32
    public const nint m_bToggleState = 0x4DC; // bool
    public const nint m_bInAbilityPhase = 0x4DD; // bool
    public const nint m_flAbilityMuteDuration = 0x4E0; // float32
    public const nint m_fCooldown = 0x4E4; // float32
    public const nint m_flCooldownLength = 0x4E8; // float32
    public const nint m_iManaCost = 0x4EC; // int32
    public const nint m_bAutoCastState = 0x4F0; // bool
    public const nint m_bAltCastState = 0x4F1; // bool
    public const nint m_flChannelStartTime = 0x4F4; // GameTime_t
    public const nint m_flCastStartTime = 0x4F8; // GameTime_t
    public const nint m_bInIndefiniteCooldown = 0x4FC; // bool
    public const nint m_bFrozenCooldown = 0x4FD; // bool
    public const nint m_nFrozenCooldownStack = 0x500; // int32
    public const nint m_flOverrideCastPoint = 0x504; // float32
    public const nint m_bStolen = 0x508; // bool
    public const nint m_bReplicated = 0x509; // bool
    public const nint m_bStealable = 0x50A; // bool
    public const nint m_nAbilityCurrentCharges = 0x50C; // int32
    public const nint m_fAbilityChargeRestoreTimeRemaining = 0x510; // float32
    public const nint m_bUpgradeRecommended = 0x514; // bool
    public const nint m_nMaxLevelOverride = 0x518; // int32
    public const nint m_hReflectionCause = 0x51C; // CHandle< CBaseEntity >
    public const nint m_pReflectionSourceAbility = 0x540; // CHandle< CBaseEntity >
    public const nint m_nBackedByEconItemIndex = 0x550; // item_definition_index_t
    public const nint m_bAltCastOrdered = 0x561; // bool
}

public static class CDOTABaseGameMode {
    public const nint m_ForcedHUDSkin = 0x4B0; // CUtlString
    public const nint m_nCustomGameForceHeroSelectionId = 0x4B8; // int32
    public const nint m_bAlwaysShowPlayerInventory = 0x4BC; // bool
    public const nint m_bGoldSoundDisabled = 0x4BD; // bool
    public const nint m_bRecommendedItemsDisabled = 0x4BE; // bool
    public const nint m_bStickyItemDisabled = 0x4BF; // bool
    public const nint m_bStashPurchasingDisabled = 0x4C0; // bool
    public const nint m_bFogOfWarDisabled = 0x4C1; // bool
    public const nint m_bUseUnseenFOW = 0x4C2; // bool
    public const nint m_bUseCustomBuybackCost = 0x4C3; // bool
    public const nint m_bUseCustomBuybackCooldown = 0x4C4; // bool
    public const nint m_bBuybackEnabled = 0x4C5; // bool
    public const nint m_bUseTurboCouriers = 0x4C6; // bool
    public const nint m_flCameraDistanceOverride = 0x4C8; // float32
    public const nint m_nCameraSmoothCountOverride = 0x4CC; // int32
    public const nint m_hOverrideSelectionEntity = 0x4D0; // CHandle< CDOTA_BaseNPC >
    public const nint m_bTopBarTeamValuesOverride = 0x4D4; // bool
    public const nint m_bTopBarTeamValuesVisible = 0x4D5; // bool
    public const nint m_nTeamGoodGuysTopBarValue = 0x4D8; // int32
    public const nint m_nTeamBadGuysTopBarValue = 0x4DC; // int32
    public const nint m_bAlwaysShowPlayerNames = 0x4E0; // bool
    public const nint m_bUseCustomHeroLevels = 0x4E1; // bool
    public const nint m_nCustomXPRequiredToReachNextLevel = 0x4E8; // CNetworkUtlVectorBase< int32 >
    public const nint m_bTowerBackdoorProtectionEnabled = 0x500; // bool
    public const nint m_bBotThinkingEnabled = 0x501; // bool
    public const nint m_bAnnouncerDisabled = 0x502; // bool
    public const nint m_bAnnouncerGameModeAnnounceDisabled = 0x503; // bool
    public const nint m_bDeathTipsDisabled = 0x504; // bool
    public const nint m_bFilterPlayerHeroAvailability = 0x505; // bool
    public const nint m_bKillingSpreeAnnouncerDisabled = 0x506; // bool
    public const nint m_flFixedRespawnTime = 0x508; // float32
    public const nint m_flBuybackCostScale = 0x50C; // float32
    public const nint m_flRespawnTimeScale = 0x510; // float32
    public const nint m_bLoseGoldOnDeath = 0x514; // bool
    public const nint m_bKillableTombstones = 0x515; // bool
    public const nint m_nHUDVisibilityBits = 0x518; // uint32
    public const nint m_flMinimumAttackSpeed = 0x51C; // float32
    public const nint m_flMaximumAttackSpeed = 0x520; // float32
    public const nint m_bIsDaynightCycleDisabled = 0x524; // bool
    public const nint m_flDaynightCycleAdvanceRate = 0x528; // float32
    public const nint m_bAreWeatherEffectsDisabled = 0x52C; // bool
    public const nint m_bDisableHudFlip = 0x52D; // bool
    public const nint m_bEnableFriendlyBuildingMoveTo = 0x52E; // bool
    public const nint m_bIsDeathOverlayDisabled = 0x52F; // bool
    public const nint m_bIsHudCombatEventsDisabled = 0x530; // bool
    public const nint m_strDefaultStickyItem = 0x538; // CUtlString
    public const nint m_sCustomTerrainWeatherEffect = 0x540; // CUtlString
    public const nint m_strTPScrollSlotItemOverride = 0x548; // CUtlString
    public const nint m_flStrengthDamage = 0x550; // float32
    public const nint m_flStrengthHP = 0x554; // float32
    public const nint m_flStrengthHPRegen = 0x558; // float32
    public const nint m_flAgilityDamage = 0x55C; // float32
    public const nint m_flAgilityArmor = 0x560; // float32
    public const nint m_flAgilityAttackSpeed = 0x564; // float32
    public const nint m_flAgilityMovementSpeedPercent = 0x568; // float32
    public const nint m_flIntelligenceDamage = 0x56C; // float32
    public const nint m_flIntelligenceMana = 0x570; // float32
    public const nint m_flIntelligenceManaRegen = 0x574; // float32
    public const nint m_flIntelligenceMres = 0x578; // float32
    public const nint m_flIntelligenceSpellAmpPercent = 0x57C; // float32
    public const nint m_flStrengthMagicResistancePercent = 0x580; // float32
    public const nint m_flAttributeAllDamage = 0x584; // float32
    public const nint m_flDraftingHeroPickSelectTimeOverride = 0x588; // float32
    public const nint m_flDraftingBanningTimeOverride = 0x58C; // float32
    public const nint m_bPauseEnabled = 0x590; // bool
    public const nint m_iCustomScanMaxCharges = 0x594; // int32
    public const nint m_flCustomScanCooldown = 0x598; // float32
    public const nint m_flCustomGlyphCooldown = 0x59C; // float32
    public const nint m_flCustomBackpackSwapCooldown = 0x5A0; // float32
    public const nint m_flCustomBackpackCooldownPercent = 0x5A4; // float32
    public const nint m_bDefaultRuneSpawnLogic = 0x5A8; // bool
    public const nint m_bEnableFreeCourierMode = 0x5A9; // bool
    public const nint m_bAllowNeutralItemDrops = 0x5AA; // bool
    public const nint m_bEnableNeutralStash = 0x5AB; // bool
    public const nint m_bEnableNeutralStashTeamViewOnly = 0x5AC; // bool
    public const nint m_bEnableNeutralItemHideUndiscovered = 0x5AD; // bool
    public const nint m_bEnableSendToStash = 0x5AE; // bool
    public const nint m_bForceRightClickAttackDisabled = 0x5AF; // bool
    public const nint m_vecCustomShopInfo = 0x5B0; // CUtlVectorEmbeddedNetworkVar< CDOTACustomShopInfo >
    public const nint m_bCanSellAnywhere = 0x600; // bool
    public const nint m_flCameraNearZ = 0x604; // float32
    public const nint m_flCameraFarZ = 0x608; // float32
    public const nint m_nCustomRadiantScore = 0x60C; // int32
    public const nint m_nCustomDireScore = 0x610; // int32
    public const nint m_bAbilityUpgradeWhitelistEnabled = 0x614; // bool
    public const nint m_vecAbilityUpgradeWhitelist = 0x618; // CNetworkUtlVectorBase< AbilityID_t >
    public const nint m_bGiveFreeTPOnDeath = 0x630; // bool
    public const nint m_nInnateMeleeDamageBlockPct = 0x634; // int32
    public const nint m_nInnateMeleeDamageBlockAmount = 0x638; // int32
    public const nint m_nInnateMeleeDamageBlockPerLevelAmount = 0x63C; // int32
    public const nint m_flWaterRuneSpawnInterval = 0x640; // float32
    public const nint m_bSelectionGoldPenaltyEnabled = 0x660; // bool
    public const nint m_bRemoveIllusionsOnDeath = 0x661; // bool
    public const nint m_bRandomHeroBonusItemGrantDisabled = 0x662; // bool
    public const nint m_bDisableClumpingBehaviorByDefault = 0x663; // bool
    public const nint m_bRuneTypeEnabled = 0x664; // bool[10]
    public const nint m_bOverrideBotLateGame = 0x66E; // bool
    public const nint m_bBotsAlwaysPushWithHuman = 0x66F; // bool
    public const nint m_bBotsInLateGame = 0x670; // bool
    public const nint m_nBotMaxPushTier = 0x674; // int32
    public const nint m_flFountainPercentageHealthRegen = 0x678; // float32
    public const nint m_flFountainPercentageManaRegen = 0x67C; // float32
    public const nint m_flFountainConstantManaRegen = 0x680; // float32
    public const nint m_flPowerRuneSpawnInterval = 0x684; // float32
    public const nint m_flBountyRuneSpawnInterval = 0x688; // float32
    public const nint m_flXPRuneSpawnInterval = 0x68C; // float32
}

public static class CDOTABehaviorAbilityChannel {
    public const nint m_timer = 0x60; // CountdownTimer
    public const nint m_flAbilityChannelDuration = 0x78; // float32
    public const nint m_hAbility = 0x7C; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x80; // CHandle< CBaseEntity >
    public const nint m_bCompletedChanneling = 0x84; // bool
}

public static class CDOTABehaviorAbilityPhase {
    public const nint m_abilityTimer = 0x60; // CountdownTimer
    public const nint m_backSwingTimer = 0x78; // CountdownTimer
    public const nint m_bBackswinging = 0x90; // bool
    public const nint m_hAbility = 0x94; // CHandle< CBaseEntity >
    public const nint m_bActionLocked = 0x98; // bool
    public const nint m_bTargetTeleported = 0x99; // bool
    public const nint m_bOriginalTargetTeleported = 0x9A; // bool
}

public static class CDOTABehaviorAttack {
    public const nint m_hTarget = 0x60; // CHandle< CBaseEntity >
    public const nint m_backSwingTimer = 0x88; // CountdownTimer
    public const nint m_bCastAttack = 0xA0; // bool
    public const nint m_flBackswingTime = 0xA4; // float32
    public const nint m_flAnimSpeed = 0xA8; // float32
}

public static class CDOTABehaviorAttackPhase {
    public const nint m_hTarget = 0x60; // CHandle< CBaseEntity >
    public const nint m_attackTimer = 0x68; // CountdownTimer
    public const nint m_bAttackComplete = 0x80; // bool
    public const nint m_bDeny = 0xA8; // bool
    public const nint m_bCastAttack = 0xA9; // bool
    public const nint m_bTargetTeleported = 0xAA; // bool
    public const nint m_flBackswingDuration = 0xAC; // float32
    public const nint m_flAnimSpeed = 0xB0; // float32
    public const nint m_flAttackPortionPriorToTimer = 0xB4; // float32
    public const nint m_iSequence = 0xB8; // HSequence
}

public static class CDOTABehaviorChase {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hChaseEntity = 0x148; // CHandle< CBaseEntity >
    public const nint m_bTargetMoves = 0x14C; // bool
    public const nint m_flFollowDistance = 0x150; // float32[2]
    public const nint m_flForwardDistance = 0x158; // float32
    public const nint m_flRightDistance = 0x15C; // float32
    public const nint m_PositionFuzziness = 0x160; // CountdownTimer
}

public static class CDOTABehaviorCommandMoveToItemToTake {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hItem = 0x148; // CHandle< CBaseEntity >
}

public static class CDOTABehaviorCommandMoveToNPC {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hTarget = 0x148; // CHandle< CBaseEntity >
    public const nint m_nMovementState = 0x14C; // int32
    public const nint m_bInRange = 0x150; // bool
    public const nint m_bWasAttacking = 0x151; // bool
}

public static class CDOTABehaviorCommandMoveToNPCToGive {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hTarget = 0x148; // CHandle< CBaseEntity >
    public const nint m_nMovementState = 0x14C; // int32
    public const nint m_hItem = 0x150; // CHandle< CBaseEntity >
    public const nint m_flRange = 0x154; // float32
}

public static class CDOTABehaviorCommandMoveToPosition {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_vPosition = 0x148; // Vector
    public const nint m_bDirectional = 0x154; // bool
    public const nint m_bRelative = 0x155; // bool
}

public static class CDOTABehaviorCommandMoveToPositionToCast {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_vPosition = 0x148; // Vector
    public const nint m_hAbility = 0x154; // CHandle< CBaseEntity >
    public const nint m_bTurningToTarget = 0x158; // bool
    public const nint m_flTargetAngle = 0x15C; // float32
}

public static class CDOTABehaviorCommandMoveToPositionToDropItem {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_vPosition = 0x148; // Vector
    public const nint m_hItem = 0x154; // CHandle< CBaseEntity >
}

public static class CDOTABehaviorCommandMoveToRuneToTake {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hRune = 0x148; // CHandle< CBaseEntity >
}

public static class CDOTABehaviorCommandMoveToTargetToAttack {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hTarget = 0x148; // CHandle< CBaseEntity >
    public const nint m_nMovementState = 0x14C; // int32
    public const nint m_bFailedCast = 0x150; // bool
    public const nint m_flTargetRange = 0x154; // float32
    public const nint m_bDeny = 0x158; // bool
    public const nint m_bInvisBreak = 0x159; // bool
    public const nint m_bNightmareAttack = 0x15A; // bool
    public const nint m_bTurningToTarget = 0x15B; // bool
    public const nint m_flTargetAngle = 0x15C; // float32
    public const nint m_vMoveToOrderPosition = 0x160; // Vector
}

public static class CDOTABehaviorCommandMoveToTargetToCast {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hTarget = 0x148; // CHandle< CBaseEntity >
    public const nint m_hAbility = 0x14C; // CHandle< CBaseEntity >
    public const nint m_nMovementState = 0x150; // int32
    public const nint m_bFailedCast = 0x154; // bool
    public const nint m_flTargetRange = 0x158; // float32
    public const nint m_bTurningToTarget = 0x15C; // bool
    public const nint m_flTargetAngle = 0x160; // float32
}

public static class CDOTABehaviorCommandPatrol {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_vOrderPosition = 0x148; // Vector
    public const nint m_vPatrolPoints = 0x158; // CUtlVector< Vector >
    public const nint m_nCurrentTargetIndex = 0x170; // int32
    public const nint m_nDirection = 0x174; // int32
}

public static class CDOTABehaviorCommandVampireThrall {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_hTarget = 0x148; // CHandle< CBaseEntity >
    public const nint m_flTargetRange = 0x150; // float32
    public const nint m_bDeny = 0x154; // bool
    public const nint m_bInvisBreak = 0x155; // bool
    public const nint m_bNightmareAttack = 0x156; // bool
    public const nint m_bTurningToTarget = 0x157; // bool
    public const nint m_bHasPositionOrder = 0x158; // bool
    public const nint m_bIsAggressive = 0x159; // bool
    public const nint m_flTargetAngle = 0x15C; // float32
    public const nint m_vFollowOffset = 0x160; // Vector
    public const nint m_vMoveToPosition = 0x16C; // Vector
    public const nint m_hMaster = 0x178; // CHandle< CBaseEntity >
}

public static class CDOTABehaviorCompanion {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_goalEntity = 0x148; // CHandle< CBaseEntity >
    public const nint m_vOffset = 0x14C; // Vector
    public const nint m_iRightOffset = 0x158; // int32
    public const nint m_iForwardOffset = 0x15C; // int32
    public const nint m_PositionFuzziness = 0x160; // CountdownTimer
}

public static class CDOTABehaviorDie {
    public const nint m_timer = 0x60; // CountdownTimer
}

public static class CDOTABehaviorIdle {
    public const nint m_IdleRareAnimationTime = 0x60; // CountdownTimer
}

public static class CDOTABehaviorInvade {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_goalEntity = 0x148; // CHandle< CBaseEntity >
    public const nint m_nextGoalEntity = 0x14C; // CHandle< CBaseEntity >
    public const nint m_bReachedFinalGoal = 0x150; // bool
    public const nint m_bRequireReachingEndPath = 0x151; // bool
}

public static class CDOTABehaviorMoveTo {
    public const nint m_repathTimer = 0xB8; // CountdownTimer
    public const nint m_bSetAnimation = 0xD0; // bool
    public const nint m_bUseSwimAnimations = 0xD1; // bool
    public const nint m_nRunActivity = 0xD4; // int32
    public const nint m_flTargetDist = 0xD8; // float32
    public const nint m_bIsDirectional = 0xDC; // bool
    public const nint m_bIsRelative = 0xDD; // bool
}

public static class CDOTABehaviorMoveToNPCToAttack {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_bMovingToLastKnownTargetPosition = 0x150; // bool
    public const nint m_AttackDelay = 0x158; // CountdownTimer
    public const nint m_ChaseLimit = 0x170; // CountdownTimer
    public const nint m_bInAttackPosition = 0x188; // bool
    public const nint m_bTurningToTarget = 0x189; // bool
    public const nint m_flTargetAngle = 0x18C; // float32
    public const nint m_bAttackMove = 0x190; // bool
}

public static class CDOTABehaviorNeutralAggro {
    public const nint m_vHomePosition = 0x60; // Vector
    public const nint m_bNoLeashTime = 0x6C; // bool
    public const nint m_bShortLeashTime = 0x6D; // bool
    public const nint m_LeashTimer = 0x70; // CountdownTimer
    public const nint m_FleeAgainTimer = 0x88; // CountdownTimer
}

public static class CDOTABehaviorNeutralHome {
    public const nint m_MoveTo = 0x68; // CDOTABehaviorMoveTo
    public const nint m_vHomePosition = 0x148; // Vector
    public const nint m_vHomeFacing = 0x154; // Vector
    public const nint m_bHomePositionSet = 0x160; // bool
    public const nint m_IdleRareAnimationTime = 0x168; // CountdownTimer
}

public static class CDOTABehaviorPet {
    public const nint m_flThreatLevel = 0x188; // float32
    public const nint m_ThreatTimer = 0x190; // CountdownTimer
    public const nint m_StuckTimer = 0x1A8; // CountdownTimer
    public const nint m_bHasVanished = 0x1C0; // bool
    public const nint m_VanishOnThreatTimer = 0x1C8; // CountdownTimer
    public const nint m_vecFleeCurrentTarget = 0x1E0; // Vector
    public const nint m_vecFleeDirection = 0x1EC; // Vector
    public const nint m_vecOldFleeDirection = 0x1F8; // Vector
    public const nint m_FleePersistTimer = 0x208; // CountdownTimer
    public const nint m_CombatRepositionTimer = 0x220; // CountdownTimer
    public const nint m_hNearestEnemyHero = 0x238; // CHandle< CDOTA_BaseNPC >
    public const nint m_flLastInWater = 0x23C; // GameTime_t
    public const nint m_vecHomeBasePosition = 0x240; // Vector
    public const nint m_bReturnToBase = 0x24C; // bool
    public const nint m_ReturnToBaseTimer = 0x250; // CountdownTimer
    public const nint m_nCoopTeleportState = 0x268; // PetCoopStates_t
    public const nint m_CarryItemTimer = 0x270; // CountdownTimer
    public const nint m_PickupDelayTimer = 0x288; // CountdownTimer
    public const nint m_LevelupCheckTimer = 0x2A0; // CountdownTimer
    public const nint m_bIsEmoting = 0x2B8; // bool
    public const nint m_hEmoteTarget = 0x2BC; // CHandle< CDOTA_BaseNPC >
    public const nint m_EmoteTimer = 0x2C0; // CountdownTimer
    public const nint m_nEmoteActivity = 0x2D8; // int32
    public const nint m_tempGoalEntity = 0x2DC; // CHandle< CBaseEntity >
    public const nint m_bFollowingTempGoal = 0x2E0; // bool
    public const nint m_event_dota_illusions_created = 0x2E4; // int32
}

public static class CDOTABehaviorTutorialRazorMoveToNPCToAttack {
    public const nint m_PlasmaFieldDelay = 0x198; // CountdownTimer
}

public static class CDOTABingoStatDefinition {
    public const nint m_strMatchStatName = 0x8; // CUtlString
    public const nint m_fStatAverage = 0x10; // float32
    public const nint m_fStatStdDev = 0x14; // float32
    public const nint m_sNameLocString = 0x18; // CUtlString
    public const nint m_sTooltipLocString = 0x20; // CUtlString
    public const nint m_nLocStringValue = 0x28; // int32
    public const nint m_strHeroAdjective = 0x30; // CUtlString
    public const nint m_bNegativeHeroAdjective = 0x38; // bool
    public const nint m_nMinLeaguePhase = 0x3C; // int32
    public const nint m_nMaxLeaguePhase = 0x40; // int32
    public const nint m_fPlayoffsStatAverage = 0x44; // float32
    public const nint m_fPlayoffsStatStdDev = 0x48; // float32
    public const nint m_fMainEventStatAverage = 0x4C; // float32
    public const nint m_fMainEventStatStdDev = 0x50; // float32
}

public static class CDOTACameraBounds {
    public const nint m_vecBoundsMin = 0x4A8; // Vector
    public const nint m_vecBoundsMax = 0x4B4; // Vector
}

public static class CDOTACheers {
    public const nint m_nRadiantCheers = 0x4A8; // int16
    public const nint m_nDireCheers = 0x4AA; // int16
    public const nint m_nRadiantPremiumCheers = 0x4AC; // int16
    public const nint m_nDirePremiumCheers = 0x4AE; // int16
    public const nint m_nRadiantCrowdLevel = 0x4B0; // ECrowdLevel
    public const nint m_nDireCrowdLevel = 0x4B4; // ECrowdLevel
}

public static class CDOTACustomGameHeroPickRules {
    public const nint m_Phase = 0x4A8; // DOTACustomHeroPickRulesPhase_t
    public const nint m_nNumBansPerTeam = 0x4AC; // int32
    public const nint m_flEnterTime = 0x4B0; // GameTime_t
    public const nint m_nNumHeroesPicked = 0x4B4; // int32
}

public static class CDOTACustomShopInfo {
    public const nint m_CustomShopName = 0x30; // char[256]
    public const nint m_CustomShopItems = 0x130; // CUtlVectorEmbeddedNetworkVar< CDOTACustomShopItemInfo >
}

public static class CDOTACustomShopItemInfo {
    public const nint m_nAbilityID = 0x30; // AbilityID_t
    public const nint m_nStockCount = 0x34; // int32
    public const nint m_Category = 0x38; // char[256]
}

public static class CDOTAFantasyDefinition {
    public const nint m_vecCraftingSetups = 0x8; // CUtlVector< FantasyCraftSetupData_t >
    public const nint m_vecLeagues = 0x20; // CUtlVector< FantasyLeagueData_t >
}

public static class CDOTAFeaturedGamemodeDefinition {
    public const nint m_nID = 0x18; // uint16
    public const nint m_eGameMode = 0x1C; // DOTA_GameMode
    public const nint m_sCustomGame = 0x20; // CUtlString
    public const nint m_nShardsPerWin = 0x28; // int32
    public const nint m_nShardsPerLoss = 0x2C; // int32
    public const nint m_sStartTime = 0x30; // CUtlString
    public const nint m_sEndTime = 0x40; // CUtlString
}

public static class CDOTAFogOfWarTempViewers {
    public const nint m_FoWTempViewerVersion = 0x4A8; // uint32
    public const nint m_TempViewerInfo = 0x4B0; // CUtlVectorEmbeddedNetworkVar< TempViewerInfo_t >
    public const nint m_flEndTimeMin = 0x500; // GameTime_t
}

public static class CDOTAGameEvents {
    public const nint m_OnDayStarted = 0x4A8; // CEntityIOOutput
    public const nint m_OnNightStarted = 0x4D0; // CEntityIOOutput
    public const nint m_OnRadiantFortDestroyed = 0x4F8; // CEntityIOOutput
    public const nint m_OnDireFortDestroyed = 0x520; // CEntityIOOutput
    public const nint m_OnGameEnded = 0x548; // CEntityIOOutput
    public const nint m_OnGameStarted = 0x570; // CEntityIOOutput
}

public static class CDOTAGameManager {
    public const nint __m_pChainEntity = 0x30; // CNetworkVarChainer
    public const nint m_bCustomGame = 0x3E8; // bool
    public const nint m_bEventGame = 0x3E9; // bool
    public const nint m_bGameModeWantsDefaultNeutralItemSchema = 0x3EA; // bool
    public const nint m_bGameModeFilteredAbilities = 0x3EB; // bool
    public const nint m_szAddOnGame = 0x3EC; // char[128]
    public const nint m_szAddOnMap = 0x46C; // char[128]
    public const nint m_pTutorialLessonKeyValues = 0x868; // KeyValues*
    public const nint m_pDivisionKeyValues = 0x870; // KeyValues*
    public const nint m_pMatchGroupsKeyValues = 0x878; // KeyValues*
    public const nint m_pAnimationStatues = 0x880; // KeyValues*
    public const nint m_pBotScriptsDedicatedServer = 0x888; // KeyValues*
    public const nint m_pkvWardPlacementLocations = 0x890; // KeyValues*
    public const nint m_pRegionKeyValues = 0x898; // KeyValues*
    public const nint m_pSurveyQuestionData = 0x8A0; // KeyValues*
    public const nint m_AddonInfoKeyValues = 0x8A8; // KeyValues3
    public const nint m_pCountryKeyValues = 0x8E0; // KeyValues*
    public const nint m_CurrentHeroAvailable = 0x9A8; // bool[256]
}

public static class CDOTAGameManagerProxy {
    public const nint m_pGameManager = 0x4A8; // CDOTAGameManager*
}

public static class CDOTAGameRules {
    public const nint __m_pChainEntity = 0x90; // CNetworkVarChainer
    public const nint m_nTotalPausedTicks = 0x108; // int32
    public const nint m_nPauseStartTick = 0x10C; // int32
    public const nint m_nRuneCycle = 0x110; // int32
    public const nint m_bGamePaused = 0x114; // bool
    public const nint m_flPauseTime = 0x118; // float64
    public const nint m_pausingPlayerId = 0x120; // PlayerID_t
    public const nint m_unpausingPlayerId = 0x124; // PlayerID_t
    public const nint m_fPauseRawTime = 0x128; // float32
    public const nint m_fPauseCurTime = 0x12C; // float32
    public const nint m_fUnpauseRawTime = 0x130; // float32
    public const nint m_fUnpauseCurTime = 0x134; // float32
    public const nint m_nPausesRemaining = 0x138; // int32[64]
    public const nint m_nLastPauseTime = 0x238; // float32[64]
    public const nint m_iMiscHeroPickCounter = 0x340; // int32
    public const nint m_hEndGameCinematicEntity = 0x344; // CHandle< CBaseEntity >
    public const nint m_EndGameCinematicTimer = 0x348; // CountdownTimer
    public const nint m_hOverlayHealthBarUnit = 0x360; // CHandle< CDOTA_BaseNPC >
    public const nint m_nOverlayHealthBarType = 0x364; // int32
    public const nint m_bIsInCinematicMode = 0x368; // bool
    public const nint m_bIsInClientSideCinematicMode = 0x369; // bool
    public const nint m_bFreeCourierMode = 0x36A; // bool
    public const nint m_nStartingGold = 0x36C; // int32
    public const nint m_nGoldPerTick = 0x370; // int32
    public const nint m_flGoldTickTime = 0x374; // float32
    public const nint m_bEnableSuggestAbilities = 0x378; // bool
    public const nint m_bEnableSuggestItems = 0x379; // bool
    public const nint m_unFanfareGoodGuys = 0x398; // uint32
    public const nint m_unFanfareBadGuys = 0x39C; // uint32
    public const nint m_flFanfareTime = 0x3A0; // GameTime_t
    public const nint m_bSpeechUseSpawnInsteadOfRespawnConcept = 0x3A4; // bool
    public const nint m_bSpeechSendTeamSpeaksToSpectators = 0x3A5; // bool
    public const nint m_bIgnoreLobbyTeamsInCustomGames = 0x3A6; // bool
    public const nint m_nCustomGameBansPerTeam = 0x3A8; // int32
    public const nint m_iFOWDefeatedTempViewer = 0x3AC; // int32
    public const nint m_nGameState = 0x3F8; // int32
    public const nint m_nHeroPickState = 0x3FC; // DOTA_HeroPickState
    public const nint m_bAlternateHeroGridsEnabled = 0x400; // bool
    public const nint m_flStateTransitionTime = 0x404; // GameTime_t
    public const nint m_flOverride_dota_hero_selection_time = 0x408; // float32
    public const nint m_flOverride_dota_pregame_time = 0x40C; // float32
    public const nint m_flOverride_dota_postgame_time = 0x410; // float32
    public const nint m_flOverride_dota_strategy_time = 0x414; // float32
    public const nint m_flOverride_dota_team_showcase_duration = 0x418; // float32
    public const nint m_flOverride_dota_rune_spawn_time = 0x41C; // float32
    public const nint m_flShowcaseTime = 0x420; // float32[15]
    public const nint m_flNeutralInitialSpawnOffset = 0x45C; // float32
    public const nint m_flOverride_dota_tree_regrow_time = 0x460; // float32
    public const nint m_iGameMode = 0x464; // int32
    public const nint m_hGameModeEntity = 0x468; // CHandle< CBaseEntity >
    public const nint m_hCustomHeroPickRulesEntity = 0x46C; // CHandle< CBaseEntity >
    public const nint m_flHeroPickStateTransitionTime = 0x470; // GameTime_t
    public const nint m_iPlayerIDsInControl = 0x478; // uint64
    public const nint m_bSameHeroSelectionEnabled = 0x480; // bool
    public const nint m_bUseCustomHeroXPValue = 0x481; // bool
    public const nint m_bUseBaseGoldBountyOnHeroes = 0x482; // bool
    public const nint m_bUseUniversalShopMode = 0x483; // bool
    public const nint m_bHideKillMessageHeaders = 0x484; // bool
    public const nint m_flHeroMinimapIconScale = 0x488; // float32
    public const nint m_flCreepMinimapIconScale = 0x48C; // float32
    public const nint m_bCreepSpawningEnabled = 0x490; // bool
    public const nint m_flRuneMinimapIconScale = 0x494; // float32
    public const nint m_CustomVictoryMessage = 0x498; // char[256]
    public const nint m_flCustomGameEndDelay = 0x598; // float32
    public const nint m_flCustomGameSetupAutoLaunchDelay = 0x59C; // float32
    public const nint m_flCustomGameSetupTimeout = 0x5A0; // float32
    public const nint m_flCustomVictoryMessageDuration = 0x5A4; // float32
    public const nint m_flHeroSelectPenaltyTime = 0x5A8; // float32
    public const nint m_bCustomGameSetupAutoLaunchEnabled = 0x5AC; // bool
    public const nint m_bCustomGameTeamSelectionLocked = 0x5AD; // bool
    public const nint m_bCustomGameEnablePickRules = 0x5AE; // bool
    public const nint m_bCustomGameAllowHeroPickMusic = 0x5AF; // bool
    public const nint m_bCustomGameAllowMusicAtGameStart = 0x5B0; // bool
    public const nint m_bCustomGameAllowBattleMusic = 0x5B1; // bool
    public const nint m_bCustomGameDisableIK = 0x5B2; // bool
    public const nint m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x5B3; // bool
    public const nint m_iCMModePickBanOrder = 0x5B4; // int32
    public const nint m_iCDModePickBanOrder = 0x5B8; // int32
    public const nint m_nGGTeam = 0x5BC; // int32
    public const nint m_flGGEndsAtTime = 0x5C0; // GameTime_t
    public const nint m_bGGCalled = 0x5C4; // bool
    public const nint m_bWhiteListEnabled = 0x5C5; // bool
    public const nint m_bItemWhiteList = 0x5C8; // uint64[4]
    public const nint m_nLastHitUIMode = 0x5E8; // int32
    public const nint m_bHUDTimerTutorialMode = 0x5EC; // bool
    public const nint m_HeroPickMiscTimer = 0x5F0; // CountdownTimer
    public const nint m_ExtraTimeTimer = 0x608; // CountdownTimer
    public const nint m_fExtraTimeRemaining = 0x620; // float32[2]
    public const nint m_bHeroRespawnEnabled = 0x628; // bool
    public const nint m_bIsRandomingEnabled = 0x629; // bool
    public const nint m_HeroPickPhaseBitfield = 0x630; // CUtlVector< int32 >
    public const nint m_bHasSwapped = 0x648; // bool[64]
    public const nint m_iCaptainPlayerIDs = 0x688; // PlayerID_t[2]
    public const nint m_BannedHeroes = 0x690; // int32[24]
    public const nint m_SelectedHeroes = 0x6F0; // int32[24]
    public const nint m_iActiveTeam = 0x750; // int32
    public const nint m_iStartingTeam = 0x754; // int32
    public const nint m_iPenaltyLevelRadiant = 0x758; // int32
    public const nint m_iPenaltyLevelDire = 0x75C; // int32
    public const nint m_bIsLoadingScenario = 0x760; // bool
    public const nint m_vecBanNominatedHeroes = 0x768; // CUtlVector< int32 >
    public const nint m_vecNewBannedHeroes = 0x780; // CNetworkUtlVectorBase< int32 >
    public const nint m_vecWhitelistedHeroes = 0x798; // CNetworkUtlVectorBase< int32 >
    public const nint m_vecBlacklistedHeroes = 0x7B0; // CNetworkUtlVectorBase< int32 >
    public const nint m_bHideBlacklistedHeroes = 0x7C8; // bool
    public const nint m_nSeriesType = 0x7CC; // int32
    public const nint m_nRadiantSeriesWins = 0x7D0; // int32
    public const nint m_nDireSeriesWins = 0x7D4; // int32
    public const nint m_vecAvailableHerosPerPlayerID = 0x7D8; // CUtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_vecLockedHerosByPlayerID = 0x848; // CUtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_vecDisabledRandomHerosByPlayerID = 0x8B8; // CUtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
    public const nint m_CustomGameForceSelectHero = 0x928; // int32[24]
    public const nint m_flGoldTime = 0x988; // float32
    public const nint m_flXPTime = 0x98C; // float32
    public const nint m_flCreepSpawntime = 0x990; // GameTime_t
    public const nint m_flAnnounceStartTime = 0x994; // float32
    public const nint m_iGoodTomeCount = 0x998; // int32
    public const nint m_iBadTomeCount = 0x99C; // int32
    public const nint m_flPreGameStartTime = 0x9A0; // GameTime_t
    public const nint m_flGameStartTime = 0x9A4; // GameTime_t
    public const nint m_flGameEndTime = 0x9A8; // GameTime_t
    public const nint m_flGameLoadTime = 0x9AC; // float32
    public const nint m_iCustomGameScore = 0x9B0; // int32[2]
    public const nint m_nCustomGameDifficulty = 0x9B8; // int32
    public const nint m_bEnemyModifiersEnabled = 0x9BC; // bool
    public const nint m_iWaves = 0x9C0; // int32
    public const nint m_iCreepUpgradeState = 0x9C4; // int32
    public const nint m_fGoodGlyphCooldown = 0x9C8; // GameTime_t
    public const nint m_fBadGlyphCooldown = 0x9CC; // GameTime_t
    public const nint m_flGlyphCooldowns = 0x9D0; // GameTime_t[15]
    public const nint m_fGoodRadarCooldown = 0xA0C; // GameTime_t
    public const nint m_fBadRadarCooldown = 0xA10; // GameTime_t
    public const nint m_flRadarCooldowns = 0xA14; // GameTime_t[15]
    public const nint m_iGoodRadarCharges = 0xA50; // int32
    public const nint m_iBadRadarCharges = 0xA54; // int32
    public const nint m_iRadarCharges = 0xA58; // int32[15]
    public const nint m_flOutpostTimes = 0xA94; // float32[24]
    public const nint m_bIsNightstalkerNight = 0xAF4; // bool
    public const nint m_bIsTemporaryNight = 0xAF5; // bool
    public const nint m_bIsTemporaryDay = 0xAF6; // bool
    public const nint m_nRiverType = 0xAF8; // int32
    public const nint m_nTeamFeaturedPlayerID = 0xAFC; // PlayerID_t[15]
    public const nint m_nTeamVersusScreen = 0xB38; // item_definition_index_t[15]
    public const nint m_flGoldRedistributeTime = 0xB74; // float32
    public const nint m_nGoldToRedistribute = 0xB78; // int32[2]
    public const nint m_flNextPreGameThink = 0xB80; // GameTime_t
    public const nint m_flNextAllDraftGoldThink = 0xB84; // GameTime_t
    public const nint m_flTimeEnteredState = 0xB88; // float64
    public const nint m_unRiverAccountID = 0xB90; // uint32
    public const nint m_ulRiverItemID = 0xB98; // itemid_t
    public const nint m_vecItemStockInfo = 0xBE0; // CUtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
    public const nint m_AssassinMiniGameNetData = 0xC50; // DOTA_AssassinMinigameNetworkState
    public const nint m_nGameWinner = 0xC60; // int32
    public const nint m_unMatchID64 = 0xC68; // MatchID_t
    public const nint m_bMatchSignoutComplete = 0xC70; // bool
    public const nint m_hSideShop1 = 0xC74; // CHandle< CBaseEntity >
    public const nint m_hSideShop2 = 0xC78; // CHandle< CBaseEntity >
    public const nint m_hSecretShop1 = 0xC7C; // CHandle< CBaseEntity >
    public const nint m_hSecretShop2 = 0xC80; // CHandle< CBaseEntity >
    public const nint m_hTeamFountains = 0xC84; // CHandle< CBaseEntity >[15]
    public const nint m_hTeamForts = 0xCC0; // CHandle< CBaseEntity >[15]
    public const nint m_hTeamShops = 0xCFC; // CHandle< CBaseEntity >[15]
    public const nint m_hAnnouncerGood = 0xD38; // CHandle< CBaseEntity >
    public const nint m_hAnnouncerBad = 0xD3C; // CHandle< CBaseEntity >
    public const nint m_hAnnouncerSpectator = 0xD40; // CHandle< CBaseEntity >
    public const nint m_hAnnouncerGood_KillingSpree = 0xD44; // CHandle< CBaseEntity >
    public const nint m_hAnnouncerBad_KillingSpree = 0xD48; // CHandle< CBaseEntity >
    public const nint m_hAnnouncerSpectator_KillingSpree = 0xD4C; // CHandle< CBaseEntity >
    public const nint m_arrTier1TowerDestroyed = 0xD50; // bool[15]
    public const nint m_arrTier2TowerDestroyed = 0xD5F; // bool[15]
    public const nint m_arrTier3TowerDestroyed = 0xD6E; // bool[15]
    public const nint m_bTier1TowerDestroyed = 0xD7D; // bool
    public const nint m_bTier2TowerDestroyed = 0xD7E; // bool
    public const nint m_bTier3TowerDestroyed = 0xD7F; // bool
    public const nint m_fTimeOfDay = 0xD80; // float32
    public const nint m_iNetTimeOfDay = 0xD84; // int32
    public const nint m_nLoadedPlayers = 0xD88; // int32
    public const nint m_nExpectedPlayers = 0xD8C; // int32
    public const nint m_iMinimapDebugGridState = 0xD98; // int32
    public const nint m_iFoWFrameNumber = 0xE18; // int32
    public const nint m_vWeatherWindDirection = 0xE1C; // Vector
    public const nint m_pKVPostGameTable = 0xE28; // KeyValues*
    public const nint m_pKVEventMatchMetadata = 0xE30; // KeyValues*
    public const nint m_pKVEventSignout = 0xE38; // KeyValues*
    public const nint m_vecRequiredPlaytestHeroesStorage = 0xE98; // int32[24]
    public const nint m_vecRecommendedPlaytestHeroesStorage = 0xEF8; // int32[24]
    public const nint m_bAllRequiredPlaytestHeroesPicked = 0xF58; // bool
    public const nint m_nLastPlaytestPickPhase = 0xF5C; // int32
    public const nint m_nCustomGameFowTeamCount = 0xF60; // int32
    public const nint m_bUseAlternateABRules = 0xF64; // bool
    public const nint m_bLobbyIsAssociatedWithGame = 0xF65; // bool
    public const nint m_BotDebugTimer = 0xF68; // CountdownTimer
    public const nint m_BotDebugPushLane = 0xF80; // uint8[18]
    public const nint m_BotDebugDefendLane = 0xF92; // uint8[18]
    public const nint m_BotDebugFarmLane = 0xFA4; // uint8[6]
    public const nint m_BotDebugRoam = 0xFAA; // uint8[8]
    public const nint m_hBotDebugRoamTarget = 0xFB4; // CHandle< CBaseEntity >[2]
    public const nint m_BotDebugRoshan = 0xFBC; // uint8[2]
    public const nint m_nRoshanRespawnPhase = 0xFC0; // ERoshanSpawnPhase
    public const nint m_flRoshanRespawnPhaseEndTime = 0xFC4; // GameTime_t
    public const nint m_AbilityDraftAbilities = 0xFC8; // CUtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
    public const nint m_bAbilityDraftCurrentPlayerHasPicked = 0x1038; // bool
    public const nint m_nAbilityDraftPlayerTracker = 0x103C; // int32
    public const nint m_nAbilityDraftRoundNumber = 0x1040; // int32
    public const nint m_nAbilityDraftAdvanceSteps = 0x1044; // int32
    public const nint m_nAbilityDraftPhase = 0x1048; // int32
    public const nint m_nAbilityDraftHeroesChosen = 0x104C; // int32[13]
    public const nint m_bIsPlayerDraft = 0x1080; // bool
    public const nint m_ePlayerDraftState = 0x1084; // DOTA_PlayerDraftState
    public const nint m_vecPlayerDraftPickOrder = 0x1088; // CNetworkUtlVectorBase< uint8 >
    public const nint m_nPlayerDraftPick = 0x10A0; // int32
    public const nint m_nPlayerDraftActiveTeam = 0x10A4; // int32
    public const nint m_flPlayerDraftTimeBank = 0x10A8; // float32[2]
    public const nint m_vecARDMHeroes = 0x10B0; // CUtlVector< KeyValues* >[2]
    public const nint m_nARDMHeroesPrecached = 0x10E0; // int32
    public const nint m_fLastARDMPrecache = 0x10E4; // float32
    public const nint m_nAllDraftPhase = 0x10E8; // int32
    public const nint m_bAllDraftRadiantFirst = 0x10EC; // bool
    public const nint m_bAllowOverrideVPK = 0x10ED; // bool
    public const nint m_nARDMHeroesRemaining = 0x10F0; // int32[2]
    public const nint m_hGlobalPetList = 0x10F8; // CUtlVector< CHandle< CDOTA_BaseNPC_Pet > >
    public const nint m_nRadiantRoshanKills = 0x1160; // int32
    public const nint m_nDireRoshanKills = 0x1164; // int32
    public const nint m_nRoshanKillsDay = 0x1168; // int32
    public const nint m_nRoshanKillsNight = 0x116C; // int32
    public const nint m_nTormentorKills = 0x1170; // int32
    public const nint m_nOutpostCaptures = 0x1174; // int32
    public const nint m_nDistanceCalculations = 0x1184; // int32
    public const nint m_bLaneVictoryPredicted = 0x1188; // bool
    public const nint m_mapSuccessfulSmokes = 0x1190; // CUtlOrderedMap< PlayerID_t, int32, F( size=1 ) >
    public const nint m_bExperimentalGameplay = 0x11C8; // bool
    public const nint m_vecHeroPickRecord = 0x11E8; // CUtlVector< HeroPickRecord_t >
    public const nint m_vecHeroDeathRecord = 0x1220; // CUtlVector< HeroDeathRecord_t >
    public const nint m_BadResultPositionTriggers = 0x1250; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_RoshanPositionTriggers = 0x1268; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecAllDraftHeroPickRecord = 0x1280; // CUtlVector< HeroPickRecord_t >
    public const nint m_vecAbilityDraftOrder = 0x1298; // CUtlOrderedMap< PlayerID_t, CUtlVector< AbilityID_t >, F( size=1 ) >
    public const nint m_nAllDraftHeroPickCollisionsThisPhase = 0x12D8; // int32
    public const nint m_hRuneSpawners = 0x12E0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hBountyRuneSpawners = 0x12F8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hXPRuneSpawners = 0x1310; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hNeutralSpawners = 0x1328; // CUtlVector< CHandle< CBaseEntity > >[2]
    public const nint m_iPreviousRune1 = 0x1358; // int32
    public const nint m_iPreviousRune2 = 0x135C; // int32
    public const nint m_vecAvailableRunes = 0x1360; // CUtlVector< int32 >
    public const nint m_fNextPowerupRuneSpawnTime = 0x1378; // float32
    public const nint m_fNextBountyRuneSpawnTime = 0x137C; // float32
    public const nint m_fNextBountyRunePrepTime = 0x1380; // float32
    public const nint m_fNextXPRuneSpawnTime = 0x1384; // float32
    public const nint m_aNeutralChoicesLoaded = 0x1388; // bool[5]
    public const nint m_bFirstPowerupRune = 0x138D; // bool
    public const nint m_bFirstBountyRune = 0x138E; // bool
    public const nint m_bFilterMoreGold = 0x138F; // bool
    public const nint m_bAllowOutpostXP = 0x1390; // bool
    public const nint m_hRoshanSpawner = 0x1394; // CHandle< CBaseEntity >
    public const nint m_iPreviousSpectators = 0x1398; // int32
    public const nint m_nMaxSpectators = 0x139C; // uint32
    public const nint m_hDroppedItems = 0x13A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hWards = 0x13B8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hGameEvents = 0x13D0; // CHandle< CBaseEntity >
    public const nint m_Towers = 0x13F0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_TeamTowers = 0x1408; // CUtlVector< CHandle< CDOTA_BaseNPC_Tower > >[10]
    public const nint m_Outposts = 0x14F8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_TeamTowerPositions = 0x1510; // CUtlVector< Vector >[10]
    public const nint m_TeamTowerLevels = 0x1600; // CUtlVector< int32 >[10]
    public const nint m_TeamTowerLanes = 0x16F0; // CUtlVector< int32 >[10]
    public const nint m_TeamBarracks = 0x17E0; // CUtlVector< CHandle< CDOTA_BaseNPC_Building > >[10]
    public const nint m_TeamShrines = 0x18D0; // CUtlVector< CHandle< CDOTA_BaseNPC_Building > >[10]
    public const nint m_TempDayTimer = 0x19C0; // CountdownTimer
    public const nint m_TempNightTimer = 0x19D8; // CountdownTimer
    public const nint m_NightstalkerNightTimer = 0x19F0; // CountdownTimer
    public const nint m_TempRiverTimer = 0x1A08; // CountdownTimer
    public const nint m_bUseLenientAFK = 0x1A20; // bool[2]
    public const nint m_bFirstBlood = 0x1A22; // bool
    public const nint m_nFirstBloodTime = 0x1A24; // int32
    public const nint m_CheckIdleTimer = 0x1A28; // CountdownTimer
    public const nint m_nAnnounceHeroPickRadiantPlayerID = 0x1A40; // PlayerID_t
    public const nint m_nAnnounceHeroPickDirePlayerID = 0x1A44; // PlayerID_t
    public const nint m_pszLastUsedAbility = 0x1A48; // CUtlString[64]
    public const nint m_reconnectinfos = 0x1C48; // CUtlVector< CDOTA_ReconnectInfo >
    public const nint m_hEnemyCreepsInBase = 0x1C60; // CUtlVector< CHandle< CBaseEntity > >[10]
    public const nint m_bTeamHasAbandonedPlayer = 0x1D50; // bool[10]
    public const nint m_bLobbyHasLeaverDetected = 0x1D5A; // bool
    public const nint m_bGameIsForcedSafeToLeave = 0x1D5B; // bool
    public const nint m_bLobbyHasDicardMatchResults = 0x1D5C; // bool
    public const nint m_iGameEndReason = 0x1D60; // int32
    public const nint m_bNotifiedPlayerLeaverStatus = 0x1D64; // bool[64]
    public const nint m_bUploadedReplay = 0x1DA4; // bool
    public const nint m_flLobbyWaitTime = 0x1DA8; // float32
    public const nint m_bGameWasLoaded = 0x1DAC; // bool
    public const nint m_nLoadPauseFrameCount = 0x1DB0; // int32
    public const nint m_flStateFallbackTransitionTime = 0x1DB8; // float64
    public const nint m_timerFinishReplay = 0x1DC0; // EngineCountdownTimer
    public const nint m_vecChatLog = 0x1DD8; // CUtlVector< GameChatLogEntry_t >
    public const nint m_bFatalErrorAbortGame = 0x4448; // bool
    public const nint m_bFillEmptySlotsWithBots = 0x4449; // bool
    public const nint m_dotaMapSpawnGroup = 0x444C; // uint32
    public const nint m_lobbyType = 0x4478; // uint32
    public const nint m_lobbyLeagueID = 0x447C; // LeagueID_t
    public const nint m_lobbyGameName = 0x4480; // char[256]
    public const nint m_vecHeroStatueLiked = 0x4580; // CUtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
    public const nint m_CustomGameTeamMaxPlayers = 0x45F0; // int32[15]
    public const nint m_iMutations = 0x4668; // int32[5]
    public const nint m_vecIngameEvents = 0x4680; // CNetworkUtlVectorBase< CHandle< CIngameEvent_Base > >
    public const nint m_nPrimaryIngameEventIndex = 0x4698; // int8
    public const nint m_nOfrendaPledges = 0x469C; // uint32
    public const nint m_nRadiantOfrendas = 0x46A0; // uint32
    public const nint m_nDireOfrendas = 0x46A4; // uint32
    public const nint m_bOfrendaEnabled = 0x46A8; // bool
    public const nint m_vecMuertaPartingShotSouls = 0x46B0; // CUtlVector< sMuertaPartingShotSoulDef >
    public const nint m_NeutralSpawnBoxes = 0x46E0; // CNetworkUtlVectorBase< NeutralSpawnBoxes_t >
    public const nint m_RegionTriggerBoxes = 0x46F8; // CNetworkUtlVectorBase< RegionTriggerBoxes_t >
    public const nint m_flLastItemSuggestionRequestTime = 0x4710; // float64[15]
    public const nint m_flLastPerfSampleTime = 0x5740; // float64
}

public static class CDOTAGamerulesProxy {
    public const nint m_pGameRules = 0x4A8; // CDOTAGameRules*
}

public static class CDOTAInGamePredictionState {
    public const nint m_bVotingClosed = 0x4A8; // bool
    public const nint m_bAllPredictionsFinished = 0x4A9; // bool
    public const nint m_vecPredictions = 0x4B0; // CUtlVectorEmbeddedNetworkVar< InGamePredictionData_t >
    public const nint m_nLeagueID = 0x500; // LeagueID_t
}

public static class CDOTALabyrinthBlessingsMap {
    public const nint m_strBlessingEventAction = 0x8; // CUtlString
    public const nint m_nNextBlessingTypeID = 0x18; // BlessingTypeID_t
    public const nint m_nNextBlessingID = 0x1C; // BlessingID_t
    public const nint m_UnlockHeroBlessingType = 0x20; // CUtlString
    public const nint m_vecHeroNames = 0x30; // CUtlVector< CUtlString >
    public const nint m_nNumStartingHeroesUnlocked = 0x60; // int32
    public const nint m_UnlockLegacyHeroBlessingType = 0x68; // CUtlString
    public const nint m_vecLegacyHeroNames = 0x78; // CUtlVector< CUtlString >
    public const nint m_nNumStartingLegacyHeroesUnlocked = 0xA8; // int32
    public const nint m_mapBlessingTypes = 0xB0; // CUtlDict< BlessingType_t, int32, F( size=1 ) >
    public const nint m_mapBlessings = 0x118; // CUtlDict< Blessing_t, int32, F( size=1 ) >
    public const nint m_vecPaths = 0x168; // CUtlVector< BlessingPath_t >
}

public static class CDOTAMusicProbabilityEntry {
    public const nint m_flProbabilityElements = 0x8; // CUtlVector< float32 >
    public const nint m_flProbability = 0x20; // float32
}

public static class CDOTANewPlayerPoolGameMode {
    public const nint m_nHighestLevelInCurrentGame = 0x770; // int32
    public const nint m_ExtraMeleeCreepTimes = 0x7D8; // CUtlVector< float32 >
    public const nint m_ExtraRangedCreepTimes = 0x7F0; // CUtlVector< float32 >
    public const nint m_ExtraSiegeCreepTimes = 0x808; // CUtlVector< float32 >
    public const nint m_bInOvertime = 0x820; // bool
}

public static class CDOTAPlayerController {
    public const nint m_iMinimapMove = 0x688; // int32
    public const nint m_iCursor = 0x68C; // int32[2]
    public const nint m_iSpectatorClickBehavior = 0x694; // int32
    public const nint m_flAspectRatio = 0x698; // float32
    public const nint m_hSpectatorQueryUnit = 0x69C; // CHandle< CBaseEntity >
    public const nint m_iStatsPanel = 0x6A0; // int32
    public const nint m_iShopPanel = 0x6A4; // int32
    public const nint m_iShopViewMode = 0x6A8; // ShopItemViewMode_t
    public const nint m_iStatsDropdownCategory = 0x6AC; // int32
    public const nint m_iStatsDropdownSort = 0x6B0; // int32
    public const nint m_szShopString = 0x6B4; // char[64]
    public const nint m_bInShowCaseMode = 0x6F4; // bool
    public const nint m_flCameraZoomAmount = 0x6F8; // float32
    public const nint m_iHighPriorityScore = 0x6FC; // int32
    public const nint m_quickBuyItems = 0x700; // AbilityID_t[9]
    public const nint m_quickBuyIsPurchasable = 0x724; // bool[9]
    public const nint m_flFrameTime = 0x730; // float32
    public const nint m_flFrameTimeStdDev = 0x734; // float32
    public const nint m_flUnfilteredFrameTime = 0x738; // float32
    public const nint m_bUsingAssistedCameraOperator = 0x73C; // bool
    public const nint m_bUsingCameraMan = 0x73D; // bool
    public const nint m_nPlayerAssistFlags = 0x740; // int32
    public const nint m_flHighPriorityScoreTimeStamp = 0x744; // float32
    public const nint m_flExecuteOrdersLagCompensation = 0x748; // float32
    public const nint m_iMusicStatus = 0x74C; // int32
    public const nint m_flMusicOperatorVals = 0x750; // float32[3]
    public const nint m_iMusicOperatorVals = 0x75C; // int32[4]
    public const nint m_MusicRestTime = 0x770; // CountdownTimer
    public const nint m_hKillCamUnit = 0x788; // CHandle< CBaseEntity >
    public const nint m_vecCrosshairTracePos = 0x78C; // Vector
    public const nint m_iCrosshairEntity = 0x798; // CEntityIndex
    public const nint m_nPlayerID = 0x79C; // PlayerID_t
    public const nint m_hAssignedHero = 0x7A0; // CHandle< CBaseEntity >
    public const nint m_bTeleportRequiresHalt = 0x7B0; // bool
    public const nint m_bChannelRequiresHalt = 0x7B1; // bool
    public const nint m_nServerOrderSequenceNumber = 0x7B4; // int32
    public const nint m_flLastOrderTime = 0x7B8; // float32
    public const nint m_flLastKnownActiveTime = 0x7BC; // float32
    public const nint m_flLastReconnectTime = 0x7C0; // GameTime_t
    public const nint m_fLastSuggestionTime = 0x7C4; // GameTime_t
    public const nint m_bWantsRandomHero = 0x7E8; // bool
    public const nint m_bFullyJoinedServer = 0x7E9; // bool
    public const nint m_nCheatDetectOrderReferenceCommandNumber = 0x7EC; // int32
    public const nint m_iSwapPreferencePlayerID = 0x7F0; // PlayerID_t
    public const nint m_nCoachListenMask = 0x7F4; // uint32
    public const nint m_nCachedCoachedTeam = 0x7F8; // int32
    public const nint m_flLastChatWheelTime = 0x7FC; // float32[2]
    public const nint m_flLastChatWheelAudioTime = 0x804; // float32[2]
    public const nint m_flLastChatWheelAllChatAudioTime = 0x80C; // float32[2]
    public const nint m_flLastChatWheelSprayTime = 0x814; // float32
    public const nint m_flLastChatWheelLongCooldownTime = 0x818; // float32
    public const nint m_flLastPingTime = 0x81C; // float32
    public const nint m_flPingAllowance = 0x820; // float32
    public const nint m_flLastMapLineTime = 0x824; // float32
    public const nint m_flMapLineAllowance = 0x828; // float32
    public const nint m_flLastVersusBehaviorTime = 0x82C; // float32
    public const nint m_flVersusBehaviorAllowance = 0x830; // float32
    public const nint m_pOrderRetirementHistory = 0x834; // uint8[10]
    public const nint m_nOrderRetirementSum = 0x83E; // uint16
    public const nint m_nOrderRetirementLastTick = 0x840; // int32
}

public static class CDOTAPropConsumableBanner {
    public const nint m_bUseAvatar = 0x9F0; // bool
}

public static class CDOTAPropCustomTexture {
    public const nint m_unTeamID = 0x9F0; // uint32
}

public static class CDOTAPropPlusPlayerGuildBanner {
    public const nint m_nPlayerID = 0xA10; // int32
}

public static class CDOTAPropTI10PlayerGuildBanner {
    public const nint m_nPlayerID = 0xA10; // int32
}

public static class CDOTASpectatorGraphManager {
    public const nint __m_pChainEntity = 0x28; // CNetworkVarChainer
    public const nint m_bTrackingTeamStats = 0x50; // bool
    public const nint m_flStartTime = 0x54; // GameTime_t
    public const nint m_rgRadiantTotalEarnedGold = 0x58; // int32[64]
    public const nint m_rgDireTotalEarnedGold = 0x158; // int32[64]
    public const nint m_rgRadiantTotalEarnedXP = 0x258; // int32[64]
    public const nint m_rgDireTotalEarnedXP = 0x358; // int32[64]
    public const nint m_rgRadiantNetWorth = 0x458; // int32[64]
    public const nint m_rgDireNetWorth = 0x558; // int32[64]
    public const nint m_flTotalEarnedGoldStartTime = 0x658; // GameTime_t
    public const nint m_flTotalEarnedGoldEndTime = 0x65C; // GameTime_t
    public const nint m_nGoldGraphVersion = 0x660; // int32
    public const nint m_rgRadiantWinChance = 0x664; // int32[64]
    public const nint m_TeamStatsUpdateTimer = 0x768; // CountdownTimer
    public const nint m_HeroInventorySnapshotTimer = 0x780; // CountdownTimer
    public const nint m_vecPlayerSnapshots = 0x798; // CUtlVector< sPlayerSnapshot >[24]
    public const nint m_event_dota_player_killed = 0x9D8; // int32
    public const nint m_event_server_pre_shutdown = 0x9DC; // int32
}

public static class CDOTASpectatorGraphManagerProxy {
    public const nint m_pGraphManager = 0x4A8; // CDOTASpectatorGraphManager*
}

public static class CDOTASubChallengeInfo {
    public const nint nType = 0x30; // int32
    public const nint nTier = 0x34; // int32
    public const nint nSlotID = 0x38; // int32
    public const nint nProgress = 0x3C; // int32
    public const nint nCompletionThreshold = 0x40; // int32
    public const nint nPlayerID = 0x44; // PlayerID_t
    public const nint nQueryIndex = 0x48; // int32
    public const nint nEventID = 0x4C; // int32
    public const nint nSequenceID = 0x50; // int32
    public const nint nRequiredHero = 0x54; // int32
    public const nint nCompleted = 0x58; // int32
}

public static class CDOTATeam {
    public const nint m_iHeroKills = 0x570; // int32
    public const nint m_iTowerKills = 0x574; // int32
    public const nint m_iBarracksKills = 0x578; // int32
    public const nint m_unTournamentTeamID = 0x57C; // uint32
    public const nint m_ulTeamLogo = 0x580; // uint64
    public const nint m_ulTeamBaseLogo = 0x588; // uint64
    public const nint m_ulTeamBannerLogo = 0x590; // uint64
    public const nint m_bTeamComplete = 0x598; // bool
    public const nint m_bTeamIsHomeTeam = 0x599; // bool
    public const nint m_CustomHealthbarColor = 0x59A; // Color
    public const nint m_szTag = 0x59E; // char[33]
    public const nint m_event_lobby_updated = 0x5C0; // int32
    public const nint m_nKillStreak = 0x5C4; // int32
    public const nint m_iRecentKillCount = 0x5C8; // int32
    public const nint m_iRandomNumber = 0x5CC; // int32
    public const nint m_RecentHeroKillTimer = 0x5D0; // CountdownTimer
}

public static class CDOTATrophyDefinition {
    public const nint m_nID = 0x8; // uint16
    public const nint m_bObtainable = 0xA; // bool
    public const nint m_bShowProgressBar = 0xB; // bool
    public const nint m_bShowInitialEarn = 0xC; // bool
    public const nint m_sCreationDate = 0x10; // CUtlString
    public const nint m_nBadgePointsPerUnit = 0x1C; // uint32
    public const nint m_nUnitsPerBadgePoint = 0x20; // uint32
    public const nint m_nMaxUnitsForBadgePoints = 0x24; // uint32
    public const nint m_nSortTier = 0x28; // uint32
    public const nint m_sLocCategory = 0x30; // CUtlString
    public const nint m_sLocName = 0x38; // CUtlString
    public const nint m_sLocDescription = 0x40; // CUtlString
    public const nint m_sLocUnitsPluralizable = 0x48; // CUtlString
    public const nint m_vecLevels = 0x50; // CUtlVector< TrophyLevel_t >
}

public static class CDOTATurboGameMode {
    public const nint m_nHighestLevelInCurrentGame = 0x788; // int32
    public const nint m_ExtraMeleeCreepTimes = 0x7C0; // CUtlVector< float32 >
    public const nint m_ExtraRangedCreepTimes = 0x7D8; // CUtlVector< float32 >
    public const nint m_ExtraSiegeCreepTimes = 0x7F0; // CUtlVector< float32 >
    public const nint m_nExtraGoldPerWave = 0x808; // int32
    public const nint m_nExtraXPPerWave = 0x80C; // int32
    public const nint m_flNextRewardDistributionTime = 0x810; // float32
    public const nint m_flNextWaveRecalculationTime = 0x814; // float32
    public const nint m_flNextNeutralItemDistributionTime = 0x818; // float32
    public const nint m_bInOvertime = 0x81C; // bool
    public const nint m_bDistributingPassiveGoldAndXp = 0x81D; // bool
}

public static class CDOTATurboHeroPickRules {
    public const nint m_Phase = 0x4A8; // DOTACustomHeroPickRulesPhase_t
}

public static class CDOTAWearableItem {
    public const nint m_bOwnerModelChanged = 0x940; // bool
    public const nint m_bIsGeneratingEconItem = 0x941; // bool
    public const nint m_bIsItemVisibleOnGeneratedEntity = 0x942; // bool
    public const nint m_bHideWearableButDrawAdditionalWearables = 0x943; // bool
    public const nint m_hAdditionalWearable = 0x944; // CHandle< CBaseAnimatingActivity >
}

public static class CDOTA_AbilityDraftAbilityState {
    public const nint m_nAbilityID = 0x30; // AbilityID_t
    public const nint m_unPlayerID = 0x34; // PlayerID_t
    public const nint m_unAbilityPlayerSlot = 0x38; // int32
}

public static class CDOTA_Ability_AbyssalUnderlord_DarkRift {
    public const nint teleport_delay = 0x568; // float32
    public const nint m_hTeleportTarget = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_AbyssalUnderlord_Dark_Portal {
    public const nint duration = 0x568; // float32
    public const nint distance_from_fountain = 0x56C; // float32
}

public static class CDOTA_Ability_AbyssalUnderlord_Firestorm {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_AbyssalUnderlord_PitOfMalice {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_AbyssalUnderlord_Portal_Warp {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_flChannelTime = 0x56C; // float32
}

public static class CDOTA_Ability_Aghanim_Spear {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecProjectileHandles = 0x580; // CUtlVector< int32 >
    public const nint m_vTarget = 0x5A0; // Vector
    public const nint m_vSourcePosition = 0x5AC; // Vector
    public const nint damage = 0x5B8; // int32
}

public static class CDOTA_Ability_Aghanim_UrnUpheaval {
    public const nint m_vPosition = 0x568; // Vector
    public const nint aoe = 0x574; // float32
    public const nint slow_rate = 0x578; // float32
    public const nint slow_rate_duration = 0x57C; // float32
    public const nint duration = 0x580; // float32
    public const nint max_slow = 0x584; // float32
    public const nint burn_damage = 0x588; // float32
    public const nint m_flCurrentSlow = 0x58C; // float32
    public const nint m_nFXIndex = 0x590; // ParticleIndex_t
    public const nint m_SlowTimer = 0x598; // CountdownTimer
    public const nint m_timer = 0x5B0; // CountdownTimer
}

public static class CDOTA_Ability_AghsFort_Arcanist_Potion {
    public const nint cooldown_reduction_pct = 0x610; // int32
    public const nint manacost_reduction_pct = 0x614; // int32
}

public static class CDOTA_Ability_AghsFort_Ascension_Invis {
    public const nint warning_duration = 0x568; // float32
}

public static class CDOTA_Ability_AghsFort_Ascension_Silence {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_AssaultCaptain_SearingChains {
    public const nint m_nWarningFX = 0x568; // ParticleIndex_t
    public const nint m_nRadiusFX = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_BossDarkWillow_ShadowRealm {
    public const nint projectile_damage = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Capture {
    public const nint m_hTarget = 0x568; // CHandle< CDOTA_BaseNPC >
    public const nint m_pMyBuff = 0x570; // CDOTA_Buff*
}

public static class CDOTA_Ability_AghsFort_Clinkz_BurningArmy {
    public const nint range = 0x568; // int32
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vSlashDir = 0x578; // Vector
    public const nint m_nDashProjectileID = 0x584; // int32
    public const nint m_vDashProjectileLocation = 0x588; // Vector
}

public static class CDOTA_Ability_AghsFort_Clinkz_BurningBarrage {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_iArrowProjectile = 0x574; // int32
    public const nint m_nFXIndex = 0x578; // int32
    public const nint m_nTriSplitCount = 0x598; // int32
    public const nint projectile_speed = 0x59C; // int32
    public const nint projectile_width = 0x5A0; // int32
}

public static class CDOTA_Ability_AghsFort_Creature_Impale {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint width = 0x56C; // int32
    public const nint duration = 0x570; // float32
    public const nint length = 0x574; // int32
    public const nint speed = 0x578; // int32
}

public static class CDOTA_Ability_AghsFort_Creature_Phoenix_FireSpirits {
    public const nint hp_cost_perc = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Creature_Phoenix_LaunchFireSpirit {
    public const nint spirit_speed = 0x568; // int32
    public const nint duration = 0x56C; // float32
    public const nint radius = 0x570; // int32
    public const nint hp_cost_perc = 0x574; // int32
    public const nint m_nFXIndex = 0x578; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Creature_Phoenix_Supernova {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Creature_Venomancer_PoisonNova {
    public const nint m_nFXPreview = 0x568; // ParticleIndex_t
    public const nint radius = 0x56C; // int32
}

public static class CDOTA_Ability_AghsFort_DragonKnight_BreatheFire {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint start_radius = 0x56C; // int32
    public const nint end_radius = 0x570; // int32
    public const nint m_vStartPos = 0x574; // Vector
    public const nint m_fStartTime = 0x580; // GameTime_t
    public const nint m_fTotalTime = 0x584; // float32
}

public static class CDOTA_Ability_AghsFort_Dragon_Potion {
    public const nint bonus_movement_speed = 0x610; // int32
    public const nint bonus_attack_damage = 0x614; // int32
    public const nint bonus_attack_range = 0x618; // int32
    public const nint magic_resistance = 0x61C; // int32
    public const nint model_scale = 0x620; // int32
    public const nint skin_number = 0x624; // int32
    public const nint flying_movement = 0x628; // bool
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_BoulderSmash {
    public const nint speed = 0x568; // int32
    public const nint rock_damage = 0x56C; // int32
    public const nint radius = 0x570; // int32
    public const nint rock_search_aoe = 0x574; // int32
    public const nint unit_distance = 0x578; // float32
    public const nint rock_distance = 0x57C; // float32
    public const nint m_nProjectileID = 0x580; // int32
    public const nint m_hCursorTarget = 0x584; // CHandle< CBaseEntity >
    public const nint m_bUsedStone = 0x588; // bool
    public const nint m_hTarget = 0x58C; // CHandle< CBaseEntity >
    public const nint m_bTargetStone = 0x590; // bool
    public const nint m_vecBoulderSmashedEnts = 0x598; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_GeomagneticGrip {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_Magnetize {
    public const nint cast_radius = 0x568; // int32
    public const nint rock_explosion_radius = 0x56C; // int32
    public const nint damage_duration = 0x570; // float32
}

public static class CDOTA_Ability_AghsFort_EarthSpiritBoss_RollingBoulder {
    public const nint radius = 0x578; // int32
    public const nint speed = 0x57C; // int32
    public const nint rock_speed = 0x580; // int32
    public const nint damage = 0x584; // int32
    public const nint distance = 0x588; // float32
    public const nint rock_distance = 0x58C; // float32
    public const nint slow_duration = 0x590; // float32
    public const nint m_nFXIndex = 0x594; // ParticleIndex_t
    public const nint m_boulderSetposBool = 0x598; // bool
    public const nint m_nProjectileID = 0x59C; // int32
    public const nint m_vStartingLocation = 0x5A0; // Vector
    public const nint m_vProjectileLocation = 0x5AC; // Vector
    public const nint m_vDir = 0x5B8; // Vector
    public const nint m_vVel = 0x5C4; // Vector
    public const nint m_bUsedStone = 0x5D0; // bool
}

public static class CDOTA_Ability_AghsFort_EchoSlamPotion {
    public const nint echo_slam_damage_range = 0x610; // int32
    public const nint echo_slam_echo_search_range = 0x614; // int32
    public const nint echo_slam_echo_range = 0x618; // int32
    public const nint echo_slam_echo_damage = 0x61C; // int32
    public const nint echo_slam_initial_damage = 0x620; // int32
    public const nint spend_charge_delay = 0x624; // float32
}

public static class CDOTA_Ability_AghsFort_Juggernaut_BladeDance {
    public const nint m_hBladeFuryThinker = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_AghsFort_Kunkka_GhostShip {
    public const nint buff_duration = 0x568; // float32
    public const nint stun_duration = 0x56C; // float32
    public const nint ghostship_width = 0x570; // int32
    public const nint ghostship_width_scepter = 0x574; // int32
    public const nint m_vFinalDestination = 0x578; // Vector
    public const nint m_vStartingPoint = 0x584; // Vector
}

public static class CDOTA_Ability_AghsFort_Kunkka_Tidal_Wave {
    public const nint m_WaveData = 0x568; // WaveData_t[2]
}

public static class CDOTA_Ability_AghsFort_Kunkka_Torrent {
    public const nint torrent_storm_chance = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Kunkka_XMarksTheSpot {
    public const nint m_hThinkerEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AghsFort_Lich_ChainFrost {
    public const nint jump_range = 0x568; // int32
    public const nint jumps = 0x56C; // int32
    public const nint slow_duration = 0x570; // float32
    public const nint vision_radius = 0x574; // int32
    public const nint projectile_speed = 0x578; // int32
}

public static class CDOTA_Ability_AghsFort_Lich_Ice_Spire {
    public const nint aura_radius = 0x568; // int32
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_AghsFort_Lich_Sinister_Gaze {
    public const nint m_hShackleTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_vPullLocation = 0x56C; // Vector
    public const nint m_flIntervalRate = 0x578; // float32
}

public static class CDOTA_Ability_AghsFort_Luna_GlaiveShield {
    public const nint m_GlaiveDefs = 0x568; // CUtlVector< sGlaiveDef >
}

public static class CDOTA_Ability_AghsFort_Luna_MoonGlaive {
    public const nint m_iAttackIndex = 0x568; // int32
    public const nint m_GlaiveInfo = 0x570; // CUtlVector< sAghsFortGlaiveInfo >
}

public static class CDOTA_Ability_AghsFort_Morphling_Waveform {
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_hHitHero = 0x588; // CHandle< CBaseEntity >
    public const nint m_bGrantedGem = 0x58C; // bool
    public const nint m_nPreviewFX = 0x590; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Phoenix_FireSpirits {
    public const nint hp_cost_perc = 0x568; // int32
    public const nint spirit_count = 0x56C; // int32
}

public static class CDOTA_Ability_AghsFort_Phoenix_IcarusDive {
    public const nint hp_cost_perc = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Phoenix_LaunchFireSpirit {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_bUnitCarriedByArtillery = 0x56C; // bool
    public const nint m_nSpiritSpeed = 0x570; // int32
    public const nint m_fDuration = 0x574; // float32
    public const nint m_nRadius = 0x578; // int32
    public const nint m_nSpiritCount = 0x57C; // int32
}

public static class CDOTA_Ability_AghsFort_QueenOfPain_Blink {
    public const nint m_hHitEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AghsFort_QueenOfPain_ScreamOfPain {
    public const nint damage = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_QueenOfPain_ShadowStrike {
    public const nint projectile_speed = 0x568; // Vector
    public const nint m_hHitEntities = 0x578; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AghsFort_QueenOfPain_SonicWave {
    public const nint m_fStartTime = 0x568; // GameTime_t
    public const nint m_fTotalTime = 0x56C; // float32
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
    public const nint m_nSonicTrailRadius = 0x574; // int32
    public const nint m_vLastTrailThinkerLocation = 0x578; // Vector
    public const nint bTrailStartedBurning = 0x584; // bool
    public const nint damage = 0x588; // int32
    public const nint starting_aoe = 0x58C; // int32
    public const nint final_aoe = 0x590; // int32
}

public static class CDOTA_Ability_AghsFort_Ravage_Potion {
    public const nint m_hEntsHit = 0x610; // CUtlVector< CHandle< CBaseEntity > >
    public const nint damage = 0x628; // int32
    public const nint duration = 0x62C; // float32
    public const nint spend_charge_delay = 0x630; // float32
}

public static class CDOTA_Ability_AghsFort_RockGolem_Smash {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint m_vTargetLoc = 0x56C; // Vector
    public const nint radius = 0x580; // int32
}

public static class CDOTA_Ability_AghsFort_ShadowShaman_Shackles {
    public const nint m_hShackleTarget = 0x568; // CHandle< CBaseEntity >
    public const nint nShackleFXIndex = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Shadow_Demon_Shadow_Poison {
    public const nint m_hPoisonedUnits = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint radius = 0x580; // int32
    public const nint m_hHitUnits = 0x588; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AghsFort_Sniper_Assassinate {
    public const nint m_hTarget = 0x570; // CHandle< CBaseEntity >
    public const nint m_iIndex = 0x574; // ParticleIndex_t
    public const nint m_bHasBuckshotAbility = 0x578; // bool
    public const nint m_bInBuckshot = 0x579; // bool
    public const nint m_nScatterRange = 0x57C; // int32
    public const nint m_nScatterWidth = 0x580; // int32
    public const nint m_nBuckshotDamagePct = 0x584; // int32
    public const nint m_nDamageType = 0x588; // int32
    public const nint damage = 0x58C; // int32
}

public static class CDOTA_Ability_AghsFort_Sniper_Concussive_Grenade {
    public const nint m_iProjectile = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Special_VoidSpirit_ResonantPulse_Suppression {
    public const nint m_nBonusCharges = 0x568; // int32
}

public static class CDOTA_Ability_AghsFort_Spectre_ActiveDispersion {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_AghsFort_StonehallGeneral_OverwhelmingOdds {
    public const nint max_steps = 0x568; // int32
    public const nint m_vTarget = 0x56C; // Vector
    public const nint m_vDir = 0x578; // Vector
    public const nint m_nSteps = 0x584; // int32
    public const nint m_flChannelStartTime = 0x588; // GameTime_t
    public const nint m_nFXIndex = 0x58C; // ParticleIndex_t
}

public static class CDOTA_Ability_AghsFort_Tower_BlastWave {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_AghsFort_TrapRoom_Hookshot {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x56C; // Vector
    public const nint m_bRetract = 0x578; // bool
    public const nint m_hSourceCaster = 0x584; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_AghsFort_TrapRoom_MeatHook {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint hook_speed = 0x584; // float32
    public const nint hook_width = 0x588; // int32
    public const nint hook_distance = 0x58C; // int32
    public const nint m_bRetracting = 0x590; // bool
    public const nint m_bDiedInHook = 0x591; // bool
    public const nint m_hVictim = 0x594; // CHandle< CBaseEntity >
    public const nint m_vTargetPosition = 0x598; // Vector
    public const nint m_vCasterPosition = 0x5A4; // Vector
    public const nint m_bChainDetached = 0x5B0; // bool
    public const nint m_iChainParticle = 0x5B4; // ParticleIndex_t
    public const nint m_iHookParticle = 0x5B8; // int32
    public const nint m_nManaCost = 0x5BC; // int32
    public const nint m_hSourceCaster = 0x5C0; // CHandle< CBaseEntity >
    public const nint m_nNextConsecutiveHitCount = 0x5C4; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_AetherRemnant {
    public const nint m_nFXPreview = 0x568; // ParticleIndex_t
    public const nint m_vDashPosition = 0x574; // Vector
    public const nint m_vFacePosition = 0x580; // Vector
    public const nint m_vEndpoint = 0x58C; // Vector
    public const nint start_radius = 0x598; // int32
    public const nint end_radius = 0x59C; // int32
    public const nint remnant_watch_distance = 0x5A0; // int32
    public const nint projectile_speed = 0x5A4; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_AstralStep {
    public const nint m_nFXPreview = 0x568; // ParticleIndex_t
    public const nint m_nFXDestinationPreview = 0x56C; // ParticleIndex_t
    public const nint m_vStartPos = 0x570; // Vector
    public const nint m_vDestination = 0x57C; // Vector
    public const nint m_vDirection = 0x588; // Vector
    public const nint radius = 0x594; // int32
    public const nint min_travel_distance = 0x598; // int32
    public const nint max_travel_distance = 0x59C; // int32
    public const nint debuff_duration = 0x5A0; // float32
    public const nint pop_damage_delay = 0x5A4; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_Dissimilate {
    public const nint m_nFXPreview = 0x568; // ParticleIndex_t
    public const nint phase_duration = 0x56C; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpiritBoss_ResonantPulse {
    public const nint m_nFXPreview = 0x568; // ParticleIndex_t
    public const nint m_bGrantedScepterCharges = 0x56C; // bool
    public const nint buff_duration = 0x570; // float32
    public const nint base_absorb_amount = 0x574; // int32
    public const nint absorb_per_hero_hit = 0x578; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_AetherRemnant {
    public const nint start_radius = 0x568; // int32
    public const nint end_radius = 0x56C; // int32
    public const nint remnant_watch_distance = 0x570; // int32
    public const nint projectile_speed = 0x574; // int32
    public const nint m_vDashPosition = 0x580; // Vector
    public const nint m_vFacePosition = 0x58C; // Vector
    public const nint m_vEndpoint = 0x598; // Vector
    public const nint m_nProjectileID = 0x5A4; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_AstralStep {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_vDestination = 0x574; // Vector
    public const nint m_vDirection = 0x580; // Vector
    public const nint radius = 0x58C; // int32
    public const nint min_travel_distance = 0x590; // int32
    public const nint max_travel_distance = 0x594; // int32
    public const nint debuff_duration = 0x598; // float32
    public const nint pop_damage_delay = 0x59C; // float32
    public const nint pop_damage = 0x5A0; // int32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_Dissimilate {
    public const nint m_vecTranslocatingAllies = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint phase_duration = 0x580; // float32
}

public static class CDOTA_Ability_AghsFort_VoidSpirit_ResonantPulse {
    public const nint buff_duration = 0x568; // float32
    public const nint base_absorb_amount = 0x56C; // int32
    public const nint absorb_per_unit_hit = 0x570; // int32
    public const nint hero_absorb_multiplier = 0x574; // float32
    public const nint boss_absorb_multiplier = 0x578; // float32
}

public static class CDOTA_Ability_AghsFort_Wave_Blast {
    public const nint damage = 0x568; // int32
    public const nint knockback_duration = 0x56C; // float32
    public const nint disarm_duration = 0x570; // float32
    public const nint m_hHitEntities = 0x578; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nPreviewFX = 0x590; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort2_DrowRanger_Multishot {
    public const nint m_vHitTargets = 0x568; // CUtlVector< CUtlVector< CHandle< CBaseEntity > > >
}

public static class CDOTA_Ability_Aghsfort2_DrowRanger_WaveOfSilence {
    public const nint wave_length = 0x568; // int32
    public const nint wave_width = 0x56C; // int32
    public const nint wave_speed = 0x570; // float32
    public const nint silence_duration = 0x574; // float32
    public const nint knockback_distance_max = 0x578; // float32
    public const nint knockback_duration = 0x57C; // float32
    public const nint m_vVectorTarget = 0x580; // Vector
}

public static class CDOTA_Ability_Aghsfort_Aziyog_Underlord_Dark_Portal {
    public const nint duration = 0x568; // float32
}

public static class CDOTA_Ability_Aghsfort_Aziyog_Underlord_Firestorm {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Aziyog_Underlord_Portal_Warp {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Aghsfort_Bane_BrainSap {
    public const nint cast_range = 0x568; // int32
    public const nint brain_sap_damage = 0x56C; // int32
}

public static class CDOTA_Ability_Aghsfort_Bane_FiendsGrip {
    public const nint m_hGripTarget = 0x568; // CHandle< CBaseEntity >
    public const nint fiend_grip_damage = 0x56C; // int32
    public const nint fiend_grip_spread_radius = 0x570; // int32
    public const nint channel_time = 0x574; // float32
    public const nint fiend_grip_tick_interval = 0x578; // float32
    public const nint m_flLastSpreadTime = 0x57C; // GameTime_t
}

public static class CDOTA_Ability_Aghsfort_Bane_Nightmare {
    public const nint m_nNightmareSwapCount = 0x568; // int32
}

public static class CDOTA_Ability_Aghsfort_Bonus_Pudge_MeatHook {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint hook_speed = 0x584; // float32
    public const nint hook_width = 0x588; // int32
    public const nint hook_distance = 0x58C; // int32
    public const nint m_bRetracting = 0x590; // bool
    public const nint m_bDiedInHook = 0x591; // bool
    public const nint m_hVictim = 0x594; // CHandle< CBaseEntity >
    public const nint m_vTargetPosition = 0x598; // Vector
    public const nint m_vCasterPosition = 0x5A4; // Vector
    public const nint m_bChainDetached = 0x5B0; // bool
    public const nint m_iChainParticle = 0x5B4; // ParticleIndex_t
    public const nint m_iHookParticle = 0x5B8; // int32
    public const nint m_nManaCost = 0x5BC; // int32
    public const nint m_hSourceCaster = 0x5C0; // CHandle< CBaseEntity >
    public const nint m_nNextConsecutiveHitCount = 0x5C4; // int32
    public const nint m_nConsecutiveHits = 0x5C8; // int32
}

public static class CDOTA_Ability_Aghsfort_Dawnbreaker_Celestial_Hammer {
    public const nint projectile_speed = 0x568; // int32
    public const nint projectile_radius = 0x56C; // int32
    public const nint hammer_damage = 0x570; // int32
    public const nint hammer_aoe_radius = 0x574; // int32
    public const nint flare_radius = 0x578; // int32
    public const nint bHasStartedBurning = 0x57C; // bool
    public const nint flare_debuff_duration = 0x580; // float32
    public const nint return_anim_distance_threshold = 0x584; // int32
    public const nint range = 0x588; // int32
}

public static class CDOTA_Ability_Aghsfort_Dawnbreaker_Solar_Guardian {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
    public const nint m_bJumping = 0x56C; // bool
    public const nint m_vecDeathThinkers = 0x570; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Aghsfort_Disruptor_Glimpse {
    public const nint m_nNPCSpawnedID = 0x578; // int32
}

public static class CDOTA_Ability_Aghsfort_Elemental_Wisp_Tether {
    public const nint m_hTarget = 0x578; // CHandle< CBaseEntity >
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_bProjectileActive = 0x588; // bool
    public const nint latch_distance = 0x58C; // int32
    public const nint m_iProjectileIndex = 0x590; // int32
}

public static class CDOTA_Ability_Aghsfort_Gyrocopter_Call_Down {
    public const nint m_vEndpoint = 0x568; // Vector
    public const nint range_scepter = 0x574; // int32
}

public static class CDOTA_Ability_Aghsfort_Gyrocopter_Rocket_Barrage {
    public const nint duration = 0x568; // float32
}

public static class CDOTA_Ability_Aghsfort_Lina_DragonSlave {
    public const nint dragon_slave_distance = 0x570; // int32
    public const nint m_vLastTrailThinkerLocation = 0x574; // Vector
    public const nint dragon_slave_damage = 0x580; // int32
    public const nint m_flLSADistance = 0x584; // float32
    public const nint m_nLSAPower = 0x588; // int32
    public const nint m_flLSADelay = 0x58C; // float32
}

public static class CDOTA_Ability_Aghsfort_Lina_FierySoul {
    public const nint active_duration = 0x568; // float32
}

public static class CDOTA_Ability_Aghsfort_Lina_LagunaBlade {
    public const nint m_hHitEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nMaxBounces = 0x580; // int32
}

public static class CDOTA_Ability_Aghsfort_Magnataur_Empower {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Magnataur_FriendlySkewer {
    public const nint skewer_radius = 0x568; // int32
    public const nint skewer_speed = 0x56C; // int32
    public const nint max_targets = 0x570; // int32
    public const nint range = 0x574; // int32
    public const nint tree_radius = 0x578; // int32
    public const nint affects_creeps = 0x57C; // int32
    public const nint m_nProjectileID = 0x580; // int32
    public const nint m_nTargetsHit = 0x584; // int32
}

public static class CDOTA_Ability_Aghsfort_Magnataur_ReversePolarity {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vPullLocation = 0x56C; // Vector
}

public static class CDOTA_Ability_Aghsfort_Magnataur_Shockwave {
    public const nint m_nFXIndices = 0x568; // CUtlVector< ParticleIndex_t >
}

public static class CDOTA_Ability_Aghsfort_Magnataur_Skewer {
    public const nint skewer_radius = 0x568; // int32
    public const nint skewer_speed = 0x56C; // int32
    public const nint range = 0x570; // int32
    public const nint tree_radius = 0x574; // int32
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_nVisibleTargetCount = 0x57C; // int32
    public const nint m_vSkewerDirection = 0x580; // Vector
    public const nint m_nTargetsHit = 0x58C; // int32
}

public static class CDOTA_Ability_Aghsfort_Mars_Bulwark {
    public const nint active_duration = 0x568; // float32
}

public static class CDOTA_Ability_Aghsfort_Mars_Spear {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecProjectileHandles = 0x580; // CUtlVector< int32 >
    public const nint damage = 0x5A0; // int32
    public const nint hImpaledTargetList = 0x5A8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nTargetsImpaled = 0x5C0; // int32
    public const nint m_nMaxImpaleTargets = 0x5C4; // int32
    public const nint m_nBurningTrailRadius = 0x5C8; // int32
    public const nint m_vLastTrailThinkerLocation = 0x5CC; // Vector
    public const nint bHasStartedBurning = 0x5D8; // bool
}

public static class CDOTA_Ability_Aghsfort_Phoenix_Flame_Revenant_Attack {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_Onslaught {
    public const nint max_charge_time = 0x568; // float32
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_PrimalRoar {
    public const nint path_width = 0x568; // int32
    public const nint push_duration = 0x56C; // float32
    public const nint push_distance = 0x570; // int32
    public const nint min_distance = 0x574; // int32
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_Pummel {
    public const nint m_hTarget = 0x568; // CDOTA_BaseNPC*
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_RoarAttack {
    public const nint speed = 0x568; // int32
    public const nint projectile_count = 0x56C; // int32
    public const nint rotation_angle = 0x570; // float32
    public const nint damage = 0x574; // float32
    public const nint radius = 0x578; // float32
    public const nint ctTimer = 0x580; // CountdownTimer
    public const nint m_vecStartRot = 0x598; // Vector
    public const nint m_vecEndRot = 0x5A4; // Vector
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_TectonicShift {
    public const nint damage = 0x568; // int32
}

public static class CDOTA_Ability_Aghsfort_PrimalBeast_Boss_ThrowAttack {
    public const nint base_damage = 0x568; // int32
    public const nint hp_damage_pct = 0x56C; // int32
    public const nint impact_radius = 0x570; // int32
    public const nint fragment_impact_distance = 0x574; // int32
    public const nint min_range = 0x578; // int32
    public const nint m_nFXPreview = 0x57C; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Sand_King_BurrowStrike {
    public const nint burrow_width = 0x568; // int32
    public const nint burrow_speed = 0x56C; // int32
    public const nint burrow_anim_time = 0x570; // float32
    public const nint m_vStartLocation = 0x574; // Vector
}

public static class CDOTA_Ability_Aghsfort_Sand_King_Epicenter {
    public const nint m_nFXEpicenterIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Sand_King_SandStorm {
    public const nint m_iRadius = 0x568; // int32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_FiresnapCookie {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint projectile_speed = 0x574; // int32
    public const nint pre_hop_duration = 0x578; // float32
    public const nint cast_on_ally_gesture_time = 0x57C; // float32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_GobbleUp {
    public const nint m_hGobbledUnit = 0x568; // CHandle< CBaseEntity >
    public const nint max_time_in_belly = 0x56C; // float32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_LilShredder {
    public const nint m_iAttackIndex = 0x568; // int32
    public const nint m_BounceInfo = 0x570; // CUtlVector< sLilShredderBounceInfo >
}

public static class CDOTA_Ability_Aghsfort_Snapfire_MortimerKisses {
    public const nint m_nDamagePerProjectile = 0x568; // int32
    public const nint damage_per_impact = 0x56C; // int32
    public const nint impact_radius = 0x570; // int32
    public const nint projectile_vision = 0x574; // int32
    public const nint m_nFragmentationImpactRadius = 0x578; // int32
    public const nint firetrail_radius = 0x57C; // int32
    public const nint firetrail_damage = 0x580; // int32
    public const nint firetrail_tick_interval = 0x584; // int32
    public const nint m_vFirePoolLocations = 0x588; // CUtlVector< Vector >
    public const nint m_fNextDamageTick = 0x5A0; // float32
    public const nint m_vLastFirePoolLoc = 0x5A4; // Vector
}

public static class CDOTA_Ability_Aghsfort_Snapfire_Scatterblast {
    public const nint damage = 0x568; // int32
    public const nint debuff_duration = 0x56C; // float32
    public const nint point_blank_range = 0x570; // int32
    public const nint point_blank_dmg_bonus_pct = 0x574; // float32
    public const nint blast_width_end = 0x578; // int32
}

public static class CDOTA_Ability_Aghsfort_Snapfire_SpitCreep {
    public const nint m_nDamagePerProjectile = 0x568; // int32
    public const nint m_hGobbledUnit = 0x56C; // CHandle< CBaseEntity >
    public const nint m_nProjectileID = 0x570; // int32
}

public static class CDOTA_Ability_Aghsfort_Special_Magnataur_ReversePolarity_Polarity {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vPullLocation = 0x56C; // Vector
    public const nint pAbilityPrimaryPolarity = 0x578; // CDOTABaseAbility*
}

public static class CDOTA_Ability_Aghsfort_TuskBoss_IceShards {
    public const nint m_iProjectile = 0x568; // int32
    public const nint shard_width = 0x56C; // int32
    public const nint shard_damage = 0x570; // int32
    public const nint shard_count = 0x574; // int32
    public const nint shard_speed = 0x578; // float32
    public const nint shard_duration = 0x57C; // float32
    public const nint shard_angle_step = 0x580; // float32
    public const nint shard_distance = 0x584; // int32
    public const nint m_vSpawnOrigin = 0x588; // Vector
    public const nint m_vDirection = 0x594; // Vector
    public const nint m_pIceShardsStop = 0x5A8; // CDOTABaseAbility*
}

public static class CDOTA_Ability_Aghsfort_TuskBoss_Snowball {
    public const nint snowball_windup_radius = 0x578; // int32
    public const nint snowball_radius = 0x57C; // int32
    public const nint snowball_grow_rate = 0x580; // int32
    public const nint snowball_damage = 0x584; // int32
    public const nint snowball_damage_bonus = 0x588; // int32
    public const nint stun_duration = 0x58C; // float32
    public const nint bonus_damage = 0x590; // int32
    public const nint bonus_stun = 0x594; // float32
    public const nint snowball_speed = 0x598; // int32
    public const nint snowball_duration = 0x59C; // float32
    public const nint m_vProjectileLocation = 0x5A0; // Vector
    public const nint m_hSnowballedUnits = 0x5B0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
    public const nint ctSnowball = 0x5D0; // CountdownTimer
    public const nint m_bSpeakAlly = 0x5E8; // bool
    public const nint m_bIsExpired = 0x5E9; // bool
    public const nint m_bInWindup = 0x5EA; // bool
    public const nint m_hPrimaryTarget = 0x5EC; // CHandle< CBaseEntity >
    public const nint m_nContainedValidUnits = 0x5F0; // int32
    public const nint m_bEndingSnowball = 0x5F4; // bool
}

public static class CDOTA_Ability_Aghsfort_Tusk_IceShards {
    public const nint m_iProjectile = 0x568; // int32
    public const nint shard_width = 0x56C; // int32
    public const nint shard_damage = 0x570; // int32
    public const nint shard_count = 0x574; // int32
    public const nint shard_speed = 0x578; // float32
    public const nint shard_duration = 0x57C; // float32
    public const nint shard_angle_step = 0x580; // float32
    public const nint shard_distance = 0x584; // int32
    public const nint secondary_damage_pct = 0x588; // int32
    public const nint m_vSpawnOrigin = 0x58C; // Vector
    public const nint m_vDirection = 0x598; // Vector
    public const nint m_pIceShardsStop = 0x5B0; // CDOTABaseAbility*
}

public static class CDOTA_Ability_Aghsfort_Tusk_Snowball {
    public const nint snowball_windup_radius = 0x578; // int32
    public const nint snowball_radius = 0x57C; // int32
    public const nint snowball_grow_rate = 0x580; // int32
    public const nint snowball_damage = 0x584; // int32
    public const nint snowball_damage_bonus = 0x588; // int32
    public const nint stun_duration = 0x58C; // float32
    public const nint bonus_damage = 0x590; // int32
    public const nint bonus_stun = 0x594; // float32
    public const nint snowball_speed = 0x598; // int32
    public const nint snowball_duration = 0x59C; // float32
    public const nint m_vProjectileLocation = 0x5A0; // Vector
    public const nint m_hSnowballedUnits = 0x5B0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
    public const nint ctSnowball = 0x5D0; // CountdownTimer
    public const nint m_bSpeakAlly = 0x5E8; // bool
    public const nint m_bIsExpired = 0x5E9; // bool
    public const nint m_bInWindup = 0x5EA; // bool
    public const nint m_hPrimaryTarget = 0x5EC; // CHandle< CBaseEntity >
    public const nint m_nContainedValidUnits = 0x5F0; // int32
    public const nint m_bEndingSnowball = 0x5F4; // bool
}

public static class CDOTA_Ability_Aghsfort_Tusk_Snowball_Dummy {
    public const nint snowball_radius = 0x568; // int32
    public const nint snowball_grow_rate = 0x56C; // int32
    public const nint snowball_damage = 0x570; // int32
    public const nint snowball_damage_bonus = 0x574; // int32
    public const nint stun_duration = 0x578; // float32
    public const nint bonus_damage = 0x57C; // int32
    public const nint bonus_stun = 0x580; // float32
    public const nint snowball_speed = 0x584; // int32
    public const nint snowball_duration = 0x588; // float32
    public const nint m_bIsExpired = 0x58C; // bool
    public const nint m_vProjectileLocation = 0x590; // Vector
    public const nint ctSnowball = 0x5A0; // CountdownTimer
    public const nint m_hSnowballedUnits = 0x5B8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXIndex = 0x5D0; // ParticleIndex_t
    public const nint m_hPrimaryTarget = 0x5D4; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Aghsfort_Viper_Aghsfort_ViperStrike {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_nTargetTeam = 0x56C; // int32
    public const nint m_flNextViperStrikeTime = 0x570; // float32
}

public static class CDOTA_Ability_Aghsfort_Walrus_Pudge_Harpoon {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint hook_speed = 0x584; // float32
    public const nint hook_width = 0x588; // int32
    public const nint hook_distance = 0x58C; // int32
    public const nint m_bRetracting = 0x590; // bool
    public const nint m_bDiedInHook = 0x591; // bool
    public const nint m_hVictim = 0x594; // CHandle< CBaseEntity >
    public const nint m_vTargetPosition = 0x598; // Vector
    public const nint m_vCasterPosition = 0x5A4; // Vector
    public const nint m_bChainDetached = 0x5B0; // bool
    public const nint m_iChainParticle = 0x5B4; // ParticleIndex_t
    public const nint m_iHookParticle = 0x5B8; // int32
    public const nint m_nManaCost = 0x5BC; // int32
    public const nint m_hSourceCaster = 0x5C0; // CHandle< CBaseEntity >
    public const nint m_nPreviewFX = 0x5C4; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Weaver_Shukuchi {
    public const nint duration = 0x568; // float32
    public const nint radius = 0x56C; // int32
    public const nint damage = 0x570; // int32
    public const nint fade_time = 0x574; // float32
}

public static class CDOTA_Ability_Aghsfort_Weaver_TimeLapse {
    public const nint m_nNPCSpawnedID = 0x578; // int32
}

public static class CDOTA_Ability_Aghsfort_Wildwing_Tornado_Blast {
    public const nint disable_duration = 0x568; // float32
    public const nint damage = 0x56C; // float32
    public const nint m_nPreviewFX = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_Aghsfort_Winter_Wyvern_Arctic_Burn {
    public const nint m_BurnedTargets = 0x568; // CUtlVector< CEntityIndex >
}

public static class CDOTA_Ability_Aghsfort_Winter_Wyvern_Splinter_Blast {
    public const nint splinter_damage = 0x570; // int32
    public const nint m_hMainTarget = 0x574; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Aghsfort_WitchDoctor_DeathWard {
    public const nint m_iDamage = 0x568; // int32
    public const nint m_iBounceRadius = 0x56C; // int32
    public const nint m_iProjectileSpeed = 0x570; // int32
    public const nint m_iBounces = 0x574; // int32
    public const nint m_hWard = 0x578; // CHandle< CBaseEntity >
    public const nint m_fWardExpireTime = 0x57C; // GameTime_t
    public const nint m_nFXIndex = 0x580; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x584; // int32
    public const nint m_BounceInfo = 0x588; // CUtlVector< sAghsfortWardBounceInfo >
}

public static class CDOTA_Ability_Aghsfort_WitchDoctor_DeathWard_No_Channel {
    public const nint m_iDamage = 0x568; // int32
    public const nint m_iBounceRadius = 0x56C; // int32
    public const nint m_iProjectileSpeed = 0x570; // int32
    public const nint m_iBounces = 0x574; // int32
    public const nint m_hWard = 0x578; // CHandle< CBaseEntity >
    public const nint m_fWardExpireTime = 0x57C; // float32
    public const nint m_nFXIndex = 0x580; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x584; // int32
    public const nint m_BounceInfo = 0x588; // CUtlVector< sAghsfortWardBounceInfo >
}

public static class CDOTA_Ability_Aghsfort_WitchDoctor_ParalyzingCask {
    public const nint bounces = 0x568; // int32
    public const nint bounce_bonus_damage = 0x56C; // int32
    public const nint damage = 0x570; // int32
}

public static class CDOTA_Ability_Alchemist_UnstableConcoctionThrow {
    public const nint m_fCookTime = 0x568; // float32
    public const nint m_vProjectileLoc = 0x56C; // Vector
}

public static class CDOTA_Ability_AncientApparition_IceAge {
    public const nint radius = 0x568; // int32
    public const nint health_degen = 0x56C; // int32
    public const nint duration = 0x570; // float32
    public const nint damage = 0x574; // int32
}

public static class CDOTA_Ability_AncientApparition_IceBlast {
    public const nint m_PathTimer = 0x568; // CountdownTimer
    public const nint m_vTarget = 0x580; // Vector
    public const nint m_vStartPos = 0x58C; // Vector
    public const nint m_vLastTempViewer = 0x598; // Vector
    public const nint m_iTrackerProjectile = 0x5A4; // int32
    public const nint path_radius = 0x5A8; // int32
    public const nint radius_min = 0x5AC; // int32
    public const nint radius_max = 0x5B0; // int32
    public const nint radius_grow = 0x5B4; // float32
    public const nint frostbite_duration = 0x5B8; // float32
    public const nint target_sight_radius = 0x5BC; // int32
    public const nint m_hFrostbittenEntities = 0x5C0; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_AncientApparition_IceVortex {
    public const nint vision_aoe = 0x568; // int32
    public const nint vortex_duration = 0x56C; // float32
}

public static class CDOTA_Ability_Animation_Attack {
    public const nint m_flPlaybackRate = 0x568; // float32
    public const nint animation_time = 0x56C; // float32
}

public static class CDOTA_Ability_Animation_TailSpin {
    public const nint m_flPlaybackRate = 0x568; // float32
    public const nint animation_time = 0x56C; // float32
}

public static class CDOTA_Ability_ArcWarden_SparkWraith {
    public const nint duration = 0x568; // float32
    public const nint activation_delay = 0x56C; // float32
    public const nint wraith_vision_duration = 0x570; // float32
    public const nint wraith_vision_radius = 0x574; // int32
    public const nint spark_damage = 0x578; // float32
    public const nint creep_damage_bonus_pct = 0x57C; // int32
}

public static class CDOTA_Ability_ArcWarden_TempestDouble {
    public const nint m_hDoubles = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Axe_BattleHunger {
    public const nint damage_per_second = 0x568; // int32
}

public static class CDOTA_Ability_Axe_CullingBlade {
    public const nint m_bInterrupted = 0x578; // bool
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_hTarget = 0x588; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Bane_BrainSap {
    public const nint brain_sap_damage = 0x568; // int32
}

public static class CDOTA_Ability_Bane_FiendsGrip {
    public const nint m_hGripTarget = 0x568; // CHandle< CBaseEntity >
    public const nint fiend_grip_damage = 0x56C; // int32
}

public static class CDOTA_Ability_Bane_Nightmare {
    public const nint m_nNightmareSwapCount = 0x568; // int32
}

public static class CDOTA_Ability_Beastmaster_CallOfTheWild_Hawk {
    public const nint m_HawkList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flRotation = 0x580; // float32
}

public static class CDOTA_Ability_Beastmaster_PrimalRoar {
    public const nint duration = 0x568; // float32
    public const nint slow_duration = 0x56C; // float32
    public const nint side_damage = 0x570; // int32
    public const nint damage_radius = 0x574; // int32
    public const nint path_width = 0x578; // int32
    public const nint push_duration = 0x57C; // float32
    public const nint push_distance = 0x580; // int32
    public const nint damage = 0x584; // int32
    public const nint movement_speed_duration = 0x588; // float32
}

public static class CDOTA_Ability_Beastmaster_WildAxes {
    public const nint axe_damage = 0x568; // int32
}

public static class CDOTA_Ability_BountyHunter_ShurikenToss {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
    public const nint m_hSourceCaster = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_BountyHunter_Track {
    public const nint m_hTrap = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Brewmaster_DrunkenBrawler {
    public const nint m_iBrawlActive = 0x568; // int32
    public const nint m_bUpdateIcons = 0x56C; // bool
    public const nint m_nDrunkenBrawlerFX = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_Brewmaster_HurlBoulder {
    public const nint m_iBounces = 0x568; // int32
    public const nint m_hHitEntities = 0x570; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Brewmaster_PrimalSplit {
    public const nint m_hPrimary = 0x568; // CHandle< CBaseEntity >
    public const nint m_hSecondary = 0x56C; // CHandle< CBaseEntity >
    public const nint m_hTertiary = 0x570; // CHandle< CBaseEntity >
    public const nint m_hFourth = 0x574; // CHandle< CBaseEntity >
    public const nint m_fHurlBoulder_CooldownTime = 0x578; // GameTime_t
    public const nint m_fHDispelMagic_CooldownTime = 0x57C; // GameTime_t
    public const nint m_fCyclone_CooldownTime = 0x580; // GameTime_t
    public const nint m_fWindWalk_CooldownTime = 0x584; // GameTime_t
    public const nint m_fAstralPulse_CooldownTime = 0x588; // GameTime_t
}

public static class CDOTA_Ability_Brewmaster_Void_Astral_Pull {
    public const nint pull_speed = 0x568; // int32
    public const nint pull_distance = 0x56C; // int32
    public const nint m_vTargetPos = 0x570; // Vector
    public const nint m_vEndpoint = 0x57C; // Vector
}

public static class CDOTA_Ability_Broodmother_SpinWeb {
    public const nint m_hWebs = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Broodmother_StickySnare {
    public const nint m_vEndpoint = 0x568; // Vector
    public const nint duration = 0x574; // float32
    public const nint width = 0x578; // int32
    public const nint m_bStolenSnareCheck = 0x57C; // bool
    public const nint m_vecSnares = 0x598; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Capture {
    public const nint m_hTarget = 0x568; // CHandle< CDOTA_BaseNPC >
    public const nint m_pMyBuff = 0x570; // CDOTA_Buff*
}

public static class CDOTA_Ability_Centaur_DoubleEdge {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Centaur_Stampede {
    public const nint duration = 0x568; // float32
    public const nint base_damage = 0x56C; // int32
    public const nint strength_damage = 0x570; // float32
    public const nint slow_duration = 0x574; // float32
    public const nint scepter_bonus_duration = 0x578; // float32
    public const nint m_hHitEntities = 0x580; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nHeroesHit = 0x598; // int32
    public const nint m_bHitInvisibleHero = 0x59C; // bool
}

public static class CDOTA_Ability_Centaur_Work_Horse {
    public const nint m_hCart = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_ChaosKnight_Chaos_Bolt {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_ChaosKnight_Reality_Rift {
    public const nint m_flPercentage = 0x568; // float32
    public const nint m_FXIndex = 0x570; // CUtlVector< ParticleIndex_t >
    public const nint m_hRiftIllusion = 0x588; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Chen_HolyPersuasion {
    public const nint m_hDominatedUnits = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Clinkz_BurningBarrage {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_iArrowProjectile = 0x574; // int32
    public const nint m_nFXIndex = 0x578; // int32
    public const nint arrow_speed = 0x57C; // float32
}

public static class CDOTA_Ability_Clinkz_Burning_Army {
    public const nint range = 0x568; // int32
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vSlashDir = 0x578; // Vector
    public const nint m_nDashProjectileID = 0x584; // int32
    public const nint m_vDashProjectileLocation = 0x588; // Vector
}

public static class CDOTA_Ability_Clinkz_DeathPact {
    public const nint m_nDevourFirstSlot = 0x568; // int32
    public const nint m_hSkeletonSummons = 0x570; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Clinkz_WindWalk {
    public const nint m_hSkeletonSummons = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Creature_Fire_Breath {
    public const nint speed = 0x568; // int32
    public const nint projectile_count = 0x56C; // int32
    public const nint rotation_angle = 0x570; // float32
    public const nint damage = 0x574; // float32
    public const nint radius = 0x578; // float32
    public const nint ctTimer = 0x580; // CountdownTimer
    public const nint m_vecStartRot = 0x598; // Vector
    public const nint m_vecEndRot = 0x5A4; // Vector
}

public static class CDOTA_Ability_Creature_Flamestrike {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Creature_Ice_Breath {
    public const nint speed = 0x568; // int32
    public const nint projectile_count = 0x56C; // int32
    public const nint rotation_angle = 0x570; // float32
    public const nint damage = 0x574; // float32
    public const nint radius = 0x578; // float32
    public const nint slow_duration = 0x57C; // float32
    public const nint ctTimer = 0x580; // CountdownTimer
    public const nint m_vecStartRot = 0x598; // Vector
    public const nint m_vecEndRot = 0x5A4; // Vector
}

public static class CDOTA_Ability_CrystalMaiden_CrystalNova {
    public const nint nova_damage = 0x568; // int32
}

public static class CDOTA_Ability_CrystalMaiden_IceRink {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_DarkSeer_Surge {
    public const nint m_bIsAltCastState = 0x568; // bool
}

public static class CDOTA_Ability_DarkSeer_Vacuum {
    public const nint m_vPullLocation = 0x568; // Vector
}

public static class CDOTA_Ability_DarkSeer_WallOfReplica {
    public const nint width = 0x568; // int32
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vSlashDir = 0x578; // Vector
    public const nint m_nDashProjectileID = 0x584; // int32
    public const nint m_vDashProjectileLocation = 0x588; // Vector
}

public static class CDOTA_Ability_DarkWillow_CursedCrown {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_DarkWillow_Terrorize {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_DataDriven {
    public const nint m_bProcsMagicStick = 0x580; // bool
    public const nint m_bIsSharedWithTeammates = 0x581; // bool
    public const nint m_bCastFilterRejectCaster = 0x582; // bool
    public const nint m_fAOERadius = 0x584; // float32
    public const nint m_CastAnimation = 0x588; // int32
    public const nint m_ModifierKVDescriptions = 0x590; // CUtlVector< KeyValues* >
    public const nint m_pOnChannelFinishKV = 0x5A8; // KeyValues*
    public const nint m_pOnChannelSucceededKV = 0x5B0; // KeyValues*
    public const nint m_pOnChannelInterruptedKV = 0x5B8; // KeyValues*
    public const nint m_pOnOwnerSpawnedKV = 0x5C0; // KeyValues*
    public const nint m_pOnOwnerDiedKV = 0x5C8; // KeyValues*
    public const nint m_pOnUpgradeKV = 0x5D0; // KeyValues*
    public const nint m_pOnProjectileHitUnitKV = 0x5D8; // KeyValues*
    public const nint m_pOnProjectileFinishKV = 0x5E0; // KeyValues*
    public const nint m_pOnSpellStartKV = 0x5E8; // KeyValues*
    public const nint m_pOnAbilityPhaseStartKV = 0x5F0; // KeyValues*
    public const nint m_pOnAbilityPhaseInterruptedKV = 0x5F8; // KeyValues*
    public const nint m_pOnToggleOnKV = 0x600; // KeyValues*
    public const nint m_pOnToggleOffKV = 0x608; // KeyValues*
    public const nint m_pOnCreatedKV = 0x610; // KeyValues*
}

public static class CDOTA_Ability_Dawnbreaker_Celestial_Hammer {
    public const nint m_nProjectileIndex = 0x568; // int32
    public const nint m_nReturnProjectileID = 0x56C; // int32
    public const nint m_vEndLocation = 0x570; // Vector
    public const nint m_fZCoord = 0x57C; // float32
    public const nint m_vLastTrailThinkerLocation = 0x580; // Vector
    public const nint m_bFlareDone = 0x58C; // bool
    public const nint m_bStartedCatchAnimation = 0x58D; // bool
    public const nint m_bIsReturning = 0x58E; // bool
    public const nint m_hReturnHits = 0x590; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hAoEHits = 0x5A8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXIndex = 0x5C0; // ParticleIndex_t
    public const nint m_nFXIndexC = 0x5C4; // ParticleIndex_t
    public const nint m_nFXHammerReturnIndex = 0x5C8; // ParticleIndex_t
    public const nint m_nFXHammerProjectileIndex = 0x5CC; // ParticleIndex_t
    public const nint m_nFXHeroSolarGuardianTrailIndex = 0x5D0; // ParticleIndex_t
    public const nint m_hThinker = 0x5D4; // CHandle< CBaseEntity >
    public const nint projectile_speed = 0x5D8; // int32
    public const nint projectile_radius = 0x5DC; // int32
    public const nint hammer_damage = 0x5E0; // int32
    public const nint hammer_aoe_radius = 0x5E4; // int32
    public const nint flare_radius = 0x5E8; // int32
    public const nint bHasStartedBurning = 0x5EC; // bool
    public const nint flare_debuff_duration = 0x5F0; // float32
    public const nint return_anim_distance_threshold = 0x5F4; // int32
    public const nint range = 0x5F8; // int32
}

public static class CDOTA_Ability_Dawnbreaker_Solar_Guardian {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
    public const nint m_bJumping = 0x56C; // bool
    public const nint m_hTeleportTarget = 0x570; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Dazzle_ShadowWave {
    public const nint m_hHitEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint bounce_radius = 0x580; // int32
    public const nint damage_radius = 0x584; // int32
    public const nint damage = 0x588; // int32
    public const nint max_targets = 0x58C; // int32
    public const nint scepter_heal_pct = 0x590; // float32
}

public static class CDOTA_Ability_DeathProphet_CarrionSwarm {
    public const nint start_radius = 0x568; // int32
    public const nint end_radius = 0x56C; // int32
    public const nint m_fStartTime = 0x570; // GameTime_t
    public const nint m_fTotalTime = 0x574; // float32
    public const nint m_nProjectileHandle = 0x578; // int32
    public const nint m_nFXIndex = 0x57C; // ParticleIndex_t
}

public static class CDOTA_Ability_DeathProphet_Exorcism {
    public const nint m_SpiritInfos = 0x568; // CUtlVector< sSpiritInfo* >
}

public static class CDOTA_Ability_DeathProphet_Silence {
    public const nint m_vPos = 0x568; // Vector
}

public static class CDOTA_Ability_DeathProphet_SpiritSiphon {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_iArrowProjectile = 0x574; // int32
    public const nint m_nFXIndex = 0x578; // int32
}

public static class CDOTA_Ability_Diretide_Portal_Channel {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_hInitialPortal = 0x56C; // CHandle< CBaseEntity >
    public const nint m_vDestination = 0x570; // Vector
    public const nint m_hTarget = 0x57C; // CHandle< CDOTA_BaseNPC >
    public const nint m_pMyBuff = 0x580; // CDOTA_Buff*
}

public static class CDOTA_Ability_Disruptor_Glimpse {
    public const nint m_nNPCSpawnedID = 0x578; // int32
}

public static class CDOTA_Ability_DoomBringer_Devour {
    public const nint m_nDevourFirstSlot = 0x568; // int32
    public const nint m_bIsAltCastState = 0x56C; // bool
}

public static class CDOTA_Ability_DragonKnight_BreatheFire {
    public const nint start_radius = 0x568; // int32
    public const nint end_radius = 0x56C; // int32
    public const nint damage = 0x570; // float32
    public const nint m_vStartPos = 0x574; // Vector
    public const nint m_fStartTime = 0x580; // GameTime_t
    public const nint m_fTotalTime = 0x584; // float32
}

public static class CDOTA_Ability_DrowRanger_FrostArrows {
    public const nint shard_burst_damage_per_stack = 0x568; // int32
    public const nint shard_burst_slow_duration = 0x56C; // float32
}

public static class CDOTA_Ability_DrowRanger_Multishot {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_iArrowProjectile = 0x574; // int32
    public const nint m_nFXIndex = 0x578; // int32
    public const nint arrow_speed = 0x57C; // float32
    public const nint arrow_spread = 0x580; // int32
    public const nint m_vHitTargets0 = 0x588; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets1 = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets2 = 0x5B8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets3 = 0x5D0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets4 = 0x5E8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets5 = 0x600; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vHitTargets6 = 0x618; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_DrowRanger_WaveOfSilence {
    public const nint m_vStartPosition = 0x568; // Vector
    public const nint m_vEndPosition = 0x574; // Vector
    public const nint wave_width = 0x580; // int32
    public const nint wave_speed = 0x584; // float32
    public const nint silence_duration = 0x588; // float32
    public const nint knockback_distance_max = 0x58C; // float32
    public const nint m_nHeroesHit = 0x590; // int32
}

public static class CDOTA_Ability_Drow_Ranger_Glacier {
    public const nint shard_width = 0x568; // int32
    public const nint shard_count = 0x56C; // int32
    public const nint shard_duration = 0x570; // float32
    public const nint shard_angle_step = 0x574; // float32
    public const nint shard_distance = 0x578; // int32
    public const nint m_vSpawnOrigin = 0x57C; // Vector
    public const nint m_vDirection = 0x588; // Vector
    public const nint m_vecShards = 0x598; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_pIceShardsStop = 0x5B8; // CDOTABaseAbility*
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
}

public static class CDOTA_Ability_EarthSpirit_BoulderSmash {
    public const nint speed = 0x568; // int32
    public const nint rock_damage = 0x56C; // int32
    public const nint creep_multiplier = 0x570; // float32
    public const nint radius = 0x574; // int32
    public const nint rock_search_aoe = 0x578; // int32
    public const nint unit_distance = 0x57C; // float32
    public const nint rock_distance = 0x580; // float32
    public const nint m_nProjectileID = 0x584; // int32
    public const nint m_hCursorTarget = 0x588; // CHandle< CBaseEntity >
    public const nint m_bUsedStone = 0x58C; // bool
    public const nint m_hTarget = 0x590; // CHandle< CBaseEntity >
    public const nint m_bTargetStone = 0x594; // bool
}

public static class CDOTA_Ability_EarthSpirit_GeomagneticGrip {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_EarthSpirit_Magnetize {
    public const nint cast_radius = 0x568; // int32
    public const nint rock_explosion_radius = 0x56C; // int32
    public const nint damage_duration = 0x570; // float32
}

public static class CDOTA_Ability_EarthSpirit_Petrify {
    public const nint ally_cast_range = 0x568; // int32
}

public static class CDOTA_Ability_EarthSpirit_RollingBoulder {
    public const nint radius = 0x578; // int32
    public const nint speed = 0x57C; // int32
    public const nint rock_speed = 0x580; // int32
    public const nint damage = 0x584; // int32
    public const nint damage_str = 0x588; // int32
    public const nint distance = 0x58C; // float32
    public const nint rock_distance = 0x590; // float32
    public const nint rock_distance_multiplier = 0x594; // float32
    public const nint slow_duration = 0x598; // float32
    public const nint m_nFXIndex = 0x59C; // ParticleIndex_t
    public const nint m_boulderSetposBool = 0x5A0; // bool
    public const nint m_nProjectileID = 0x5A4; // int32
    public const nint m_vStartingLocation = 0x5A8; // Vector
    public const nint m_vProjectileLocation = 0x5B4; // Vector
    public const nint m_vDir = 0x5C0; // Vector
    public const nint m_vVel = 0x5CC; // Vector
    public const nint m_bUsedStone = 0x5D8; // bool
    public const nint m_vRollDirection = 0x5DC; // Vector
}

public static class CDOTA_Ability_Earthshaker_EchoSlam {
    public const nint echo_slam_damage_range = 0x568; // int32
    public const nint echo_slam_echo_search_range = 0x56C; // int32
    public const nint echo_slam_echo_range = 0x570; // int32
    public const nint echo_slam_echo_damage = 0x574; // int32
    public const nint echo_slam_initial_damage = 0x578; // int32
}

public static class CDOTA_Ability_Elder_Titan_AncestralSpirit {
    public const nint speed = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint buff_duration = 0x570; // float32
    public const nint spirit_duration = 0x574; // float32
    public const nint m_nCreepsHit = 0x578; // int32
    public const nint m_nHeroesHit = 0x57C; // int32
    public const nint m_bIsReturning = 0x580; // bool
    public const nint m_hAncestralSpirit = 0x584; // CHandle< CBaseEntity >
    public const nint m_nReturnFXIndex = 0x588; // ParticleIndex_t
    public const nint m_strMoveSpiritSwapAbility = 0x590; // CUtlString
}

public static class CDOTA_Ability_Elder_Titan_EarthSplitter {
    public const nint crack_width = 0x568; // int32
    public const nint crack_distance = 0x56C; // int32
    public const nint speed = 0x570; // int32
    public const nint vision_width = 0x574; // int32
    public const nint crack_time = 0x578; // float32
}

public static class CDOTA_Ability_Elder_Titan_EchoStomp {
    public const nint m_nFXIndexTitan = 0x568; // ParticleIndex_t
    public const nint m_nFXIndexSpirit = 0x56C; // ParticleIndex_t
    public const nint m_nFXIndexTitanB = 0x570; // ParticleIndex_t
    public const nint m_nFXIndexSpiritB = 0x574; // ParticleIndex_t
    public const nint radius = 0x578; // int32
    public const nint stomp_damage = 0x57C; // int32
    public const nint sleep_duration = 0x580; // float32
    public const nint cast_time = 0x584; // float32
    public const nint m_vecStompedHeroes = 0x588; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecStompedHeroes_BuffCounted = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bStompedInvisibleHero = 0x5B8; // bool
}

public static class CDOTA_Ability_EmberSpirit_Activate_FireRemnant {
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_vStartLocation = 0x57C; // Vector
    public const nint m_vProjectileLocation = 0x588; // Vector
    public const nint m_ProjectileAngles = 0x594; // QAngle
    public const nint m_hRemnantToKill = 0x5A0; // CHandle< CBaseEntity >
    public const nint m_bProjectileStarted = 0x5A4; // bool
    public const nint hAlreadyHitList = 0x5A8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_EmberSpirit_FireRemnant {
    public const nint m_vRemnantData = 0x568; // CUtlVector< RemnantData_t >
}

public static class CDOTA_Ability_EmberSpirit_SleightOfFist {
    public const nint m_vCastLoc = 0x568; // Vector
    public const nint m_nHeroesKilled = 0x574; // int32
    public const nint m_hAttackEntities = 0x578; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXMarkerIndex = 0x590; // ParticleIndex_t
}

public static class CDOTA_Ability_Enchantress_Enchant {
    public const nint m_hUnits = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Enchantress_Little_Friends {
    public const nint duration = 0x568; // float32
    public const nint radius = 0x56C; // int32
}

public static class CDOTA_Ability_Enigma_BlackHole {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
    public const nint m_hThinker2 = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Enigma_Malefice {
    public const nint tick_rate = 0x568; // float32
    public const nint stun_instances = 0x56C; // int32
    public const nint m_flDuration = 0x570; // float32
}

public static class CDOTA_Ability_EnragedWildkin_Hurricane {
    public const nint distance = 0x568; // float32
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vDashPosition = 0x578; // Vector
    public const nint m_vFacePosition = 0x584; // Vector
    public const nint m_vTravelDir = 0x590; // Vector
    public const nint m_fTravelDistance = 0x59C; // float32
}

public static class CDOTA_Ability_EnragedWildkin_Tornado {
    public const nint m_hTornado = 0x568; // CHandle< CBaseEntity >
    public const nint m_hNeutralTarget = 0x56C; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_FacelessVoid_TimeWalk {
    public const nint m_hSourceAbility = 0x578; // CHandle< CDOTABaseAbility >
    public const nint speed = 0x57C; // int32
    public const nint range = 0x580; // int32
    public const nint radius = 0x584; // int32
    public const nint m_nProjectileID = 0x588; // int32
    public const nint m_vProjectileLocation = 0x58C; // Vector
    public const nint m_vStartLocation = 0x598; // Vector
}

public static class CDOTA_Ability_FacelessVoid_TimeWalk_Reverse {
    public const nint speed = 0x578; // int32
    public const nint m_nProjectileID = 0x57C; // int32
    public const nint m_vProjectileLocation = 0x580; // Vector
    public const nint m_vStartLocation = 0x58C; // Vector
}

public static class CDOTA_Ability_FelBeast_Haunt {
    public const nint radius = 0x568; // int32
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_Frostivus2018_Centaur_Stampede {
    public const nint duration = 0x568; // float32
    public const nint base_damage = 0x56C; // int32
    public const nint strength_damage = 0x570; // float32
    public const nint slow_duration = 0x574; // float32
    public const nint m_hHitEntities = 0x578; // CUtlVector< CHandle< CBaseEntity > >
    public const nint armor_amount = 0x590; // int32
    public const nint armor_duration = 0x594; // float32
    public const nint max_armor_stacks = 0x598; // int32
    public const nint m_nHeroesHit = 0x59C; // int32
    public const nint m_bHitInvisibleHero = 0x5A0; // bool
}

public static class CDOTA_Ability_Frostivus2018_Clinkz_Burning_Army {
    public const nint range = 0x568; // int32
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vSlashDir = 0x578; // Vector
    public const nint m_nDashProjectileID = 0x584; // int32
    public const nint m_vDashProjectileLocation = 0x588; // Vector
}

public static class CDOTA_Ability_Frostivus2018_FacelessVoid_TimeWalk {
    public const nint speed = 0x578; // int32
    public const nint range = 0x57C; // int32
    public const nint radius = 0x580; // int32
    public const nint damage = 0x584; // int32
    public const nint m_nProjectileID = 0x588; // int32
    public const nint m_vProjectileLocation = 0x58C; // Vector
}

public static class CDOTA_Ability_Frostivus2018_Huskar_Life_Break {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint m_hTarget = 0x584; // CHandle< CBaseEntity >
    public const nint m_bInterrupted = 0x588; // bool
    public const nint max_damage = 0x58C; // int32
}

public static class CDOTA_Ability_Frostivus2018_Luna_Eclipse {
    public const nint m_bIsScepterCast = 0x568; // bool
}

public static class CDOTA_Ability_Frostivus2018_Luna_LucentBeam {
    public const nint radius = 0x568; // int32
}

public static class CDOTA_Ability_Frostivus2018_Magnataur_Skewer {
    public const nint skewer_radius = 0x568; // int32
    public const nint skewer_speed = 0x56C; // int32
    public const nint range = 0x570; // int32
    public const nint tree_radius = 0x574; // int32
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_nVisibleTargetCount = 0x57C; // int32
    public const nint m_nTargetsHit = 0x580; // int32
}

public static class CDOTA_Ability_Frostivus2018_Puck_DreamCoil {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Frostivus2018_Rubick_GhostShip {
    public const nint buff_duration = 0x568; // float32
    public const nint stun_duration = 0x56C; // float32
    public const nint ghostship_width = 0x570; // int32
    public const nint ghostship_speed = 0x574; // int32
    public const nint ghostship_distance = 0x578; // int32
    public const nint m_vFinalDestination = 0x57C; // Vector
    public const nint m_vStartingPoint = 0x588; // Vector
}

public static class CDOTA_Ability_Frostivus2018_Spectre_ActiveDispersion {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_Frostivus2018_TrollWarlord_BattleTrance {
    public const nint trance_duration = 0x568; // float32
}

public static class CDOTA_Ability_Frostivus2018_Tusk_WalrusKick {
    public const nint m_nFXKickIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Frostivus2018_Windrunner_Shackleshot {
    public const nint shackle_count = 0x568; // int32
    public const nint m_vArrowStartPos = 0x56C; // Vector
    public const nint m_hTarget = 0x578; // CHandle< CBaseEntity >
    public const nint m_hEntitiesAffected = 0x580; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Furion_Sprout {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
    public const nint m_iShardCount = 0x56C; // int32
}

public static class CDOTA_Ability_Furion_Teleportation {
    public const nint m_nFXIndexStart = 0x568; // ParticleIndex_t
    public const nint m_nFXIndexEnd = 0x56C; // ParticleIndex_t
    public const nint m_nFXIndexEndTeam = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_GiantWolf_Intimidate {
    public const nint radius = 0x568; // int32
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_Greevil_Miniboss_Blue_IceVortex {
    public const nint vision_aoe = 0x568; // int32
}

public static class CDOTA_Ability_Greevil_Miniboss_Purple_VenomousGale {
    public const nint duration = 0x568; // float32
}

public static class CDOTA_Ability_Grimstroke_DarkArtistry {
    public const nint m_vCastDir = 0x568; // Vector
    public const nint m_fStartTime = 0x574; // GameTime_t
    public const nint m_fTotalTime = 0x578; // float32
    public const nint m_nProjectileID = 0x57C; // int32
    public const nint m_vProjectileDir = 0x580; // Vector
    public const nint m_nFXIndex = 0x58C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x590; // ParticleIndex_t
    public const nint m_nTargetsHit = 0x594; // int32
    public const nint m_nHeroesHit = 0x598; // int32
    public const nint m_nVisibleHeroesHit = 0x59C; // int32
    public const nint m_fDmgMultiplierTalent = 0x5A0; // float32
    public const nint slow_duration = 0x5AC; // float32
    public const nint start_radius = 0x5B0; // int32
    public const nint end_radius = 0x5B4; // int32
    public const nint damage = 0x5B8; // int32
    public const nint bonus_damage_per_target = 0x5BC; // int32
    public const nint vision_duration = 0x5C0; // float32
}

public static class CDOTA_Ability_Grimstroke_InkCreature {
    public const nint spawn_time = 0x568; // float32
}

public static class CDOTA_Ability_Grimstroke_SoulChain {
    public const nint chain_duration = 0x568; // float32
    public const nint chain_latch_radius = 0x56C; // int32
    public const nint creep_duration_pct = 0x570; // float32
}

public static class CDOTA_Ability_Grimstroke_SpiritWalk {
    public const nint buff_duration = 0x568; // float32
    public const nint m_hTarget = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Gyrocopter_Call_Down {
    public const nint m_vEndpoint = 0x568; // Vector
    public const nint range_scepter = 0x574; // int32
}

public static class CDOTA_Ability_Gyrocopter_Homing_Missile {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Hoodwink_AcornShot {
    public const nint m_nAcornTree = 0x588; // uint32
    public const nint projectile_speed = 0x58C; // float32
    public const nint bounce_delay = 0x590; // float32
    public const nint bounce_range = 0x594; // int32
    public const nint bounce_count = 0x598; // int32
    public const nint m_bIsAltCastState = 0x59C; // bool
}

public static class CDOTA_Ability_Hoodwink_Bushwhack {
    public const nint trap_radius = 0x568; // int32
    public const nint m_nProjectileHandle = 0x56C; // int32
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_Hoodwink_Decoy {
    public const nint hIllusion = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint decoy_stun_duration = 0x580; // float32
    public const nint decoy_detonate_radius = 0x584; // int32
    public const nint projectile_speed = 0x588; // int32
    public const nint m_nFXIndex = 0x58C; // ParticleIndex_t
}

public static class CDOTA_Ability_Hoodwink_HuntersBoomerang {
    public const nint radius = 0x568; // int32
    public const nint speed = 0x56C; // int32
    public const nint damage = 0x570; // int32
    public const nint mark_duration = 0x574; // float32
    public const nint m_hTarget = 0x578; // CHandle< CBaseEntity >
    public const nint m_vecHitEntities = 0x580; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Hoodwink_Sharpshooter {
    public const nint max_charge_time = 0x568; // float32
    public const nint m_vStartPos = 0x56C; // Vector
    public const nint m_nFXIndex = 0x578; // ParticleIndex_t
}

public static class CDOTA_Ability_Huskar_Life_Break {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint m_hTarget = 0x584; // CHandle< CBaseEntity >
    public const nint m_bInterrupted = 0x588; // bool
}

public static class CDOTA_Ability_IceShaman_IncendiaryBomb {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Invoker_ChaosMeteor {
    public const nint area_of_effect = 0x578; // int32
    public const nint damage_interval = 0x57C; // float32
    public const nint vision_distance = 0x580; // int32
    public const nint end_vision_duration = 0x584; // float32
    public const nint main_damage = 0x588; // float32
    public const nint burn_duration = 0x58C; // float32
    public const nint burn_dps = 0x590; // float32
}

public static class CDOTA_Ability_Invoker_DeafeningBlast {
    public const nint end_vision_duration = 0x578; // float32
    public const nint damage = 0x57C; // float32
    public const nint knockback_duration = 0x580; // float32
    public const nint disarm_duration = 0x584; // float32
    public const nint m_hHitEntities = 0x588; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bGrantedGem = 0x5A0; // bool
}

public static class CDOTA_Ability_Invoker_ForgeSpirit {
    public const nint m_Spirits = 0x578; // CHandle< CBaseEntity >[2]
}

public static class CDOTA_Ability_Invoker_IceWall {
    public const nint m_vStartPosition = 0x578; // Vector
    public const nint m_vEndPosition = 0x584; // Vector
}

public static class CDOTA_Ability_Invoker_Invoke {
    public const nint max_invoked_spells = 0x568; // int32
    public const nint m_instances = 0x570; // CDOTA_Modifier_Invoker_Instance*[3]
    public const nint m_nCurInstanceSlot = 0x588; // int32
    public const nint m_bInvokedAbilitiesInitialized = 0x58C; // bool
    public const nint m_invokedAbilities = 0x590; // CHandle< CBaseEntity >[10]
    public const nint m_vecCurrentColor = 0x5B8; // Vector
    public const nint m_nQuasInstances = 0x5C4; // int32
    public const nint m_nExortInstances = 0x5C8; // int32
    public const nint m_nWexInstances = 0x5CC; // int32
}

public static class CDOTA_Ability_Invoker_InvokedBase {
    public const nint m_nQuasLevel = 0x568; // int32
    public const nint m_nWexLevel = 0x56C; // int32
    public const nint m_nExortLevel = 0x570; // int32
}

public static class CDOTA_Ability_Invoker_Tornado {
    public const nint vision_distance = 0x578; // int32
    public const nint end_vision_duration = 0x57C; // float32
    public const nint lift_duration = 0x580; // float32
    public const nint base_damage = 0x584; // float32
    public const nint quas_damage = 0x588; // float32
    public const nint wex_damage = 0x58C; // float32
}

public static class CDOTA_Ability_Jakiro_DualBreath {
    public const nint m_hHitHeroes = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bGrantedGem = 0x580; // bool
}

public static class CDOTA_Ability_Juggernaut_BladeFury {
    public const nint blade_fury_damage_per_tick = 0x568; // int32
}

public static class CDOTA_Ability_Juggernaut_Swift_Slash {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_JungleSpirit_Volcano_Eruption {
    public const nint m_iProjectile = 0x570; // int32
    public const nint primary_explosion_radius = 0x574; // int32
    public const nint secondary_explosion_radius = 0x578; // int32
    public const nint split_radius = 0x57C; // int32
    public const nint szProjectileFXName = 0x580; // char*
    public const nint szGroundMarkerFXName = 0x588; // char*
}

public static class CDOTA_Ability_KeeperOfTheLight_Illuminate {
    public const nint m_fStartTime = 0x568; // GameTime_t
    public const nint m_iProjectile = 0x56C; // int32
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x574; // ParticleIndex_t
    public const nint m_vPos = 0x578; // Vector
    public const nint total_damage = 0x584; // int32
    public const nint m_bStarted = 0x588; // bool
}

public static class CDOTA_Ability_KeeperOfTheLight_SpiritFormIlluminate {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
    public const nint max_channel_time = 0x56C; // float32
    public const nint total_damage = 0x570; // int32
    public const nint m_fPower = 0x574; // float32
    public const nint m_fStartTime = 0x578; // GameTime_t
    public const nint m_nFXIndex = 0x57C; // ParticleIndex_t
}

public static class CDOTA_Ability_Kunkka_GhostShip {
    public const nint buff_duration = 0x568; // float32
    public const nint stun_duration = 0x56C; // float32
    public const nint ghostship_width = 0x570; // int32
    public const nint ghostship_width_scepter = 0x574; // int32
    public const nint m_vFinalDestination = 0x578; // Vector
    public const nint m_vStartingPoint = 0x584; // Vector
}

public static class CDOTA_Ability_Kunkka_Tidal_Wave {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vStart = 0x580; // Vector
}

public static class CDOTA_Ability_Kunkka_XMarksTheSpot {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Lamp_Use {
    public const nint m_flLastCaptureTime = 0x568; // GameTime_t
    public const nint m_nChannelFXIndex = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_Lich_ChainFrost {
    public const nint jump_range = 0x568; // int32
    public const nint jumps = 0x56C; // int32
    public const nint slow_duration = 0x570; // float32
    public const nint vision_radius = 0x574; // int32
    public const nint projectile_speed = 0x578; // int32
    public const nint initial_projectile_speed = 0x57C; // int32
}

public static class CDOTA_Ability_Lich_Ice_Spire {
    public const nint aura_radius = 0x568; // int32
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_Lich_Sinister_Gaze {
    public const nint m_flLongestGazeDuration = 0x568; // float32
    public const nint m_hAffectedEntities = 0x570; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Life_Stealer_Assimilate {
    public const nint m_hLastAssimilation = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Lina_DragonSlave {
    public const nint dragon_slave_distance = 0x570; // int32
    public const nint dragon_slave_burn_duration = 0x574; // float32
    public const nint m_flDamage = 0x578; // float32
}

public static class CDOTA_Ability_Lina_LagunaBlade {
    public const nint m_iDamage = 0x568; // int32
}

public static class CDOTA_Ability_Lion_FingerOfDeath {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Lion_Impale {
    public const nint width = 0x568; // int32
    public const nint duration = 0x56C; // float32
    public const nint speed = 0x570; // int32
    public const nint length_buffer = 0x574; // float32
    public const nint range = 0x578; // float32
    public const nint m_iDefaultCastRange = 0x57C; // int32
    public const nint pierces_immunity = 0x580; // int32
    public const nint m_hHitEntities = 0x588; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Lion_ManaDrain {
    public const nint m_Victims = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_LoneDruid_Rabid {
    public const nint rabid_duration = 0x568; // float32
}

public static class CDOTA_Ability_LoneDruid_SpiritBear {
    public const nint m_bLevelChanged = 0x568; // bool
    public const nint m_hBear = 0x56C; // CHandle< CBaseEntity >
    public const nint m_hPreBear = 0x570; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_LoneDruid_SpiritBear_Return {
    public const nint m_nFXOrigin = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_LoneDruid_TrueForm_BattleCry {
    public const nint cry_duration = 0x568; // float32
}

public static class CDOTA_Ability_Luna_Eclipse {
    public const nint m_bIsScepterCast = 0x568; // bool
}

public static class CDOTA_Ability_Luna_MoonGlaive {
    public const nint m_vecMarkedUnits = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_iAttackIndex = 0x580; // int32
    public const nint m_GlaiveInfo = 0x588; // CUtlVector< sGlaiveInfo >
}

public static class CDOTA_Ability_Lycan_SummonWolves {
    public const nint szUnitName = 0x568; // char[260]
    public const nint wolf_index = 0x66C; // int32
    public const nint wolf_duration = 0x670; // float32
    public const nint m_hExistingUnits = 0x678; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Lycan_Wolf_Bite {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Magnataur_ReversePolarity {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vPullLocation = 0x56C; // Vector
}

public static class CDOTA_Ability_Magnataur_Shockwave {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint hAlreadyHitList = 0x578; // CUtlVector< CHandle< CBaseEntity > >
    public const nint hAlreadyHitListReturning = 0x590; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Magnataur_Skewer {
    public const nint skewer_radius = 0x568; // int32
    public const nint skewer_speed = 0x56C; // int32
    public const nint range = 0x570; // int32
    public const nint tree_radius = 0x574; // int32
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_nVisibleTargetCount = 0x57C; // int32
    public const nint m_nTargetsHit = 0x580; // int32
}

public static class CDOTA_Ability_Marci_Companion_Run {
    public const nint m_nTrackingProjectileID = 0x568; // int32
    public const nint m_nFXIndex = 0x56C; // ParticleIndex_t
    public const nint m_nMaxJumpDistance = 0x570; // int32
    public const nint landing_radius = 0x574; // int32
    public const nint move_speed = 0x578; // int32
    public const nint ally_buff_duration = 0x57C; // float32
    public const nint min_jump_distance = 0x580; // int32
    public const nint max_jump_distance = 0x584; // int32
    public const nint impact_position_offset = 0x588; // int32
    public const nint vector_preview_radius = 0x58C; // int32
    public const nint m_vEndpoint = 0x590; // Vector
    public const nint m_nToBounceFXIndex = 0x59C; // ParticleIndex_t
    public const nint m_nToTargetFXIndex = 0x5A0; // ParticleIndex_t
    public const nint m_vDashPosition = 0x5A4; // Vector
    public const nint m_vFacePosition = 0x5B0; // Vector
    public const nint m_vTravelDir = 0x5BC; // Vector
    public const nint m_fTravelDistance = 0x5C8; // float32
}

public static class CDOTA_Ability_Marci_Guardian {
    public const nint buff_duration = 0x568; // float32
    public const nint nearest_ally_search_range = 0x56C; // int32
}

public static class CDOTA_Ability_Marci_Unleash {
    public const nint duration = 0x568; // float32
    public const nint pulse_radius = 0x56C; // int32
    public const nint pulse_debuff_duration = 0x570; // float32
    public const nint pulse_damage = 0x574; // int32
    public const nint pulse_silence_duration = 0x578; // float32
}

public static class CDOTA_Ability_Mars_Bulwark {
    public const nint m_flNextAttack = 0x568; // GameTime_t
    public const nint m_flLastActive = 0x56C; // GameTime_t
}

public static class CDOTA_Ability_Mars_Spear {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint damage = 0x588; // int32
    public const nint hImpaledTargetList = 0x590; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nTargetsImpaled = 0x5A8; // int32
    public const nint m_nMaxImpaleTargets = 0x5AC; // int32
    public const nint m_bHadBulwarkEnabled = 0x5B0; // bool
    public const nint m_vLastTrailThinkerLocation = 0x5B4; // Vector
    public const nint bHasStartedBurning = 0x5C0; // bool
}

public static class CDOTA_Ability_Medusa_MysticSnake {
    public const nint radius = 0x568; // int32
    public const nint snake_jumps = 0x56C; // int32
    public const nint snake_damage = 0x570; // int32
    public const nint snake_damage_pct = 0x574; // int32
    public const nint snake_mana_steal = 0x578; // int32
    public const nint snake_scale = 0x57C; // int32
    public const nint snake_speed_scale = 0x580; // int32
    public const nint initial_speed = 0x584; // int32
    public const nint return_speed = 0x588; // int32
    public const nint jump_delay = 0x58C; // float32
    public const nint slow_duration = 0x590; // float32
}

public static class CDOTA_Ability_Meepo_DividedWeStand {
    public const nint m_nWhichDividedWeStand = 0x568; // int32
    public const nint m_nNumDividedWeStand = 0x56C; // int32
    public const nint m_entPrimeDividedWeStand = 0x570; // CHandle< CDOTA_Ability_Meepo_DividedWeStand >
    public const nint m_entNextDividedWeStand = 0x574; // CHandle< CDOTA_Ability_Meepo_DividedWeStand >
    public const nint m_iPendingUpgrades = 0x578; // int32
}

public static class CDOTA_Ability_Meepo_MegaMeepo {
    public const nint hPreviousMeepo = 0x568; // CHandle< CBaseEntity >
    public const nint hMegameepoFrame = 0x56C; // CHandle< CBaseEntity >
    public const nint hListOfMeepos = 0x570; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bHasSwappedAbilities = 0x588; // bool
}

public static class CDOTA_Ability_Meepo_Megameepo_Fling {
    public const nint vision_radius = 0x568; // int32
}

public static class CDOTA_Ability_Meepo_Poof {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint radius = 0x574; // int32
}

public static class CDOTA_Ability_Mirana_Arrow {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
    public const nint scepter_radius = 0x56C; // int32
    public const nint m_vStartPos = 0x570; // Vector
    public const nint m_nFXIndex = 0x57C; // ParticleIndex_t
    public const nint hAlreadyHitList = 0x580; // CUtlVector< CHandle< CBaseEntity > >[2]
    public const nint hStarfallList = 0x5B0; // CUtlVector< CHandle< CBaseEntity > >[2]
    public const nint m_nActiveArrow = 0x5E0; // int32
}

public static class CDOTA_Ability_Mirana_Leap {
    public const nint m_bIsVectorTargeted = 0x568; // bool
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint m_vLandPosition = 0x578; // Vector
}

public static class CDOTA_Ability_Mirana_Starfall {
    public const nint damage = 0x568; // int32
}

public static class CDOTA_Ability_MonkeyKing_Boundless_Strike {
    public const nint strike_cast_range = 0x568; // int32
    public const nint strike_radius = 0x56C; // int32
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
    public const nint m_bIsAltCastState = 0x574; // bool
}

public static class CDOTA_Ability_MonkeyKing_FurArmy {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x56C; // ParticleIndex_t
    public const nint num_first_soldiers = 0x570; // int32
    public const nint num_second_soldiers = 0x574; // int32
    public const nint m_bCreateMonkeys = 0x578; // bool
    public const nint m_flNextCreationTime = 0x57C; // GameTime_t
    public const nint m_flScepterTime = 0x580; // GameTime_t
    public const nint m_vecSoldiers = 0x588; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_MonkeyKing_Spring {
    public const nint m_vPos = 0x568; // Vector
    public const nint m_fStartChannelTime = 0x574; // GameTime_t
    public const nint m_hThinker = 0x578; // CHandle< CBaseEntity >
    public const nint m_nFxIndex = 0x57C; // ParticleIndex_t
    public const nint m_nRefCount = 0x580; // int32
}

public static class CDOTA_Ability_MonkeyKing_TreeDance {
    public const nint perched_jump_distance = 0x568; // int32
    public const nint ground_jump_distance = 0x56C; // int32
}

public static class CDOTA_Ability_Morphling_MorphReplicate {
    public const nint m_flOldHealthPct = 0x568; // float32
    public const nint m_flOldManaPct = 0x56C; // float32
}

public static class CDOTA_Ability_Morphling_Replicate {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_hScepterIllusion = 0x56C; // CHandle< CBaseEntity >
    public const nint m_bIsAltCastState = 0x570; // bool
}

public static class CDOTA_Ability_Morphling_Waveform {
    public const nint m_nProjectileID = 0x578; // int32
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_hHitHero = 0x588; // CHandle< CBaseEntity >
    public const nint m_bGrantedGem = 0x58C; // bool
}

public static class CDOTA_Ability_Morty_Hop {
    public const nint max_distance = 0x568; // float32
    public const nint m_vTarget = 0x56C; // Vector
    public const nint m_iTrackerProjectile = 0x578; // int32
}

public static class CDOTA_Ability_Muerta_DeadShot {
    public const nint radius = 0x568; // int32
    public const nint ricochet_radius_start = 0x56C; // int32
    public const nint ricochet_radius_end = 0x570; // int32
    public const nint speed = 0x574; // int32
    public const nint m_vTargetPos = 0x578; // Vector
    public const nint m_vEndpoint = 0x584; // Vector
    public const nint m_hTreeTarget = 0x590; // CHandle< CBaseEntity >
    public const nint m_vRicochetDir = 0x594; // Vector
    public const nint m_vEnemyHeroVisibilityOnCast = 0x5A8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Muerta_PartingShot {
    public const nint m_hAbilitySoulEntity = 0x568; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_NagaSiren_MirrorImage {
    public const nint m_hIllusions = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Naga_Siren_Reel_In {
    public const nint affectedEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Necrolyte_Death_Pulse {
    public const nint m_bIsDeathSeekerCast = 0x570; // bool
}

public static class CDOTA_Ability_Nevermore_Necromastery {
    public const nint attack_range_bonus = 0x568; // int32
}

public static class CDOTA_Ability_Nevermore_Requiem {
    public const nint requiem_line_width_start = 0x568; // int32
    public const nint requiem_line_width_end = 0x56C; // int32
    public const nint m_nCachedSouls = 0x570; // int32
    public const nint m_nFXIndex = 0x574; // ParticleIndex_t
    public const nint m_nKilleater_nLines = 0x578; // int32
    public const nint m_vecHeroesReqd = 0x580; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Nevermore_Shadowraze {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_NianCharge {
    public const nint m_bChargeFinished = 0x578; // bool
    public const nint m_bPlayedChargeAnimation = 0x579; // bool
    public const nint m_bPinning = 0x57A; // bool
    public const nint m_flPinStartTime = 0x57C; // GameTime_t
    public const nint m_vProjectileLocation = 0x580; // Vector
    public const nint m_vTargetLocation = 0x58C; // Vector
    public const nint m_hTarget = 0x598; // CHandle< CBaseEntity >
    public const nint m_hTrackingProjectileHits = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hTrackingProjectileTrees = 0x5B8; // CUtlVector< CDOTA_Tree* >
    public const nint nFXIndex = 0x5D0; // int32
    public const nint m_iCurProjectileIndex = 0x5D4; // int32
}

public static class CDOTA_Ability_Nian_Apocalypse {
    public const nint area_of_effect = 0x568; // int32
    public const nint m_nfxIndex_roar = 0x56C; // ParticleIndex_t
    public const nint fire_interval = 0x570; // float32
    public const nint delay = 0x574; // float32
    public const nint target_range = 0x578; // float32
    public const nint m_ctTimer = 0x580; // CountdownTimer
    public const nint m_flTiming = 0x598; // float32
}

public static class CDOTA_Ability_Nian_Dive {
    public const nint m_flPlaybackRate = 0x568; // float32
}

public static class CDOTA_Ability_Nian_Hurricane {
    public const nint min_distance = 0x568; // int32
    public const nint max_distance = 0x56C; // int32
    public const nint torrent_count = 0x570; // int32
    public const nint fire_interval = 0x574; // float32
    public const nint pull_switch_interval = 0x578; // float32
    public const nint game_time_wind_activation = 0x57C; // float32
    public const nint m_ctPullTimer = 0x580; // CountdownTimer
    public const nint m_ctTimer = 0x598; // CountdownTimer
    public const nint m_flTiming = 0x5B0; // float32
    public const nint m_bForward = 0x5B4; // bool
    public const nint m_bUseWind = 0x5B5; // bool
    public const nint m_nFXIndex = 0x5B8; // ParticleIndex_t
    public const nint m_nfxIndex_roar = 0x5BC; // ParticleIndex_t
}

public static class CDOTA_Ability_Nian_Leap {
    public const nint m_flPlaybackRate = 0x568; // float32
}

public static class CDOTA_Ability_Nian_Roar {
    public const nint base_projectiles = 0x568; // int32
    public const nint max_projectiles = 0x56C; // int32
    public const nint projectile_step = 0x570; // int32
    public const nint base_speed = 0x574; // int32
    public const nint speed_step = 0x578; // int32
    public const nint initial_radius = 0x57C; // int32
    public const nint end_radius = 0x580; // int32
    public const nint damage = 0x584; // int32
    public const nint base_interval = 0x588; // float32
    public const nint interval_step = 0x58C; // float32
    public const nint m_nCastCount = 0x590; // int32
    public const nint m_nProjectiles = 0x594; // int32
    public const nint m_nWaveCount = 0x598; // int32
    public const nint m_ctTimer = 0x5A0; // CountdownTimer
    public const nint m_flTiming = 0x5B8; // float32
    public const nint m_bScriptRoar = 0x5BC; // bool
}

public static class CDOTA_Ability_Nian_Waterball {
    public const nint m_ctTimer = 0x568; // CountdownTimer
    public const nint m_hEntities = 0x580; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Nian_Whirlpool {
    public const nint pool_count = 0x568; // int32
    public const nint min_distance = 0x56C; // int32
    public const nint max_distance = 0x570; // int32
    public const nint pull_radius = 0x574; // int32
    public const nint fire_interval = 0x578; // float32
    public const nint m_ctTimer = 0x580; // CountdownTimer
    public const nint m_flTiming = 0x598; // float32
}

public static class CDOTA_Ability_Nyx_Assassin_Burrow {
    public const nint m_nSpellStartFXIndex = 0x568; // ParticleIndex_t
    public const nint m_nPhaseStartFXIndex = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_Nyx_Assassin_Impale {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint width = 0x580; // int32
    public const nint duration = 0x584; // float32
    public const nint length = 0x588; // int32
    public const nint speed = 0x58C; // int32
    public const nint vOriginalCast = 0x590; // Vector
}

public static class CDOTA_Ability_Nyx_Assassin_Jolt {
    public const nint aoe = 0x578; // int32
    public const nint damage = 0x57C; // int32
    public const nint m_nNPCSpawnedID = 0x580; // int32
}

public static class CDOTA_Ability_Nyx_Assassin_ManaBurn {
    public const nint aoe = 0x568; // int32
}

public static class CDOTA_Ability_Obsidian_Destroyer_AstralImprisonment {
    public const nint m_hImprisonedUnit = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_OgreBruiser_OgreSmash {
    public const nint radius = 0x568; // int32
    public const nint hero_stun_duration = 0x56C; // float32
    public const nint damage = 0x570; // int32
    public const nint damage_pct = 0x574; // float32
    public const nint flCooldown = 0x578; // GameTime_t
}

public static class CDOTA_Ability_Ogre_Magi_Fireblast {
    public const nint m_nMostRecentMulticastCount = 0x568; // int32
}

public static class CDOTA_Ability_Ogre_Magi_Ignite {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_nMostRecentMulticastCount = 0x56C; // int32
}

public static class CDOTA_Ability_Ogre_Magi_Unrefined_Fireblast {
    public const nint m_nMostRecentMulticastCount = 0x570; // int32
}

public static class CDOTA_Ability_Oracle_FatesEdict {
    public const nint m_bTargetIsAlly = 0x568; // bool
}

public static class CDOTA_Ability_Oracle_FortunesEnd {
    public const nint damage = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint bolt_speed = 0x570; // int32
    public const nint maximum_purge_duration = 0x574; // float32
    public const nint minimum_purge_duration = 0x578; // float32
    public const nint m_flStartTime = 0x57C; // GameTime_t
    public const nint m_flDuration = 0x580; // float32
    public const nint m_flDamage = 0x584; // float32
    public const nint m_bAbsorbed = 0x588; // bool
    public const nint m_hTarget = 0x58C; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x590; // ParticleIndex_t
}

public static class CDOTA_Ability_Oracle_PurifyingFlames {
    public const nint m_bTargetIsAlly = 0x568; // bool
    public const nint m_hRecentTarget = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Pangolier_Gyroshell {
    public const nint m_nFxIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Pangolier_Rollup {
    public const nint m_nFxIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Pangolier_Swashbuckle {
    public const nint dash_speed = 0x578; // int32
    public const nint start_radius = 0x57C; // int32
    public const nint end_radius = 0x580; // int32
    public const nint range = 0x584; // int32
    public const nint damage = 0x588; // int32
    public const nint m_vDashPosition = 0x58C; // Vector
    public const nint m_vFacePosition = 0x598; // Vector
    public const nint m_vEndpoint = 0x5A4; // Vector
    public const nint m_vSlashDir = 0x5B0; // Vector
    public const nint m_nDashProjectileID = 0x5BC; // int32
    public const nint m_vDashProjectileLocation = 0x5C0; // Vector
}

public static class CDOTA_Ability_PhantomLancer_Juxtapose {
    public const nint m_hInvisIllusion = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_PhantomLancer_SpiritLance {
    public const nint m_hLastHitEntity = 0x568; // CHandle< CBaseEntity >
    public const nint m_nBounceCount = 0x56C; // int32
}

public static class CDOTA_Ability_Phoenix_IcarusDive {
    public const nint hp_cost_perc = 0x568; // int32
}

public static class CDOTA_Ability_Phoenix_LaunchFireSpirit {
    public const nint spirit_speed = 0x568; // int32
    public const nint duration = 0x56C; // float32
    public const nint radius = 0x570; // int32
    public const nint m_nFXIndex = 0x574; // ParticleIndex_t
}

public static class CDOTA_Ability_PineCone_AcornShot {
    public const nint m_nAcornTree = 0x588; // uint32
    public const nint projectile_speed = 0x58C; // float32
    public const nint bounce_delay = 0x590; // float32
    public const nint bounce_range = 0x594; // int32
    public const nint bounce_count = 0x598; // int32
}

public static class CDOTA_Ability_PineCone_ShieldBash {
    public const nint m_nPreviewFX = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_PluckFamango {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_pMyBuff = 0x570; // CDOTA_Buff*
    public const nint famango_rate = 0x578; // float32
}

public static class CDOTA_Ability_Plus_GuildBanner {
    public const nint m_vecBanners = 0x568; // CUtlVectorFixedGrowable< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_PrimalBeast_Onslaught {
    public const nint max_charge_time = 0x568; // float32
    public const nint knockback_distance = 0x56C; // float32
    public const nint knockback_damage = 0x570; // int32
    public const nint collision_radius = 0x574; // int32
    public const nint max_distance = 0x578; // int32
    public const nint m_vStartPos = 0x57C; // Vector
    public const nint m_nFXIndex = 0x588; // ParticleIndex_t
    public const nint m_nProjectileID = 0x58C; // int32
}

public static class CDOTA_Ability_PrimalBeast_Pulverize {
    public const nint m_hTarget = 0x568; // CDOTA_BaseNPC*
}

public static class CDOTA_Ability_PrimalBeast_Rock_Throw {
    public const nint base_damage = 0x568; // int32
    public const nint impact_radius = 0x56C; // int32
    public const nint fragment_impact_radius = 0x570; // int32
    public const nint fragment_impact_distance = 0x574; // int32
    public const nint min_range = 0x578; // int32
    public const nint stun_duration = 0x57C; // float32
    public const nint m_nFXPreview = 0x580; // ParticleIndex_t
}

public static class CDOTA_Ability_PrimalBeast_Uproar {
    public const nint m_iUproarStatus = 0x568; // int32
    public const nint m_bUpdateIcons = 0x56C; // bool
}

public static class CDOTA_Ability_Primal_Companion {
    public const nint m_hCurrentBrewling = 0x568; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Ability_Puck_DreamCoil {
    public const nint m_hThinker = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Puck_IllusoryOrb {
    public const nint m_iProjectile = 0x568; // int32
    public const nint m_ViewerTimer = 0x570; // CountdownTimer
    public const nint orb_vision = 0x588; // int32
    public const nint vision_duration = 0x58C; // float32
    public const nint damage = 0x590; // int32
    public const nint m_pSoundPatch = 0x598; // CSoundPatch*
}

public static class CDOTA_Ability_Puck_WaningRift {
    public const nint max_distance = 0x568; // int32
}

public static class CDOTA_Ability_Pudge_Dismember {
    public const nint m_hVictim = 0x568; // CHandle< CBaseEntity >
    public const nint shard_cast_range = 0x56C; // int32
}

public static class CDOTA_Ability_Pudge_FleshHeap {
    public const nint m_iKills = 0x568; // int32
}

public static class CDOTA_Ability_Pudge_MeatHook {
    public const nint m_vProjectileLocation = 0x578; // Vector
    public const nint hook_speed = 0x584; // float32
    public const nint hook_width = 0x588; // int32
    public const nint hook_distance = 0x58C; // int32
    public const nint m_bRetracting = 0x590; // bool
    public const nint m_bDiedInHook = 0x591; // bool
    public const nint m_hVictim = 0x594; // CHandle< CBaseEntity >
    public const nint m_vTargetPosition = 0x598; // Vector
    public const nint m_vCasterPosition = 0x5A4; // Vector
    public const nint m_bChainDetached = 0x5B0; // bool
    public const nint m_iChainParticle = 0x5B4; // ParticleIndex_t
    public const nint m_iSecondaryChainParticle = 0x5B8; // ParticleIndex_t
    public const nint m_iHookParticle = 0x5BC; // int32
    public const nint m_nManaCost = 0x5C0; // int32
    public const nint m_hSourceCaster = 0x5C4; // CHandle< CBaseEntity >
    public const nint m_nNextConsecutiveHitCount = 0x5C8; // int32
    public const nint m_vEndpoint = 0x5CC; // Vector
    public const nint m_nConsecutiveHits = 0x5D8; // int32
    public const nint m_bIsVectorTargeted = 0x5DC; // bool
    public const nint m_vTurnLocation = 0x5E0; // Vector
    public const nint m_vDirectionAfterTurn = 0x5EC; // Vector
    public const nint m_bHasTurned = 0x5F8; // bool
    public const nint m_flDistanceAfterTurn = 0x5FC; // float32
    public const nint m_vFinalPosition = 0x600; // Vector
    public const nint reveal_duration = 0x60C; // float32
}

public static class CDOTA_Ability_Pudge_Rot {
    public const nint rot_damage = 0x568; // int32
    public const nint m_flLastRotTime = 0x56C; // GameTime_t
}

public static class CDOTA_Ability_Pugna_LifeDrain {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Pugna_NetherWard {
    public const nint vecAbilitiesUsed = 0x568; // CUtlVector< sAbilityHistory >
}

public static class CDOTA_Ability_QueenOfPain_ScreamOfPain {
    public const nint damage = 0x568; // int32
}

public static class CDOTA_Ability_QueenOfPain_ShadowStrike {
    public const nint projectile_speed = 0x568; // Vector
}

public static class CDOTA_Ability_QueenOfPain_SonicWave {
    public const nint m_fStartTime = 0x568; // GameTime_t
    public const nint m_fTotalTime = 0x56C; // float32
    public const nint m_nFXIndex = 0x570; // ParticleIndex_t
    public const nint starting_aoe = 0x574; // int32
    public const nint final_aoe = 0x578; // int32
}

public static class CDOTA_Ability_Rattletrap_Hookshot {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x56C; // Vector
    public const nint m_bRetract = 0x578; // bool
    public const nint m_hSourceCaster = 0x584; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Rattletrap_RocketFlare {
    public const nint m_vecEnemyHeroesInFog = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Razor_StaticLink {
    public const nint m_iLinkIndex = 0x568; // int32
    public const nint m_ViewerTimer = 0x570; // CountdownTimer
    public const nint vision_duration = 0x588; // float32
    public const nint m_bIsAltCastState = 0x58C; // bool
}

public static class CDOTA_Ability_Roshan_Teleport {
    public const nint m_nFXIndexStart = 0x568; // ParticleIndex_t
    public const nint m_nFXIndexEnd = 0x56C; // ParticleIndex_t
    public const nint m_nFXIndexEndTeam = 0x570; // ParticleIndex_t
}

public static class CDOTA_Ability_Rubick_SpellSteal {
    public const nint m_ActivityModifier = 0x568; // char[256]
    public const nint m_fStolenCastPoint = 0x668; // float32
    public const nint m_hStealTarget = 0x66C; // CHandle< CBaseEntity >
    public const nint m_hStealAbility = 0x670; // CHandle< CDOTABaseAbility >
    public const nint m_nFXIndex = 0x674; // ParticleIndex_t
    public const nint m_hProjectile = 0x678; // int32
}

public static class CDOTA_Ability_Rubick_Telekinesis {
    public const nint m_vStartLocation = 0x568; // Vector
    public const nint m_vLandLocation = 0x574; // Vector
    public const nint m_flStartTime = 0x580; // GameTime_t
    public const nint m_pTarget = 0x588; // CDOTA_BaseNPC*
}

public static class CDOTA_Ability_Rubick_TelekinesisLand {
    public const nint m_nLandPreviewFX = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_SandKing_BurrowStrike {
    public const nint burrow_width = 0x568; // int32
    public const nint burrow_speed = 0x56C; // int32
    public const nint burrow_speed_scepter = 0x570; // int32
    public const nint burrow_anim_time = 0x574; // float32
}

public static class CDOTA_Ability_SandKing_Epicenter {
    public const nint m_nFXEpicenterIndex = 0x568; // ParticleIndex_t
    public const nint m_nFXIndex = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Ability_SatyrSoulstealer_ManaBurn {
    public const nint hNeutralTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_flTimeBuffer = 0x56C; // GameTime_t
}

public static class CDOTA_Ability_SatyrTrickster_Purge {
    public const nint m_flTargetTime = 0x568; // GameTime_t
}

public static class CDOTA_Ability_Seasonal_Summon_Dragon_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Ability_Seasonal_Summon_Penguin {
    public const nint spawn_offset = 0x568; // int32
}

public static class CDOTA_Ability_Seasonal_TI10_GuildBanner {
    public const nint m_vecBanners = 0x568; // CUtlVectorFixedGrowable< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Seasonal_TI10_HotPotato {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint projectile_speed = 0x574; // int32
    public const nint time_to_explode = 0x578; // float32
    public const nint throw_time = 0x57C; // GameTime_t
}

public static class CDOTA_Ability_Seasonal_TI10_SoccerBall {
    public const nint m_vEndpoint = 0x568; // Vector
}

public static class CDOTA_Ability_Seasonal_TI11_Balloon {
    public const nint charge_use_interval = 0x568; // float32
    public const nint max_usable_charges = 0x56C; // float32
    public const nint m_flLastChargeUseTime = 0x570; // GameTime_t
    public const nint m_hBalloon = 0x574; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Seasonal_TI11_CongaLine {
    public const nint max_duration = 0x568; // float32
}

public static class CDOTA_Ability_Seasonal_TI11_Duel {
    public const nint model_scale = 0x568; // float32
}

public static class CDOTA_Ability_Seasonal_TI9_Banner {
    public const nint m_vecBanners = 0x568; // CUtlVectorFixedGrowable< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Seasonal_TI9_Shovel {
    public const nint m_vChannelPos = 0x568; // Vector
    public const nint m_bIsUnderwater = 0x574; // bool
    public const nint m_nPhaseStartFXIndex = 0x578; // ParticleIndex_t
}

public static class CDOTA_Ability_ShadowShaman_Serpentine {
    public const nint length = 0x568; // int32
    public const nint count = 0x56C; // int32
    public const nint m_vStartPosition = 0x570; // Vector
    public const nint m_vEndPosition = 0x57C; // Vector
}

public static class CDOTA_Ability_ShadowShaman_Shackles {
    public const nint m_hShackleTarget = 0x568; // CHandle< CBaseEntity >
    public const nint nShackleFXIndex = 0x56C; // ParticleIndex_t
    public const nint hWardList = 0x570; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Shadow_Demon_Demonic_Cleanse {
    public const nint m_bGrantedScepterCharges = 0x568; // bool
}

public static class CDOTA_Ability_Shadow_Demon_Demonic_Purge {
    public const nint m_bGrantedScepterCharges = 0x568; // bool
}

public static class CDOTA_Ability_Shadow_Demon_Disruption {
    public const nint m_hDisruptedUnit = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Shadow_Demon_Shadow_Poison {
    public const nint m_hPoisonedUnits = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bHitDisruptedUnit = 0x580; // bool
    public const nint radius = 0x584; // int32
    public const nint m_hHitUnits = 0x588; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Shredder_Chakram {
    public const nint radius = 0x568; // float32
    public const nint speed = 0x56C; // float32
    public const nint pass_slow_duration = 0x570; // float32
    public const nint pass_damage = 0x574; // int32
    public const nint m_vEndLocation = 0x578; // Vector
    public const nint m_fZCoord = 0x584; // float32
    public const nint m_bIsReturning = 0x588; // bool
    public const nint m_nFXIndex = 0x58C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x590; // ParticleIndex_t
    public const nint m_nFXIndexC = 0x594; // ParticleIndex_t
    public const nint m_nProjectileIndex = 0x598; // int32
    public const nint m_hThinker = 0x59C; // CHandle< CBaseEntity >
    public const nint m_hReturnHits = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Shredder_TimberChain {
    public const nint chain_radius = 0x568; // int32
    public const nint m_nFXIndex = 0x56C; // ParticleIndex_t
    public const nint m_vProjectileVelocity = 0x570; // Vector
    public const nint m_bRetract = 0x57C; // bool
}

public static class CDOTA_Ability_Shredder_WhirlingDeath {
    public const nint whirling_radius = 0x568; // int32
    public const nint whirling_damage = 0x56C; // int32
    public const nint whirling_tick = 0x570; // float32
    public const nint duration = 0x574; // float32
    public const nint tree_damage_scale = 0x578; // int32
}

public static class CDOTA_Ability_Silencer_GlaivesOfWisdom {
    public const nint m_iAttackIndex = 0x568; // int32
    public const nint m_GlaiveInfo = 0x570; // CUtlVector< sGlaiveInfoSilencer >
}

public static class CDOTA_Ability_SkeletonKing_Reincarnation {
    public const nint m_bShouldUseResources = 0x568; // bool
}

public static class CDOTA_Ability_Skywrath_Mage_Arcane_Bolt {
    public const nint bolt_vision = 0x568; // int32
    public const nint vision_duration = 0x56C; // float32
    public const nint m_flDamage = 0x570; // float32
    public const nint m_nFXIndex = 0x574; // int32
}

public static class CDOTA_Ability_Skywrath_Mage_Concussive_Shot {
    public const nint speed = 0x568; // int32
    public const nint slow_radius = 0x56C; // int32
    public const nint damage = 0x570; // int32
    public const nint shot_vision = 0x574; // int32
    public const nint slow_duration = 0x578; // float32
    public const nint vision_duration = 0x57C; // float32
}

public static class CDOTA_Ability_Slardar_Slithereen_Crush {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Slark_Depth_Shroud {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Snapfire_FiresnapCookie {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint projectile_speed = 0x574; // int32
    public const nint pre_hop_duration = 0x578; // float32
    public const nint cast_on_ally_gesture_time = 0x57C; // float32
}

public static class CDOTA_Ability_Snapfire_GobbleUp {
    public const nint m_hGobbledUnit = 0x568; // CHandle< CBaseEntity >
    public const nint max_time_in_belly = 0x56C; // float32
}

public static class CDOTA_Ability_Snapfire_MortimerKisses {
    public const nint m_nDamagePerProjectile = 0x568; // int32
    public const nint damage_per_impact = 0x56C; // int32
    public const nint impact_radius = 0x570; // int32
    public const nint projectile_vision = 0x574; // int32
}

public static class CDOTA_Ability_Snapfire_Scatterblast {
    public const nint damage = 0x568; // int32
    public const nint debuff_duration = 0x56C; // float32
    public const nint point_blank_range = 0x570; // int32
    public const nint point_blank_dmg_bonus_pct = 0x574; // float32
    public const nint blast_width_end = 0x578; // int32
}

public static class CDOTA_Ability_Snapfire_SpitCreep {
    public const nint m_nDamagePerProjectile = 0x568; // int32
    public const nint m_hGobbledUnit = 0x56C; // CHandle< CBaseEntity >
    public const nint m_nProjectileID = 0x570; // int32
}

public static class CDOTA_Ability_Sniper_Assassinate {
    public const nint m_hTarget = 0x570; // CHandle< CBaseEntity >
    public const nint m_iIndex = 0x574; // ParticleIndex_t
    public const nint cooldown_reduction_on_kill = 0x578; // float32
}

public static class CDOTA_Ability_Sniper_Concussive_Grenade {
    public const nint m_iProjectile = 0x568; // int32
}

public static class CDOTA_Ability_Spectre_SpectralDagger {
    public const nint dagger_path_duration = 0x568; // float32
    public const nint hero_path_duration = 0x56C; // float32
    public const nint m_fCreateInterval = 0x570; // float32
    public const nint m_fLastCreate = 0x574; // GameTime_t
    public const nint m_vecLastPosition = 0x578; // Vector
    public const nint m_bIsTrackingProjectile = 0x584; // bool
    public const nint m_hTrackingProjectileHits = 0x588; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hUnitsHit = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hTrackingTarget = 0x5B8; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_SpiritBreaker_ChargeOfDarkness {
    public const nint m_bFinished = 0x578; // bool
    public const nint m_bInterrupted = 0x579; // bool
    public const nint m_bPlayedChargeAnimation = 0x57A; // bool
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_vTargetLocation = 0x588; // Vector
    public const nint m_hTarget = 0x594; // CHandle< CBaseEntity >
    public const nint m_hTrackingProjectileHits = 0x598; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hTrackingProjectileTrees = 0x5B0; // CUtlVector< CDOTA_Tree* >
    public const nint nFXIndex = 0x5C8; // int32
    public const nint m_iCurProjectileIndex = 0x5CC; // int32
    public const nint m_vChargeStartPos = 0x5D0; // Vector
}

public static class CDOTA_Ability_Spring2021_DefusalBomb_Defuse {
    public const nint m_hTarget = 0x568; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Ability_StormSpirit_BallLightning {
    public const nint m_bHasAutoRemnantTalent = 0x578; // bool
    public const nint m_fAutoRemnantInterval = 0x57C; // float32
    public const nint ball_lightning_initial_mana_base = 0x580; // int32
    public const nint ball_lightning_initial_mana_percentage = 0x584; // float32
    public const nint ball_lightning_travel_cost_base = 0x588; // int32
    public const nint ball_lightning_travel_cost_percent = 0x58C; // float32
    public const nint m_iProjectileID = 0x590; // int32
    public const nint m_vStartLocation = 0x594; // Vector
    public const nint m_vProjectileLocation = 0x5A0; // Vector
    public const nint m_fDistanceAccumulator = 0x5AC; // float32
    public const nint m_fTalentDistanceAccumulator = 0x5B0; // float32
    public const nint scepter_remnant_interval = 0x5B4; // int32
}

public static class CDOTA_Ability_StormSpirit_Overload {
    public const nint m_iAttackIndex = 0x568; // int32
    public const nint m_GlaiveInfo = 0x570; // CUtlVector< sGlaiveInfoStorm >
}

public static class CDOTA_Ability_StormSpirit_StaticRemnant {
    public const nint m_vecCastPos = 0x568; // Vector
}

public static class CDOTA_Ability_Sven_StormBolt {
    public const nint vision_radius = 0x568; // int32
    public const nint m_bIsAltCastState = 0x56C; // bool
}

public static class CDOTA_Ability_TI10_DiscoBall_Channel {
    public const nint m_hTarget = 0x568; // CHandle< CDOTA_BaseNPC >
    public const nint m_flChannelTime = 0x56C; // float32
}

public static class CDOTA_Ability_Techies_Minefield_Sign {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_nFXHammerIndex = 0x56C; // ParticleIndex_t
    public const nint aura_radius = 0x570; // int32
    public const nint m_hSign = 0x574; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Techies_ReactiveTazer {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_bDetonateTriggered = 0x56C; // bool
}

public static class CDOTA_Ability_Techies_RemoteMines {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_hRMine = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Techies_StasisTrap {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_hTrap = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Techies_Suicide {
    public const nint m_unSuicideKills = 0x568; // uint32
}

public static class CDOTA_Ability_TemplarAssassin_Trap_Teleport {
    public const nint m_hTrap = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Terrorblade_Metamorphosis {
    public const nint m_bBlockMetamorph = 0x568; // bool
}

public static class CDOTA_Ability_Terrorblade_Reflection {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Terrorblade_Terror_Wave {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Tidehunter_ArmOfTheDeep {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint duration = 0x580; // float32
    public const nint speed = 0x584; // int32
    public const nint damage = 0x588; // float32
    public const nint range = 0x58C; // float32
}

public static class CDOTA_Ability_Tidehunter_DeadInTheWater {
    public const nint radius = 0x568; // int32
    public const nint duration = 0x56C; // float32
    public const nint chain_length = 0x570; // int32
}

public static class CDOTA_Ability_Tidehunter_Gush {
    public const nint gush_damage = 0x568; // int32
}

public static class CDOTA_Ability_Tidehunter_Ravage {
    public const nint m_hEntsHit = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bAwardedKillEater = 0x580; // bool
    public const nint duration = 0x584; // float32
}

public static class CDOTA_Ability_Tinker_HeatSeekingMissile {
    public const nint m_nTargetsKilled = 0x568; // int32
}

public static class CDOTA_Ability_Tinker_Keen_Teleport {
    public const nint m_hTeleportTarget = 0x568; // CHandle< CBaseEntity >
    public const nint m_nFXOrigin = 0x56C; // ParticleIndex_t
    public const nint m_nFXDestination = 0x570; // ParticleIndex_t
    public const nint m_vDestination = 0x574; // Vector
    public const nint m_iMinDistance = 0x580; // int32
    public const nint m_flBaseTeleportTime = 0x584; // float32
    public const nint m_flExtraTeleportTime = 0x588; // float32
}

public static class CDOTA_Ability_Tinker_Laser {
    public const nint m_vProjectileLocation = 0x568; // Vector
    public const nint bBlocked = 0x574; // bool
    public const nint m_hHitEntities = 0x578; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Tinker_MarchOfTheMachines {
    public const nint splash_radius = 0x568; // int32
    public const nint damage = 0x56C; // int32
}

public static class CDOTA_Ability_Tinker_Rearm {
    public const nint m_vProjectileLocation = 0x568; // Vector
}

public static class CDOTA_Ability_Tinker_WarpGrenade {
    public const nint debuff_duration = 0x568; // float32
    public const nint knockback_distance = 0x56C; // float32
    public const nint damage = 0x570; // float32
}

public static class CDOTA_Ability_Tiny_Avalanche {
    public const nint m_vTargetLoc = 0x568; // Vector
}

public static class CDOTA_Ability_Tiny_Tree_Grab {
    public const nint m_hStolenTree = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Treant_EyesInTheForest {
    public const nint vTrees = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Treant_LifeBomb {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_hRMine = 0x56C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_TrollWarlord_BattleTrance {
    public const nint trance_duration = 0x568; // float32
}

public static class CDOTA_Ability_TrollWarlord_BerserkersRage {
    public const nint m_iOriginalAttackCapabilities = 0x568; // int32
}

public static class CDOTA_Ability_TrollWarlord_WhirlingAxes_Ranged {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_iArrowProjectile = 0x574; // int32
    public const nint axe_width = 0x578; // int32
    public const nint axe_speed = 0x57C; // float32
    public const nint axe_range = 0x580; // float32
    public const nint axe_spread = 0x584; // int32
    public const nint axe_count = 0x588; // int32
    public const nint m_hHitUnits = 0x590; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_TrollWarlord_Whirling_Axes_Melee {
    public const nint m_hAxes = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nAxeIdx = 0x580; // int32
}

public static class CDOTA_Ability_Tusk_IceShards {
    public const nint m_iProjectile = 0x568; // int32
    public const nint shard_width = 0x56C; // int32
    public const nint shard_damage = 0x570; // int32
    public const nint shard_count = 0x574; // int32
    public const nint shard_speed = 0x578; // float32
    public const nint shard_duration = 0x57C; // float32
    public const nint shard_angle_step = 0x580; // float32
    public const nint shard_distance = 0x584; // int32
    public const nint m_vSpawnOrigin = 0x588; // Vector
    public const nint m_vDirection = 0x594; // Vector
    public const nint m_vecShards = 0x5A0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_pIceShardsStop = 0x5C0; // CDOTABaseAbility*
    public const nint m_nFXIndex = 0x5D0; // ParticleIndex_t
}

public static class CDOTA_Ability_Tusk_Snowball {
    public const nint snowball_windup_radius = 0x578; // int32
    public const nint snowball_radius = 0x57C; // int32
    public const nint snowball_grow_rate = 0x580; // int32
    public const nint snowball_damage = 0x584; // int32
    public const nint snowball_damage_bonus = 0x588; // int32
    public const nint stun_duration = 0x58C; // float32
    public const nint bonus_damage = 0x590; // int32
    public const nint bonus_stun = 0x594; // float32
    public const nint snowball_speed = 0x598; // int32
    public const nint snowball_speed_bonus = 0x59C; // int32
    public const nint snowball_duration = 0x5A0; // float32
    public const nint m_vProjectileLocation = 0x5A4; // Vector
    public const nint m_hSnowballedUnits = 0x5B0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFXIndex = 0x5C8; // ParticleIndex_t
    public const nint ctSnowball = 0x5D0; // CountdownTimer
    public const nint m_bSpeakAlly = 0x5E8; // bool
    public const nint m_bIsExpired = 0x5E9; // bool
    public const nint m_bInWindup = 0x5EA; // bool
    public const nint m_hPrimaryTarget = 0x5EC; // CHandle< CBaseEntity >
    public const nint m_nContainedValidUnits = 0x5F0; // int32
    public const nint m_bEndingSnowball = 0x5F4; // bool
}

public static class CDOTA_Ability_Tusk_SnowballMeteor {
    public const nint area_of_effect = 0x568; // int32
    public const nint damage_interval = 0x56C; // float32
    public const nint vision_distance = 0x570; // int32
    public const nint end_vision_duration = 0x574; // float32
    public const nint main_damage = 0x578; // float32
    public const nint burn_duration = 0x57C; // float32
    public const nint burn_dps = 0x580; // float32
}

public static class CDOTA_Ability_Tusk_WalrusKick {
    public const nint m_nTargetFXIndex = 0x568; // ParticleIndex_t
    public const nint m_vEndpoint = 0x56C; // Vector
    public const nint landing_radius = 0x578; // int32
    public const nint push_length = 0x57C; // int32
}

public static class CDOTA_Ability_Twin_Gate_Portal_Warp {
    public const nint m_hTarget = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Undying_Decay {
    public const nint decay_damage = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint decay_duration = 0x570; // float32
    public const nint str_steal = 0x574; // int32
    public const nint creep_damage_multiplier = 0x578; // float32
}

public static class CDOTA_Ability_Undying_FleshGolem {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Undying_SoulRip {
    public const nint damage_per_unit = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint max_units = 0x570; // int32
    public const nint tombstone_heal = 0x574; // int32
}

public static class CDOTA_Ability_Undying_Tombstone {
    public const nint m_vZombies = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint hTombstone = 0x580; // CHandle< CBaseEntity >
    public const nint radius = 0x584; // int32
    public const nint duration = 0x588; // float32
}

public static class CDOTA_Ability_Undying_TombstoneGrab {
    public const nint m_hTombstones = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Undying_TombstoneUnitGrab {
    public const nint m_hOwner = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Ursa_Earthshock {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_VengefulSpirit_Command_Aura {
    public const nint m_hScepterIllusion = 0x568; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_VengefulSpirit_Nether_Swap {
    public const nint m_nFXIndex = 0x568; // int32
    public const nint damage = 0x56C; // int32
    public const nint damage_reduction = 0x570; // float32
    public const nint damage_reduction_duration = 0x574; // float32
}

public static class CDOTA_Ability_VengefulSpirit_WaveOfTerror {
    public const nint wave_width = 0x568; // int32
    public const nint wave_speed = 0x56C; // float32
    public const nint m_iProjectile = 0x570; // int32
    public const nint vision_aoe = 0x574; // float32
    public const nint vision_duration = 0x578; // float32
    public const nint steal_pct = 0x57C; // int32
    public const nint damage = 0x580; // int32
    public const nint m_nNumHeroesHit = 0x584; // int32
    public const nint m_ViewerTimer = 0x588; // CountdownTimer
}

public static class CDOTA_Ability_Venomancer_Latent_Poison {
    public const nint projectile_speed = 0x568; // Vector
}

public static class CDOTA_Ability_Venomancer_PoisonSting {
    public const nint radius = 0x568; // int32
}

public static class CDOTA_Ability_Venomancer_VenomousGale {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
    public const nint duration = 0x56C; // float32
}

public static class CDOTA_Ability_Viper_ViperStrike {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
}

public static class CDOTA_Ability_Visage_GravekeepersCloak {
    public const nint m_hSourceAbility = 0x568; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Ability_Visage_Silent_As_The_Grave {
    public const nint invis_duration = 0x568; // float32
}

public static class CDOTA_Ability_Visage_SoulAssumption {
    public const nint m_fDamage = 0x568; // float32
    public const nint m_nFXIndex = 0x56C; // ParticleIndex_t
    public const nint m_iForcedStacks = 0x570; // int32
}

public static class CDOTA_Ability_Visage_SummonFamiliars {
    public const nint szUnitName = 0x568; // char[260]
    public const nint m_hExistingUnits = 0x670; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_VoidSpirit_AetherRemnant {
    public const nint start_radius = 0x568; // int32
    public const nint end_radius = 0x56C; // int32
    public const nint remnant_watch_distance = 0x570; // int32
    public const nint projectile_speed = 0x574; // int32
    public const nint m_vDashPosition = 0x580; // Vector
    public const nint m_vFacePosition = 0x58C; // Vector
    public const nint m_vEndpoint = 0x598; // Vector
}

public static class CDOTA_Ability_VoidSpirit_AstralStep {
    public const nint m_vStartPos = 0x568; // Vector
    public const nint m_vDestination = 0x574; // Vector
    public const nint m_vDirection = 0x580; // Vector
    public const nint radius = 0x58C; // int32
    public const nint min_travel_distance = 0x590; // int32
    public const nint max_travel_distance = 0x594; // int32
    public const nint debuff_duration = 0x598; // float32
    public const nint pop_damage_delay = 0x59C; // float32
}

public static class CDOTA_Ability_VoidSpirit_Dissimilate {
    public const nint phase_duration = 0x568; // float32
}

public static class CDOTA_Ability_VoidSpirit_ResonantPulse {
    public const nint m_bGrantedScepterCharges = 0x568; // bool
    public const nint buff_duration = 0x56C; // float32
    public const nint base_absorb_amount = 0x570; // int32
    public const nint absorb_per_hero_hit = 0x574; // int32
}

public static class CDOTA_Ability_Warlock_Fatal_Bonds {
    public const nint m_FatalBondsEntities = 0x568; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Warlock_RainOfChaos {
    public const nint aoe = 0x568; // int32
    public const nint m_bHasScepter = 0x56C; // bool
}

public static class CDOTA_Ability_Warlock_Upheaval {
    public const nint m_vPosition = 0x568; // Vector
    public const nint aoe = 0x574; // float32
    public const nint slow_per_second = 0x578; // int32
    public const nint aspd_per_second = 0x57C; // int32
    public const nint max_slow = 0x580; // int32
    public const nint damage_per_second = 0x584; // int32
    public const nint max_damage = 0x588; // int32
    public const nint damage_tick_interval = 0x58C; // float32
    public const nint m_timer = 0x590; // CountdownTimer
    public const nint m_shardTimer = 0x5A8; // CountdownTimer
    public const nint duration = 0x5C0; // float32
    public const nint m_flElapsedTime = 0x5C4; // GameTime_t
    public const nint m_flCurrentSlow = 0x5C8; // float32
    public const nint m_nFXIndex = 0x5CC; // ParticleIndex_t
    public const nint m_bTargetCast = 0x5D8; // bool
    public const nint m_hTarget = 0x5DC; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_WarpineRaider_SeedShot {
    public const nint m_iBounces = 0x568; // int32
    public const nint bounces = 0x56C; // int32
}

public static class CDOTA_Ability_Weaver_Shukuchi {
    public const nint duration = 0x568; // float32
    public const nint radius = 0x56C; // int32
    public const nint damage = 0x570; // int32
    public const nint fade_time = 0x574; // float32
}

public static class CDOTA_Ability_Weaver_TimeLapse {
    public const nint m_nNPCSpawnedID = 0x578; // int32
}

public static class CDOTA_Ability_Windrunner_GaleForce {
    public const nint m_vEndpoint = 0x568; // Vector
    public const nint m_vFlowPosition = 0x574; // Vector
    public const nint duration = 0x580; // float32
    public const nint m_hThinker = 0x584; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Windrunner_Powershot {
    public const nint m_fStartTime = 0x570; // GameTime_t
    public const nint m_fPower = 0x574; // float32
    public const nint m_iProjectile = 0x578; // int32
    public const nint damage_reduction = 0x57C; // float32
    public const nint arrow_width = 0x580; // int32
    public const nint powershot_damage = 0x584; // int32
    public const nint tree_width = 0x588; // float32
    public const nint slow = 0x58C; // float32
    public const nint slow_duration = 0x590; // float32
    public const nint m_bAwardedKillEater = 0x594; // bool
    public const nint m_nHeroesHit = 0x598; // int32
    public const nint m_nFXIndex = 0x59C; // ParticleIndex_t
}

public static class CDOTA_Ability_Windrunner_Shackleshot {
    public const nint shackle_count = 0x568; // int32
    public const nint m_vArrowAvgPos = 0x56C; // Vector
    public const nint m_vArrowStartPos = 0x578; // Vector
    public const nint m_vArrowStartPos2 = 0x584; // Vector
    public const nint m_vArrowStartPos3 = 0x590; // Vector
    public const nint m_hTarget = 0x59C; // CHandle< CBaseEntity >
}

public static class CDOTA_Ability_Winter_Wyvern_Arctic_Burn {
    public const nint m_BurnedTargets = 0x568; // CUtlVector< CEntityIndex >
}

public static class CDOTA_Ability_Wisp_Relocate {
    public const nint m_nFXIndexEndTeam = 0x568; // ParticleIndex_t
    public const nint m_nFXIndexChannel = 0x56C; // ParticleIndex_t
    public const nint cast_delay = 0x570; // float32
    public const nint return_time = 0x574; // float32
}

public static class CDOTA_Ability_Wisp_Spirits {
    public const nint m_SpiritDefs = 0x568; // CUtlVector< sSpiritDef >
    public const nint m_nWispDirection = 0x580; // int32
    public const nint spirit_amount = 0x584; // int32
}

public static class CDOTA_Ability_Wisp_Tether {
    public const nint m_hTarget = 0x578; // CHandle< CBaseEntity >
    public const nint m_vProjectileLocation = 0x57C; // Vector
    public const nint m_bProjectileActive = 0x588; // bool
    public const nint latch_distance = 0x58C; // int32
    public const nint m_iProjectileIndex = 0x590; // int32
}

public static class CDOTA_Ability_WitchDoctor_DeathWard {
    public const nint m_hWard = 0x568; // CHandle< CBaseEntity >
    public const nint m_iDamage = 0x56C; // int32
    public const nint m_iBounceRadius = 0x570; // int32
    public const nint m_iProjectileSpeed = 0x574; // int32
    public const nint m_fWardExpireTime = 0x578; // GameTime_t
    public const nint m_nFXIndex = 0x57C; // ParticleIndex_t
    public const nint m_iAttackIndex = 0x580; // int32
    public const nint m_BounceInfo = 0x588; // CUtlVector< sBounceInfo >
}

public static class CDOTA_Ability_WitchDoctor_ParalyzingCask {
    public const nint m_iBounces = 0x568; // int32
    public const nint bounces = 0x56C; // int32
    public const nint bounce_bonus_damage = 0x570; // int32
    public const nint m_vecHitHeroes = 0x578; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Ability_Zuus_LightningBolt {
    public const nint m_bZeusHasArcana = 0x568; // bool
}

public static class CDOTA_Ability_Zuus_Thunder_Trail {
    public const nint hAlreadyHitList = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint damage = 0x588; // int32
    public const nint debuff_spell_amp_min = 0x58C; // int32
    public const nint debuff_spell_amp_max = 0x590; // int32
    public const nint m_vStartPos = 0x594; // Vector
    public const nint m_nMaxRange = 0x5A0; // int32
}

public static class CDOTA_Ability_Zuus_ThundergodsWrath {
    public const nint m_nFXIndex = 0x568; // ParticleIndex_t
    public const nint m_bZeusHasArcana = 0x56C; // bool
}

public static class CDOTA_ActionRunner {
    public const nint m_pEventContext = 0x8; // CModifierParams*
    public const nint m_pCaster = 0x10; // CDOTA_BaseNPC*
}

public static class CDOTA_AghsFort_Ability_ArcWardenBoss_SparkWraith {
    public const nint duration = 0x568; // float32
    public const nint activation_delay = 0x56C; // float32
    public const nint wraith_vision_duration = 0x570; // float32
    public const nint wraith_vision_radius = 0x574; // int32
    public const nint spark_damage = 0x578; // int32
}

public static class CDOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble {
    public const nint m_nNumDoubles = 0x568; // int32
}

public static class CDOTA_AghsFort_Ability_Undying_Decay {
    public const nint decay_damage = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint decay_duration = 0x570; // float32
    public const nint str_steal = 0x574; // float32
    public const nint str_steal_captain_mult = 0x578; // float32
    public const nint str_steal_boss_mult = 0x57C; // float32
}

public static class CDOTA_AghsFort_Ability_Undying_SoulRip {
    public const nint damage_per_unit = 0x568; // int32
    public const nint radius = 0x56C; // int32
    public const nint max_units = 0x570; // int32
    public const nint tombstone_heal = 0x574; // int32
    public const nint damage_bonus_percent = 0x578; // int32
}

public static class CDOTA_AghsFort_Ability_Undying_Tombstone {
    public const nint m_vZombies = 0x568; // CUtlVector< CHandle< CBaseEntity > >
    public const nint hTombstone = 0x580; // CHandle< CBaseEntity >
    public const nint duration = 0x584; // float32
}

public static class CDOTA_AghsFort_BossPreview {
    public const nint m_strBossUnit = 0x4A8; // CUtlSymbolLarge
    public const nint m_strModelName = 0x4B0; // CUtlSymbolLarge
    public const nint m_flBossModelScale = 0x4B8; // float32
    public const nint m_flExtraModelScale = 0x4BC; // float32
    public const nint m_nEncounterType = 0x4C0; // int32
}

public static class CDOTA_AghsFort_Modifier_Lich_Frost_Giant {
    public const nint movement_speed = 0x1318; // int32
    public const nint model_scale = 0x131C; // int32
    public const nint damage_radius = 0x1320; // int32
    public const nint pct_int_damage_per_second = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
}

public static class CDOTA_AghsFort_Unit_ArcWarden_Boss {
    public const nint m_nTalkFXIndex = 0x1DA8; // ParticleIndex_t
    public const nint m_nFXDeath = 0x1DAC; // ParticleIndex_t
    public const nint m_nTempestFX = 0x1DB0; // ParticleIndex_t
}

public static class CDOTA_AghsFort_Unit_Undying_Zombie {
    public const nint m_ctRespawn = 0x17A8; // CountdownTimer
    public const nint m_pTombstone = 0x17C0; // CDOTA_BaseNPC*
}

public static class CDOTA_Aghsfort_AbilityCrystalMaiden_FreezingField {
    public const nint m_nWarningFX = 0x568; // ParticleIndex_t
    public const nint m_nRadiusFX = 0x56C; // ParticleIndex_t
}

public static class CDOTA_Aghsfort_Ability_Creature_Magnus_Push_Skewer {
    public const nint skewer_radius = 0x568; // int32
    public const nint skewer_speed = 0x56C; // int32
    public const nint range = 0x570; // int32
    public const nint tree_radius = 0x574; // int32
    public const nint m_nProjectileID = 0x578; // int32
}

public static class CDOTA_Aghsfort_Ability_CrystalMaiden_CrystalNova {
    public const nint nova_damage = 0x568; // int32
}

public static class CDOTA_Aghsfort_Ability_Hoodwink_HuntersBoomerang {
    public const nint min_distance = 0x568; // int32
}

public static class CDOTA_Aghsfort_Modifier_Magnus_Push_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_ArcanaDataEntity {
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_DrowRanger = 0x4A8; // CDOTA_ArcanaDataEntity_DrowRanger*
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_FacelessVoid = 0x4B0; // CDOTA_ArcanaDataEntity_FacelessVoid*
    public const nint m_pArcanaData_CDOTA_ArcanaDataEntity_Razor = 0x4B8; // CDOTA_ArcanaDataEntity_Razor*
}

public static class CDOTA_ArcanaDataEntity_Base {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
}

public static class CDOTA_ArcanaDataEntity_DrowRanger {
    public const nint m_vecDrowRangerArcanaTargetPlayerID = 0x30; // int8[24]
    public const nint m_vecDrowRangerArcanaDeathTime = 0x48; // GameTime_t[24]
    public const nint m_vecDrowRangerArcanaKillTime = 0xA8; // GameTime_t[24]
}

public static class CDOTA_ArcanaDataEntity_FacelessVoid {
    public const nint m_nNumPoints = 0x3C; // int32
    public const nint m_flShowPopupTime = 0x40; // GameTime_t
}

public static class CDOTA_ArcanaDataEntity_Razor {
    public const nint m_nEmpoweredKills = 0x30; // int32
}

public static class CDOTA_AttackRecord {
    public const nint m_hSource = 0x8; // CHandle< CBaseEntity >
    public const nint m_hInflictor = 0xC; // CHandle< CDOTABaseAbility >
    public const nint m_hTarget = 0x10; // CHandle< CBaseEntity >
    public const nint m_hProjectileSource = 0x14; // CHandle< CBaseEntity >
    public const nint m_flDamage = 0x18; // float32
    public const nint m_flOriginalDamage = 0x1C; // float32
    public const nint m_flDamagePhysical = 0x20; // float32
    public const nint m_flDamagePhysical_IllusionDisplay = 0x24; // float32
    public const nint m_flDamageMagical = 0x28; // float32
    public const nint m_flDamageComposite = 0x2C; // float32
    public const nint m_flDamagePure = 0x30; // float32
    public const nint m_iRecord = 0x34; // int16
    public const nint m_iDamageCategory = 0x38; // int32
    public const nint m_iFailType = 0x3C; // int32
    public const nint m_iDamageType = 0x40; // int32
    public const nint m_iFlags = 0x44; // int32
    public const nint m_animation = 0x48; // int32
    public const nint m_pOrb = 0x50; // CDOTA_Orb*
    public const nint m_pOrb2 = 0x58; // CDOTA_Orb*
    public const nint m_bAttack = 0x0; // bitfield:1
    public const nint m_bRangedAttack = 0x0; // bitfield:1
    public const nint m_bDirectionalRangedAttack = 0x0; // bitfield:1
    public const nint m_bSkipRangeCheck = 0x0; // bitfield:1
    public const nint m_bFakeAttack = 0x0; // bitfield:1
    public const nint m_bNeverMiss = 0x0; // bitfield:1
    public const nint m_bLethalAttack = 0x0; // bitfield:1
    public const nint m_bTriggeredAttack = 0x0; // bitfield:1
    public const nint m_bNoCooldown = 0x0; // bitfield:1
    public const nint m_bProcessProcs = 0x0; // bitfield:1
    public const nint m_bUseProjectile = 0x0; // bitfield:1
    public const nint m_bUseCastAttackOrb = 0x0; // bitfield:1
    public const nint m_bAutoCastAttack = 0x0; // bitfield:1
    public const nint m_bIgnoreBaseArmor = 0x0; // bitfield:1
    public const nint m_bIgnoreObstructions = 0x0; // bitfield:1
    public const nint m_bSuppressAttackSounds = 0x0; // bitfield:1
    public const nint m_bSuppressDamageSounds = 0x0; // bitfield:1
    public const nint m_bSuppressDamageEffects = 0x0; // bitfield:1
    public const nint m_nBashSource = 0x64; // int32
    public const nint m_flAttackHeight = 0x68; // float32
    public const nint m_flCombatLogCreditFactor = 0x6C; // float32
    public const nint m_flCriticalBonus = 0x70; // float32
    public const nint m_flCriticalDamage = 0x74; // float32
    public const nint m_flCriticalDisplay = 0x78; // float32
    public const nint m_flDeadlyBlowBonus = 0x7C; // float32
    public const nint m_flDeadlyBlowDamage = 0x80; // float32
    public const nint m_flDeadlyBlowDisplay = 0x84; // float32
    public const nint m_iProjectileSpeed = 0x88; // int32
    public const nint m_vForceDirectionOverride = 0x8C; // Vector
    public const nint m_vTargetLoc = 0x98; // Vector
    public const nint m_vBlockLoc = 0xA4; // Vector
    public const nint m_iszAutoAttackRangedParticle = 0xB0; // CUtlSymbolLarge
    public const nint m_iCustomFXIndex = 0xC0; // ParticleIndex_t
    public const nint m_iCustomProjectileAttachment = 0xC4; // DOTAProjectileAttachment_t
}

public static class CDOTA_BaseNPC {
    public const nint m_bPledgedOfrenda = 0x958; // bool
    public const nint m_iUnitType = 0x95C; // uint32
    public const nint m_colorGemColor = 0x960; // Color
    public const nint m_bHasColorGem = 0x964; // bool
    public const nint m_bSelectionRingVisible = 0x965; // bool
    public const nint m_iszBaseClass = 0x970; // CUtlSymbolLarge
    public const nint m_iStartingMaxHealth = 0x978; // int32
    public const nint m_iStartingMaxMana = 0x97C; // int32
    public const nint m_iStartingMana = 0x980; // int32
    public const nint m_iCurrentLevel = 0x984; // int32
    public const nint m_flMana = 0x988; // float32
    public const nint m_flBaseMaxMana = 0x98C; // float32
    public const nint m_flMaxMana = 0x990; // float32
    public const nint m_flManaThinkRegen = 0x994; // float32
    public const nint m_flBaseMaxHealth = 0x998; // float32
    public const nint m_flHealthThinkRegen = 0x99C; // float32
    public const nint m_nHealthBarOffsetOverride = 0x9A0; // int32
    public const nint m_nHealthBarOffset = 0x9A4; // int32
    public const nint m_bIsPhantom = 0x9A8; // bool
    public const nint m_bIsAncient = 0x9A9; // bool
    public const nint m_bIsBossCreature = 0x9AA; // bool
    public const nint m_bIsNeutralUnitType = 0x9AB; // bool
    public const nint m_bAutoAttacksByDefault = 0x9AC; // bool
    public const nint m_bIsSummoned = 0x9AD; // bool
    public const nint m_bCanBeDominated = 0x9AE; // bool
    public const nint m_bCanRespawn = 0x9AF; // bool
    public const nint m_bConsideredHero = 0x9B0; // bool
    public const nint m_bUsesConstantGesture = 0x9B1; // bool
    public const nint m_bIsPlayingSingleForcedActivity = 0x9B2; // bool
    public const nint m_bHasUpgradeableAbilities = 0x9B3; // bool
    public const nint m_iBKBChargesUsed = 0x9B4; // int32
    public const nint m_iAeonChargesUsed = 0x9B8; // int32
    public const nint m_flRefresherUseTime = 0x9BC; // GameTime_t
    public const nint m_flRefresherLastCooldown = 0x9C0; // float32
    public const nint m_flLastDealtDamageTime = 0x9C4; // GameTime_t
    public const nint m_iBotDebugData = 0x9C8; // int32
    public const nint m_bIsMoving = 0x9CC; // bool
    public const nint m_flChannelMultiplier = 0xB68; // float32
    public const nint m_bCanUseWards = 0xB6C; // bool
    public const nint m_bCanUseAllItems = 0xB6D; // bool
    public const nint m_iLastAbilityPlayer = 0xB70; // PlayerID_t
    public const nint m_bIsPhantomBlocker = 0xB74; // bool
    public const nint m_bBlocksCreepSpawn = 0xB75; // bool
    public const nint m_bCanSellItems = 0xB76; // bool
    public const nint m_hNeutralSpawner = 0xB78; // CHandle< CDOTA_NeutralSpawner >
    public const nint m_bTrackDamageTaken = 0xB7C; // bool
    public const nint m_nNextRegenThink = 0xB80; // GameTick_t
    public const nint m_nNextModifierThink = 0xB84; // GameTick_t
    public const nint m_nNextModelScaleThink = 0xB88; // GameTick_t
    public const nint m_nNextUnitThink = 0xB8C; // GameTick_t
    public const nint m_flManaRegen = 0xB90; // float32
    public const nint m_flHealthRegen = 0xB94; // float32
    public const nint m_nTotalDamageTaken = 0xB98; // int64
    public const nint m_flHealthRegenCounter = 0xBA0; // float32
    public const nint m_flManaRegenCounter = 0xBA4; // float32
    public const nint m_flAccumulatedHeal = 0xBA8; // float32
    public const nint m_iBaseAttackSpeed = 0xBAC; // int32
    public const nint m_iBaseDamageMin = 0xBB0; // int32
    public const nint m_iBaseDamageMax = 0xBB4; // int32
    public const nint m_iAttackRange = 0xBB8; // int32
    public const nint m_iAttackRangeBuffer = 0xBBC; // int32
    public const nint m_iMoveSpeed = 0xBC0; // int32
    public const nint m_flTurnRate = 0xBC4; // float32
    public const nint m_iHasAggressiveStance = 0xBC8; // int32
    public const nint m_bInAggressiveStance = 0xBCC; // bool
    public const nint m_bInInjuredAggressiveStance = 0xBCD; // bool
    public const nint m_flFollowRange = 0xBD0; // float32
    public const nint m_iAcquisitionRange = 0xBD4; // int32
    public const nint m_flAttackAnimationPoint = 0xBD8; // float32
    public const nint m_flHullRadius = 0xBDC; // float32
    public const nint m_flCollisionPadding = 0xBE0; // float32
    public const nint m_flTauntCooldown = 0xBE4; // GameTime_t
    public const nint m_flTauntCooldown2 = 0xBE8; // GameTime_t
    public const nint m_fRevealRadius = 0xBEC; // float32
    public const nint m_flProjectileCollisionSize = 0xBF0; // float32
    public const nint m_ObstructionRelationshipClass = 0xBF4; // ObstructionRelationshipClass_t
    public const nint m_iszParticleFolder = 0xBF8; // CUtlSymbolLarge
    public const nint m_iszGameSoundsFile = 0xC00; // CUtlSymbolLarge
    public const nint m_iszVoiceFile = 0xC08; // CUtlSymbolLarge
    public const nint m_iszSoundSet = 0xC10; // CUtlSymbolLarge
    public const nint m_iszSelectionGroup = 0xC18; // CUtlSymbolLarge
    public const nint m_iszAnimationModifier = 0xC20; // CUtlSymbolLarge
    public const nint m_flBaseAttackTime = 0xC30; // float32
    public const nint m_iDayTimeVisionRange = 0xC34; // int32
    public const nint m_iNightTimeVisionRange = 0xC38; // int32
    public const nint m_fBotAttackDesire = 0xC3C; // float32
    public const nint m_iUnitRelationshipClass = 0xC40; // int32
    public const nint m_flPhysicalArmorValue = 0xC44; // float32
    public const nint m_flMagicalResistanceValue = 0xC48; // float32
    public const nint m_iTeamName = 0xC4C; // int32
    public const nint m_iAttackCapabilities = 0xC50; // int32
    public const nint m_iSpecialAbility = 0xC54; // int32
    public const nint m_iMoveCapabilities = 0xC58; // int32
    public const nint m_iOriginalAttackCapabilities = 0xC5C; // int32
    public const nint m_iXPBounty = 0xC60; // int32
    public const nint m_iXPBountyExtra = 0xC64; // int32
    public const nint m_iGoldBountyMin = 0xC68; // int32
    public const nint m_iGoldBountyMax = 0xC6C; // int32
    public const nint m_nFarmClaimPlayerID = 0xC70; // PlayerID_t
    public const nint m_nPlayerOwnerID = 0xC74; // PlayerID_t
    public const nint m_iszAbilityList = 0xC78; // CUtlSymbolLarge[35]
    public const nint m_iAttackDamageType = 0xD90; // int32
    public const nint m_bIsIdle = 0xD94; // bool
    public const nint m_bHold = 0xD95; // bool
    public const nint m_bWasKilledPassively = 0xD96; // bool
    public const nint m_AngerTimer = 0xD98; // CountdownTimer
    public const nint m_AlertTimer = 0xDB0; // CountdownTimer
    public const nint m_hAngerTarget = 0xDC8; // CHandle< CBaseEntity >
    public const nint m_hAlertTarget = 0xDCC; // CHandle< CBaseEntity >
    public const nint m_hForceAttackTarget = 0xDD0; // CHandle< CBaseEntity >
    public const nint m_bAllowAllyForceAttack = 0xDD4; // bool
    public const nint m_vTargetLastKnownPosition = 0xDD8; // Vector
    public const nint m_flLastDamageTime = 0xE00; // GameTime_t
    public const nint m_flLastAttackTime = 0xE04; // GameTime_t
    public const nint m_flTimeSinceLastAbilityNag = 0xE08; // GameTime_t
    public const nint m_flLastTeleportTime = 0xE0C; // GameTime_t
    public const nint m_nUnitState64 = 0xE10; // uint64
    public const nint m_vLastVisibilityChange = 0xE18; // GameTime_t[15]
    public const nint m_bFirstSpawn = 0xE70; // bool
    public const nint m_hAttackTarget = 0xE74; // CHandle< CBaseEntity >
    public const nint m_hAggroTarget = 0xE78; // CHandle< CBaseEntity >
    public const nint m_hCommandAttackTarget = 0xE7C; // CHandle< CBaseEntity >
    public const nint m_iszOriginalModel = 0xE80; // CUtlSymbolLarge
    public const nint m_nUnitModelVariant = 0xE88; // int8
    public const nint m_nUnitModelVariantCount = 0xE89; // int8
    public const nint m_bPseudoQueueOrders = 0xE8A; // bool
    public const nint m_bCastLocked = 0xE8B; // bool
    public const nint m_flAttackRegulator = 0xEA8; // GameTime_t
    public const nint m_flTimeDisparityTolerance = 0xEAC; // float32
    public const nint m_fAttackPhaseEndTime = 0xEB0; // GameTime_t
    public const nint m_flPositionUpdateTime = 0xEB4; // GameTime_t
    public const nint m_vLastPositionSent = 0xEB8; // Vector
    public const nint m_iTaggedAsVisibleByTeam = 0xEC4; // int32
    public const nint m_iIsControllableByPlayer64 = 0xEC8; // uint64
    public const nint m_nControllingPlayerID = 0xED0; // PlayerID_t
    public const nint m_bRunAIWhenControllableByPlayer = 0xED4; // bool
    public const nint m_hAbilities = 0xED8; // CHandle< CBaseEntity >[35]
    public const nint m_associatedEmptyAbilities = 0xF68; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hActiveAbility = 0xF80; // CHandle< CBaseEntity >
    public const nint m_vCursorLocation = 0xF84; // Vector
    public const nint m_hCursorTarget = 0xF90; // CHandle< CBaseEntity >
    public const nint m_hOriginalCursorTarget = 0xF94; // CHandle< CBaseEntity >
    public const nint m_bCursorTargetingNothing = 0xF98; // bool
    public const nint m_ModifierManager = 0xFA0; // CDOTA_ModifierManager
    public const nint m_flInvisibilityLevel = 0x1248; // float32
    public const nint m_iszMapUnitName = 0x1250; // CUtlSymbolLarge
    public const nint m_iszUnitName = 0x1258; // CUtlSymbolLarge
    public const nint m_iUnitNameIndex = 0x1260; // int32
    public const nint m_iDamageMin = 0x1264; // int32
    public const nint m_iDamageMax = 0x1268; // int32
    public const nint m_iDamageBonus = 0x126C; // int32
    public const nint m_bIsWaitingToSpawn = 0x1270; // bool
    public const nint m_iLeashType = 0x1274; // int32
    public const nint m_iAggroType = 0x1278; // int32
    public const nint m_bCreepIgnoreAggro = 0x127C; // bool
    public const nint m_bCreepFirstWave = 0x127D; // bool
    public const nint m_bIsIllusion = 0x127E; // bool
    public const nint m_nUnitLabelIndex = 0x127F; // uint8
    public const nint m_szScaleset = 0x1280; // CUtlString
    public const nint m_szUnitLabel = 0x1288; // CUtlString
    public const nint m_strAnimationModifier = 0x1290; // CUtlString
    public const nint m_hOwnerNPC = 0x12A0; // CHandle< CBaseEntity >
    public const nint m_locomotor = 0x12A8; // CLocomotionBase*
    public const nint m_body = 0x12B0; // IBody*
    public const nint m_bNeverMoveToClearSpace = 0x12B8; // bool
    public const nint m_hGoalEntity = 0x12BC; // CHandle< CBaseEntity >
    public const nint m_bMustReachEachGoalEntity = 0x12C0; // bool
    public const nint m_vInitialGoalPosition = 0x12C4; // Vector
    public const nint m_CurrentQueuedOrder = 0x12E8; // CUnitOrders
    public const nint m_Inventory = 0x1340; // CDOTA_UnitInventory
    public const nint m_hItemToDrop = 0x1418; // CHandle< CBaseEntity >
    public const nint m_iCurShop = 0x141C; // DOTA_SHOP_TYPE
    public const nint m_hLastNearShop = 0x1420; // CHandle< CBaseEntity >
    public const nint m_szCurShopEntName = 0x1428; // CUtlSymbolLarge
    public const nint m_bHasInventory = 0x1430; // bool
    public const nint m_flBaselineModelScale = 0x1434; // float32
    public const nint m_fModelScaleMultiplier = 0x1438; // float32
    public const nint m_fModelScaleMultiplierChangeStart = 0x143C; // float32
    public const nint m_fModelScaleMultiplierChangeTime = 0x1440; // GameTime_t
    public const nint m_flPreviousModelScale = 0x1444; // float32
    public const nint m_fMaxModelScaleMultiplier = 0x1448; // float32
    public const nint m_bIsCamped = 0x144C; // bool
    public const nint m_bIsReturningHome = 0x144D; // bool
    public const nint m_bWantsToFlee = 0x144E; // bool
    public const nint m_bWakesNeutrals = 0x144F; // bool
    public const nint m_bNeutralIgnore = 0x1450; // bool
    public const nint m_bIdleAcquire = 0x1451; // bool
    public const nint m_bCanFollowUnseenUnits = 0x1452; // bool
    public const nint m_bExpired = 0x1453; // bool
    public const nint m_vCurrentMovementOrderDestination = 0x1454; // Vector
    public const nint m_vPreviousMovementOrderDestination = 0x1460; // Vector
    public const nint m_vResumePreviousMovementRequestLocation = 0x146C; // Vector
    public const nint m_bCurrentOrderIsMovement = 0x1478; // bool
    public const nint m_bPreviousOrderIsMovement = 0x1479; // bool
    public const nint m_bResumePreviousMovement = 0x147A; // bool
    public const nint m_bIsPatrolling = 0x147B; // bool
    public const nint m_flCreationTime = 0x147C; // GameTime_t
    public const nint m_bTargetMovedOutOfRange = 0x1480; // bool
    public const nint m_bChaseTargetMoves = 0x1481; // bool
    public const nint m_flChaseDistance = 0x1484; // float32
    public const nint m_hChaseEntity = 0x1488; // CHandle< CBaseEntity >
    public const nint m_ActivityModifiers = 0x1490; // CUtlVector< CUtlSymbol >
    public const nint m_bActivityModifiersDirty = 0x14A8; // bool
    public const nint m_ActivityModifiersFromScript = 0x14B0; // CUtlVector< CUtlSymbol >
    public const nint m_flBlinkDaggerTime = 0x14C8; // GameTime_t
    public const nint m_flAdditionalBattleMusicWeight = 0x14CC; // float32
    public const nint m_bStolenScepter = 0x14D0; // bool
    public const nint m_bHasScepterCached = 0x14D1; // bool
    public const nint m_bHasShardCached = 0x14D2; // bool
    public const nint m_LocalNPCObstructionsCache = 0x14D8; // CLocalNPCObstructionsCache
    public const nint m_flCritBashFailUntil = 0x1518; // GameTime_t
    public const nint m_flAttackTimeLostToLastTick = 0x151C; // float32
    public const nint m_flAttackTimeAtLastTick = 0x1520; // float32
    public const nint m_flCompanionDistance = 0x1524; // float32
    public const nint m_bIsPartyCompanion = 0x1528; // bool
    public const nint m_bCanPartyCompanionAttack = 0x1529; // bool
    public const nint m_CompanionEntity = 0x152C; // CHandle< CBaseEntity >
    public const nint m_bFacePlayer = 0x1530; // bool
    public const nint m_flLastIdleChangeTime = 0x1534; // GameTime_t
    public const nint m_bUseNeutralCreepBehavior = 0x1538; // bool
    public const nint m_bHasBuiltWearableSpawnList = 0x1560; // bool
    public const nint m_nFoWFadeStartTime = 0x1564; // GameTick_t[15]
    public const nint m_nFOWVisibilityRadius = 0x15A0; // int32
    public const nint m_vFOWOriginOverride = 0x15A4; // Vector
    public const nint m_strLastKillerAbility = 0x15B0; // CUtlString
    public const nint m_anglediff = 0x15B8; // int32
    public const nint m_NetworkActivity = 0x15BC; // int32
    public const nint m_NetworkSequenceIndex = 0x15C0; // int32
    public const nint m_bShouldDoFlyHeightVisual = 0x15C4; // bool
    public const nint m_flStartSequenceCycle = 0x15C8; // float32
    public const nint m_bMidLoading = 0x15CC; // bool
    public const nint m_hTutorialSpawner = 0x15D0; // CHandle< CDOTA_ScriptedSpawner >
    public const nint m_AngerCooldownTimer = 0x15D8; // CountdownTimer
    public const nint m_iProjectileMoveSpeed = 0x15F0; // int32
    public const nint m_iszAutoAttackRangedParticle = 0x15F8; // CUtlSymbolLarge
    public const nint m_nPoseParameterTurn = 0x1600; // int32
    public const nint m_nPoseParameterRun = 0x1604; // int32
    public const nint m_flLean = 0x1608; // float32
    public const nint m_flRun = 0x160C; // float32
    public const nint m_CustomHealthLabel = 0x1610; // char[256]
    public const nint m_CustomHealthLabelColor = 0x1710; // Color
    public const nint m_nWearableDefIndex = 0x1714; // item_definition_index_t
    public const nint m_nArcanaLevel = 0x1718; // int8
    public const nint m_nDefaultArcanaLevel = 0x1719; // int8
    public const nint m_defaultColorGemColor = 0x171A; // Color
    public const nint m_bDisableDamageDisplay = 0x171E; // bool
    public const nint m_gibTintColor = 0x1720; // Color
    public const nint m_flPathfindingSearchDepthScale = 0x1724; // float32
    public const nint m_ActivitiesStarted = 0x1728; // CUtlVector< int32 >
    public const nint m_hIllusionOriginal = 0x1740; // CHandle< CBaseEntity >
    public const nint m_hDirectionalRangedFakeTarget = 0x1744; // CHandle< CDOTA_BaseNPC >
    public const nint m_bShouldComputeRemainingPathLength = 0x1770; // bool
    public const nint m_flRemainingPathLength = 0x1774; // float32
}

public static class CDOTA_BaseNPC_AghsFort_Watch_Tower {
    public const nint m_nOptionNumber = 0x1890; // int32
    public const nint m_flMovePlayersRadius = 0x1894; // float32
    public const nint m_nExitDirection = 0x1898; // CDOTA_BaseNPC_AghsFort_Watch_Tower::ExitDirection_t
    public const nint m_vExitLocation = 0x189C; // Vector
    public const nint m_nPathSelectedID = 0x18A8; // int32
    public const nint m_nEncounterType = 0x18AC; // int32
    public const nint m_bIsEliteEncounter = 0x18B0; // bool
    public const nint m_bIsAscensionLevelPicker = 0x18B1; // bool
    public const nint m_strEncounterName = 0x18B8; // CUtlSymbolLarge
    public const nint m_strAscensionAbilities = 0x18C0; // CUtlSymbolLarge
    public const nint m_hEffigy = 0x18C8; // CHandle< CBaseEntity >
    public const nint m_nDepth = 0x18CC; // int32
    public const nint m_hPedestal = 0x18D0; // CHandle< CDOTA_BaseNPC_Effigy_AghsFort >
    public const nint m_hParticleSystem = 0x18D4; // CHandle< CBaseEntity >
    public const nint m_hRoomGate = 0x18E0; // CHandle< CBaseAnimatingActivity >
    public const nint m_bIsBeingChanneled = 0x18E4; // bool
    public const nint m_flGoalCaptureProgress = 0x18E8; // float32
}

public static class CDOTA_BaseNPC_Building {
    public const nint m_iDamageLevel = 0x1778; // int32
    public const nint m_nFXIndex = 0x1780; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_nFXIndexDestruction = 0x1788; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_angInitialAngles = 0x1790; // QAngle
    public const nint m_hHeroStatueSequence = 0x179C; // HSequence
    public const nint m_hConstantLayerSequence = 0x17A0; // HSequence
    public const nint m_fHeroStatueCycle = 0x17A4; // float32
    public const nint m_iHeroStatueStatusEffectIndex = 0x17A8; // int32
    public const nint m_bHeroStatue = 0x17AC; // bool
    public const nint m_bBattleCup = 0x17AD; // bool
    public const nint m_HeroStatueInscription = 0x17AE; // char[32]
    public const nint m_iHeroStatueOwnerPlayerID = 0x17D0; // PlayerID_t
    public const nint m_ParticleTintColor = 0x17D4; // Color
    public const nint m_sDestroySnd = 0x17D8; // CUtlSymbolLarge
    public const nint m_sDmgLvl1Snd = 0x17E0; // CUtlSymbolLarge
    public const nint m_sDmgLvl2Snd = 0x17E8; // CUtlSymbolLarge
    public const nint m_iszLinkedUnit = 0x17F0; // CUtlSymbolLarge
    public const nint m_iszAmbientEffectName = 0x17F8; // CUtlSymbolLarge
    public const nint m_iszDestructionEffectName = 0x1800; // CUtlSymbolLarge
    public const nint m_iszDamageModelLevel1 = 0x1808; // CUtlSymbolLarge
    public const nint m_iszDamageModelLevel2 = 0x1810; // CUtlSymbolLarge
    public const nint m_iszDamageEffectLevel1 = 0x1818; // CUtlSymbolLarge
    public const nint m_iszDamageEffectLevel2 = 0x1820; // CUtlSymbolLarge
    public const nint m_flDamageThresholdLevel1 = 0x1828; // float32
    public const nint m_flDamageThresholdLevel2 = 0x182C; // float32
    public const nint m_bVulnerableOnCreepSpawn = 0x1830; // bool
    public const nint m_bHasOverriddenDestructionEffect = 0x1831; // bool
    public const nint m_iUpgradeIdentifier = 0x1834; // int32
    public const nint m_iInvulnCount = 0x1838; // int32
    public const nint m_iPlayerOwner = 0x183C; // int32
    public const nint m_Lane = 0x1840; // DOTA_LANE
    public const nint m_fAmountAlongLane = 0x1844; // float32[2]
    public const nint m_vOverrideInitialAngles = 0x184C; // Vector
    public const nint m_vOverrideInitialAnglesBG = 0x1858; // Vector
    public const nint m_nOverrideInitialAngles = 0x1864; // int32
    public const nint m_IdleRareAnimationTime = 0x1868; // CountdownTimer
}

public static class CDOTA_BaseNPC_Creature {
    public const nint m_bInitialized = 0x17A8; // bool
    public const nint m_bCanRespawn = 0x17A9; // bool
    public const nint m_bUsesGestureBasedAttackAnimation = 0x17AA; // bool
    public const nint m_bIsHybridFlyer = 0x17AB; // bool
    public const nint m_bRequiresReachingEndPath = 0x17AC; // bool
    public const nint m_bAggroOwnerOnDamage = 0x17AD; // bool
    public const nint m_bReceivedAggroOnDamageOrder = 0x17AE; // bool
    public const nint m_vCreatureStates = 0x17B0; // CUtlVector< CreatureStateData_t >
    public const nint m_pszDefaultState = 0x17C8; // char*
    public const nint m_pszCurrentState = 0x17D0; // char*
    public const nint m_nHPGain = 0x17D8; // int32
    public const nint m_nManaGain = 0x17DC; // int32
    public const nint m_flHPRegenGain = 0x17E0; // float32
    public const nint m_flManaRegenGain = 0x17E4; // float32
    public const nint m_nDamageGain = 0x17E8; // int32
    public const nint m_flArmorGain = 0x17EC; // float32
    public const nint m_flMagicResistGain = 0x17F0; // float32
    public const nint m_flDisableResistGain = 0x17F4; // float32
    public const nint m_flAttackTimeGain = 0x17F8; // float32
    public const nint m_nMoveSpeedGain = 0x17FC; // int32
    public const nint m_nBountyGain = 0x1800; // int32
    public const nint m_nXPGain = 0x1804; // int32
    public const nint m_nPermanentDesire = 0x1808; // int32
    public const nint m_nCreatureDesire = 0x180C; // int32
    public const nint m_nCurrentCastBehavior = 0x1810; // int32
    public const nint m_bIsBuildingAggressive = 0x1814; // bool
    public const nint m_bIsHeroAggressive = 0x1815; // bool
    public const nint m_bDisableClumpingBehavior = 0x1816; // bool
    public const nint m_flDisableResistance = 0x1818; // float32
    public const nint m_flUltimateDisableResistance = 0x181C; // float32
    public const nint m_bHasOffensiveAbility = 0x1820; // bool
    public const nint m_vOffensiveAbilities = 0x1828; // CUtlVector< CreatureAbilityData_t >
    public const nint m_bHasDefensiveAbility = 0x1840; // bool
    public const nint m_vDefensiveAbilities = 0x1848; // CUtlVector< CreatureAbilityData_t >
    public const nint m_bHasEscapeAbility = 0x1860; // bool
    public const nint m_vEscapeAbilities = 0x1868; // CUtlVector< CreatureAbilityData_t >
    public const nint m_pLastUsedAbility = 0x1880; // CDOTABaseAbility*
    public const nint m_vDesiredCastLocation = 0x1888; // Vector
    public const nint m_pDesiredNPCTarget = 0x1898; // CDOTA_BaseNPC*
    public const nint m_pEscortTarget = 0x18A0; // CDOTA_BaseNPC*
    public const nint m_vLastDamageSource = 0x18A8; // Vector
    public const nint m_bIsChampion = 0x18B4; // bool
    public const nint m_vItemDropData = 0x18B8; // CUtlVector< ItemDropData_t* >
    public const nint m_vecAttachWearableItemDefs = 0x18D0; // CUtlVector< WearableData_t >
    public const nint m_flRespawnTime = 0x18E8; // GameTime_t
    public const nint m_bIsCurrentlyChanneling = 0x18EC; // bool
    public const nint m_flChannelCycle = 0x18F0; // float32
}

public static class CDOTA_BaseNPC_Creep {
    public const nint m_KillInfo = 0x1778; // CDOTA_CreepKillInfo
    public const nint m_Lane = 0x1798; // DOTA_LANE
    public const nint m_bPushback = 0x179C; // bool
    public const nint m_flAim = 0x17A0; // float32
}

public static class CDOTA_BaseNPC_Creep_Lane {
    public const nint m_ThinkTimer = 0x17A8; // CountdownTimer
    public const nint m_bInEnemyBase = 0x17C0; // bool
}

public static class CDOTA_BaseNPC_Creep_Neutral {
    public const nint m_ThinkTimer = 0x17A8; // CountdownTimer
}

public static class CDOTA_BaseNPC_CustomEffigy {
    public const nint m_unStatusEffectIndex = 0x1880; // uint32
    public const nint m_hPedestal = 0x1884; // CHandle< CBaseEntity >
}

public static class CDOTA_BaseNPC_Effigy_AghsFort {
    public const nint m_unStatusEffectIndex = 0x1880; // uint32
}

public static class CDOTA_BaseNPC_HallofFame {
    public const nint m_event_dota_player_team_changed = 0x1890; // int32
    public const nint m_glowThinkTimer = 0x1898; // CountdownTimer
}

public static class CDOTA_BaseNPC_Hero {
    public const nint m_flStrength = 0x1810; // float32
    public const nint m_flAgility = 0x1814; // float32
    public const nint m_flIntellect = 0x1818; // float32
    public const nint m_flStrengthTotal = 0x181C; // float32
    public const nint m_flAgilityTotal = 0x1820; // float32
    public const nint m_flIntellectTotal = 0x1824; // float32
    public const nint m_iRecentDamage = 0x1828; // int32
    public const nint m_iPrimaryAttribute = 0x182C; // int32
    public const nint m_flDeathTime = 0x1830; // GameTime_t
    public const nint m_flStrengthGain = 0x1834; // float32
    public const nint m_flAgilityGain = 0x1838; // float32
    public const nint m_flIntellectGain = 0x183C; // float32
    public const nint m_flLastSuggestionTime = 0x1840; // float32
    public const nint m_bItemsAddedToLoadout = 0x1844; // bool
    public const nint m_bPregameItemsAddedToLoadout = 0x1845; // bool
    public const nint m_hNewARDMHero = 0x1848; // CHandle< CBaseEntity >
    public const nint m_fBuybackCooldown = 0x184C; // GameTime_t
    public const nint m_fBuybackGoldLimit = 0x1850; // GameTime_t
    public const nint m_nLastHealedAmount = 0x1854; // int32
    public const nint m_flLastHealedTime = 0x1858; // float32
    public const nint m_hLastHealEntity = 0x185C; // CHandle< CBaseEntity >
    public const nint m_vRespawnPosition = 0x1860; // Vector
    public const nint m_HeroDamageInfoArray = 0x1870; // CUtlVector< CDOTA_BaseNPC_Hero::sHeroDamageInfo >
    public const nint m_vecRecentModifiers = 0x1888; // CUtlVector< CDOTA_BaseNPC_Hero::sHeroRecentModifierInfo >
    public const nint m_fMostRecentDamageTime = 0x18A0; // GameTime_t
    public const nint m_iAbilityPoints = 0x18A4; // int32
    public const nint m_iCurrentXP = 0x18A8; // int32
    public const nint m_flRespawnTime = 0x18AC; // GameTime_t
    public const nint m_flRespawnTimePenalty = 0x18B0; // float32
    public const nint m_flTimeUntilRespawn = 0x18B4; // float32
    public const nint m_flScriptRespawnTime = 0x18B8; // float32
    public const nint m_flPendingRespawnTime = 0x18BC; // float32
    public const nint m_bScriptDisableRespawns = 0x18C0; // bool
    public const nint m_iPlayerID = 0x18C4; // PlayerID_t
    public const nint m_iIllusionOriginalPlayerID = 0x18C8; // PlayerID_t
    public const nint m_iHeroID = 0x18CC; // int32
    public const nint m_hReplicatingOtherHeroModel = 0x18D0; // CHandle< CDOTA_BaseNPC_Hero >
    public const nint m_RespawnMusicTimer = 0x1910; // CountdownTimer
    public const nint m_HeroKillTimer = 0x1928; // CountdownTimer
    public const nint m_MultipleHeroKillTimer = 0x1940; // CountdownTimer
    public const nint m_MultipleLastHitTimer = 0x1958; // CountdownTimer
    public const nint m_iMultipleKillCount = 0x1970; // int32
    public const nint m_bDisableWearables = 0x1974; // bool
    public const nint m_hTogglableWearable = 0x1978; // CHandle< CDOTAWearableItem >[98]
    public const nint m_KillInfo = 0x1B00; // CDOTA_BaseNPC_Hero::KillInfo_t
    public const nint m_DirectorAbilityActivity = 0x1B20; // CountdownTimer
    public const nint m_bReincarnating = 0x1B38; // bool
    public const nint m_bCustomKillEffect = 0x1B39; // bool
    public const nint m_flSpawnedAt = 0x1B3C; // GameTime_t
    public const nint m_PurchaseItemTimer = 0x1B40; // CountdownTimer
    public const nint m_NeutralItemTimer = 0x1B58; // CountdownTimer
    public const nint m_RetrieveItemsFromStashTimer = 0x1B70; // CountdownTimer
    public const nint m_RequestGoToSecretShopTimer = 0x1B88; // CountdownTimer
    public const nint m_iNextItemToPurchase = 0x1BA0; // int32
    public const nint m_bDoesNextItemCompleteRecipe = 0x1BA4; // bool
    public const nint m_Loadout = 0x1BA8; // CUtlVector< sLoadoutItem >
    public const nint m_BuildingOrBuilt = 0x1BC0; // CUtlVector< CUtlPair< AbilityID_t, bool > >
    public const nint m_TPScroll = 0x1BD8; // sLoadoutItem
    public const nint m_Dust = 0x1BF0; // sLoadoutItem
    public const nint m_Gem = 0x1C08; // sLoadoutItem
    public const nint m_SentryWard = 0x1C20; // sLoadoutItem
    public const nint m_ObserverWard = 0x1C38; // sLoadoutItem
    public const nint m_Courier = 0x1C50; // sLoadoutItem
    public const nint m_FlyingCourier = 0x1C68; // sLoadoutItem
    public const nint m_bAutoPurchaseItems = 0x1C80; // bool
    public const nint m_bBuybackDisabled = 0x1C81; // bool
    public const nint m_hPets = 0x1C88; // CUtlVector< CHandle< CDOTA_BaseNPC_Pet > >
    public const nint m_bPreventPetSpawn = 0x1CA0; // bool
    public const nint m_MusicProbabilityGank = 0x1CA8; // CDOTAMusicProbabilityEntry
    public const nint m_strCustomKillEffect = 0x1CF8; // CUtlString
    public const nint m_strCustomHexModel = 0x1D00; // CUtlString
    public const nint m_nKillStreakFX = 0x1D08; // ParticleIndex_t
    public const nint m_AbilitiesPendingDelete = 0x1D10; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecItemPurchaseHistory = 0x1D28; // CUtlVector< sAcquireHistory >
    public const nint m_vecAbilitySkillHistory = 0x1D40; // CUtlVector< sAcquireHistory >
    public const nint m_vecNeutralItemEquippedHistory = 0x1D58; // CUtlVector< sAcquireHistory >
    public const nint m_vecExpiredIllusions = 0x1D88; // CUtlVector< CHandle< CDOTA_BaseNPC_Hero > >
    public const nint m_flLastTimeLookedAtByDirector = 0x1DA4; // float32
}

public static class CDOTA_BaseNPC_Hero_KillInfo_t {
    public const nint m_victimname = 0x0; // CUtlSymbolLarge
    public const nint m_inflictorname = 0x8; // CUtlSymbolLarge
    public const nint m_bEnemyInFOW = 0x10; // bool
    public const nint m_bWasFirstBlood = 0x11; // bool
    public const nint m_iKillCount = 0x14; // int32
    public const nint m_flBlinkTime = 0x18; // float32
}

public static class CDOTA_BaseNPC_Hero_sHeroDamageInfo {
    public const nint nDamagingPlayerID = 0x0; // PlayerID_t
    public const nint fTime = 0x4; // GameTime_t
}

public static class CDOTA_BaseNPC_Hero_sHeroRecentModifierInfo {
    public const nint nSourcePlayerID = 0x0; // PlayerID_t
    public const nint bBuff = 0x4; // bool
    public const nint nAbilityIndex = 0x8; // int32
    public const nint fTime = 0xC; // GameTime_t
}

public static class CDOTA_BaseNPC_HoldoutTower {
    public const nint m_iTowerType = 0x18B8; // DOTA_HOLDOUT_TOWER_TYPE
}

public static class CDOTA_BaseNPC_Pet {
    public const nint m_hHeroHandle = 0x1778; // CHandle< CDOTA_BaseNPC_Hero >
    public const nint m_flPetThreatLevel = 0x177C; // float32
    public const nint m_bReadyToPerformCoopTeleport = 0x1780; // bool
    public const nint m_bSupportsCoopTeleport = 0x1781; // bool
    public const nint m_nCoopState = 0x1784; // PetCoopStates_t
    public const nint m_strPickupItemModel = 0x1788; // CUtlString
    public const nint m_hCarriedItem = 0x1790; // CHandle< CDOTA_Pet_CarriedItem >
    public const nint m_nPetLevel = 0x1794; // int32
    public const nint m_nLevelupRule = 0x1798; // PetLevelup_Rule_t
    public const nint m_nXPCompendiumEventID = 0x17A0; // int32
}

public static class CDOTA_BaseNPC_Phantom_Assassin_GroundDagger {
    public const nint m_nFXIndex = 0x1778; // ParticleIndex_t
}

public static class CDOTA_BaseNPC_Seasonal_TI10_DiscoBall {
    public const nint NUM_SOUNDS = 0x1778; // int32
    public const nint m_nFXIndex = 0x177C; // ParticleIndex_t
    public const nint m_vecDancers = 0x1780; // CUtlVector< PlayerID_t >
}

public static class CDOTA_BaseNPC_ShadowShaman_SerpentWard {
    public const nint m_angle = 0x1778; // QAngle
    public const nint m_iPoseParameterAim = 0x1784; // int32
}

public static class CDOTA_BaseNPC_Shop {
    public const nint m_ShopType = 0x1880; // DOTA_SHOP_TYPE
}

public static class CDOTA_BaseNPC_Thinker {
    public const nint m_bSendToAllPlayers = 0x1778; // bool
    public const nint m_bSendToClients = 0x1779; // bool
}

public static class CDOTA_BaseNPC_Tower {
    public const nint m_OnTowerKilled = 0x1880; // CEntityIOOutput
    public const nint m_hTowerAttackTarget = 0x18A8; // CHandle< CBaseEntity >
    public const nint m_hTowerHighFiveTarget = 0x18AC; // CHandle< CBaseEntity >
}

public static class CDOTA_BaseNPC_Trap_Ward {
    public const nint m_iszDefaultAnim = 0x18F8; // CUtlSymbolLarge
    public const nint m_vTrapTargetLocal = 0x1900; // Vector
}

public static class CDOTA_BaseNPC_Venomancer_PlagueWard {
    public const nint m_angle = 0x1778; // QAngle
    public const nint m_iPoseParameterAim = 0x1784; // int32
}

public static class CDOTA_BaseNPC_Watch_Tower {
    public const nint m_szOutpostName = 0x1880; // CUtlSymbolLarge
    public const nint m_szInteractAbilityName = 0x1888; // CUtlSymbolLarge
}

public static class CDOTA_BinaryObject {
    public const nint m_bActive = 0x4A8; // bool
    public const nint m_nBinaryID = 0x4AC; // int32
}

public static class CDOTA_Bot {
    public const nint m_iLifesteal = 0x10; // int32
    public const nint m_iBlock = 0x14; // int32
    public const nint m_bForceIdle = 0x18; // bool
    public const nint m_bForceCreepAttack = 0x19; // bool
    public const nint m_fExecutionTime = 0x1C; // float32[30]
    public const nint m_iCurExecutionTime = 0x94; // int32
    public const nint m_iPlayerID = 0x98; // PlayerID_t
    public const nint m_hUnit = 0x9C; // CHandle< CBaseEntity >
    public const nint m_pTeamCommander = 0xA0; // CDOTA_TeamCommander*
    public const nint m_iUnitType = 0xA8; // int32
    public const nint m_fAggressionFactor = 0xAC; // float32
    public const nint m_bBotControlled = 0xB0; // bool
    public const nint m_bLiquidate = 0xB1; // bool
    public const nint m_bDoNotPurchase = 0xB2; // bool
    public const nint m_iDifficulty = 0xB4; // int32
    public const nint m_bIsFullScriptTakeover = 0xB8; // bool
    public const nint m_CurrentLane = 0xBC; // DOTA_LANE
    public const nint m_MostRecentLane = 0xC0; // DOTA_LANE
    public const nint m_AssignedLane = 0xC4; // DOTA_LANE
    public const nint m_TargetLane = 0xC8; // DOTA_LANE
    public const nint m_ForcedLane = 0xCC; // DOTA_LANE
    public const nint m_fCurrentLaneAmount = 0xD0; // float32
    public const nint m_bIsNPXCarry = 0xD4; // bool
    public const nint m_fEstimatedUnitDamage = 0xD8; // float32
    public const nint m_fEstimatedMaxUnitDamage = 0xDC; // float32
    public const nint m_fEstimatedBuildingDamage = 0xE0; // float32
    public const nint m_bWantsToCast = 0xE4; // bool
    public const nint m_iWantsToCastFrame = 0xE8; // int32
    public const nint m_bWantsToAttack = 0xEC; // bool
    public const nint m_iWantsToAttackFrame = 0xF0; // int32
    public const nint m_UpdateCurrentLaneTimer = 0xF8; // CountdownTimer
    public const nint m_UpdateModeTimer = 0x110; // CountdownTimer
    public const nint m_ModeThinkTimer = 0x128; // CountdownTimer
    public const nint m_InteralRatingsTimer = 0x140; // CountdownTimer
    public const nint m_BuybackDelayTimer = 0x158; // CountdownTimer
    public const nint m_CourierUsageTimer = 0x170; // CountdownTimer
    public const nint m_AbilityMutedTimer = 0x188; // CountdownTimer
    public const nint m_AbilityMutedCheckTimer = 0x1A0; // CountdownTimer
    public const nint m_HitByTowerTime = 0x1B8; // GameTime_t
    public const nint m_HitByHeroTime = 0x1BC; // GameTime_t[24]
    public const nint m_HitByCreepTime = 0x21C; // GameTime_t
    public const nint m_nEstimatedDamageUpdatedTick = 0x220; // GameTick_t
    public const nint m_nNearbyUnitsUpdatedTick = 0x224; // GameTick_t
    public const nint m_NearbyTrees = 0x2E8; // CUtlVector< int32 >
    public const nint m_nNearbyEnemyCreeps = 0x300; // int32
    public const nint m_nAttackingCreeps = 0x304; // int32
    public const nint m_nAttackingTowers = 0x308; // int32
    public const nint m_nAttackingHeroes = 0x30C; // int32
    public const nint m_fLastSeen = 0x310; // GameTime_t
    public const nint m_nFailedPaths = 0x314; // int32
    public const nint m_hTarget = 0x318; // CHandle< CBaseEntity >
    public const nint m_vTargetLoc = 0x31C; // Vector
    public const nint m_fTargetLastSeen = 0x328; // GameTime_t
    public const nint m_hTargetLastHitCreep = 0x32C; // CHandle< CBaseEntity >
    public const nint m_bWasInvisible = 0x330; // bool
    public const nint m_bKnownInvisible = 0x331; // bool
    public const nint m_vLastSeenLoc = 0x334; // Vector
    public const nint m_vRequestedBlinkLoc = 0x340; // Vector
    public const nint m_fRequestedBlinkStart = 0x34C; // GameTime_t
    public const nint m_fRequestedBlinkExpire = 0x350; // GameTime_t
    public const nint m_hMinions = 0x358; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_Build = 0x370; // CUtlVector< CDOTABaseAbility* >
    public const nint m_fModeDesires = 0x8668; // float32[27]
    public const nint m_iPreviousBotModeType = 0x86D4; // int32
    public const nint m_fPendingActionExecuteTime = 0x8708; // GameTime_t
    public const nint m_bPendingActionBypass = 0x870C; // bool
    public const nint m_nForceAbility = 0x8710; // int32
    public const nint m_flLastDebugTime = 0x8714; // GameTime_t
}

public static class CDOTA_Buff {
    public const nint m_name = 0x28; // CUtlSymbolLarge
    public const nint m_szModifierAura = 0x38; // CUtlSymbolLarge
    public const nint m_iSerialNumber = 0x48; // int32
    public const nint m_iStringIndex = 0x4C; // int32
    public const nint m_iIndex = 0x50; // int32
    public const nint m_flCreationTime = 0x54; // GameTime_t
    public const nint m_iCreationFrame = 0x58; // int32
    public const nint m_flLastAppliedTime = 0x5C; // GameTime_t
    public const nint m_flDuration = 0x60; // float32
    public const nint m_flDieTime = 0x64; // GameTime_t
    public const nint m_hCaster = 0x68; // CHandle< CBaseEntity >
    public const nint m_hAbility = 0x6C; // CHandle< CBaseEntity >
    public const nint m_hParent = 0x70; // CHandle< CBaseEntity >
    public const nint m_hAuraOwner = 0x74; // CHandle< CBaseEntity >
    public const nint m_iStackCount = 0x78; // int32
    public const nint m_iAuraSearchTeam = 0x7C; // int16
    public const nint m_iAuraSearchType = 0x7E; // int16
    public const nint m_iAuraSearchFlags = 0x80; // int32
    public const nint m_iAuraRadius = 0x84; // int32
    public const nint m_iTeam = 0x88; // int32
    public const nint m_iAttributes = 0x8C; // int32
    public const nint m_iPaddingToMakeSchemaHappy2 = 0x90; // int16
    public const nint m_bIsAura = 0x0; // bitfield:1
    public const nint m_bIsAuraActiveOnDeath = 0x0; // bitfield:1
    public const nint m_bMarkedForDeletion = 0x0; // bitfield:1
    public const nint m_bAuraIsHeal = 0x0; // bitfield:1
    public const nint m_bProvidedByAura = 0x0; // bitfield:1
    public const nint m_bPurgedDestroy = 0x93; // bool
    public const nint m_flPreviousTick = 0x94; // GameTime_t
    public const nint m_flThinkInterval = 0x98; // float32
    public const nint m_flThinkTimeAccumulator = 0x9C; // float32
    public const nint m_iParticles = 0xA0; // CUtlVector< CDOTA_BuffParticle >
    public const nint m_hAuraUnits = 0xB8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hScriptScope = 0x1310; // HSCRIPT
}

public static class CDOTA_BuffParticle {
    public const nint m_iIndex = 0x0; // ParticleIndex_t
    public const nint m_iPriority = 0x4; // int32
    public const nint m_bDestroyImmediatly = 0x8; // bool
    public const nint m_bStatusEffect = 0x9; // bool
    public const nint m_bHeroEffect = 0xA; // bool
    public const nint m_bOverheadEffectOffset = 0xB; // bool
}

public static class CDOTA_CDOTA_Item_BagOfGold_Caster_Only {
    public const nint m_hThinker = 0x610; // CHandle< CBaseEntity >
}

public static class CDOTA_CombatLogQueryProgress {
    public const nint m_nPlayerID = 0x28; // PlayerID_t
    public const nint m_nQueryID = 0x2C; // int32
    public const nint m_nQueryRank = 0x30; // int32
    public const nint m_nMultiQueryID = 0x34; // int32
}

public static class CDOTA_Creature_Jungle_Spirit {
    public const nint m_iCurrentXP = 0x18F8; // int32
    public const nint m_fInitialScaleGain = 0x18FC; // float32
    public const nint m_fScaleGainMultiplierPerLevel = 0x1900; // float32
    public const nint m_fLastModelScaleGained = 0x1904; // float32
    public const nint m_bGainedSecondPlatemail = 0x1908; // bool
    public const nint m_bGainedBonusHealth = 0x1909; // bool
    public const nint m_nAmbientFXIndex = 0x190C; // ParticleIndex_t
}

public static class CDOTA_CreepKillInfo {
    public const nint m_flTimeOfDeath = 0x0; // GameTime_t
    public const nint m_flDeathFlightDuration = 0x4; // float32
    public const nint m_vWsKillDirection = 0x8; // Vector
    public const nint m_vWsKillOrigin = 0x14; // Vector
}

public static class CDOTA_DataNonSpectator {
    public const nint m_vecDataTeam = 0x4A8; // CUtlVectorEmbeddedNetworkVar< DataTeamPlayer_t >
    public const nint m_bWorldTreeState = 0x4F8; // uint64[256]
    public const nint m_vecWorldTreeModelReplacements = 0xCF8; // CUtlVectorEmbeddedNetworkVar< TreeModelReplacement_t >
    public const nint m_vDesiredWardPlacement = 0xD48; // Vector2D[2]
    public const nint m_nEnemyStartingPosition = 0xD58; // int32[5]
    public const nint m_nCaptainInspectedHeroID = 0xD6C; // int32
    public const nint m_flSuggestedWardWeights = 0xD70; // float32[20]
    public const nint m_nSuggestedWardIndexes = 0xDC0; // uint8[20]
    public const nint m_iSuggestedLanes = 0xDD4; // int32[5]
    public const nint m_iSuggestedLaneWeights = 0xDE8; // float32[5]
    public const nint m_bSuggestedLaneRoam = 0xDFC; // bool[5]
    public const nint m_bSuggestedLaneJungle = 0xE01; // bool[5]
    public const nint m_vecNeutralItemsTierInfo = 0xE08; // CUtlVectorEmbeddedNetworkVar< TierNeutralInfo_t >
    public const nint m_vecNeutralStashItems = 0xE58; // CNetworkUtlVectorBase< CHandle< CBaseEntity > >
    public const nint m_vecNeutralItemsConsumed = 0xE70; // CNetworkUtlVectorBase< AbilityID_t >
    public const nint m_PingConfirmationStates = 0xE88; // CUtlVectorEmbeddedNetworkVar< PingConfirmationState_t >
    public const nint m_vecKnownClearCamps = 0xED8; // CNetworkUtlVectorBase< CHandle< CBaseEntity > >
    public const nint m_vPossibleWardPlacement = 0xEF0; // Vector2D[100]
    public const nint m_vPossibleWardRadii = 0x1210; // float32[100]
    public const nint m_vecTrackedTeleports = 0x13A0; // CUtlVectorEmbeddedNetworkVar< DOTATeleportInfo_t >
    public const nint m_iTowerKills = 0x13F0; // int32
}

public static class CDOTA_DataSpectator {
    public const nint m_hPowerupRune_1 = 0x13F8; // CHandle< CBaseEntity >
    public const nint m_hPowerupRune_2 = 0x13FC; // CHandle< CBaseEntity >
    public const nint m_hBountyRune_1 = 0x1400; // CHandle< CBaseEntity >
    public const nint m_hBountyRune_2 = 0x1404; // CHandle< CBaseEntity >
    public const nint m_hBountyRune_3 = 0x1408; // CHandle< CBaseEntity >
    public const nint m_hBountyRune_4 = 0x140C; // CHandle< CBaseEntity >
    public const nint m_hXPRune_1 = 0x1410; // CHandle< CBaseEntity >
    public const nint m_hXPRune_2 = 0x1414; // CHandle< CBaseEntity >
    public const nint m_iNetWorth = 0x1418; // int32[24]
    public const nint m_fRadiantWinProbability = 0x1478; // float32
    public const nint m_ThreatLevelInfos = 0x1480; // CUtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
}

public static class CDOTA_DisplacementVisibility {
    public const nint m_HiddenDisplacement = 0x4A8; // int32
}

public static class CDOTA_GuildBannerDynamic {
    public const nint m_bRespawnClientEntity = 0x9F0; // bool
    public const nint m_bPlaySpawnAnimation = 0x9F1; // bool
    public const nint m_unGuildTier = 0x9F2; // uint8
    public const nint m_unPrimaryColor = 0x9F3; // uint8
    public const nint m_unSecondaryColor = 0x9F4; // uint8
    public const nint m_unPattern = 0x9F5; // uint8
    public const nint m_unLogo = 0x9F8; // uint64
    public const nint m_unGuildID = 0xA00; // GuildID_t
    public const nint m_unGuildFlags = 0xA04; // uint32
    public const nint m_bUsePanelCache = 0xA08; // bool
}

public static class CDOTA_Hero_Recorder {
    public const nint m_bStartRecording = 0x4A8; // bool
    public const nint m_hHero = 0x4AC; // CHandle< CDOTA_BaseNPC >
    public const nint m_hPlayer = 0x4B0; // CHandle< CDOTAPlayerController >
    public const nint m_flStartRecordingTime = 0x4B4; // GameTime_t
}

public static class CDOTA_Item {
    public const nint m_iState = 0x568; // int32
    public const nint m_CastAnimation = 0x56C; // int32
    public const nint m_bCombinable = 0x570; // bool
    public const nint m_bPermanent = 0x571; // bool
    public const nint m_bStackable = 0x572; // bool
    public const nint m_iStackableMax = 0x574; // int32
    public const nint m_bRecipe = 0x578; // bool
    public const nint m_bRecipeConsumesCharges = 0x579; // bool
    public const nint m_iSharability = 0x57C; // int32
    public const nint m_bDroppable = 0x580; // bool
    public const nint m_bPurchasable = 0x581; // bool
    public const nint m_bSellable = 0x582; // bool
    public const nint m_bInitiallySellable = 0x583; // bool
    public const nint m_bForceUnsellable = 0x584; // bool
    public const nint m_bRequiresCharges = 0x585; // bool
    public const nint m_bKillable = 0x586; // bool
    public const nint m_bGloballyCombinable = 0x587; // bool
    public const nint m_bDisassemblable = 0x588; // bool
    public const nint m_bNeverDisassemble = 0x589; // bool
    public const nint m_bIsTempestDoubleClonable = 0x58A; // bool
    public const nint m_bIsNeutralDrop = 0x58B; // bool
    public const nint m_nNeutralDropTeam = 0x58C; // int32
    public const nint m_bAlertable = 0x590; // bool
    public const nint m_iInitialCharges = 0x594; // int32
    public const nint m_bCastOnPickup = 0x598; // bool
    public const nint m_bOnlyPlayerHeroPickup = 0x599; // bool
    public const nint m_bCreepHeroPickup = 0x59A; // bool
    public const nint m_bCanBeUsedOutOfInventory = 0x59B; // bool
    public const nint m_bItemEnabled = 0x59C; // bool
    public const nint m_flEnableTime = 0x5A0; // GameTime_t
    public const nint m_flReclaimTime = 0x5A4; // GameTime_t
    public const nint m_bDisplayOwnership = 0x5A8; // bool
    public const nint m_bShowOnMinimap = 0x5A9; // bool
    public const nint m_flMinimapIconSize = 0x5AC; // float32
    public const nint m_bIsUpgradeable = 0x5B0; // bool
    public const nint m_nUpgradeProgress = 0x5B4; // int32
    public const nint m_nUpgradeGoal = 0x5B8; // int32
    public const nint m_vecPreGameTransferPlayerIDs = 0x5C0; // CNetworkUtlVectorBase< uint8 >
    public const nint m_bStackWithOtherOwners = 0x5D8; // bool
    public const nint m_bTemporarilyUncombinable = 0x5D9; // bool
    public const nint m_bHasCommentedOnEquip = 0x5DA; // bool
    public const nint m_iDeclarationFlags = 0x5DC; // int32
    public const nint m_bCreatedByDisassemble = 0x5E0; // bool
    public const nint m_bHasMixedOwnership = 0x5E1; // bool
    public const nint m_bIsClonedItemProxy = 0x5E2; // bool
    public const nint m_bNeutralItemRequestDrop = 0x5E3; // bool
    public const nint m_flPurchaseTime = 0x5E4; // GameTime_t
    public const nint m_flAssembledTime = 0x5E8; // GameTime_t
    public const nint m_iCurrentCharges = 0x5EC; // int32
    public const nint m_iValuelessCharges = 0x5F0; // int32
    public const nint m_iSecondaryCharges = 0x5F4; // int32
    public const nint m_bCombineLocked = 0x5F8; // bool
    public const nint m_hContainer = 0x5FC; // CHandle< CDOTA_Item_Physical >
    public const nint m_iPlayerOwnerID = 0x600; // PlayerID_t
    public const nint m_bPurchasedWhileDead = 0x604; // bool
    public const nint m_nCombineVersion = 0x608; // int32
}

public static class CDOTA_ItemSpawner {
    public const nint m_szItemName = 0x4A8; // CUtlSymbolLarge
}

public static class CDOTA_ItemStockInfo {
    public const nint iTeamNumber = 0x30; // int32
    public const nint nItemAbilityID = 0x34; // AbilityID_t
    public const nint fStockDuration = 0x38; // float32
    public const nint fStockTime = 0x3C; // GameTime_t
    public const nint iStockCount = 0x40; // int32
    public const nint iMaxCount = 0x44; // int32
    public const nint fInitialStockDuration = 0x48; // float32
    public const nint iPlayerID = 0x4C; // PlayerID_t
    public const nint iBonusDelayedStockCount = 0x50; // int32
}

public static class CDOTA_Item_Aegis {
    public const nint m_iKillerTeam = 0x610; // int32
    public const nint m_fEquipTime = 0x614; // GameTime_t
}

public static class CDOTA_Item_AeonDisk {
    public const nint m_nUses = 0x610; // int32
    public const nint max_level = 0x614; // int32
}

public static class CDOTA_Item_AetherialHalo {
    public const nint m_nFXIndex = 0x610; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x614; // ParticleIndex_t
}

public static class CDOTA_Item_Ancient_Janggo {
    public const nint radius = 0x610; // int32
}

public static class CDOTA_Item_Arcane_Scout {
    public const nint m_hScout = 0x610; // CHandle< CBaseEntity >
}

public static class CDOTA_Item_Armlet {
    public const nint toggle_cooldown = 0x610; // float32
    public const nint m_flLastActivateTime = 0x614; // GameTime_t
    public const nint m_flLastDeactivateTime = 0x618; // GameTime_t
}

public static class CDOTA_Item_Barricade {
    public const nint m_hScout = 0x610; // CHandle< CBaseEntity >
}

public static class CDOTA_Item_Black_King_Bar {
    public const nint m_bActive = 0x610; // bool
}

public static class CDOTA_Item_BootsOfTravel {
    public const nint m_flTeleportTimeOverride = 0x610; // float32
    public const nint m_bPendingSellExcessScrolls = 0x614; // bool
    public const nint m_bQueueSellScrolls = 0x615; // bool
}

public static class CDOTA_Item_Boots_Of_Bearing {
    public const nint radius = 0x610; // int32
}

public static class CDOTA_Item_Bottomless_Chalice {
    public const nint m_iStoredRuneType = 0x610; // int32
    public const nint m_fStoredRuneTime = 0x614; // GameTime_t
    public const nint stored_rune_duration = 0x618; // float32
}

public static class CDOTA_Item_Bracer {
    public const nint counter = 0x610; // int32
}

public static class CDOTA_Item_DataDriven {
    public const nint m_bProcsMagicStick = 0x628; // bool
    public const nint m_bIsSharedWithTeammates = 0x629; // bool
    public const nint m_bCastFilterRejectCaster = 0x62A; // bool
    public const nint m_fAnimationPlaybackRate = 0x62C; // float32
    public const nint m_fAOERadius = 0x630; // float32
    public const nint m_CastAnimation = 0x634; // int32
    public const nint m_ModifierKVDescriptions = 0x638; // CUtlVector< KeyValues* >
    public const nint m_pOnChannelFinishKV = 0x650; // KeyValues*
    public const nint m_pOnChannelSucceededKV = 0x658; // KeyValues*
    public const nint m_pOnChannelInterruptedKV = 0x660; // KeyValues*
    public const nint m_pOnOwnerSpawnedKV = 0x668; // KeyValues*
    public const nint m_pOnOwnerDiedKV = 0x670; // KeyValues*
    public const nint m_pOnProjectileHitUnitKV = 0x678; // KeyValues*
    public const nint m_pOnProjectileFinishKV = 0x680; // KeyValues*
    public const nint m_pOnSpellStartKV = 0x688; // KeyValues*
    public const nint m_pOnAbilityPhaseStartKV = 0x690; // KeyValues*
    public const nint m_pOnToggleOnKV = 0x698; // KeyValues*
    public const nint m_pOnToggleOffKV = 0x6A0; // KeyValues*
    public const nint m_pOnEquipKV = 0x6A8; // KeyValues*
    public const nint m_pOnUnequipKV = 0x6B0; // KeyValues*
    public const nint m_pOnCreatedKV = 0x6B8; // KeyValues*
}

public static class CDOTA_Item_Demonicon {
    public const nint m_hDemonSummons = 0x610; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Item_EagleEye {
    public const nint m_iTempViewer = 0x610; // int32
    public const nint m_iTeam = 0x614; // int32
    public const nint m_nFXIndex = 0x618; // int32
    public const nint m_hThinker = 0x61C; // CHandle< CBaseEntity >
}

public static class CDOTA_Item_EmptyBottle {
    public const nint m_iStoredRuneType = 0x610; // int32
    public const nint m_fStoredRuneTime = 0x614; // GameTime_t
    public const nint rune_expire_time = 0x618; // float32
}

public static class CDOTA_Item_GemOfTrueSight {
    public const nint m_iTempViewer = 0x610; // int32
    public const nint m_iTeam = 0x614; // int32
    public const nint m_nFXIndex = 0x618; // int32
    public const nint m_hThinker = 0x61C; // CHandle< CBaseEntity >
}

public static class CDOTA_Item_Grandmasters_Glaive {
    public const nint m_iStat = 0x610; // int32
}

public static class CDOTA_Item_MeteorHammer {
    public const nint m_nFXIndex = 0x610; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x614; // ParticleIndex_t
}

public static class CDOTA_Item_Muertas_Gun {
    public const nint radius = 0x610; // int32
    public const nint ricochet_radius_start = 0x614; // int32
    public const nint ricochet_radius_end = 0x618; // int32
    public const nint speed = 0x61C; // int32
    public const nint m_vTargetPos = 0x620; // Vector
    public const nint m_vEndpoint = 0x62C; // Vector
    public const nint m_hTreeTarget = 0x638; // CHandle< CBaseEntity >
    public const nint m_bHasRicocheted = 0x63C; // bool
    public const nint m_bHasRicochetDamaged = 0x63D; // bool
    public const nint m_vRicochetDir = 0x640; // Vector
    public const nint m_iTempViewerRadiant = 0x654; // int32
    public const nint m_iTempViewerDire = 0x658; // int32
}

public static class CDOTA_Item_Necronomicon {
    public const nint m_hWarrior = 0x610; // CHandle< CBaseEntity >
    public const nint m_hArcher = 0x614; // CHandle< CBaseEntity >
}

public static class CDOTA_Item_NullTalisman {
    public const nint counter = 0x610; // int32
}

public static class CDOTA_Item_Ofrenda_Shovel {
    public const nint m_vTreasurePos = 0x610; // Vector
    public const nint m_vChannelPos = 0x61C; // Vector
    public const nint m_bIsUnderwater = 0x628; // bool
    public const nint m_nPhaseStartFXIndex = 0x62C; // ParticleIndex_t
}

public static class CDOTA_Item_Orb_Of_Revelations {
    public const nint m_ViewerTimer = 0x610; // CountdownTimer
    public const nint m_iProjectile = 0x628; // int32
}

public static class CDOTA_Item_Overflowing_Elixir {
    public const nint m_iStoredRuneType = 0x610; // int32
    public const nint m_fStoredRuneTime = 0x614; // GameTime_t
}

public static class CDOTA_Item_Physical {
    public const nint m_nFlags = 0x768; // int32
    public const nint m_nRevealedInFoWForTeam = 0x76C; // int32
    public const nint m_fCreationTime = 0x770; // GameTime_t
    public const nint m_hItem = 0x774; // CHandle< CDOTA_Item >
    public const nint m_bIsLowPriorityHoverItem = 0x778; // bool
}

public static class CDOTA_Item_Pirate_Hat {
    public const nint m_vChannelPos = 0x610; // Vector
    public const nint m_bIsUnderwater = 0x61C; // bool
    public const nint m_nPhaseStartFXIndex = 0x620; // ParticleIndex_t
}

public static class CDOTA_Item_PowerTreads {
    public const nint m_iStat = 0x610; // int32
}

public static class CDOTA_Item_RiverPainter {
    public const nint m_iRiverPaintColor = 0x610; // int32
}

public static class CDOTA_Item_Rune {
    public const nint m_hRuneSpawner = 0x768; // CHandle< CBaseEntity >
    public const nint m_iRuneType = 0x76C; // int32
    public const nint m_flRuneTime = 0x770; // float32
    public const nint m_nMapLocationTeam = 0x774; // int32
    public const nint m_szLocation = 0x778; // char[512]
}

public static class CDOTA_Item_RuneSpawner {
    public const nint m_flLastSpawnTime = 0x768; // float32
    public const nint m_flNextSpawnTime = 0x76C; // float32
}

public static class CDOTA_Item_RuneSpawner_Bounty {
    public const nint m_szPosition = 0x768; // CUtlSymbolLarge
    public const nint m_nDotaTeam = 0x770; // int32
    public const nint m_flLastSpawnTime = 0x774; // float32
    public const nint m_flNextSpawnTime = 0x778; // float32
}

public static class CDOTA_Item_RuneSpawner_Powerup {
    public const nint m_szPosition = 0x768; // CUtlSymbolLarge
    public const nint m_flLastSpawnTime = 0x770; // float32
    public const nint m_flNextSpawnTime = 0x774; // float32
    public const nint m_bNextRuneIsWater = 0x778; // bool
}

public static class CDOTA_Item_RuneSpawner_XP {
    public const nint m_szPosition = 0x768; // CUtlSymbolLarge
    public const nint m_nDotaTeam = 0x770; // int32
    public const nint m_flLastSpawnTime = 0x774; // float32
    public const nint m_flNextSpawnTime = 0x778; // float32
}

public static class CDOTA_Item_Safety_Bubble {
    public const nint m_bUnequipped = 0x610; // bool
}

public static class CDOTA_Item_Samurai_Tabi {
    public const nint m_iStat = 0x610; // int32
}

public static class CDOTA_Item_ShadowAmulet {
    public const nint m_flLastTimeCast = 0x610; // GameTime_t
}

public static class CDOTA_Item_SheepStick {
    public const nint upgrade_radius = 0x610; // int32
}

public static class CDOTA_Item_SpookyTeleportScroll {
    public const nint m_hTeleportTarget = 0x610; // CHandle< CBaseEntity >
    public const nint m_nFXOrigin = 0x614; // ParticleIndex_t
    public const nint m_nFXDestination = 0x618; // ParticleIndex_t
    public const nint m_vDestination = 0x61C; // Vector
    public const nint m_iMinDistance = 0x628; // int32
    public const nint m_flBaseTeleportTime = 0x62C; // float32
    public const nint m_flExtraTeleportTime = 0x630; // float32
}

public static class CDOTA_Item_Spring2021_DefusalBomb {
    public const nint m_hThinker = 0x610; // CHandle< CBaseEntity >
    public const nint m_nOwnerTeamNumber = 0x614; // int32
    public const nint m_bInBombSite = 0x618; // bool
}

public static class CDOTA_Item_Tango_Single {
    public const nint m_flCreationTime = 0x610; // GameTime_t
    public const nint duration_to_use = 0x614; // float32
}

public static class CDOTA_Item_TeleportScroll {
    public const nint m_hTeleportTarget = 0x610; // CHandle< CBaseEntity >
    public const nint m_nFXOrigin = 0x614; // ParticleIndex_t
    public const nint m_nFXDestination = 0x618; // ParticleIndex_t
    public const nint m_vDestination = 0x61C; // Vector
    public const nint m_iMinDistance = 0x628; // int32
    public const nint m_flBaseTeleportTime = 0x62C; // float32
    public const nint m_flExtraTeleportTime = 0x630; // float32
}

public static class CDOTA_Item_TierToken {
    public const nint m_vecChoices = 0x610; // AbilityID_t[5]
}

public static class CDOTA_Item_Tombstone {
    public const nint m_flTimer = 0x610; // float32
    public const nint m_hParent = 0x614; // CHandle< CDOTA_Item_Tombstone >
    public const nint m_hNextChild = 0x618; // CHandle< CDOTA_Item_Tombstone >
    public const nint m_vContainerPosition = 0x61C; // Vector
    public const nint m_nFXIndex = 0x628; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x62C; // ParticleIndex_t
}

public static class CDOTA_Item_Tombstone_Drop {
    public const nint m_iTempViewer = 0x780; // int32
    public const nint m_iTeam = 0x784; // int32
}

public static class CDOTA_Item_TranquilBoots {
    public const nint break_count = 0x610; // int32
    public const nint m_DamageList = 0x618; // CUtlVector< GameTime_t >
}

public static class CDOTA_Item_TranquilBoots2 {
    public const nint break_count = 0x610; // int32
    public const nint m_DamageList = 0x618; // CUtlVector< GameTime_t >
}

public static class CDOTA_Item_Trusty_Shovel {
    public const nint m_vChannelPos = 0x610; // Vector
    public const nint m_bIsUnderwater = 0x61C; // bool
    public const nint m_nPhaseStartFXIndex = 0x620; // ParticleIndex_t
}

public static class CDOTA_Item_TurtleShell {
    public const nint duration = 0x610; // float32
}

public static class CDOTA_Item_Vambrace {
    public const nint m_iStat = 0x610; // int32
}

public static class CDOTA_Item_Ward_Maker {
    public const nint sentry_refresh = 0x610; // float32
    public const nint max_sentry_charges = 0x614; // int32
    public const nint m_flLastThinkTime = 0x618; // GameTime_t
    public const nint m_flTimeAccumulator = 0x61C; // float32
}

public static class CDOTA_Item_WraithBand {
    public const nint counter = 0x610; // int32
}

public static class CDOTA_Item_WraithPact {
    public const nint m_hWard = 0x610; // CHandle< CBaseEntity >
}

public static class CDOTA_MinibossSpawner {
    public const nint m_bIsRadiantMiniboss = 0x4A8; // bool
    public const nint m_bIsMinibossAlive = 0x4A9; // bool
    public const nint m_bSpawnRequested = 0x4AA; // bool
    public const nint m_hMiniboss = 0x4AC; // CHandle< CBaseEntity >
    public const nint m_fMinibossKillTime = 0x4B0; // GameTime_t
    public const nint m_nSentMinibossReclaim = 0x4B4; // int32
    public const nint m_nSentMinibossRespawn = 0x4B8; // int32
    public const nint m_nTimesSpawned = 0x4BC; // int32
    public const nint m_fMinibossRespawnDuration = 0x4C0; // float32
}

public static class CDOTA_Modifer_Furbolg_Enrage_AttackSpeed {
    public const nint bonus_aspd = 0x1318; // int32
}

public static class CDOTA_Modifer_Furbolg_Enrage_Damage {
    public const nint bonus_dmg_pct = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_BlightedSpirit {
    public const nint magic_resist = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifer_Item_Blitz_Knuckles {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_DandelionAmulet {
    public const nint move_speed = 0x1318; // int32
    public const nint mana = 0x131C; // int32
    public const nint magic_block = 0x1320; // int32
    public const nint min_damage = 0x1324; // int32
}

public static class CDOTA_Modifer_Item_GlovesOfHaste {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_TurtleShell {
    public const nint armor = 0x1318; // int32
}

public static class CDOTA_Modifer_Item_TurtleShell_Shell {
    public const nint damage_reduction = 0x1318; // int32
    public const nint m_vecPosition = 0x131C; // Vector
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_ModifierManager {
    public const nint m_bCompactBuffListPending = 0x28; // bool
    public const nint m_nHasTruesightForTeam = 0x290; // uint16
    public const nint m_nHasTruesightForTeamValid = 0x292; // uint16
    public const nint m_nProvidesFOWPositionForTeam = 0x294; // uint16
    public const nint m_nProvidesFOWPositionForTeamValid = 0x296; // uint16
    public const nint m_iBuffIndex = 0x298; // int32
    public const nint m_iLockRefCount = 0x29C; // int32
}

public static class CDOTA_Modifier_Abaddon_AphoticShield {
    public const nint radius = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // float32
    public const nint regen = 0x1320; // int32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime {
    public const nint m_iTotalDamageAbsorbed = 0x1318; // int32
    public const nint redirect_range_scepter = 0x131C; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationAura {
    public const nint immolate_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationDamage {
    public const nint immolate_damage = 0x1318; // float32
}

public static class CDOTA_Modifier_Abaddon_BorrowedTime_Passive {
    public const nint hp_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_Abaddon_Borrowed_Time_Damage_Redirect {
    public const nint m_fDamageTaken = 0x1318; // float32
    public const nint ally_threshold_scepter = 0x131C; // int32
}

public static class CDOTA_Modifier_Abaddon_DeathCoil_Effect {
    public const nint armor_bonus = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint m_bFriendly = 0x1320; // bool
}

public static class CDOTA_Modifier_Abaddon_Frostmourne {
    public const nint slow_duration = 0x1318; // float32
    public const nint curse_duration = 0x131C; // float32
    public const nint hit_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Buff {
    public const nint curse_attack_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Debuff {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_nFXStackIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Abaddon_Frostmourne_Debuff_Bonus {
    public const nint m_flDamage = 0x1318; // float32
    public const nint curse_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_CreepDmgBuff {
    public const nint bonus_damage_from_creep = 0x1318; // int32
    public const nint bonus_shared_by_allies_pct = 0x131C; // float32
    public const nint m_flModifier = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Effect {
    public const nint damage_reduction_pct = 0x1318; // int32
    public const nint bonus_damage_duration = 0x131C; // float32
    public const nint bonus_damage_from_creep = 0x1320; // int32
    public const nint bonus_damage_from_hero = 0x1324; // int32
    public const nint m_bWasHidden = 0x1328; // bool
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_HeroDmgBuff {
    public const nint bonus_damage_from_hero = 0x1318; // int32
    public const nint bonus_shared_by_allies_pct = 0x131C; // float32
    public const nint m_flModifier = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Scepter {
    public const nint bonus_damage_from_creep = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_DarkRift {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
    public const nint duration = 0x1320; // int32
    public const nint m_nfxAmbientFx = 0x1324; // ParticleIndex_t
    public const nint bPointTarget = 0x1328; // bool
    public const nint vDestination = 0x132C; // Vector
}

public static class CDOTA_Modifier_AbyssalUnderlord_DarkRift_Bonus_Health {
    public const nint scepter_health_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_Firestorm_Burn {
    public const nint burn_damage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
    public const nint building_damage = 0x1320; // float32
}

public static class CDOTA_Modifier_AbyssalUnderlord_Firestorm_Thinker {
    public const nint wave_damage = 0x1318; // int32
    public const nint wave_count = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint wave_interval = 0x1324; // float32
    public const nint burn_duration = 0x1328; // float32
    public const nint burn_interval = 0x132C; // float32
    public const nint first_wave_delay = 0x1330; // float32
    public const nint building_damage = 0x1334; // float32
    public const nint m_hTarget = 0x1338; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Slow {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Thinker {
    public const nint pit_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint pit_interval = 0x1320; // float32
    public const nint ensnare_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Activity_Modifier {
    public const nint m_activityModifier = 0x1318; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Aether_Lens {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint cast_range_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows_Chill {
    public const nint interval = 0x1318; // float32
    public const nint max_stacks = 0x131C; // int32
    public const nint damage_percent = 0x1320; // int32
    public const nint movement_damage_percent = 0x1324; // int32
    public const nint m_nDamage = 0x1328; // int32
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
    public const nint m_vLastPosition = 0x1330; // Vector
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_Active {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_range = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint charges = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_WaveOfSilence_Primed {
    public const nint aura_disable_range = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence {
    public const nint blind_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Agility {
    public const nint m_AgilityTimers = 0x1318; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Echo_Thinker {
    public const nint m_vTarget = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Frost {
    public const nint m_fDamagePerSecond = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Movement {
    public const nint movespeed_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_Flux {
    public const nint m_nCasterTeam = 0x1318; // int32
    public const nint damage_per_tick_min = 0x131C; // int32
    public const nint damage_per_tick_max = 0x1320; // int32
    public const nint search_radius = 0x1324; // int32
    public const nint move_speed_slow_pct = 0x1328; // int32
    public const nint think_interval = 0x132C; // float32
    public const nint m_fCurrentDamage = 0x1330; // float32
    public const nint m_fDamageIncreasePerTick = 0x1334; // float32
    public const nint m_nCurrentSlow = 0x1338; // int32
    public const nint m_bAlone = 0x133C; // bool
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Attack_Speed {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint aura_origin_x = 0x1320; // float32
    public const nint aura_origin_y = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Attack_Speed {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
    public const nint explosion_delay_time = 0x1324; // float32
    public const nint explosion_stun_duration = 0x1328; // float32
    public const nint explosion_damage = 0x132C; // int32
    public const nint caster_team = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Explosion {
    public const nint radius = 0x1318; // int32
    public const nint explosion_damage = 0x131C; // int32
    public const nint explosion_stun_duration = 0x1320; // float32
    public const nint explosion_delay_time = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_MeteorShockwave_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint knockback_distance = 0x1368; // float32
    public const nint knockback_duration = 0x136C; // float32
    public const nint windup_time = 0x1370; // float32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Purge {
    public const nint move_speed_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint wraith_vision_radius = 0x131C; // int32
    public const nint wraith_speed = 0x1320; // int32
    public const nint activation_delay = 0x132C; // float32
    public const nint scepter_activation_delay = 0x1330; // float32
    public const nint think_interval = 0x1334; // float32
    public const nint search_timer_min = 0x1338; // float32
    public const nint search_timer_max = 0x133C; // float32
    public const nint mini_stun_duration = 0x1340; // float32
    public const nint move_speed_slow_pct = 0x1344; // int32
    public const nint m_nSparkDamage = 0x1348; // int32
    public const nint m_bActive = 0x134C; // bool
    public const nint m_bOriginal = 0x134D; // bool
    public const nint m_fSearchTimer = 0x1350; // float32
    public const nint m_fRotationSpeed = 0x1354; // float32
    public const nint m_nRotationDirection = 0x1358; // int32
    public const nint m_vRotationCenter = 0x135C; // Vector
    public const nint m_nFXIndex = 0x1368; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble {
    public const nint damage_increase = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble_Phase {
    public const nint num_doubles = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Arcanist_Potion {
    public const nint m_nCooldownReductionPct = 0x1318; // int32
    public const nint m_nManaCostReductionPct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage_min = 0x1368; // int32
    public const nint damage_max = 0x136C; // int32
    public const nint slow_min = 0x1370; // int32
    public const nint slow_max = 0x1374; // int32
    public const nint slow_duration = 0x1378; // float32
    public const nint windup_time = 0x137C; // float32
}

public static class CDOTA_Modifier_AghsFort_AssaultCaptain_SunRay {
    public const nint hp_cost_perc_per_second = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint self_turn_rate_percent = 0x133C; // int32
    public const nint m_flCurrentTime = 0x1340; // float32
    public const nint m_flLastDamageTime = 0x1344; // GameTime_t
    public const nint m_flAccumulatedSelfDamage = 0x1348; // float32
    public const nint m_bMovingForward = 0x134C; // bool
    public const nint m_bTurningFast = 0x134D; // bool
    public const nint m_flFacingTarget = 0x1350; // float32
    public const nint hp_perc_damage = 0x1354; // float32
    public const nint hp_perc_heal = 0x1358; // float32
    public const nint m_nBeamFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1360; // CHandle< CBaseEntity >[8]
    public const nint m_hBeamEnd = 0x1380; // CHandle< CBaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1384; // bool
    public const nint m_hBeamEndSound = 0x1388; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_Invis {
    public const nint invis_movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_Knockback {
    public const nint radius = 0x1348; // int32
    public const nint heal_pct = 0x134C; // int32
    public const nint slow_duration = 0x1350; // float32
    public const nint m_nBrainSapDamage = 0x1354; // int32
    public const nint m_vecHitTargets = 0x1358; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_KnockbackSlow {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_BrainSap_NightmareMirror {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_FiendsGripThinker {
    public const nint latch_range = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Bane_Invis_Crit {
    public const nint invis_brain_sap_crit_pct = 0x1318; // int32
    public const nint m_nCritPct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossDarkWillow_CursedCrown {
    public const nint delay = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint stun_radius = 0x1320; // int32
    public const nint damage = 0x1324; // int32
    public const nint m_fStartTime = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_BossDarkWillow_ShadowRealm_Buff {
    public const nint m_fAddInterval = 0x1318; // float32
    public const nint m_fNextAddTime = 0x131C; // GameTime_t
    public const nint m_flStartTime = 0x1320; // GameTime_t
    public const nint m_flDamageScale = 0x1324; // float32
    public const nint duration = 0x1328; // float32
    public const nint attack_logic_duration = 0x132C; // float32
    public const nint speed_boost = 0x1330; // int32
    public const nint num_adds = 0x1334; // int32
    public const nint projectile_range = 0x1338; // int32
    public const nint projectile_speed = 0x133C; // int32
    public const nint projectile_width = 0x1340; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint totem_damage_percentage = 0x131C; // int32
    public const nint bActive = 0x1328; // bool
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem_LandDebuff {
    public const nint landing_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem_Leap {
    public const nint m_vLoc = 0x131C; // Vector
    public const nint m_flPredictedTotalTime = 0x1328; // float32
    public const nint m_vStartPosition = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1340; // bool
    public const nint m_bDamageApplied = 0x1341; // bool
    public const nint m_bTargetTeleported = 0x1342; // bool
    public const nint m_vHorizontalVelocity = 0x1344; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1350; // Vector
    public const nint m_flInitialVelocityZ = 0x135C; // float32
    public const nint m_nPreviewFX = 0x1360; // ParticleIndex_t
    public const nint scepter_height = 0x1364; // int32
    public const nint scepter_height_arcbuffer = 0x1368; // int32
    public const nint scepter_acceleration_z = 0x136C; // int32
    public const nint scepter_acceleration_horizontal = 0x1370; // int32
    public const nint landing_radius = 0x1374; // int32
    public const nint landing_debuff_duration = 0x1378; // float32
    public const nint landing_impact_damage = 0x137C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossEarthshaker_Fissure_Shard {
    public const nint m_vStartPos = 0x1318; // Vector
    public const nint m_vEndPos = 0x1324; // Vector
    public const nint m_flEndTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Debuff {
    public const nint linger_movement_slow = 0x1318; // int32
    public const nint linger_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Thinker {
    public const nint freeze_radius = 0x1318; // int32
    public const nint freeze_damage = 0x131C; // int32
    public const nint freeze_debuff_duration = 0x1320; // float32
    public const nint freeze_delay = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy {
    public const nint attack_rate = 0x1318; // float32
    public const nint damage_percent = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_bHasAttacked = 0x1324; // bool
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons {
    public const nint model_scale = 0x1350; // int32
    public const nint radius = 0x1354; // float32
    public const nint splitshot_count = 0x1358; // int32
    public const nint debuff_duration = 0x135C; // float32
    public const nint pct_for_moveslow = 0x1360; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons_Debuff {
    public const nint m_fMovementSlow = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Buff {
    public const nint m_fLifestealPct = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Debuff {
    public const nint m_fSlowPct = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_vFacePosition = 0x131C; // Vector
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage {
    public const nint m_vOriginalTarget = 0x1318; // Vector
    public const nint wave_count = 0x1324; // int32
    public const nint projectile_speed = 0x1328; // int32
    public const nint projectile_width = 0x132C; // int32
    public const nint m_flInterval = 0x1330; // float32
    public const nint m_nArrowsFired = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_DamageReduction {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_Singe_Slow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1330; // bool
    public const nint damage_bonus = 0x1334; // int32
    public const nint debuff_duration = 0x1338; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Debuff {
    public const nint attack_slow = 0x1318; // int32
    public const nint m_fIgniteThinkInterval = 0x131C; // float32
    public const nint m_fIgniteDmgPerSec = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Melter {
    public const nint armor_reduction_per_arrow = 0x1318; // float32
    public const nint m_nMaxStacks = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_BigSkeletons {
    public const nint m_nInitialHealthBarOffset = 0x1318; // int32
    public const nint colossus_model_scale = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_Thinker {
    public const nint lifetime = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonColossus {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint block_damage_ranged_active = 0x132C; // int32
    public const nint block_damage_melee_active = 0x1330; // int32
    public const nint hp_gain_per_caster_level = 0x1334; // int32
    public const nint hp_regen_per_caster_level = 0x1338; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk {
    public const nint m_vecWraithTouchedEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint move_speed_bonus_pct = 0x1340; // int32
    public const nint bonus_magic_resist = 0x1344; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_Strafe {
    public const nint m_fAttackSpeed = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Caster {
    public const nint max_stacks = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Enemy {
    public const nint m_fAttackLoss = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Creature_Impale {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_flDuration = 0x1320; // float32
    public const nint m_bDamageApplied = 0x1324; // bool
}

public static class CDOTA_Modifier_AghsFort_Creature_Phoenix_FireSpiritCount {
    public const nint spirit_count = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Creature_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint max_hero_attacks = 0x1320; // int32
    public const nint max_hero_attacks_scepter = 0x1324; // int32
    public const nint max_hero_attacks_required = 0x1328; // int32
    public const nint caster_life_pct = 0x132C; // float32
    public const nint m_hSecondaryTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_iAttackCount = 0x1334; // int32
    public const nint creep_attacks_count = 0x1338; // int32
}

public static class CDOTA_Modifier_AghsFort_Creature_SpikedCarapace {
    public const nint stun_duration = 0x1318; // float32
    public const nint m_vecAlreadyAppliedDebuff = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonNova {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonSting_Applier {
    public const nint duration = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Dawnbreaker_Solar_Guardian_AirTime {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_vDirection = 0x1320; // Vector
    public const nint m_flEndTime = 0x132C; // float32
    public const nint m_hThinker = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vTargetPosition = 0x1334; // Vector
    public const nint m_vStartPosition = 0x1340; // Vector
}

public static class CDOTA_Modifier_AghsFort_Dawnbreaker_Starbreaker_CounterOrbital {
    public const nint trigger_chance = 0x1318; // int32
    public const nint cooldown = 0x131C; // float32
    public const nint m_fLastProc = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_DragonPotion {
    public const nint m_iOriginalAttackCapabilities = 0x1318; // int32
    public const nint m_iszRangedAttackEffect = 0x1320; // CUtlSymbolLarge
    public const nint bonus_movement_speed = 0x1328; // int32
    public const nint bonus_attack_damage = 0x132C; // int32
    public const nint bonus_attack_range = 0x1330; // int32
    public const nint attack_projectile_speed = 0x1334; // int32
    public const nint magic_resistance = 0x1338; // int32
    public const nint model_scale = 0x133C; // int32
    public const nint skin_number = 0x1340; // int32
    public const nint flying_movement = 0x1344; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash {
    public const nint m_bInterrupted = 0x1318; // bool
    public const nint m_nProjectileID = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash_Debuff {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_GeomagneticGrip {
    public const nint radius = 0x1318; // int32
    public const nint rock_damage = 0x131C; // int32
    public const nint pull_units_per_second = 0x1320; // float32
    public const nint pull_units_per_second_heroes = 0x1324; // float32
    public const nint total_pull_distance = 0x1328; // float32
    public const nint duration = 0x132C; // float32
    public const nint m_bUsedStone = 0x1330; // bool
    public const nint m_vDestination = 0x1334; // Vector
    public const nint m_vLocation = 0x1340; // Vector
    public const nint m_hHitEntities = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_Magnetize {
    public const nint rock_search_radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint rock_explosion_delay = 0x1324; // float32
    public const nint damage_duration = 0x1328; // float32
    public const nint cast_radius = 0x132C; // int32
    public const nint rock_explosion_radius = 0x1330; // int32
    public const nint m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint duration = 0x1350; // float32
    public const nint m_bShowOverhead = 0x1354; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_bHasBeenMagnetized = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_EarthSpiritBoss_StoneThinker {
    public const nint m_bHasBeenMagnetized = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_ExplosiveBarrel {
    public const nint m_nPreviewFX = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint vision_radius = 0x1324; // int32
    public const nint vision_duration = 0x1328; // float32
    public const nint model_scale = 0x132C; // int32
    public const nint bExploding = 0x1330; // bool
    public const nint stun_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_AghsFort_Firefly {
    public const nint pool_duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_ifirefly_Active = 0x1320; // int32
    public const nint tree_radius = 0x1324; // int32
    public const nint damage_pct_per_second = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint trail_placement_duration = 0x1330; // float32
    public const nint burn_linger_duration = 0x1334; // float32
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint m_flStartTime = 0x1344; // GameTime_t
    public const nint m_vLastFirePoolLoc = 0x1348; // Vector
    public const nint m_vFirePoolLocations = 0x1358; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_AghsFort_Firefly_Burn {
    public const nint damage_pct_per_second = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_fNextDamageTick = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeDance {
    public const nint blade_dance_crit_mult = 0x1318; // int32
    public const nint blade_dance_crit_chance = 0x131C; // int32
    public const nint m_bDidBladeDanceCrit = 0x1320; // bool
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeDance_Buff {
    public const nint evasion_per_stack = 0x1318; // int32
    public const nint movespeed_per_stack = 0x131C; // int32
    public const nint evasion_bonus = 0x1320; // int32
    public const nint movespeed_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint blade_fury_damage = 0x131C; // int32
    public const nint blade_fury_damage_tick = 0x1320; // float32
    public const nint movement_bonus = 0x1324; // int32
    public const nint spark_radius = 0x1328; // int32
    public const nint spark_damage_percent = 0x132C; // int32
    public const nint m_bDestroyParentThinkerOnDeath = 0x1330; // bool
    public const nint m_bPreIntervalThink = 0x1331; // bool
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force_Pull {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint pull_speed = 0x131C; // int32
    public const nint pull_stop = 0x1320; // int32
    public const nint pull_origin = 0x1324; // Vector
    public const nint m_flLastThinkTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Double_Attack {
    public const nint range = 0x1318; // int32
    public const nint bonus_attack_duration = 0x131C; // float32
    public const nint bonus_attack_count = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint m_fBonusRange = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint healing_ward_heal_amount = 0x131C; // float32
    public const nint healing_ward_interval = 0x1320; // float32
    public const nint m_nTotalHealing = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward_Primed {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // int32
    public const nint search_radius = 0x1320; // int32
    public const nint damage_percent = 0x1324; // int32
    public const nint movement_bonus = 0x1328; // int32
    public const nint power = 0x132C; // int32
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_bPlayerControlled = 0x1334; // bool
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Omnislash_Ignite {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint tick_damage = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward {
    public const nint healing_ward_aura_radius = 0x1318; // int32
    public const nint healing_ward_heal_amount = 0x131C; // float32
    public const nint healing_ward_interval = 0x1320; // float32
    public const nint m_nTotalRegen = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward_Armor {
    public const nint armor_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Fire_Cannons_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageAbsorb {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint movespeed_bonus = 0x131C; // int32
    public const nint ghostship_absorb = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageDelay {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fire_Cannons {
    public const nint m_flDistance = 0x1318; // float32
    public const nint m_flSpeed = 0x131C; // float32
    public const nint m_nNumCannons = 0x1320; // int32
    public const nint m_flProjectileRadius = 0x1324; // float32
    public const nint m_bGhostShipIsEntity = 0x1328; // bool
    public const nint m_hGhostShipProjectile = 0x132C; // int32
    public const nint m_hGhostShip = 0x1330; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fleet {
    public const nint vCasterOrigin = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint m_nHitCount = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_SeaSickness {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
    public const nint m_flMovespeedBonus = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Tidebringer {
    public const nint m_bTidebringerAttack = 0x1318; // bool
    public const nint cleave_starting_width = 0x131C; // int32
    public const nint cleave_ending_width = 0x1320; // int32
    public const nint cleave_distance = 0x1324; // int32
    public const nint damage_bonus = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint cleave_damage = 0x1330; // int32
    public const nint m_bIgnoreCooldown = 0x1334; // bool
    public const nint m_bDreadPirate = 0x1335; // bool
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent {
    public const nint flIntervalThinkTime = 0x1318; // float32
    public const nint torrent_damage = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
    public const nint m_flStartZ = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_bTorrentStorm = 0x132C; // bool
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Storm {
    public const nint torrent_min_distance = 0x1318; // int32
    public const nint torrent_max_distance = 0x131C; // int32
    public const nint m_iExplosionQuadrant = 0x1320; // int32
    public const nint m_vPosition = 0x1324; // Vector
}

public static class CDOTA_Modifier_AghsFort_Kunkka_Torrent_Thinker {
    public const nint m_bIsSquall = 0x1318; // bool
    public const nint m_bIsSeaLegs = 0x1319; // bool
    public const nint m_flRadius = 0x131C; // float32
    public const nint m_bShowEnemies = 0x1320; // bool
    public const nint m_bTorrentStorm = 0x1321; // bool
    public const nint m_flDelay = 0x1324; // float32
    public const nint m_flFireTime = 0x1328; // float32
    public const nint m_bForcePosition = 0x132C; // bool
    public const nint m_vStartPosition = 0x1330; // Vector
    public const nint m_vEndPosition = 0x133C; // Vector
    public const nint m_nPercentChanceOfGhostShip = 0x1348; // int32
    public const nint m_hTarget = 0x134C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot {
    public const nint armour_increase = 0x1318; // float32
    public const nint speed_increase_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_SeaLegs_Thinker {
    public const nint m_vLastPosition = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_bIsReflection = 0x1324; // bool
    public const nint m_hEntity = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Lich_ChainFrost_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Chain_Frost_Thinker {
    public const nint m_nDamageToHeroes = 0x1318; // int32
    public const nint m_nHeroesKilled = 0x131C; // int32
    public const nint m_nJumps = 0x1320; // int32
    public const nint m_hTarget = 0x1324; // CHandle< CBaseEntity >
    public const nint m_hAvoidTarget = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostNova_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
    public const nint is_primary_target = 0x1320; // bool
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield_Magic_Resistance_Debuff {
    public const nint magic_resist_reduction = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Lich_FrostShield_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Ice_Spire {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_Timer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_AghsFort_Lich_Ice_Spire_Debuff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze {
    public const nint movement_speed = 0x1318; // int32
    public const nint mana_drain = 0x131C; // int32
    public const nint m_flIntervalRate = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Self {
    public const nint mana_drain = 0x1318; // int32
    public const nint m_flIntervalRate = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Summon {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint base_damage_outgoing_percentage = 0x131C; // int32
    public const nint m_bFirstTick = 0x1320; // bool
}

public static class CDOTA_Modifier_AghsFort_Lifestealer_Enraged_Pulse {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint m_flBeamStun = 0x132C; // float32
    public const nint vPosition = 0x1330; // Vector
    public const nint m_bAreaTarget = 0x133C; // bool
    public const nint m_bMoonWell = 0x133D; // bool
    public const nint m_iTickCount = 0x1340; // int32
    public const nint m_nMoonlightFXIndex = 0x1344; // ParticleIndex_t
    public const nint m_HitTargets = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_HitAllies = 0x1360; // CUtlVector< CHandle< CBaseEntity > >
    public const nint beam_interval = 0x1378; // float32
    public const nint m_flInterval = 0x137C; // float32
}

public static class CDOTA_Modifier_AghsFort_Luna_Eclipse_IntoTheNight_Aura {
    public const nint m_nMoveSpeed = 0x1318; // int32
    public const nint m_nEvasion = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_GlaiveShield {
    public const nint m_bSpiritsExplode = 0x1318; // bool
    public const nint hit_radius = 0x131C; // int32
    public const nint rotate_range = 0x1320; // int32
    public const nint glaive_movement_rate = 0x1324; // int32
    public const nint replenish_time = 0x1328; // float32
    public const nint m_flRotation = 0x132C; // float32
    public const nint m_flGlaiveRadius = 0x1330; // float32
    public const nint m_flNextSpawn = 0x1334; // GameTime_t
    public const nint m_bPaused = 0x1338; // bool
}

public static class CDOTA_Modifier_AghsFort_Luna_LucentBeam_Moonglow {
    public const nint bonus_aspd = 0x1318; // int32
    public const nint lifesteal = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura {
    public const nint bonus_damage = 0x1318; // int32
    public const nint night_bonus_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura_MoonShield {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Active_Buff {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Leap {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint leap_distance = 0x1344; // int32
    public const nint leap_speed = 0x1348; // float32
    public const nint leap_acceleration = 0x134C; // float32
    public const nint leap_radius = 0x1350; // int32
    public const nint search_range = 0x1354; // int32
    public const nint damage_multiplier = 0x1358; // float32
    public const nint m_flPowerLevelPct = 0x135C; // float32
    public const nint m_bLaunched = 0x1360; // bool
    public const nint m_vecHitEntities = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_LunarRemnant {
    public const nint m_nBonusDamage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonMark {
    public const nint spell_resist_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonShield_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Moonfright {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort_Luna_Lunar_Grace {
    public const nint attack_speed = 0x1318; // int32
    public const nint night_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive {
    public const nint range = 0x1318; // int32
    public const nint bounces = 0x131C; // int32
    public const nint damage_reduction_percent = 0x1320; // int32
    public const nint bounce_pct = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive_FX {
    public const nint m_nMoonGlaiveFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive_Knockback {
    public const nint attack_speed_slow = 0x1318; // int32
    public const nint move_speed_slow_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Luna_MoonGlaive_Knockback_Bounce {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bTargetTeleported = 0x133D; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
    public const nint stun_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_AghsFort_Magnataur_Skewer_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Mars_Gods_Rebuke_Strength_Buff {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Omniknight_Repel_Damage_Instance_Refraction {
    public const nint damage_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FireSpiritBurn {
    public const nint tick_interval = 0x1318; // float32
    public const nint attackspeed_slow = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FireSpiritCount {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint spirit_count = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack {
    public const nint radius_pct_as_length = 0x1318; // float32
    public const nint width = 0x131C; // int32
    public const nint linger_duration = 0x1320; // float32
    public const nint m_fLength = 0x1324; // float32
    public const nint m_nBeamFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x132C; // CHandle< CBaseEntity >
    public const nint m_flLastHit = 0x1330; // GameTime_t
    public const nint m_vecBurningTrees = 0x1338; // CUtlVector< CBaseEntity* >
    public const nint m_hTreeFireThinker = 0x1350; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack_TreeFire_Thinker {
    public const nint m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< CBaseEntity >, GameTime_t > >
    public const nint m_bCleanupWhenEmpty = 0x1330; // bool
}

public static class CDOTA_Modifier_AghsFort_Phoenix_IcarusDive {
    public const nint m_vSource = 0x1318; // Vector
    public const nint m_vTarget = 0x1324; // Vector
    public const nint m_vDirection = 0x1330; // Vector
    public const nint m_angDirection = 0x133C; // QAngle
    public const nint m_flCurrentTime = 0x1348; // float32
    public const nint dash_length = 0x134C; // int32
    public const nint dash_width = 0x1350; // int32
    public const nint hit_radius = 0x1354; // int32
    public const nint burn_duration = 0x1358; // float32
    public const nint dive_duration = 0x135C; // float32
    public const nint damage_per_second = 0x1360; // int32
    public const nint m_vecHitEntities = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bSavedAlly = 0x1380; // bool
}

public static class CDOTA_Modifier_AghsFort_Phoenix_IcarusDiveBurn {
    public const nint burn_tick_interval = 0x1318; // float32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_SecondSun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint attacks_to_kill = 0x1320; // int32
    public const nint captain_attack_value = 0x1324; // int32
    public const nint boss_attack_value = 0x1328; // int32
    public const nint m_nAttackCount = 0x132C; // int32
    public const nint m_nRadius = 0x1330; // int32
    public const nint m_fSecondSunRadiusPct = 0x1334; // float32
    public const nint creep_attacks_count = 0x1338; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint attacks_to_kill = 0x1320; // int32
    public const nint captain_attack_value = 0x1324; // int32
    public const nint boss_attack_value = 0x1328; // int32
    public const nint m_hSecondaryTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_bHasExpelCoreShard = 0x1330; // bool
    public const nint m_nAttackCount = 0x1334; // int32
    public const nint creep_attacks_count = 0x1338; // int32
}

public static class CDOTA_Modifier_AghsFort_Phoenix_SunRay {
    public const nint hp_cost_pct = 0x1318; // float32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint m_flCurrentTime = 0x133C; // float32
    public const nint m_flAccumulatedSelfDamage = 0x1340; // float32
    public const nint m_bMovingForward = 0x1344; // bool
    public const nint m_bTurningFast = 0x1345; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint hp_perc_heal = 0x134C; // float32
    public const nint m_nBeamFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1354; // CHandle< CBaseEntity >[8]
    public const nint m_hBeamEnd = 0x1374; // CHandle< CBaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1378; // bool
    public const nint m_hBeamEndSound = 0x137C; // CHandle< CBaseEntity >
    public const nint m_vecDispelledAllies = 0x1380; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Phoenix_Sun_Debuff {
    public const nint damage_per_sec = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint aura_radius = 0x1320; // int32
    public const nint m_fRadius = 0x1324; // float32
    public const nint m_fSecondSunRadiusPct = 0x1328; // float32
    public const nint m_fNextDamageTime = 0x132C; // GameTime_t
    public const nint m_fLastThinkTime = 0x1330; // GameTime_t
    public const nint m_bHasHorizonAbility = 0x1334; // bool
    public const nint m_nHorizonPushDistance = 0x1338; // int32
    public const nint m_fHorizonPushInterval = 0x133C; // float32
    public const nint m_fNextHorizonPushTime = 0x1340; // GameTime_t
    public const nint m_nHorizonFX = 0x1344; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_PlayerTransform {
    public const nint m_nCourierItemId = 0x1318; // itemid_t
    public const nint m_ModelNameOfDisguise = 0x1320; // CUtlString
    public const nint m_nMoveSpeed = 0x1330; // int32
    public const nint m_nDisguisedSpeed = 0x1334; // int32
    public const nint m_nDisguiseEffectIndex = 0x1338; // ParticleIndex_t
    public const nint m_hCourier = 0x133C; // CHandle< CBaseEntity >
    public const nint m_bIsFlyingCourier = 0x1340; // bool
    public const nint s_pszDonkeyDisguise = 0x1348; // char*
    public const nint invul_duration = 0x1350; // float32
    public const nint m_bParticlesSpawned = 0x1354; // bool
}

public static class CDOTA_Modifier_AghsFort_PoisonNova_Creature_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1338; // int32
    public const nint radius = 0x133C; // int32
    public const nint start_radius = 0x1340; // int32
    public const nint duration = 0x1344; // float32
}

public static class CDOTA_Modifier_AghsFort_QueenOfPain_ShadowStrike {
    public const nint duration_damage = 0x1318; // int32
    public const nint duration_heal = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint m_SlowInterval = 0x1328; // CountdownTimer
    public const nint m_flSlowStep = 0x1340; // float32
    public const nint m_flSlowStepStep = 0x1344; // float32
}

public static class CDOTA_Modifier_AghsFort_Ravage_Potion {
    public const nint damage = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_bDamageApplied = 0x1324; // bool
}

public static class CDOTA_Modifier_AghsFort_RestorativeFlower {
    public const nint radius = 0x1318; // int32
    public const nint heal = 0x131C; // int32
    public const nint vision_radius = 0x1320; // int32
    public const nint vision_duration = 0x1324; // float32
    public const nint model_scale = 0x1328; // int32
    public const nint bExploding = 0x132C; // bool
    public const nint stun_duration = 0x1330; // float32
    public const nint m_nFXAmbient = 0x1334; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_RockGolem_Avalanche {
    public const nint m_pHeroesHit = 0x1318; // CUtlVector< CDOTA_BaseNPC* >
    public const nint radius = 0x1330; // int32
    public const nint total_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint tick_count = 0x133C; // int32
    public const nint m_damage = 0x1340; // int32
    public const nint m_nTicks = 0x1344; // int32
}

public static class CDOTA_Modifier_AghsFort_ShadowShaman_Shackles {
    public const nint tick_interval = 0x1318; // float32
    public const nint total_damage = 0x131C; // float32
    public const nint channel_time = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_ShadowWaveEffectPotion {
    public const nint m_iCurJumpCount = 0x1318; // int32
    public const nint m_vCurTargetLoc = 0x131C; // Vector
    public const nint m_hHitEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_fProcChance = 0x1340; // float32
    public const nint m_nCastRange = 0x1344; // int32
    public const nint m_nBounceRadius = 0x1348; // int32
    public const nint m_nDamageRadius = 0x134C; // int32
    public const nint m_nDamage = 0x1350; // int32
    public const nint m_nMaxTargets = 0x1354; // int32
}

public static class CDOTA_Modifier_AghsFort_Shadow_Demon_Shadow_Poison {
    public const nint stack_damage = 0x1318; // float32
    public const nint bonus_stack_damage = 0x131C; // float32
    public const nint max_multiply_stacks = 0x1320; // int32
    public const nint release_at_max_stacks = 0x1324; // int32
    public const nint m_nFXStackIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot {
    public const nint proc_chance = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
    public const nint knockback_distance = 0x1324; // int32
    public const nint m_fLastStunProcTime = 0x1328; // GameTime_t
    public const nint m_vHeadshotRecords = 0x1330; // CUtlVector< int16 >
    public const nint m_vHeadshotAssassinateRecords = 0x1348; // CUtlVector< int16 >
    public const nint m_nCritPct = 0x1360; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot_ArmorReduction {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Headshot_Slow {
    public const nint slow = 0x1318; // int32
    public const nint slow_vs_considered_hero = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_AttackSpeed {
    public const nint value = 0x1318; // int32
    public const nint value2 = 0x131C; // float32
    public const nint m_nAttackSpeedBonus = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Slow {
    public const nint m_fAccumulatedDamage = 0x1318; // float32
    public const nint shrapnel_damage = 0x131C; // int32
    public const nint slow_movement_speed = 0x1320; // int32
    public const nint miss_chance = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint damage_delay = 0x1320; // float32
    public const nint m_nShrapnelPct = 0x1324; // int32
    public const nint m_bExploded = 0x1328; // bool
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint active_attack_range_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_ArmorReduction {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_Bonus {
    public const nint slow = 0x1318; // int32
    public const nint m_nAttackSpeedPerAttack = 0x131C; // int32
    public const nint m_nShrapnelPct = 0x1320; // int32
    public const nint m_bNoCollision = 0x1324; // bool
    public const nint m_vecArtilleryEnemies = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_HopBackwards {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bDamageApplied = 0x133D; // bool
    public const nint m_bTargetTeleported = 0x133E; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_AghsFort_Sniper_TakeAim_RapidFire {
    public const nint value2 = 0x1318; // int32
    public const nint value3 = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Dawnbreaker_Solar_Guardian_DeathOfAStar_Active {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bPassive = 0x131C; // bool
    public const nint m_flCooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride {
    public const nint grab_radius = 0x1318; // int32
    public const nint m_hLoadedUnit = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride_LoadedUnit {
    public const nint m_hMissile = 0x1318; // CHandle< CDOTA_BaseNPC >
    public const nint hit_radius = 0x131C; // int32
    public const nint timeout_duration = 0x1320; // float32
    public const nint damage = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Magnataur_Shockwave_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Omniknight_Purification_Cooldown_Reduction {
    public const nint cooldown_reduction_per_hit = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_PhantomAssassin_CoupDeGrace_BloodyDebuff {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_FireSpirits_Artillery_Carry {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_vDirection = 0x131C; // Vector
    public const nint unit_position_offset = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Ally {
    public const nint m_hSaviorEnt = 0x1318; // CHandle< CBaseEntity >
    public const nint ally_position_offset = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Invis {
    public const nint duration = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_Special_Phoenix_SunRay_GammaRay_Slow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_QueenOfPain_Blink_AttackSpeed {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Autoattack {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Incoming_Damage_Reduction {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Templar_Assassin_PsiBlades_AutoAttack {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_iAttackRecord = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Undying_ConsumeZombies_Buff {
    public const nint bonus_move_speed_per_stack = 0x1318; // int32
    public const nint bonus_attack_speed_per_stack = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_Armor {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_AttackSpeed {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt_Armor {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_ImpactSlow {
    public const nint move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Special_WitchDoctor_DeathWard_Damage_Resist {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion_Thinker {
    public const nint m_fDamage = 0x1318; // float32
    public const nint m_fLastRadius = 0x131C; // float32
    public const nint m_fCurRadius = 0x1320; // float32
    public const nint m_fLastThink = 0x1324; // GameTime_t
    public const nint m_bContracting = 0x1328; // bool
    public const nint m_ViewerTimer = 0x1330; // CountdownTimer
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1368; // int32
    public const nint radius = 0x136C; // int32
}

public static class CDOTA_Modifier_AghsFort_StonehallGeneral_OverwhelmingOdds_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint max_steps = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint m_nNumSteps = 0x1324; // int32
    public const nint m_nRadiusStep = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint m_vDir = 0x1330; // Vector
}

public static class CDOTA_Modifier_AghsFort_SwampSickness {
    public const nint slow_percent = 0x1318; // int32
    public const nint m_bInRiver = 0x131C; // bool
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Thinker {
    public const nint m_fProcChance = 0x1318; // float32
    public const nint m_nRadius = 0x131C; // int32
    public const nint m_nMovespeedBonus = 0x1320; // int32
    public const nint m_fStunDuration = 0x1324; // float32
    public const nint m_fSlowDuration = 0x1328; // float32
    public const nint m_fDelay = 0x132C; // float32
    public const nint m_nTorrentDamage = 0x1330; // int32
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent {
    public const nint m_nTorrentDamage = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent_Slow {
    public const nint m_nMovespeedBonus = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Tower_BlastWave_Thinker {
    public const nint damage_pct = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
}

public static class CDOTA_Modifier_AghsFort_TrapRoom_Hookshot {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x131C; // Vector
    public const nint speed = 0x1330; // int32
    public const nint duration = 0x1334; // float32
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise {
    public const nint m_RevealTimer = 0x1318; // CountdownTimer
    public const nint m_InvisAttackTimer = 0x1330; // CountdownTimer
    public const nint m_CooldownTimer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Root {
    public const nint m_iEntangleDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Tree_Walking {
    public const nint movement_bonus = 0x1318; // int32
    public const nint regen_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_Buff {
    public const nint str_stolen = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_BuffCounter {
    public const nint m_fStrengthStolen = 0x1318; // float32
    public const nint model_scale_per_strength = 0x131C; // float32
    public const nint model_scale_max = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Decay_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint extra_decays = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint decay_strength_percent = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem {
    public const nint str_percentage = 0x1318; // int32
    public const nint movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem_PlagueAura {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_FleshGolem_Slow {
    public const nint damage_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_SoulRipWard {
    public const nint ward_radius = 0x1318; // int32
    public const nint explosion_damage = 0x131C; // int32
    public const nint taunt_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_SoulRip_Share_Strength {
    public const nint str_gain = 0x1318; // float32
    public const nint model_scale = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Bunker {
    public const nint m_hLoadedUnit = 0x1318; // CHandle< CBaseEntity >
    public const nint heal_percent_per_tick = 0x131C; // float32
    public const nint tombstone_grab_radius = 0x1320; // int32
    public const nint m_nBunkerEnterFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_HP {
    public const nint tombstone_health = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Aura {
    public const nint radius = 0x1318; // int32
    public const nint zombie_interval = 0x131C; // float32
    public const nint spawn_at_parent = 0x1320; // int32
    public const nint remove_on_death = 0x1324; // int32
    public const nint knockback_duration = 0x1328; // float32
    public const nint knockback_distance = 0x132C; // int32
    public const nint knockback_height = 0x1330; // int32
    public const nint spawn_distance = 0x1334; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathlust {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike {
    public const nint radius = 0x1318; // int32
    public const nint health_threshold_pct = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint m_hTombstoneSourceAbility = 0x1324; // CHandle< CDOTABaseAbility >
    public const nint m_hChaseUnit = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow {
    public const nint slow = 0x1318; // int32
    public const nint m_flDecrementTime = 0x131C; // float32
}

public static class CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Earthshock {
    public const nint m_nMissChance = 0x1318; // int32
    public const nint m_bAddOverpower = 0x131C; // bool
    public const nint m_flOverpowerDuration = 0x1320; // float32
    public const nint m_nNumOverpowerAttacks = 0x1324; // int32
    public const nint movement_slow = 0x1328; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Earthshock_DeepInvis {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_AghsFort_Ursa_Earthshock_Move {
    public const nint hop_duration = 0x1318; // float32
    public const nint hop_height = 0x131C; // int32
    public const nint hop_distance = 0x1320; // int32
    public const nint impact_damage = 0x1324; // int32
    public const nint m_flStartZ = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_flJumpDuration = 0x1330; // float32
    public const nint m_flJumpHeight = 0x1334; // float32
    public const nint m_vTargetHorizontalDirection = 0x1338; // Vector
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_AghsFort_Ursa_Enrage_Magic_Immunity {
    public const nint m_nModelScale = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint bonus_reset_time = 0x131C; // float32
    public const nint bonus_reset_time_roshan = 0x1320; // float32
    public const nint max_swipe_stack = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes_Damage_Increase {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint m_nArmorReductionPerStack = 0x131C; // int32
    public const nint m_nLifestealPerStack = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint m_nEarthshockAttacks = 0x131C; // int32
    public const nint m_nOverpowerCritMultiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_Ursa_Overpower_Evasion {
    public const nint value2 = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Venomancer_PoisonSting {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint m_nTicksRemaining = 0x1320; // int32
    public const nint m_flAttackDamage = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< CBaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint m_fMovementSpeed = 0x1320; // float32
    public const nint m_hPullTarget = 0x1324; // CHandle< CDOTA_BaseNPC >
    public const nint think_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Unit {
    public const nint m_vFacingDir = 0x1318; // Vector
    public const nint m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_WatchThinker {
    public const nint remnant_watch_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint pop_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1340; // int32
    public const nint radius = 0x1344; // int32
    public const nint damage = 0x1348; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< CBaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_PhantomAttack_Crit {
    public const nint m_nCritPercent = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint m_fMovementSpeed = 0x1320; // float32
    public const nint m_vPullTarget = 0x1324; // Vector
    public const nint m_vFacingDir = 0x1330; // Vector
    public const nint think_interval = 0x133C; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Push {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_nRemnantProjectileID = 0x1324; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Unit {
    public const nint m_bActivated = 0x1318; // bool
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_vecWatchPositions = 0x1328; // CUtlVector< Vector >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint m_fVoidMarkPct = 0x131C; // float32
    public const nint movement_slow_pct = 0x1320; // int32
    public const nint pop_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Vacuum_Motion {
    public const nint m_fVacuumSpeed = 0x1318; // float32
    public const nint m_fStunDuration = 0x131C; // float32
    public const nint m_vPullLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
    public const nint damage = 0x13B8; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase_Ally {
    public const nint damage_radius = 0x1318; // int32
    public const nint debuff_duration = 0x131C; // float32
    public const nint destination_fx_radius = 0x1320; // int32
    public const nint damage = 0x1324; // int32
    public const nint m_vExitPos = 0x1328; // Vector
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Cadence {
    public const nint m_fSpellAmp = 0x1318; // float32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EnemiesHit = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AlliesHit = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1358; // int32
    public const nint radius = 0x135C; // int32
    public const nint damage = 0x1360; // int32
}

public static class CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_SpellAmped {
    public const nint m_nSpellAmp = 0x1318; // int32
}

public static class CDOTA_Modifier_AghsFort_Watch_Tower {
    public const nint m_nState = 0x1318; // TowerState_t
    public const nint m_flYaw = 0x131C; // float32
    public const nint m_nCaptureDuration = 0x1320; // int32
    public const nint m_flEffectiveCaptureStartTime = 0x1324; // GameTime_t
    public const nint m_nCapturingPlayerCount = 0x1328; // int32
    public const nint m_flCaptureProgress = 0x132C; // float32
    public const nint m_iCapturingTeam = 0x1330; // int32
    public const nint m_nFxOutpostAmbient = 0x1334; // ParticleIndex_t
    public const nint m_flDestroyTime = 0x1338; // GameTime_t
    public const nint m_flAutoChannelCompleteTime = 0x133C; // GameTime_t
    public const nint m_bAscensionLevelPicker = 0x1340; // bool
    public const nint m_nEliteChallengeLevel = 0x1344; // int32
    public const nint m_strNextRoomName = 0x1348; // CUtlString
    public const nint m_strNextEncounterName = 0x1350; // CUtlString
    public const nint m_bStartedBeamFacing = 0x1358; // bool
}

public static class CDOTA_Modifier_AghsFort_Waveblaster_Leap {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint leap_speed = 0x1344; // float32
    public const nint leap_acceleration = 0x1348; // float32
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura {
    public const nint aura_disable_range = 0x1318; // int32
    public const nint aura_range = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint m_nBonusFactor = 0x1324; // int32
    public const nint m_fLastEnableTime = 0x1328; // GameTime_t
    public const nint m_nFxIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura_Bonus {
    public const nint aura_agility_multiplier = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot {
    public const nint arrow_width = 0x1318; // int32
    public const nint arrow_speed = 0x131C; // float32
    public const nint range = 0x1320; // int32
    public const nint wave_count = 0x1324; // int32
    public const nint wave_delay = 0x1328; // float32
    public const nint arrow_count_per_wave = 0x132C; // int32
    public const nint arrow_delay = 0x1330; // float32
    public const nint per_arrow_angle = 0x1334; // float32
    public const nint m_fYawOffset = 0x1338; // float32
    public const nint m_iWaveIndex = 0x133C; // int32
    public const nint m_iArrowIndex = 0x1340; // int32
    public const nint m_vTarget = 0x1344; // Vector
    public const nint m_vWaveAngle = 0x1350; // QAngle
    public const nint m_flInterval = 0x135C; // float32
    public const nint m_flNextThink = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_Buff {
    public const nint damage_percent = 0x1318; // int32
    public const nint knockback_distance = 0x131C; // int32
    public const nint knockback_duration = 0x1320; // float32
    public const nint move_speed_percent = 0x1324; // int32
    public const nint max_move_speed_percent = 0x1328; // int32
    public const nint model_scale = 0x132C; // int32
    public const nint max_model_scale = 0x1330; // int32
    public const nint m_bActive = 0x1334; // bool
}

public static class CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_SideLine {
    public const nint m_iWaveIndex = 0x1318; // int32
    public const nint m_fYawOffset = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_ArcWardenBoss_SparkWraith_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint hero_damage = 0x1320; // int32
    public const nint acceleration = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_distance = 0x132C; // int32
    public const nint pre_flight_time = 0x1330; // float32
    public const nint stun_duration = 0x1334; // float32
    public const nint m_nMissileDamage = 0x1338; // int32
    public const nint m_nTeamNumber = 0x133C; // int32
    public const nint speed = 0x1348; // float32
    public const nint m_hAttachTarget = 0x134C; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1350; // Vector
    public const nint m_EnemyVision = 0x1360; // CountdownTimer
    public const nint m_MoveTime = 0x1378; // CountdownTimer
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Burn {
    public const nint burn_damage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Thinker {
    public const nint wave_damage = 0x1318; // int32
    public const nint wave_count = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint summon_count = 0x1324; // int32
    public const nint wave_interval = 0x1328; // float32
    public const nint burn_duration = 0x132C; // float32
    public const nint first_wave_delay = 0x1330; // float32
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint m_hPortal = 0x1334; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1338; // Vector
    public const nint m_flTotalTime = 0x1344; // float32
    public const nint m_flElapsedTimePortion = 0x1348; // float32
    public const nint animation_rate = 0x134C; // float32
    public const nint stop_distance = 0x1350; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Enfeeble_DamageStealBuff {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Enfeeble_Effect {
    public const nint damage_reduction = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
    public const nint cast_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Bane_FiendsGrip {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_boost_lifesteal_multiplier = 0x131C; // int32
    public const nint fiend_grip_damage = 0x1320; // int32
    public const nint fiend_grip_spread_radius = 0x1324; // int32
    public const nint fiend_grip_tick_interval = 0x1328; // float32
    public const nint m_flLastSpreadTime = 0x132C; // GameTime_t
    public const nint m_bThinkerSource = 0x1330; // bool
    public const nint m_bRequiresChanneling = 0x1331; // bool
    public const nint m_bPrimaryGrip = 0x1332; // bool
}

public static class CDOTA_Modifier_Aghsfort_Bane_FiendsGrip_Cast_Illusion {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Bane_Nightmare {
    public const nint m_bSweetDreams = 0x1318; // bool
    public const nint m_bConfusion = 0x1319; // bool
    public const nint m_bSelfBreakAvailable = 0x131A; // bool
    public const nint m_bNoStatusEffect = 0x131B; // bool
    public const nint m_nSource = 0x131C; // int32
    public const nint animation_rate = 0x1320; // float32
    public const nint m_flNextNightmareDamageTime = 0x1324; // GameTime_t
    public const nint m_flAccumNightmareDamage = 0x1328; // float32
    public const nint movespeed_pct = 0x132C; // int32
    public const nint attack_speed = 0x1330; // int32
    public const nint model_scale = 0x1334; // int32
    public const nint m_hConfusionAttackTarget = 0x1338; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Bane_Nightmare_Invulnerable {
    public const nint m_nMoveSpeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Clinkz_BurningArmy_Entrenchment {
    public const nint m_fSlowPct = 0x1318; // float32
    public const nint radius = 0x131C; // float32
    public const nint think_interval = 0x1320; // float32
    public const nint linger_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint travel_speed_pct = 0x1320; // int32
    public const nint m_nMaxRange = 0x1324; // int32
    public const nint m_vStartPoint = 0x1328; // Vector
    public const nint m_vLastTrailThinkerLocation = 0x1334; // Vector
    public const nint m_vEndPointShard = 0x1340; // Vector
    public const nint m_nStatusFXIndex = 0x134C; // ParticleIndex_t
    public const nint flare_radius = 0x1350; // int32
    public const nint bHasStartedBurning = 0x1354; // bool
    public const nint flare_debuff_duration = 0x1358; // float32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint trail_duration = 0x131C; // float32
    public const nint flare_radius = 0x1320; // int32
    public const nint m_nProjectileHandle = 0x1324; // int32
    public const nint m_hHavenThinker = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge {
    public const nint move_slow = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint m_hInflictor = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge_Thinker {
    public const nint flare_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_hInflictor = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Attack_Bonus {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Caster {
    public const nint swipe_radius = 0x1318; // int32
    public const nint swipe_damage = 0x131C; // int32
    public const nint smash_radius = 0x1320; // int32
    public const nint smash_damage = 0x1324; // int32
    public const nint m_nCurrentSpeed = 0x1328; // int32
    public const nint flSwipeInterval = 0x132C; // float32
    public const nint m_flNextHit = 0x1330; // GameTime_t
    public const nint iCurrentAttack = 0x1334; // int32
    public const nint total_attacks = 0x1338; // int32
    public const nint smash_stun_duration = 0x133C; // float32
    public const nint sweep_stun_duration = 0x1340; // float32
    public const nint m_bHasCompletedMove = 0x1344; // bool
    public const nint duration = 0x1348; // float32
    public const nint m_vTargetHorizontalDirection = 0x134C; // Vector
    public const nint smash_distance_from_hero = 0x1358; // int32
    public const nint animation_rate = 0x135C; // float32
    public const nint turn_rate = 0x1360; // float32
    public const nint m_flFacingTarget = 0x1364; // float32
    public const nint m_bSuncrusher = 0x1368; // bool
    public const nint m_flDistanceSinceStandAblazeThinker = 0x136C; // float32
    public const nint m_flDistancePerStandAblazeThinker = 0x1370; // float32
    public const nint m_hCelestialHammerForFire = 0x1374; // CHandle< CDOTABaseAbility >
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Slow {
    public const nint swipe_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Smash_Stun {
    public const nint damage = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint attack_count = 0x131C; // int32
    public const nint m_bShouldIncrement = 0x1320; // bool
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_Attack_Buff {
    public const nint m_bIsBuffedAttack = 0x1318; // bool
    public const nint m_bSunSentinel = 0x1319; // bool
    public const nint heal_pct = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint heal_radius = 0x1324; // int32
    public const nint heal_from_creeps = 0x1328; // int32
    public const nint allied_healing_pct = 0x132C; // int32
    public const nint m_nSmashDamage = 0x1330; // int32
    public const nint m_nCounterOrbitalChance = 0x1334; // int32
    public const nint m_vecHeroesToHeal = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flTotalToHeal = 0x1350; // float32
    public const nint m_bCounterOrbitalProcessed = 0x1354; // bool
    public const nint m_bIsCounterOrbitalSmash = 0x1355; // bool
    public const nint m_bBrightFoundryProcessed = 0x1356; // bool
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_SolarBattery {
    public const nint move_speed_pct = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint m_nBonusMovementSpeedPct = 0x1320; // int32
    public const nint m_nBonusAttackSpeed = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Disable {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Evasion {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Thinker {
    public const nint pulse_interval = 0x1318; // float32
    public const nint iEffectRadius = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint scepter_heal = 0x1328; // int32
    public const nint m_hFollowTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_hInflictor = 0x1330; // CHandle< CBaseEntity >
    public const nint m_flNextPulseTime = 0x1334; // GameTime_t
    public const nint m_nThinkerFXIndex = 0x1338; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse {
    public const nint m_PositionIndex = 0x1318; // Vector[9]
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Attack_Buff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Travel_Damage {
    public const nint damage = 0x1318; // float32
    public const nint max_ticks = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_KineticField {
    public const nint radius = 0x1318; // int32
    public const nint m_vOriginLoc = 0x131C; // Vector
    public const nint m_bCanBeAffected = 0x1328; // bool
    public const nint m_bTruesight = 0x1329; // bool
    public const nint intellect_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_KineticFieldThinker {
    public const nint radius = 0x1318; // int32
    public const nint formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm {
    public const nint miss_rate = 0x1318; // int32
    public const nint movement_speed_reduction = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint m_bHasScepter = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStormThinker {
    public const nint m_nCurrentPulse = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_max = 0x1320; // int32
    public const nint pulses = 0x1324; // int32
    public const nint duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
    public const nint move_slow_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike {
    public const nint strike_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint strike_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether {
    public const nint m_bInManaGained = 0x1318; // bool
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint hStunnedEntities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint slow_duration = 0x1338; // float32
    public const nint movespeed = 0x133C; // int32
    public const nint self_bonus = 0x1340; // int32
    public const nint m_bIsInRange = 0x1344; // bool
    public const nint radius = 0x1348; // int32
    public const nint latch_distance = 0x134C; // int32
    public const nint m_flHealthHealed = 0x1350; // float32
    public const nint m_flManaHealed = 0x1354; // float32
    public const nint tether_heal_amp = 0x1358; // float32
    public const nint m_flHealMessageTime = 0x135C; // GameTime_t
    public const nint m_flManaMessageTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Haste {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint health_regen = 0x1320; // int32
    public const nint status_resist = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down {
    public const nint slow_duration_first = 0x1318; // int32
    public const nint slow_duration_second = 0x131C; // int32
    public const nint damage_first = 0x1320; // int32
    public const nint damage_second = 0x1324; // int32
    public const nint power = 0x1328; // float32
    public const nint radius = 0x132C; // int32
    public const nint slow_first = 0x1330; // float32
    public const nint slow_second = 0x1334; // float32
    public const nint m_bDelayed = 0x1338; // bool
    public const nint m_bHalfDamage = 0x1339; // bool
    public const nint m_bFirstStrike = 0x133A; // bool
    public const nint m_hInflictorAbility = 0x133C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon {
    public const nint max_attacks = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint max_targets = 0x132C; // int32
    public const nint m_bFirstStrike = 0x1330; // bool
    public const nint m_bShouldFireMissiles = 0x1331; // bool
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon_Scepter {
    public const nint fire_rate = 0x1318; // float32
    public const nint scepter_radius = 0x131C; // int32
    public const nint m_iAttackRecord = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Homing_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint acceleration = 0x1320; // int32
    public const nint pre_flight_time = 0x1324; // float32
    public const nint stun_duration = 0x1328; // float32
    public const nint m_nMissileDamage = 0x132C; // int32
    public const nint damage = 0x1330; // int32
    public const nint m_nTeamNumber = 0x1334; // int32
    public const nint speed = 0x1340; // float32
    public const nint m_flFacingTarget = 0x1344; // float32
    public const nint movement_turn_rate = 0x1348; // int32
    public const nint m_nPower = 0x134C; // int32
    public const nint m_hAttachTarget = 0x1350; // CHandle< CBaseEntity >
    public const nint m_MoveTime = 0x1358; // CountdownTimer
}

public static class CDOTA_Modifier_Aghsfort_Gyrocopter_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint m_nPower = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Hoodwink_ArcingBoomerang {
    public const nint m_vLeftControl = 0x1318; // Vector
    public const nint m_vRightControl = 0x1324; // Vector
    public const nint m_vTargetLoc = 0x1330; // Vector
    public const nint m_vOriginalTargetLoc = 0x133C; // Vector
    public const nint m_vSourceLoc = 0x1348; // Vector
    public const nint m_flDuration = 0x1354; // float32
    public const nint m_flDieTime = 0x1358; // GameTime_t
    public const nint m_bReturning = 0x135C; // bool
    public const nint m_nFramesToWait = 0x1360; // int32
    public const nint m_hBoomerang = 0x1364; // CHandle< CBaseEntity >
    public const nint m_nBoomerangFXIndex = 0x1368; // ParticleIndex_t
    public const nint m_nOldBoomerangFXindex = 0x136C; // ParticleIndex_t
    public const nint m_vecUniqueHitList = 0x1370; // CUtlVector< CHandle< CBaseEntity > >
    public const nint radius = 0x1388; // int32
    public const nint spread = 0x138C; // int32
    public const nint damage = 0x1390; // int32
    public const nint min_throw_duration = 0x1394; // float32
    public const nint max_throw_duration = 0x1398; // float32
}

public static class CDOTA_Modifier_Aghsfort_Kunkka_NoQuarter {
    public const nint m_nSpeedBonusPercentage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Ignite {
    public const nint burn_interval = 0x1318; // float32
    public const nint burn_damage = 0x131C; // float32
    public const nint mana_restore = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Movement {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flPushDistance = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Lina_FierySoul {
    public const nint fiery_soul_attack_speed_bonus = 0x1318; // int32
    public const nint fiery_soul_move_speed_bonus = 0x131C; // float32
    public const nint fiery_soul_max_stacks = 0x1320; // int32
    public const nint fiery_soul_stack_duration = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flFierySoulDieTime = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Lina_FierySoul_Active {
    public const nint attack_range_per_stack = 0x1318; // int32
    public const nint m_bShouldReset = 0x131C; // bool
    public const nint m_bIsActive = 0x131D; // bool
    public const nint fiery_soul_attack_speed_bonus = 0x1320; // int32
    public const nint fiery_soul_move_speed_bonus = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Lina_LagunaBlade_Line {
    public const nint vStart = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint damage_delay = 0x1330; // float32
    public const nint m_hMainTarget = 0x1334; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Lina_LightStrikeArray_Thinker {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_iDamage = 0x1330; // int32
    public const nint m_flStunDuration = 0x1334; // float32
    public const nint light_strike_array_damage = 0x1338; // int32
    public const nint light_strike_array_stun_duration = 0x133C; // float32
    public const nint light_strike_array_delay = 0x1340; // float32
    public const nint m_nLSARadius = 0x1344; // int32
    public const nint m_nCount = 0x1348; // int32
    public const nint max_count = 0x134C; // int32
    public const nint iPower = 0x1350; // int32
    public const nint pulse_interval = 0x1354; // float32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Empower {
    public const nint bonus_damage_pct = 0x1318; // int32
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint splash_damage_pct = 0x132C; // float32
    public const nint splash_radius = 0x1330; // int32
    public const nint self_multiplier = 0x1334; // float32
    public const nint lifesteal_pct = 0x1338; // int32
    public const nint m_fLastShockwaveProcTime = 0x133C; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Horn_Toss {
    public const nint air_duration = 0x1318; // float32
    public const nint air_height = 0x131C; // int32
    public const nint travel_distance = 0x1320; // int32
    public const nint m_vDestination = 0x1324; // Vector
    public const nint m_flStartZ = 0x1330; // float32
    public const nint m_flCurTime = 0x1334; // float32
    public const nint m_flJumpDuration = 0x1338; // float32
    public const nint m_flJumpHeight = 0x133C; // float32
    public const nint m_vTargetHorizontalDirection = 0x1340; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_ReversePolarity_Steroid {
    public const nint move_speed_percent = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Shockwave {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Shockwave_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint pull_duration = 0x132C; // float32
    public const nint effective_distance = 0x1330; // float32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Impact {
    public const nint slow_duration = 0x1318; // float32
    public const nint skewer_damage = 0x131C; // int32
    public const nint m_vDirection = 0x1320; // Vector
    public const nint m_flEndTime = 0x132C; // float32
    public const nint m_flCurTime = 0x1330; // float32
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint spear_damage = 0x1320; // int32
    public const nint spear_distance_from_wall = 0x1324; // int32
    public const nint spear_attack_interval = 0x1328; // float32
    public const nint m_hObstruction = 0x1360; // int32
    public const nint m_vecAvoidLocations = 0x1368; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_AnimationAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Buff {
    public const nint health_regen = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_BuffAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Leash {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // float32
    public const nint m_vOriginLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint formation_time = 0x131C; // float32
    public const nint m_flInitialZ = 0x1320; // float32
    public const nint m_flFinalZ = 0x1324; // float32
    public const nint m_bCaughtOne = 0x1338; // bool
    public const nint m_bKilledOne = 0x1339; // bool
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark_Active {
    public const nint redirect_chance = 0x1318; // int32
    public const nint redirect_range = 0x131C; // int32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
    public const nint redirect_speed_penatly = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Bulwark_Soldier_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_GodsRebuke_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Gods_Rebuke {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Mars_Spear_Impale {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_bLatched = 0x131C; // bool
}

public static class CDOTA_Modifier_Aghsfort_Minor_Stats_Upgrade {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_primary_stat = 0x131C; // int32
    public const nint bonus_movespeed = 0x1320; // int32
    public const nint bonus_hp_regen = 0x1324; // int32
    public const nint bonus_armor = 0x1328; // int32
    public const nint bonus_attack_damage = 0x132C; // int32
    public const nint bonus_cast_range = 0x1330; // int32
    public const nint bonus_spell_amp = 0x1334; // int32
    public const nint bonus_health = 0x1338; // int32
    public const nint bonus_mana = 0x133C; // int32
    public const nint bonus_attack_speed = 0x1340; // int32
    public const nint bonus_heal_amp = 0x1344; // int32
    public const nint bonus_mana_regen = 0x1348; // int32
    public const nint bonus_evasion = 0x134C; // int32
    public const nint bonus_magic_resist = 0x1350; // int32
    public const nint bonus_lifesteal = 0x1354; // int32
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura_Effect {
    public const nint move_speed_bonus = 0x1318; // int32
    public const nint attack_speed_bonus = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint attack_damage_pct = 0x1324; // int32
    public const nint death_heal = 0x1328; // int32
    public const nint bIsAllied = 0x132C; // bool
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_GuardianAngel {
    public const nint hp_regen = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint purification_trigger_chance = 0x1320; // int32
    public const nint purification_trigger_cooldown = 0x1324; // float32
    public const nint m_fLastProc = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Omniknight_Repel {
    public const nint damage_reduction = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint bonus_str = 0x1320; // int32
    public const nint damage_increase_outgoing_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_Blur {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_BlurActive {
    public const nint radius = 0x1328; // int32
    public const nint fade_duration = 0x132C; // float32
    public const nint m_bDestroyNext = 0x1330; // bool
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_CoupdeGrace {
    public const nint crit_bonus = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_active = 0x1320; // bool
    public const nint m_nAttackRecord = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_PhantomStrike {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_evasion = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger_Caster {
    public const nint base_damage = 0x1318; // int32
    public const nint attack_factor = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Phoenix_FlameRevenant_Attack_Damage {
    public const nint m_fDamagePerSecond = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nActiveFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_nActiveStatusFXIndex = 0x1324; // ParticleIndex_t
    public const nint flame_revenant_damage_pct = 0x1328; // float32
    public const nint think_interval = 0x132C; // float32
    public const nint move_slow_pct = 0x1330; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition {
    public const nint debuff_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition_Debuff {
    public const nint heal_suppression_pct = 0x1318; // int32
    public const nint armor_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_NoCC {
    public const nint bCanbeMotionControlled = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Knockback {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bTargetTeleported = 0x133D; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Movement {
    public const nint charge_speed = 0x1318; // float32
    public const nint knockback_radius = 0x131C; // int32
    public const nint knockback_distance = 0x1320; // int32
    public const nint knockback_damage = 0x1324; // int32
    public const nint forward_offset = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_flFacingTarget = 0x1330; // float32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Windup {
    public const nint m_flFacingTarget = 0x1318; // float32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_nCrosshairFX = 0x1320; // ParticleIndex_t
    public const nint charge_duration = 0x1324; // float32
    public const nint max_charge_time = 0x1328; // float32
    public const nint turn_rate = 0x132C; // float32
    public const nint base_power = 0x1330; // float32
    public const nint charge_speed = 0x1334; // int32
    public const nint animation_rate = 0x1338; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Push {
    public const nint m_vVelocity = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint animation_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Damage_Tracking {
    public const nint damage_limit = 0x1318; // int32
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_fTotalDamage = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_End_Knockback {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bTargetTeleported = 0x133D; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Ripple_Thinker {
    public const nint ripple_effect_width = 0x1318; // int32
    public const nint ripple_damage = 0x131C; // int32
    public const nint health_damage = 0x1320; // int32
    public const nint ripple_count = 0x1324; // int32
    public const nint total_ripple_circles = 0x1328; // int32
    public const nint radius = 0x132C; // float32
    public const nint ripple_slow_duration = 0x1330; // float32
    public const nint ripple_knockback_duration = 0x1334; // float32
    public const nint m_hGrabbedEnemy = 0x1338; // CHandle< CBaseEntity >
    public const nint m_nPreviewFXIndex = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Self {
    public const nint m_hTarget = 0x1318; // CHandle< CDOTA_BaseNPC >
    public const nint m_vPos = 0x131C; // Vector
    public const nint splash_radius = 0x1328; // int32
    public const nint interval = 0x132C; // float32
    public const nint ministun = 0x1330; // float32
    public const nint m_nCurrentHitCount = 0x1334; // int32
    public const nint total_ripple_circles = 0x1338; // int32
    public const nint ripple_step_distance = 0x133C; // int32
    public const nint ripple_step_distance_offset = 0x1340; // int32
    public const nint health_damage = 0x1344; // float32
    public const nint ripple_duration = 0x1348; // float32
    public const nint ripple_damage = 0x134C; // int32
    public const nint m_vLastRippleOffsets = 0x1350; // CUtlVector< int32 >
    public const nint self_animation_rate = 0x1368; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Crush {
    public const nint m_hRock = 0x1318; // CHandle< CBaseEntity >
    public const nint m_qRotation = 0x131C; // QAngle
    public const nint m_flOldPitch = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_HP {
    public const nint rock_health = 0x1318; // int32
    public const nint rock_visualzdelta = 0x131C; // int32
    public const nint m_bIsCrushing = 0x1320; // bool
    public const nint summon_count = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Thinker {
    public const nint effect_radius = 0x1318; // int32
    public const nint rock_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift {
    public const nint projectile_speed = 0x1318; // int32
    public const nint projectile_speed_increment = 0x131C; // int32
    public const nint projectile_distance = 0x1320; // int32
    public const nint projectile_width = 0x1324; // int32
    public const nint projectiles_per_interval = 0x1328; // int32
    public const nint projectiles_per_interval_increment = 0x132C; // int32
    public const nint initial_spread_angle = 0x1330; // int32
    public const nint angle_offset = 0x1334; // int32
    public const nint iCurrentInterval = 0x1338; // int32
    public const nint splinter_angle = 0x133C; // int32
    public const nint m_LeftHandSmashTimer = 0x1340; // CountdownTimer
    public const nint m_RightHandSmashTimer = 0x1358; // CountdownTimer
    public const nint m_AttackIntervalTimer = 0x1370; // CountdownTimer
    public const nint initial_interval = 0x1388; // float32
    public const nint interval_reduction = 0x138C; // float32
    public const nint min_interval = 0x1390; // float32
    public const nint arm_distance_forward = 0x1394; // int32
    public const nint arm_distance_side = 0x1398; // int32
    public const nint splash_radius = 0x139C; // int32
    public const nint max_split_amount = 0x13A0; // int32
    public const nint m_nCurrentCastCount = 0x13A4; // int32
    public const nint max_projectiles = 0x13A8; // int32
    public const nint m_vecProjectileHandles = 0x13B0; // CUtlVector< int32 >
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift_Damage {
    public const nint tick_damage = 0x1318; // float32
    public const nint damage_ticks = 0x131C; // int32
    public const nint m_nTickAmount = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Vault {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_flEndTime = 0x1320; // GameTime_t
    public const nint m_vStartPosition = 0x1324; // Vector
    public const nint m_vTargetHorizontalDirection = 0x1330; // Vector
    public const nint m_flCurrentTimeHoriz = 0x133C; // float32
    public const nint m_flCurrentTimeVert = 0x1340; // float32
    public const nint m_bInterrupted = 0x1344; // bool
    public const nint m_bStartedLandingSequence = 0x1345; // bool
    public const nint vault_speed = 0x1348; // float32
    public const nint vault_acceleration = 0x134C; // float32
    public const nint vault_radius = 0x1350; // int32
}

public static class CDOTA_Modifier_Aghsfort_PrimalBeast_Pummel_DroppedItem {
    public const nint m_nPreviewFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Primalbeast_Boss_HeavySteps {
    public const nint vLastPos = 0x1318; // Vector
    public const nint flCurrentDistance = 0x1324; // float32
    public const nint step_distance = 0x1328; // int32
    public const nint effect_radius = 0x132C; // int32
    public const nint base_damage = 0x1330; // int32
    public const nint m_hTarget = 0x1334; // CHandle< CBaseEntity >
    public const nint ctLastCommandTimer = 0x1338; // CountdownTimer
    public const nint m_bMoveCommandIssued = 0x1350; // bool
}

public static class CDOTA_Modifier_Aghsfort_Primalbeast_Boss_RoarAttack_Start {
    public const nint rock_drop_intervals = 0x1318; // int32
    public const nint rock_drop_per_interval = 0x131C; // int32
    public const nint rock_drop_distance = 0x1320; // int32
    public const nint m_nCurrentInterval = 0x1324; // int32
    public const nint rock_drop_rotation_angle = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Pugna_Grandmaster_NetherWard {
    public const nint radius = 0x1318; // int32
    public const nint mana_multiplier = 0x131C; // float32
    public const nint mana_drained_per_attack = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_Pummel_LootDrop_Thinker {
    public const nint m_bAutoPickup = 0x1318; // bool
    public const nint m_bOnlyPlayerHeroPickup = 0x1319; // bool
    public const nint m_bCreepHeroPickup = 0x131A; // bool
    public const nint m_bAutoUse = 0x131B; // bool
    public const nint m_bFlying = 0x131C; // bool
    public const nint m_flKnockbackStartTime = 0x1320; // GameTime_t
    public const nint m_flKnockbackEndTime = 0x1324; // GameTime_t
    public const nint m_flKnockbackHeight = 0x1328; // float32
    public const nint m_flInitialHeight = 0x132C; // float32
    public const nint m_flKnockbackDuration = 0x1330; // float32
    public const nint m_flEndHeight = 0x1334; // float32
    public const nint m_vStartPos = 0x1338; // Vector
    public const nint m_vEndPos = 0x1344; // Vector
    public const nint m_nContainerFx = 0x1350; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Reward_ArmorAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_ArmorAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_CritAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_CritAura_Bonus {
    public const nint crit_chance = 0x1318; // int32
    public const nint crit_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_HPAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_HPAura_Bonus {
    public const nint bonus_hp = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Reward_MagicResistAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Reward_MagicResistAura_Bonus {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike {
    public const nint m_vPopupLocation = 0x1318; // Vector
    public const nint m_bTeleported = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Channel {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_nCrosshairFX = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Reverse_Tracking {
    public const nint m_vStartLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Burrowstrike_Transport {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint m_vDirection = 0x131C; // Vector
    public const nint m_flEndTime = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_CausticFinale {
    public const nint caustic_finale_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_CausticFinaleOrb {
    public const nint caustic_finale_radius = 0x1318; // int32
    public const nint caustic_finale_damage_death = 0x131C; // int32
    public const nint caustic_finale_damage_dot = 0x1320; // int32
    public const nint caustic_finale_slow = 0x1324; // int32
    public const nint caustic_finale_dot_tick = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Epicenter {
    public const nint epicenter_pulses = 0x1318; // int32
    public const nint epicenter_radius = 0x131C; // int32[16]
    public const nint epicenter_damage = 0x135C; // int32
    public const nint m_iMaxPulses = 0x1360; // int32
    public const nint m_iPulseCount = 0x1364; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Epicenter_Slow {
    public const nint epicenter_slow = 0x1318; // int32
    public const nint epicenter_slow_as = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Impale {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_bDamageApplied = 0x1320; // bool
    public const nint m_flPower = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm {
    public const nint sand_storm_radius = 0x1318; // float32
    public const nint sand_storm_damage = 0x131C; // int32
    public const nint damage_tick_rate = 0x1320; // float32
    public const nint m_flLastDamageTime = 0x1324; // GameTime_t
    public const nint m_nSandStormParticleIndex1 = 0x1328; // ParticleIndex_t
    public const nint m_nSandStormParticleIndex2 = 0x132C; // ParticleIndex_t
    public const nint m_hThinker = 0x1338; // CHandle< CBaseEntity >
    public const nint m_hBurrowstrikeFieldThinker = 0x133C; // CHandle< CBaseEntity >
    public const nint m_bIsPrimarySandstorm = 0x1340; // bool
    public const nint vecSpawnPos = 0x1344; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow {
    public const nint blind_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow_Aura_Thinker {
    public const nint sand_storm_radius = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sand_King_Sandstorm_Burrowstrike_Field_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint explosion_interval = 0x131C; // float32
    public const nint explosion_radius = 0x1320; // int32
    public const nint explosion_min_dist = 0x1324; // int32
    public const nint m_fLastTick = 0x1328; // float32
    public const nint m_fTimeAccumulator = 0x132C; // float32
    public const nint m_iExplosionCount = 0x1330; // int32
    public const nint m_iExplosionTotalCount = 0x1334; // int32
    public const nint m_iExplosionQuadrant = 0x1338; // int32
    public const nint m_iExplosionDistance = 0x133C; // int32
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Slark_DarkPact_Pulses {
    public const nint m_iPulseCount = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint total_damage = 0x1320; // float32
    public const nint total_pulses = 0x1324; // int32
    public const nint heal_pct = 0x1328; // int32
    public const nint pulse_interval = 0x132C; // float32
    public const nint bIsBaseAbility = 0x1330; // bool
}

public static class CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Active {
    public const nint agi_gain = 0x1318; // int32
    public const nint iPrimaryAttribute = 0x131C; // int32
    public const nint model_scale = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Counter {
    public const nint max_stacks = 0x1318; // int32
    public const nint passive_agility = 0x131C; // int32
    public const nint flLastProcTime = 0x1320; // GameTime_t
    public const nint debuff_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Essence_Shift_Debuff {
    public const nint reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Pounce {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint m_bFoundUnit = 0x1341; // bool
    public const nint hitEntities = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint pounce_distance = 0x1360; // int32
    public const nint pounce_distance_default = 0x1364; // int32
    public const nint pounce_speed = 0x1368; // float32
    public const nint pounce_acceleration = 0x136C; // float32
    public const nint pounce_radius = 0x1370; // int32
    public const nint pounce_damage = 0x1374; // int32
    public const nint leash_duration = 0x1378; // float32
}

public static class CDOTA_Modifier_Aghsfort_Slark_Pounce_Leash {
    public const nint leash_radius = 0x1318; // int32
    public const nint vLeashLocation = 0x131C; // Vector
    public const nint m_bEscaped = 0x1328; // bool
    public const nint pounce_damage_multiplier = 0x132C; // float32
    public const nint pounce_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint flLastPulseTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Aura {
    public const nint scepter_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_PassiveRegen {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_regen_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Visual {
    public const nint m_bScepter = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_FiresnapCookie_PreHop {
    public const nint jump_duration = 0x1318; // float32
    public const nint m_bMovesHorizontal = 0x131C; // bool
    public const nint m_bSecondaryCookie = 0x131D; // bool
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_FiresnapCookie_ShortHop {
    public const nint jump_duration = 0x1318; // float32
    public const nint jump_height = 0x131C; // int32
    public const nint jump_horizontal_distance = 0x1320; // int32
    public const nint pre_land_anim_time = 0x1324; // float32
    public const nint landing_gesture_duration = 0x1328; // float32
    public const nint impact_radius = 0x132C; // int32
    public const nint impact_damage = 0x1330; // int32
    public const nint impact_stun_duration = 0x1334; // float32
    public const nint m_flStartZ = 0x1338; // float32
    public const nint m_flCurTime = 0x133C; // float32
    public const nint m_flJumpDuration = 0x1340; // float32
    public const nint m_flJumpDistance = 0x1344; // float32
    public const nint m_flJumpHeight = 0x1348; // float32
    public const nint m_vTargetHorizontalDirection = 0x134C; // Vector
    public const nint m_bSecondaryCookie = 0x1358; // bool
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_GobbleUp_BellyHasUnit {
    public const nint m_hGobbledUnit = 0x1318; // CHandle< CBaseEntity >
    public const nint max_time_in_belly = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Buff {
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_nIsActive = 0x1338; // int32
    public const nint m_bHasAttackTalent = 0x133C; // bool
    public const nint attack_range_bonus = 0x1340; // int32
    public const nint buffed_attacks = 0x1344; // int32
    public const nint base_attack_time = 0x1348; // float32
    public const nint attack_speed_bonus = 0x134C; // int32
    public const nint armor_duration = 0x1350; // float32
    public const nint damage = 0x1354; // int32
    public const nint bounce_range = 0x1358; // int32
    public const nint bounces = 0x135C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Debuff {
    public const nint armor_reduction_per_attack = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Magma_Burn_Slow {
    public const nint m_nMoveSlowPct = 0x1318; // int32
    public const nint m_fBurnDamagePerTick = 0x131C; // float32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_interval = 0x1324; // float32
    public const nint burn_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Magma_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint impact_radius = 0x131C; // int32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_linger_duration = 0x1324; // float32
    public const nint m_nPathEffectIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_MortimerKisses {
    public const nint m_fIntervalPerRocket = 0x1318; // float32
    public const nint m_flFacingTarget = 0x131C; // float32
    public const nint m_nBeamFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1324; // CHandle< CBaseEntity >
    public const nint m_flCurDistance = 0x1328; // float32
    public const nint m_vAimTarget = 0x132C; // Vector
    public const nint m_fLastTurnAmount = 0x1338; // float32
    public const nint m_nProjectilesLaunched = 0x133C; // int32
    public const nint m_bDestroyOnNextThink = 0x1340; // bool
    public const nint m_nProjectilesToLaunch = 0x1344; // int32
    public const nint m_bHasProjectileTalent = 0x1348; // bool
    public const nint projectile_count = 0x1354; // int32
    public const nint projectile_vision = 0x1358; // int32
    public const nint turn_rate = 0x135C; // float32
    public const nint min_range = 0x1360; // int32
    public const nint delay_after_last_projectile = 0x1364; // float32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_Scatterblast_Slow {
    public const nint m_bIsPointBlank = 0x1318; // bool
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint attack_slow_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Snapfire_SpitCreep_ArcingUnit {
    public const nint m_flPredictedTotalTime = 0x1318; // float32
    public const nint m_vStartPosition = 0x131C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1328; // float32
    public const nint m_flCurrentTimeVert = 0x132C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1330; // bool
    public const nint m_bDamageApplied = 0x1331; // bool
    public const nint m_bTargetTeleported = 0x1332; // bool
    public const nint m_vHorizontalVelocity = 0x1334; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1340; // Vector
    public const nint m_flInitialVelocityZ = 0x134C; // float32
    public const nint m_fClampedProjectileSpeed = 0x1350; // float32
    public const nint m_nFXIndex = 0x1354; // ParticleIndex_t
    public const nint m_fAcceleration = 0x1358; // float32
    public const nint min_range = 0x135C; // int32
    public const nint min_lob_travel_time = 0x1360; // float32
    public const nint max_lob_travel_time = 0x1364; // float32
    public const nint impact_radius = 0x1368; // int32
    public const nint projectile_vision = 0x136C; // int32
    public const nint stun_duration = 0x1370; // float32
    public const nint impact_damage = 0x1374; // int32
    public const nint min_height_above_lowest = 0x1378; // float32
    public const nint min_height_above_highest = 0x137C; // float32
    public const nint min_acceleration = 0x1380; // float32
    public const nint max_acceleration = 0x1384; // float32
}

public static class CDOTA_Modifier_Aghsfort_Sniper_Concussive_Grenade {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Disruptor_ThunderStrike_Int_Increase {
    public const nint int_increase_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Disruptor_Thunder_Strike_On_Attack {
    public const nint strike_chance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Call_Down_Attack_Buff {
    public const nint movespeed = 0x1318; // int32
    public const nint attackspeed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Call_Down_Wingman {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_flCurVertTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint m_flEndTime = 0x1344; // float32
    public const nint push_length = 0x1348; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Gyrocopter_RocketBarrage_On_Attack {
    public const nint strike_chance = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Fiery_Soul_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Bounce {
    public const nint bounces_remaining = 0x1318; // int32
    public const nint m_hHitEntities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Channel {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_interval = 0x131C; // float32
    public const nint m_hEntitiesToHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nFxIndexB = 0x1338; // ParticleIndex_t
    public const nint m_nFXIndices = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint bounces_remaining = 0x1358; // int32
    public const nint iCur_stack = 0x135C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Attacks_Bonus {
    public const nint attack_damage = 0x1318; // float32
    public const nint damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Bulwark_Spears {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_interval = 0x131C; // float32
    public const nint m_nFxIndexB = 0x1320; // ParticleIndex_t
    public const nint iCur_stack = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_PhantomStrike_Damage_Reduction {
    public const nint damage_reduction_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_AutoDagger {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_On_Attack {
    public const nint strike_chance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_SonicWave_AttackBuff {
    public const nint spell_amp = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint m_nRadius = 0x1324; // int32
    public const nint m_nTrailFX = 0x1328; // ParticleIndex_t
    public const nint linger_duration = 0x132C; // float32
    public const nint flDamage = 0x1330; // float32
    public const nint damage_pct = 0x1334; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Caustic_Finale_StrengthBuff {
    public const nint str_pct = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_DamageResist {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_Movement {
    public const nint vLastPos = 0x1318; // Vector
    public const nint m_fAccumulatedDistance = 0x1324; // float32
    public const nint movement_distance = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Sand_King_Sandstorm_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_Slark_Pounce_Leashed_Bonus {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Slark_Shadow_Dance_Leash {
    public const nint m_vPullLocation = 0x1318; // Vector
    public const nint pull_speed = 0x1324; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Snapfire_FiresnapCookie_AlliedBuff {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint bonus_attack_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Ursa_Earthshock_Knockback {
    public const nint value3 = 0x1348; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Viper_Periodic_Strike {
    public const nint fire_rate = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_nTargetTeam = 0x1320; // int32
    public const nint m_hAlreadyHit = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Breach_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Thinker {
    public const nint m_fThinkInterval = 0x1318; // float32
    public const nint m_fPopDamagePctPerInterval = 0x131C; // float32
    public const nint m_fLingerDuration = 0x1320; // float32
    public const nint radius = 0x1324; // int32
    public const nint pop_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Burn {
    public const nint m_fDamagePerInterval = 0x1318; // float32
    public const nint m_nBonusIncomingMagicDamage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Thinker {
    public const nint m_nDamageRadius = 0x1318; // int32
    public const nint m_fDissimilateDamage = 0x131C; // float32
    public const nint m_fThinkInterval = 0x1320; // float32
    public const nint m_fDissimilateDamagePctPerInterval = 0x1324; // float32
    public const nint m_fLingerDuration = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Burn {
    public const nint flDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint path_radius = 0x1324; // int32
    public const nint linger_duration = 0x1328; // float32
    public const nint flDamage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_DoubleAttack {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Cold_Embrace_Magic_Damage_Block {
    public const nint barrier_amount = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint m_nMaxMovementSpeed = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Splinter_Blast_Vacuum {
    public const nint pull_speed = 0x1318; // float32
    public const nint vPullLocation = 0x131C; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Special_WitchDoctor_ParalyzingCask_Attack_Procs {
    public const nint cask_chance = 0x1318; // int32
    public const nint cask_cooldown = 0x131C; // int32
    public const nint flLastProcTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Aghsfort_Special_Witch_Doctor_Death_Ward_Splitshot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint split_shot_bonus_range = 0x131C; // int32
    public const nint split_shot_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Debuff {
    public const nint corpse_explosion_radius = 0x1318; // int32
    public const nint corpse_explosion_damage_pct = 0x131C; // int32
    public const nint corpse_explosion_chance_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld {
    public const nint bonus_damage = 0x1318; // int32
    public const nint launched_attack = 0x131C; // bool
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_MeldArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld_Animation {
    public const nint launched_attack = 0x1318; // bool
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint attack_spill_range = 0x131C; // float32
    public const nint attack_spill_width = 0x1320; // int32
    public const nint attack_spill_pct = 0x1324; // int32
    public const nint attack_spill_penalty = 0x1328; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades_Slow {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Psionic_Trap_Thinker {
    public const nint trap_radius = 0x1318; // int32
    public const nint trap_delay_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint max_pulses = 0x1324; // int32
    public const nint iCurrentPulse = 0x1328; // int32
    public const nint m_hImage = 0x132C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionAbsorb {
    public const nint damage_threshold = 0x1318; // int32
    public const nint max_damage_absorb = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionDamage {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Refraction_Holdout {
    public const nint bonus_damage = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // int32
    public const nint m_flDamageAbsorbed = 0x1320; // float32
}

public static class CDOTA_Modifier_Aghsfort_TemplarAssassin_Trap_Slow {
    public const nint movement_speed_slow = 0x1318; // int32
    public const nint trap_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_IceShard {
    public const nint m_vPos = 0x1318; // Vector
    public const nint radius = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint explosion_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint air_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_bPunchKill = 0x1335; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_nAttackRecord = 0x1354; // int32
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint flAirTime = 0x1344; // float32
    public const nint m_flEndTime = 0x1348; // float32
    public const nint m_fHorizontalDistance = 0x134C; // float32
    public const nint m_fVerticalDistance = 0x1350; // float32
    public const nint m_fDamage = 0x1354; // float32
    public const nint m_vLandingPos = 0x1358; // Vector
}

public static class CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_IceShard {
    public const nint m_vPos = 0x1318; // Vector
    public const nint radius = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint explosion_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Snowball_SpellLifesteal {
    public const nint spell_lifesteal_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint air_time = 0x131C; // float32
    public const nint slow_duration = 0x1320; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_bPunchKill = 0x1335; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_nAttackRecord = 0x1354; // int32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint flAirTime = 0x1344; // float32
    public const nint m_flEndTime = 0x1348; // float32
    public const nint m_fHorizontalDistance = 0x134C; // float32
    public const nint m_fVerticalDistance = 0x1350; // float32
    public const nint m_fDamage = 0x1354; // float32
}

public static class CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin {
    public const nint bonus_magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Flying {
    public const nint m_nRadius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Slow {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Speed_Steal {
    public const nint m_flFactor = 0x1318; // float32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_Nethertoxin {
    public const nint min_damage = 0x1318; // int32
    public const nint max_damage = 0x131C; // int32
    public const nint max_duration = 0x1320; // float32
    public const nint m_flDamageInterval = 0x1324; // float32
    public const nint m_flTimeIncrement = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Viper_Nethertoxin_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_Viper_PoisonAttack {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Viper_PoisonAttack_Slow {
    public const nint damage = 0x1318; // float32
    public const nint movement_speed = 0x131C; // int32
    public const nint magic_resistance = 0x1320; // int32
    public const nint m_flAccumDamage = 0x1324; // float32
    public const nint m_flPoisonSnapCounter = 0x1328; // float32
    public const nint m_nPoisonSnapThreshold = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Viper_ViperStrike_Slow {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint m_bTargetedAlly = 0x1324; // bool
}

public static class CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Shukuchi {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint speed = 0x1330; // int32
    public const nint m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint bHasStartedBurning = 0x1350; // bool
    public const nint m_nBurningTrailRadius = 0x1354; // int32
    public const nint m_vLastTrailThinkerLocation = 0x1358; // Vector
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Swarm {
    public const nint m_iMaxDist = 0x1318; // int32
    public const nint m_iAttackCount = 0x131C; // int32
    public const nint destroy_attacks = 0x1320; // int32
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_vStartLoc = 0x1330; // Vector
    public const nint m_hAttachTarget = 0x133C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Aghsfort_Weaver_Swarm_Debuff {
    public const nint armor_reduction = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint damage_share_percentage = 0x1320; // int32
    public const nint m_flCurrentArmorReduction = 0x1324; // float32
    public const nint flTotalDamage = 0x1328; // float32
}

public static class CDOTA_Modifier_Aghsfort_Weaver_TimeLapse {
    public const nint m_PositionIndex = 0x1318; // Vector[11]
    public const nint m_flLife = 0x139C; // float32[11]
    public const nint m_flMana = 0x13C8; // float32[11]
    public const nint m_bHasValidHistory = 0x13F4; // bool
}

public static class CDOTA_Modifier_Aghsfort_Wildwing_Tornado_Blast_Debuff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint m_vStartPos = 0x131C; // Vector
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flHeightT = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Flight {
    public const nint attack_point = 0x1318; // float32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint projectile_speed_bonus = 0x1320; // int32
    public const nint night_vision_bonus = 0x1324; // int32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Frost_Attack {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Slow {
    public const nint damage_per_second = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Cold_Embrace {
    public const nint m_nOriginalAttackCapability = 0x1318; // int32
    public const nint m_bDidBlast = 0x1324; // bool
    public const nint heal_additive = 0x1328; // int32
    public const nint heal_percentage = 0x132C; // float32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Splinter_Blast_Slow {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Cask_Thinker {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint remaining_bounces = 0x131C; // int32
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_DeathWard {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_iBounceRadius = 0x131C; // int32
    public const nint m_bFirstAttack = 0x1320; // bool
    public const nint m_iBounces = 0x1324; // int32
    public const nint m_nStaffParticle = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Maledict {
    public const nint m_iStartHealth = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_threshold = 0x1320; // int32
    public const nint max_bonus_damage = 0x1324; // int32
    public const nint ticks = 0x1328; // int32
    public const nint iCurrentTick = 0x132C; // int32
}

public static class CDOTA_Modifier_Aghsfort_WitchDoctor_Voodoo_Restoration_Heal {
    public const nint heal = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint heal_interval = 0x1320; // float32
    public const nint lifesteal_percent = 0x1324; // int32
    public const nint spell_lifesteal_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Alchemist_AcidSpray {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Alchemist_AcidSpray_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint armor_allies = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Alchemist_Berserk_Potion {
    public const nint attack_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
    public const nint move_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Alchemist_ChemicalRage {
    public const nint base_attack_time = 0x1318; // float32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_movespeed = 0x1328; // int32
    public const nint m_nFXAlchemistCRIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Alchemist_Corrosive_Weaponry_Debuff {
    public const nint slow_per_stack = 0x1318; // int32
    public const nint status_resist_per_stack = 0x131C; // float32
    public const nint chemical_rage_bonus = 0x1320; // float32
}

public static class CDOTA_Modifier_Alchemist_GoblinsGreed {
    public const nint m_DeathList = 0x1318; // CUtlVector< GameTime_t >
    public const nint damage = 0x1330; // float32
    public const nint duration = 0x1334; // float32
    public const nint bonus_gold = 0x1338; // int32
    public const nint bonus_bonus_gold = 0x133C; // int32
    public const nint bonus_gold_cap = 0x1340; // int32
}

public static class CDOTA_Modifier_Alchemist_Scepter_Bonus_Damage {
    public const nint scepter_bonus_damage = 0x1318; // int32
    public const nint scepter_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Alchemist_UnstableConcoction {
    public const nint brew_time = 0x1318; // float32
    public const nint brew_explosion = 0x131C; // float32
    public const nint m_fStartTime = 0x1320; // GameTime_t
    public const nint m_fLastAlertTime = 0x1324; // GameTime_t
    public const nint m_nConcoctionFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_bHasStunned = 0x132C; // bool
    public const nint damage_resistance = 0x1330; // int32
    public const nint move_speed = 0x1334; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CommandAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CommandAura_Bonus {
    public const nint bonus_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_AlphaWolf_CriticalStrike {
    public const nint crit_mult = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_AncientApparition_ChillingTouch {
    public const nint damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_AncientApparition_ChillingTouch_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_AncientApparition_ColdFeet {
    public const nint m_vecStartPosition = 0x1318; // Vector
    public const nint m_nCurrentTick = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint break_distance = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_AncientApparition_IceAge {
    public const nint damage = 0x1318; // float32
}

public static class CDOTA_Modifier_AncientApparition_IceBlast {
    public const nint dot_damage = 0x1318; // float32
    public const nint kill_pct = 0x131C; // float32
    public const nint m_hFracturingEntity = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_AncientApparition_IceVortex {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint spell_resist_pct = 0x131C; // int32
    public const nint drag_speed = 0x1320; // int32
    public const nint aura_origin_x = 0x1324; // float32
    public const nint aura_origin_y = 0x1328; // float32
    public const nint shard_dps = 0x132C; // int32
    public const nint shard_attack_speed_reduction = 0x1330; // int32
    public const nint m_vCenter = 0x1334; // Vector
}

public static class CDOTA_Modifier_AncientApparition_IceVortexThinker {
    public const nint radius = 0x1318; // int32
    public const nint movement_speed_pct = 0x131C; // int32
    public const nint spell_resist_pct = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hChilledEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AncientRockGolem_Weakening {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_AncientRockGolem_Weakening_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Animation_LeftClawSwipe {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flScalar = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Animation_RightClawSwipe {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flScalar = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Animation_TailSpin {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint m_flPlaybackRate = 0x1320; // float32
    public const nint m_vHitEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_AntiMage_Counterspell {
    public const nint m_LastParams = 0x1318; // CModifierParams
    public const nint magic_resistance = 0x14F8; // int32
}

public static class CDOTA_Modifier_AntiMage_Counterspell_Passive {
    public const nint magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_AntiMage_ManaBreak {
    public const nint percent_damage_per_burn = 0x1318; // int32
    public const nint mana_per_hit = 0x131C; // int32
    public const nint mana_per_hit_pct = 0x1320; // float32
    public const nint slow_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_AntiMage_ManaBreak_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic {
    public const nint shard_spell_damage_reduction_pct = 0x1318; // int32
    public const nint shard_bonus_spell_damage_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic_Aura {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Antimage_DampenMagic_Aura_Strong {
    public const nint shard_bonus_aura_range = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_Flux {
    public const nint m_nCasterTeam = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint tempest_damage_per_second = 0x1320; // int32
    public const nint search_radius = 0x1324; // int32
    public const nint move_speed_slow_pct = 0x1328; // int32
    public const nint tempest_move_speed_slow_pct = 0x132C; // int32
    public const nint status_resist = 0x1330; // int32
    public const nint think_interval = 0x1334; // float32
    public const nint m_nCurrentMovementSlow = 0x1338; // int32
    public const nint m_nCurrentStatusResistance = 0x133C; // int32
    public const nint m_bAlone = 0x1340; // bool
    public const nint m_nFXIndex = 0x1344; // ParticleIndex_t
    public const nint m_bIsTempestVersion = 0x1348; // bool
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_AttackRange {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint attack_magic_damage = 0x131C; // int32
    public const nint attack_damage_bonus = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint shard_magic_resist = 0x1328; // int32
    public const nint shard_slow_pct = 0x132C; // int32
    public const nint aura_origin_x = 0x1330; // float32
    public const nint aura_origin_y = 0x1334; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Attack_Speed {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Evasion {
    public const nint evasion_chance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint shard_magic_resist = 0x1320; // int32
    public const nint shard_slow_pct = 0x1324; // int32
    public const nint aura_origin_x = 0x1328; // float32
    public const nint aura_origin_y = 0x132C; // float32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_AttackRange {
    public const nint radius = 0x1320; // int32
    public const nint m_vPos = 0x1324; // Vector
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Attack_Speed {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Evasion {
    public const nint radius = 0x1320; // int32
    public const nint m_vPos = 0x1324; // Vector
}

public static class CDOTA_Modifier_ArcWarden_SparkWraith_Purge {
    public const nint move_speed_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_ArcWarden_SparkWraith_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint scepter_radius = 0x131C; // int32
    public const nint wraith_vision_radius = 0x1320; // int32
    public const nint wraith_speed = 0x1324; // int32
    public const nint activation_delay = 0x1330; // float32
    public const nint scepter_activation_delay = 0x1334; // float32
    public const nint think_interval = 0x1338; // float32
    public const nint m_flSparkDamage = 0x133C; // float32
    public const nint m_nViewerID = 0x1340; // int32
    public const nint m_bActive = 0x1344; // bool
    public const nint m_bOriginal = 0x1345; // bool
}

public static class CDOTA_Modifier_ArcWarden_TempestDouble {
    public const nint penalty_distance = 0x1318; // int32
    public const nint attack_damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_ArcWarden_TempestDouble_DistancePenalty {
    public const nint attack_damage_penalty = 0x1318; // int32
}

public static class CDOTA_Modifier_Arc_Warden_Scepter {
    public const nint m_hRune = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_ArcaneBoots_ManaRegen {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Armlet_UnholyStrength {
    public const nint unholy_bonus_damage = 0x1318; // int32
    public const nint unholy_bonus_attack_speed = 0x131C; // int32
    public const nint unholy_bonus_strength = 0x1320; // int32
    public const nint unholy_bonus_armor = 0x1324; // int32
    public const nint unholy_health_drain_per_second = 0x1328; // int32
    public const nint str_tick_count = 0x132C; // int32
    public const nint unholy_bonus_slow_resistance = 0x1330; // int32
    public const nint tick_interval = 0x1334; // float32
    public const nint m_flDamageRemainder = 0x1338; // float32
}

public static class CDOTA_Modifier_Ascension_AcidBlood {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Ascension_AcidBlood_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Ascension_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
}

public static class CDOTA_Modifier_Ascension_Meteoric_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Assassins_Dagger_Debuff {
    public const nint armor_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Attached_Unit {
    public const nint m_hAttachTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bPhysicalImmune = 0x131C; // bool
    public const nint m_bMagicImmune = 0x131D; // bool
}

public static class CDOTA_Modifier_Avianas_Feather {
    public const nint evasion = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
    public const nint flight_threshold = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BatleHunger_Self {
    public const nint scepter_armor_change = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_BatleHunger_Self_Movespeed {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_BattleHunger {
    public const nint damage_per_second = 0x1318; // int32
    public const nint slow = 0x131C; // int32
    public const nint scepter_armor_change = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BerserkersCall {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
    public const nint bonus_attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Axe_BerserkersCallArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_CounterHelix {
    public const nint radius = 0x1318; // int32
    public const nint trigger_attacks = 0x131C; // int32
}

public static class CDOTA_Modifier_Axe_CounterHelix_DamageReduction {
    public const nint shard_damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Axe_CullingBlade_Boost {
    public const nint speed_bonus = 0x1318; // int32
    public const nint armor_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Axe_CullingBlade_Permanent {
    public const nint armor_per_stack = 0x1318; // float32
}

public static class CDOTA_Modifier_BackdoorProtection {
    public const nint m_bActivated = 0x1318; // bool
    public const nint m_flHealthToRestore = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint activation_time = 0x1324; // float32
    public const nint regen_rate = 0x1328; // int32
    public const nint m_TimerToActivate = 0x1330; // CountdownTimer
}

public static class CDOTA_Modifier_Banana {
    public const nint slide_distance = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint slide_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Banana_Knockback {
    public const nint m_vCenter = 0x1318; // Vector
    public const nint knockback_distance = 0x1324; // int32
    public const nint knockback_height = 0x1328; // int32
    public const nint knockback_duration = 0x132C; // float32
    public const nint m_vHorizOffset = 0x1330; // Vector
    public const nint m_vStartPosition = 0x133C; // Vector
    public const nint m_vDir = 0x1348; // Vector
    public const nint m_fCurrentTimeHoriz = 0x1354; // float32
    public const nint m_fCurrentTimeVert = 0x1358; // float32
    public const nint m_bShouldStun = 0x135C; // bool
    public const nint flTimeSinceChange = 0x1360; // float32
}

public static class CDOTA_Modifier_Bane_Enfeeble_Effect {
    public const nint damage_reduction = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
    public const nint cast_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Bane_FiendsGrip {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_FiendsGrip_Cast_Illusion {
    public const nint fiend_grip_mana_drain = 0x1318; // int32
    public const nint fiend_grip_tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_Nightmare {
    public const nint m_nSource = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Bane_Nightmare_AttackSpeed_Bonus {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_BaseBlocker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Batrider_Firefly {
    public const nint m_bActive = 0x1318; // bool
    public const nint radius = 0x131C; // int32
    public const nint m_ifirefly_Active = 0x1320; // int32
    public const nint tree_radius = 0x1324; // int32
    public const nint damage_per_second = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint bonus_slow_resistance = 0x1330; // int32
    public const nint tick_interval = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x133C; // ParticleIndex_t
    public const nint m_fNextDamageTick = 0x1340; // GameTime_t
    public const nint m_vLastFirePoolLoc = 0x1344; // Vector
    public const nint bonus_vision = 0x1350; // int32
}

public static class CDOTA_Modifier_Batrider_Flamebreak_Damage {
    public const nint damage_impact = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Batrider_FlamingLasso {
    public const nint tick_rate = 0x1318; // float32
    public const nint drag_distance = 0x131C; // int32
    public const nint break_distance = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint vPreviousLocation = 0x1328; // Vector
    public const nint m_hAnchor = 0x1334; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Modifier_Batrider_FlamingLasso_Damage {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_Batrider_StickyNapalm {
    public const nint movement_speed_pct = 0x1338; // float32
    public const nint turn_rate_pct = 0x133C; // int32
    public const nint damage = 0x1340; // int32
    public const nint application_damage = 0x1344; // int32
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_nFXStackIndex = 0x134C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Batrider_StickyNapalm_Application {
    public const nint m_bShouldApply = 0x1318; // bool
}

public static class CDOTA_Modifier_Beastmaster_Axe_Stack_Counter {
    public const nint damage_amp = 0x1318; // float32
}

public static class CDOTA_Modifier_Beastmaster_CallOfTheWild_Hawk {
    public const nint m_hOwner = 0x1318; // CHandle< CBaseEntity >
    public const nint attack_radius = 0x131C; // int32
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_seconds_per_rotation = 0x1324; // float32
    public const nint roaming_radius = 0x1328; // int32
    public const nint attack_interval = 0x132C; // float32
    public const nint min_move_speed = 0x1330; // int32
    public const nint max_move_speed = 0x1334; // int32
    public const nint m_iPreviousHawkCount = 0x1338; // int32
    public const nint m_flRotation = 0x133C; // float32
}

public static class CDOTA_Modifier_Beastmaster_DrumsOfSlom {
    public const nint aura_radius = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint max_stacks = 0x1320; // int32
    public const nint base_damage = 0x1324; // float32
    public const nint heal_pct = 0x1328; // int32
    public const nint creep_heal_pct = 0x132C; // int32
    public const nint iCurrentAttacksAtMinInterval = 0x1330; // int32
    public const nint stack_decay_time = 0x1334; // float32
    public const nint max_drum_hit_interval = 0x1338; // float32
    public const nint min_drum_hit_interval = 0x133C; // float32
    public const nint m_flLastStackChangeTime = 0x1340; // GameTime_t
    public const nint m_flLastDrumHitTime = 0x1344; // GameTime_t
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Dive {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_flPredictedTotalTime = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_flCurrentTimeHoriz = 0x132C; // float32
    public const nint m_flCurrentTimeVert = 0x1330; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1334; // bool
    public const nint m_bDamageApplied = 0x1335; // bool
    public const nint m_vHorizontalVelocity = 0x1338; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1344; // Vector
    public const nint m_flInitialVelocityZ = 0x1350; // float32
    public const nint m_bDone = 0x1354; // bool
    public const nint dive_damage = 0x1358; // int32
    public const nint dive_root_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Perch_Flight {
    public const nint perch_flight_height = 0x1318; // int32
    public const nint perch_tree_height = 0x131C; // int32
    public const nint flight_speed = 0x1320; // int32
    public const nint m_flZDelta = 0x1324; // float32
    public const nint m_vStart = 0x1328; // Vector
    public const nint m_hTarget = 0x1334; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Beastmaster_Hawk_Perch_Perching {
    public const nint perching_tree_height = 0x1318; // int32
    public const nint m_hTree = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Beastmaster_InnerBeast_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Push {
    public const nint m_vVelocity = 0x1318; // Vector
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Beastmaster_PrimalRoar_Speed {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Beastmaster_WildAxes {
    public const nint m_vLeftControl = 0x1318; // Vector
    public const nint m_vRightControl = 0x1324; // Vector
    public const nint m_vTargetLoc = 0x1330; // Vector
    public const nint m_vSourceLoc = 0x133C; // Vector
    public const nint m_flDuration = 0x1348; // float32
    public const nint m_flDieTime = 0x134C; // GameTime_t
    public const nint m_bReturning = 0x1350; // bool
    public const nint m_bCatchingAxes = 0x1351; // bool
    public const nint m_hAxes = 0x1358; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nAxeFXIndex = 0x1370; // ParticleIndex_t[2]
    public const nint m_hHitList = 0x1378; // CUtlVector< CHandle< CBaseEntity > >[2]
    public const nint radius = 0x13A8; // int32
    public const nint spread = 0x13AC; // int32
    public const nint axe_damage = 0x13B0; // int32
    public const nint duration = 0x13B4; // float32
    public const nint min_throw_duration = 0x13B8; // float32
    public const nint max_throw_duration = 0x13BC; // float32
    public const nint m_vecUniqueHitList = 0x13C0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bHitInvisibleHero = 0x13D8; // bool
}

public static class CDOTA_Modifier_BerserkerTroll_Break {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_BigThunderLizard_Frenzy {
    public const nint attackspeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Slam {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Wardrums {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BigThunderLizard_Wardrums_Aura {
    public const nint speed_bonus = 0x1318; // int32
    public const nint accuracy = 0x131C; // int32
}

public static class CDOTA_Modifier_BlackDragon_DragonhideAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDragon_DragonhideAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDragon_Fireball_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_BlackDragon_SplashAttack {
    public const nint range = 0x1318; // int32
    public const nint damage_percent = 0x131C; // float32
}

public static class CDOTA_Modifier_BlackDrake_MagicAmplification {
    public const nint spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_BlackDrake_MagicAmplification_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Black_King_Bar_Immune {
    public const nint model_scale = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Blight_Stone_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist_Barrier {
    public const nint flLastGameTime = 0x1318; // GameTime_t
    public const nint m_flCurrentShield = 0x131C; // float32
}

public static class CDOTA_Modifier_Bloodseeker_BloodMist_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_Bloodbath_Thinker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodseeker_Bloodrage {
    public const nint attack_speed = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint shard_max_health_dmg = 0x1320; // float32
    public const nint damage_pct = 0x1324; // float32
    public const nint flTickRate = 0x1328; // float32
}

public static class CDOTA_Modifier_Bloodseeker_Rupture {
    public const nint movement_damage_pct = 0x1318; // int32
    public const nint hp_pct = 0x131C; // float32
    public const nint vLastPos = 0x1320; // Vector
    public const nint bResetPosition = 0x132C; // bool
    public const nint m_fAccumulatedDamage = 0x1330; // float32
}

public static class CDOTA_Modifier_Bloodseeker_Thirst {
    public const nint hero_kill_heal = 0x1318; // int32
    public const nint creep_kill_heal = 0x131C; // int32
    public const nint half_bonus_aoe = 0x1320; // int32
    public const nint visibility_threshold_pct = 0x1324; // int32
    public const nint invis_threshold_pct = 0x1328; // int32
    public const nint min_bonus_pct = 0x132C; // int32
    public const nint max_bonus_pct = 0x1330; // int32
    public const nint bonus_movement_speed = 0x1334; // int32
    public const nint linger_duration = 0x1338; // float32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bloodseeker_Thirst_Speed {
    public const nint m_iszModifierString = 0x1318; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Bloodseeker_Thirst_Vision {
    public const nint invis_threshold_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Bloodthorn_Debuff {
    public const nint target_crit_multiplier = 0x1318; // float32
    public const nint silence_damage_percent = 0x131C; // float32
    public const nint proc_damage = 0x1320; // int32
    public const nint m_flDamageTaken = 0x1324; // float32
    public const nint m_vRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnOverseer_Evasion {
    public const nint evasion_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_BlueDragonspawnSorcerer_Evasion {
    public const nint evasion_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Boss_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< CBaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint reversed = 0x1324; // bool
    public const nint roaming_radius = 0x1328; // int32
    public const nint attack_radius = 0x132C; // int32
    public const nint roaming_seconds_per_rotation = 0x1330; // float32
    public const nint attack_interval = 0x1334; // float32
    public const nint m_bSetupWarning = 0x1338; // bool
    public const nint m_nPreviewFX = 0x133C; // ParticleIndex_t
}

public static class CDOTA_Modifier_BottleRegeneration {
    public const nint health_restore = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint health_restore_pct = 0x1320; // int32
    public const nint mana_restore_pct = 0x1324; // int32
    public const nint break_on_hero_damage = 0x1328; // int32
    public const nint m_fHealingDone = 0x132C; // float32
}

public static class CDOTA_Modifier_BountyHunter_Jinada {
    public const nint bonus_damage = 0x1318; // int32
    public const nint gold_steal = 0x131C; // int32
    public const nint m_nFXIndexA = 0x1320; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1324; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BountyHunter_Lookout {
    public const nint radius = 0x1328; // int32
}

public static class CDOTA_Modifier_BountyHunter_Track {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nParentGold = 0x131C; // int32
    public const nint target_crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_BountyHunter_TrackEffect {
    public const nint bonus_move_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_BountyHunter_Track_Bear_Trap {
    public const nint m_bActivated = 0x1328; // bool
}

public static class CDOTA_Modifier_BountyHunter_WindWalk {
    public const nint damage_reduction_pct = 0x1328; // int32
    public const nint shard_stun_duration = 0x132C; // float32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_BountyHunter_WindWalk_Slow {
    public const nint slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_BrewUp {
    public const nint m_bBuffExtended = 0x1318; // bool
}

public static class CDOTA_Modifier_Brewmaster_CinderBrew {
    public const nint movement_slow = 0x1318; // int32
    public const nint m_bIgniteActive = 0x131C; // bool
    public const nint m_flDamagePerTick = 0x1320; // float32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x131C; // ParticleIndex_t
    public const nint min_movement = 0x1320; // int32
    public const nint max_movement = 0x1324; // int32
    public const nint m_iMovementBonus = 0x1328; // int32
    public const nint m_flNextUpdateTime = 0x132C; // GameTime_t
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler_Passive {
    public const nint dodge_chance = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
    public const nint attack_speed = 0x1324; // int32
    public const nint active_multiplier = 0x1328; // float32
    public const nint stun_chance = 0x132C; // int32
    public const nint bash_cooldown = 0x1330; // float32
    public const nint stun_duration = 0x1334; // float32
    public const nint slow_duration = 0x1338; // float32
    public const nint bonus_move_speed = 0x133C; // int32
    public const nint bonus_status_resist = 0x1340; // int32
    public const nint armor = 0x1344; // int32
    public const nint magic_resist = 0x1348; // int32
    public const nint m_flLastBash = 0x134C; // float32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenBrawler_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_DrunkenHaze {
    public const nint movement_slow = 0x1318; // int32
    public const nint miss_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Fire_Phase {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PermanentImmolation {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PermanentImmolation_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplit {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hSecondaryTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_hTertiaryTarget = 0x1320; // CHandle< CBaseEntity >
    public const nint m_hFourthTarget = 0x1324; // CHandle< CBaseEntity >
    public const nint m_hReturnBrewling = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // int32
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplitDelay {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Brewmaster_PrimalSplitDuration {
    public const nint bonus_brewling_hp = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Primal_Companion {
    public const nint cooldown_on_death = 0x1318; // float32
    public const nint cooldown_on_take_damage = 0x131C; // float32
    public const nint disable_distance = 0x1320; // int32
    public const nint movement_slow_when_out_of_range = 0x1324; // int32
    public const nint m_bCanAttack = 0x1328; // bool
    public const nint m_nFxIndex = 0x132C; // ParticleIndex_t
    public const nint cooldown_penalty_pct = 0x1330; // int32
    public const nint bonus_brewling_hp = 0x1334; // int32
    public const nint bonus_damage = 0x1338; // int32
}

public static class CDOTA_Modifier_Brewmaster_Pulverize {
    public const nint bonus_building_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_ThunderClap {
    public const nint movement_slow = 0x1318; // int32
    public const nint attack_speed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Brewmaster_Void_AstralPulse {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Brewmaster_Void_Astral_Pull_Movement {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint pull_distance = 0x132C; // int32
    public const nint damage = 0x1330; // int32
    public const nint pull_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Brewmaster_Void_Brawler_Slow {
    public const nint movespeed = 0x1318; // int32
    public const nint active_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Brewmaster_WindWalk {
    public const nint bonus_movement_speeed = 0x1328; // int32
    public const nint bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Bristleback_Active_ConicalQuillSpray {
    public const nint activation_num_quill_sprays = 0x1318; // int32
    public const nint activation_spray_interval = 0x131C; // float32
    public const nint activation_angle = 0x1320; // int32
    public const nint cast_range_bonus = 0x1324; // int32
    public const nint activation_movement_speed_pct = 0x1328; // int32
    public const nint activation_turn_rate_pct = 0x132C; // int32
    public const nint activation_disable_turning = 0x1330; // int32
    public const nint activation_ignore_cast_angle = 0x1334; // int32
    public const nint activation_turn_rate = 0x1338; // int32
    public const nint activation_delay = 0x133C; // float32
    public const nint m_fStartTime = 0x1340; // GameTime_t
    public const nint bDelayFinished = 0x1344; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint m_vFacing = 0x134C; // Vector
    public const nint m_nNumSprays = 0x1358; // int32
}

public static class CDOTA_Modifier_Bristleback_Bristleback {
    public const nint side_damage_reduction = 0x1318; // int32
    public const nint back_damage_reduction = 0x131C; // int32
    public const nint side_angle = 0x1320; // int32
    public const nint back_angle = 0x1324; // int32
    public const nint quill_release_threshold = 0x1328; // float32
    public const nint quill_release_interval = 0x132C; // float32
    public const nint m_bRearHit = 0x1330; // bool
    public const nint m_bSideHit = 0x1331; // bool
    public const nint m_flDamageAccumulated = 0x1334; // float32
    public const nint m_nAccumulatedHits = 0x1338; // int32
}

public static class CDOTA_Modifier_Bristleback_QuillSpray {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bristleback_QuillSpray_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint projectile_speed = 0x1350; // int32
    public const nint radius = 0x1354; // float32
    public const nint m_bTriggeredByBristleback = 0x1358; // bool
    public const nint m_bDelayed = 0x1359; // bool
    public const nint m_nAngleRestriction = 0x135C; // int32
    public const nint m_vFacing = 0x1360; // Vector
}

public static class CDOTA_Modifier_Bristleback_ViscousNasalGoo {
    public const nint base_armor = 0x1318; // float32
    public const nint armor_per_stack = 0x131C; // float32
    public const nint base_move_slow = 0x1320; // int32
    public const nint move_slow_per_stack = 0x1324; // int32
    public const nint stack_limit = 0x1328; // int32
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Bristleback_Warpath {
    public const nint damage_per_stack = 0x1318; // int32
    public const nint move_speed_per_stack = 0x131C; // int32
    public const nint max_stacks = 0x1320; // int32
    public const nint stack_duration = 0x1324; // float32
    public const nint m_flDuration = 0x1328; // float32
    public const nint m_flMaxStackStartTime = 0x132C; // GameTime_t
    public const nint m_bSuppressKillEater = 0x1330; // bool
}

public static class CDOTA_Modifier_Broodmother_IncapacitatingBite {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_IncapacitatingBiteOrb {
    public const nint miss_chance = 0x1318; // int32
    public const nint bonus_movespeed = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_InsatiableHunger {
    public const nint bonus_damage = 0x1318; // int32
    public const nint lifesteal_pct = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
    public const nint bat_bonus = 0x1324; // float32
    public const nint shard_damage_tick_interval = 0x1328; // float32
    public const nint damage_tick_count = 0x132C; // int32
    public const nint shard_damage_per_tick = 0x1330; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1334; // int32
}

public static class CDOTA_Modifier_Broodmother_PoisonSting {
    public const nint duration = 0x1318; // float32
    public const nint duration_hero = 0x131C; // float32
}

public static class CDOTA_Modifier_Broodmother_PoisonStingDebuff {
    public const nint damage_per_second = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_Silken_Bola {
    public const nint attack_damage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint miss_chance = 0x1320; // int32
    public const nint shard_miss_chance = 0x1324; // int32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderite {
    public const nint buff_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpideriteDebuff {
    public const nint m_hParentSpider = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderlings {
    public const nint spiderling_duration = 0x1318; // float32
    public const nint count = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_SpawnSpiderlingsShard {
    public const nint shard_spiderling_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Broodmother_Spider_HP {
    public const nint hp_bonus = 0x1318; // int32
    public const nint damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb {
    public const nint bonus_movespeed = 0x1318; // int32
    public const nint bonus_movespeed_scepter = 0x131C; // int32
    public const nint bonus_turn_rate = 0x1320; // float32
    public const nint flLastDamageTime = 0x1324; // float32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb_Slowed {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Broodmother_SpinWeb_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // int32
}

public static class CDOTA_Modifier_Broodmother_StickySnare {
    public const nint m_vOrigin = 0x1318; // Vector
    public const nint m_vWallDirection = 0x1324; // Vector
    public const nint m_vWallRight = 0x1330; // Vector
    public const nint width = 0x133C; // int32
    public const nint root_duration = 0x1340; // float32
    public const nint formation_delay = 0x1344; // float32
    public const nint m_bTouching = 0x1348; // bool
    public const nint m_hRight = 0x134C; // CHandle< CBaseEntity >
    public const nint m_bParticle = 0x1350; // bool
    public const nint m_flStartingTime = 0x1354; // GameTime_t
    public const nint m_nFoWID = 0x1358; // int32
    public const nint m_nTeamID = 0x135C; // int32
    public const nint m_vecAffectedHeroes = 0x1360; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nWarmupFXIndex = 0x1378; // ParticleIndex_t
}

public static class CDOTA_Modifier_Broodmother_StickySnare_Root {
    public const nint damage_per_second = 0x1318; // float32
    public const nint m_bFirstSecond = 0x131C; // bool
}

public static class CDOTA_Modifier_CDOTA_Modifier_CrystalMaiden_IceRink_Movement_Ricochet {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_BonusDamage {
    public const nint boar_bonus_damage = 0x1318; // float32
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_PoisonBase {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_CallOfTheWild_Boar_PoisonEffect {
    public const nint attack_speed = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_CentaurKhan_EnduranceAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_CentaurKhan_EnduranceAura_Bonus {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_Cart {
    public const nint m_hUnit = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bWasMoving = 0x131C; // bool
    public const nint m_bSpawnDone = 0x131D; // bool
    public const nint m_vecOldForward = 0x1320; // Vector
    public const nint break_distance = 0x132C; // int32
    public const nint m_vecPreviousLocation = 0x1330; // Vector
}

public static class CDOTA_Modifier_Centaur_DoubleEdge_Buff {
    public const nint shard_str_pct = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Centaur_DoubleEdge_Slow {
    public const nint shard_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_HoofStomp_Windup {
    public const nint bInterrupted = 0x1318; // bool
}

public static class CDOTA_Modifier_Centaur_Mount_Toss {
    public const nint air_duration = 0x1318; // float32
    public const nint air_height = 0x131C; // int32
    public const nint travel_distance = 0x1320; // int32
    public const nint m_hTarget = 0x1324; // CHandle< CBaseEntity >
    public const nint m_flPredictedTotalTime = 0x1328; // float32
    public const nint m_vStartPosition = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1340; // bool
    public const nint m_bDamageApplied = 0x1341; // bool
    public const nint m_bTargetTeleported = 0x1342; // bool
    public const nint m_vHorizontalVelocity = 0x1344; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1350; // Vector
    public const nint m_flInitialVelocityZ = 0x135C; // float32
    public const nint m_bDone = 0x1360; // bool
}

public static class CDOTA_Modifier_Centaur_Mounted {
    public const nint melee_attack_range = 0x1318; // int32
    public const nint m_hCart = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Centaur_Return {
    public const nint return_damage = 0x1318; // int32
    public const nint return_damage_str = 0x131C; // int32
}

public static class CDOTA_Modifier_Centaur_Return_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Centaur_Return_Bonus_Damage {
    public const nint damage_gain_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Centaur_Stampede {
    public const nint radius = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint has_flying_movement = 0x1320; // int32
    public const nint m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Centaur_Stampede_Slow {
    public const nint cast_time_increase = 0x1318; // int32
    public const nint slow_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Ceremonial_Robe_Aura {
    public const nint status_resistance = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_ChangeTreeModel_Thinker {
    public const nint m_hTree = 0x1318; // CHandle< CBaseEntity >
    public const nint m_strModel = 0x1320; // CUtlString
    public const nint m_nModelChangeToken = 0x1328; // int32
}

public static class CDOTA_Modifier_ChaosKnight_Chaos_Strike {
    public const nint creep_multiplier = 0x1318; // float32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // float32
    public const nint crit_min = 0x1320; // int32
    public const nint crit_max = 0x1324; // int32
    public const nint lifesteal = 0x1328; // int32
    public const nint chance = 0x132C; // float32
    public const nint m_nNextCrit = 0x1330; // int32
    public const nint m_vCritRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_ChaosKnight_Chaos_Strike_Debuff {
    public const nint maim_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_ChaosKnight_Reality_Rift_Debuff {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_DivineFavor {
    public const nint armor = 0x1318; // int32
    public const nint heal_rate = 0x131C; // float32
    public const nint creep_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Chen_DivineFavor_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_Divine_Favor_Armor {
    public const nint bonus_armor = 0x1318; // int32
    public const nint heal_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Chen_Divine_Favor_Teleport {
    public const nint bToChen = 0x1318; // bool
}

public static class CDOTA_Modifier_Chen_HandOfGod_Hot {
    public const nint heal_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_HolyPersuasion {
    public const nint health_min = 0x1318; // int32
    public const nint new_max = 0x131C; // int32
    public const nint health_bonus = 0x1320; // int32
    public const nint damage_bonus = 0x1324; // int32
    public const nint movement_speed_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Chen_Penitence {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_taken = 0x131C; // int32
}

public static class CDOTA_Modifier_Chen_Penitence_Attack_Speed_Buff {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Chen_Penitence_Self_Attack_Range {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint self_attack_range_bonus = 0x131C; // int32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_Chen_TestOfFaith_Teleport {
    public const nint bToChen = 0x1318; // bool
}

public static class CDOTA_Modifier_ClarityPotion {
    public const nint mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Clinkz_BurningBarrage {
    public const nint m_iArrowCount = 0x1318; // int32
    public const nint m_vOriginalTarget = 0x131C; // Vector
    public const nint arrow_width = 0x1328; // int32
    public const nint arrow_speed = 0x132C; // float32
    public const nint arrow_range_multiplier = 0x1330; // float32
    public const nint wave_count = 0x1334; // int32
    public const nint arrow_count_per_wave = 0x1338; // int32
    public const nint arrow_angle = 0x133C; // int32
    public const nint m_iLoopCount = 0x1340; // int32
    public const nint m_flInterval = 0x1344; // float32
    public const nint m_flCycleDelay = 0x1348; // float32
    public const nint m_flTimeWaste = 0x134C; // float32
    public const nint m_flExpectedTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Clinkz_Burning_Army {
    public const nint attack_rate = 0x1318; // float32
    public const nint damage_percent = 0x131C; // int32
    public const nint skeleton_health = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint skeleton_building_damage_reduction = 0x1328; // int32
    public const nint m_nDamageCounter = 0x132C; // int32
}

public static class CDOTA_Modifier_Clinkz_Burning_Army_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint count = 0x131C; // int32
    public const nint range = 0x1320; // int32
    public const nint m_vFacePosition = 0x1324; // Vector
}

public static class CDOTA_Modifier_Clinkz_DeathPact {
    public const nint health_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Clinkz_SearingArrows {
    public const nint damage_bonus = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1338; // bool
}

public static class CDOTA_Modifier_Clinkz_Strafe {
    public const nint attack_speed_bonus = 0x1318; // int32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint archer_attack_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_SearingArrows {
    public const nint damage_bonus = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1338; // bool
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Clinkz_Tar_Bomb_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Clinkz_WindWalk {
    public const nint move_speed_bonus_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Cloak_Of_Flames_Debuff {
    public const nint damage = 0x1318; // int32
    public const nint damage_illusions = 0x131C; // int32
}

public static class CDOTA_Modifier_Clockwerk_RocketFlare_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_ContextualTips {
    public const nint m_bAllEnemiesBots = 0x1318; // bool
    public const nint m_flGloblLastTipSendTime = 0x131C; // GameTime_t
    public const nint m_flLastEnemyHeroDamageTime = 0x1320; // GameTime_t
    public const nint m_flLastEnemyHeroVisibleTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_Corpselord_Revive {
    public const nint radius = 0x1318; // int32
    public const nint ticks_to_revive = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_pReviveTarget = 0x1324; // CHandle< CDOTA_BaseNPC >
    public const nint m_nCurrentTicks = 0x1328; // int32
}

public static class CDOTA_Modifier_Courier_Burst {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Courier_Passive_Bonus {
    public const nint m_vecTriggers = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Courier_ReturnStashItems {
    public const nint m_vLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_Courier_TakeStashItems {
    public const nint m_hStashOwner = 0x1318; // CHandle< CBaseEntity >
    public const nint m_vLocation = 0x131C; // Vector
    public const nint m_bTransferAfterTake = 0x1328; // bool
    public const nint stash_pickup_distance = 0x132C; // int32
}

public static class CDOTA_Modifier_Courier_TransferItems {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Creature_Flamestrike {
    public const nint impact_radius = 0x1318; // int32
    public const nint ground_burn_duration = 0x131C; // float32
    public const nint damage = 0x1320; // float32
    public const nint vision_distance = 0x1324; // int32
    public const nint vision_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Creature_Flamestrike_Ground {
    public const nint burn_interval = 0x1318; // float32
    public const nint burn_radius = 0x131C; // int32
    public const nint burn_dps = 0x1320; // int32
}

public static class CDOTA_Modifier_Creature_Full_Avoidance {
    public const nint m_flOriginalAvoidance = 0x1318; // float32
}

public static class CDOTA_Modifier_Creature_HybridFlyer {
    public const nint m_ctTimer = 0x1318; // CountdownTimer
}

public static class CDOTA_Modifier_Creature_IceSlam_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nPathEffectIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Creep_Bonus_XP {
    public const nint radius = 0x1318; // int32
    public const nint hero_damage_penalty = 0x131C; // int32
    public const nint bonus_gold = 0x1320; // int32
    public const nint m_iGoldBounty = 0x1324; // int32
    public const nint iBannerEffect = 0x1328; // ParticleIndex_t
    public const nint iRingEffect = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Creep_Irresolute {
    public const nint hero_damage_penalty = 0x1318; // int32
}

public static class CDOTA_Modifier_Creep_Piercing {
    public const nint creep_damage_bonus = 0x1318; // int32
    public const nint hero_damage_penalty = 0x131C; // int32
    public const nint heavy_damage_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Creep_Siege {
    public const nint bonus_building_damage = 0x1318; // int32
    public const nint incoming_hero_damage_penalty = 0x131C; // int32
    public const nint incoming_basic_damage_penalty = 0x1320; // int32
    public const nint incoming_controlled_unit_penalty = 0x1324; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_BrillianceAuraEffect {
    public const nint base_mana_regen = 0x1318; // float32
    public const nint self_factor = 0x131C; // float32
    public const nint proximity_bonus_factor = 0x1320; // float32
    public const nint proximity_bonus_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_CrystalNova {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_FreezingField {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint explosion_interval = 0x1324; // float32
    public const nint shard_bonus_explosion = 0x1328; // float32
    public const nint explosion_radius = 0x132C; // int32
    public const nint slow_duration = 0x1330; // float32
    public const nint explosion_min_dist = 0x1334; // int32
    public const nint explosion_max_dist = 0x1338; // int32
    public const nint frostbite_delay = 0x133C; // float32
    public const nint m_fLastTick = 0x1340; // GameTime_t
    public const nint m_fTimeAccumulator = 0x1344; // float32
    public const nint m_iExplosionCount = 0x1348; // int32
    public const nint m_iExplosionTotalCount = 0x134C; // int32
    public const nint m_iExplosionQuadrant = 0x1350; // int32
    public const nint m_iExplosionDistance = 0x1354; // int32
    public const nint shard_self_movement_speed_slow_pct = 0x1358; // int32
    public const nint m_nFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hHitHeroes = 0x1380; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bHitInvisibleHero = 0x1398; // bool
    public const nint can_move = 0x139C; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_FreezingField_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_CrystalMaiden_Frostbite {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint creep_damage_per_second = 0x1320; // int32
    public const nint tick_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_CrystalMaiden_IceRink_Movement {
    public const nint m_bHitFirstUpdate = 0x1318; // bool
    public const nint flMovementSpeed = 0x131C; // float32
    public const nint m_flTurnBoostProgress = 0x1320; // float32
    public const nint m_flFacingTarget = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flHitEndTime = 0x132C; // GameTime_t
    public const nint hit_recover_time = 0x1330; // float32
    public const nint m_vDirection = 0x1334; // Vector
}

public static class CDOTA_Modifier_CrystalMaiden_IceRink_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint rink_formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_CrystalMaiden_Let_It_Go_Thinker {
    public const nint m_vPathStart = 0x1318; // Vector
    public const nint m_vPathEnd = 0x1324; // Vector
}

public static class CDOTA_Modifier_Crystal_Maiden_Crystal_Clone {
    public const nint hop_duration = 0x1318; // float32
    public const nint hop_distance = 0x131C; // int32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_vTargetHorizontalDirection = 0x1328; // Vector
}

public static class CDOTA_Modifier_Crystal_Maiden_Crystal_Clone_Statue {
    public const nint frostbite_radius = 0x1318; // int32
    public const nint anim_delay = 0x131C; // float32
    public const nint m_bActivated = 0x1320; // bool
    public const nint clone_health = 0x1324; // int32
    public const nint m_flDamageTaken = 0x1328; // float32
}

public static class CDOTA_Modifier_Cyclone {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint m_vStartPos = 0x131C; // Vector
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flHeightT = 0x132C; // float32
}

public static class CDOTA_Modifier_DaggerOfRistul_Buff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_IonShell_IllusionInvulnerability {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch {
    public const nint m_PositionIndex = 0x1318; // Vector[30]
    public const nint m_nNormalPunchBuffIndex = 0x1480; // ParticleIndex_t
    public const nint m_flDistanceTraveled = 0x1484; // float32
    public const nint m_bIsValidTarget = 0x1488; // bool
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion {
    public const nint replica_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion_Thinker {
    public const nint m_vecIllusionSpawnPosition = 0x1318; // Vector
    public const nint speed = 0x1324; // int32
    public const nint m_hTarget = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DarkSeer_Surge {
    public const nint speed_boost = 0x1318; // int32
    public const nint trail_radius = 0x131C; // int32
    public const nint trail_duration = 0x1320; // float32
    public const nint m_vLastTrailThinkerLocation = 0x1324; // Vector
    public const nint m_bTrailStarted = 0x1330; // bool
}

public static class CDOTA_Modifier_DarkSeer_Surge_Trail {
    public const nint trail_move_slow = 0x1318; // int32
    public const nint trail_damage = 0x131C; // int32
    public const nint trail_damage_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_DarkSeer_Surge_Trail_Thinker {
    public const nint trail_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DarkSeer_Vacuum {
    public const nint pull_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica {
    public const nint m_vWallDirection = 0x1318; // Vector
    public const nint m_vWallRight = 0x1324; // Vector
    public const nint m_PreventReplicateTime = 0x1348; // CUtlMap< int32, GameTime_t >
    public const nint width = 0x1368; // int32
    public const nint wall_damage = 0x136C; // int32
    public const nint slow_duration = 0x1370; // float32
    public const nint replica_damage_incoming = 0x1374; // int32
    public const nint replica_damage_outgoing = 0x1378; // int32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica_Illusion {
    public const nint replica_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkSeer_WallOfReplica_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< CBaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_radius = 0x1324; // int32
    public const nint attack_radius = 0x1328; // int32
    public const nint roaming_seconds_per_rotation = 0x132C; // float32
    public const nint attack_interval = 0x1330; // float32
    public const nint target_count = 0x1334; // int32
    public const nint m_bTravelling = 0x1338; // bool
    public const nint travel_speed = 0x133C; // int32
}

public static class CDOTA_Modifier_DarkWillow_BrambleMaze_Creation_Thinker {
    public const nint latch_creation_interval = 0x1318; // float32
    public const nint initial_creation_delay = 0x131C; // float32
    public const nint placement_count = 0x1320; // int32
    public const nint placement_duration = 0x1324; // float32
    public const nint m_iBramblesIndex = 0x1328; // int32
}

public static class CDOTA_Modifier_DarkWillow_BrambleMaze_Thinker {
    public const nint latch_range = 0x1318; // int32
    public const nint latch_vision = 0x131C; // int32
    public const nint latch_creation_delay = 0x1320; // float32
    public const nint latch_duration = 0x1324; // float32
    public const nint m_bActive = 0x1330; // bool
}

public static class CDOTA_Modifier_DarkWillow_Creature_Invulnerable {
    public const nint m_nOverrideAnim = 0x1318; // int32
}

public static class CDOTA_Modifier_DarkWillow_CursedCrown {
    public const nint delay = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint stun_radius = 0x1320; // int32
    public const nint m_fStartTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_DarkWillow_Debuff_Fear {
    public const nint m_bDidGiveOrder = 0x1318; // bool
}

public static class CDOTA_Modifier_DarkWillow_ShadowRealm_Buff {
    public const nint damage = 0x1318; // int32
    public const nint max_damage_duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint bAttackRange = 0x1340; // bool
    public const nint m_flStartTime = 0x1344; // GameTime_t
    public const nint m_flFadeTime = 0x1348; // GameTime_t
    public const nint m_flDamageScale = 0x134C; // float32
    public const nint duration = 0x1350; // float32
}

public static class CDOTA_Modifier_DarkWillow_ShadowRealm_Buff_Attack_Logic {
    public const nint damage = 0x1318; // int32
    public const nint m_iRecord = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
}

public static class CDOTA_Modifier_DarkWillow_Terrorize_Thinker {
    public const nint m_hWisp = 0x1318; // CHandle< CBaseEntity >
    public const nint destination_travel_speed = 0x131C; // int32
    public const nint return_travel_speed = 0x1320; // int32
    public const nint destination_radius = 0x1324; // int32
    public const nint destination_status_duration = 0x1328; // float32
    public const nint initial_delay = 0x132C; // float32
    public const nint starting_height = 0x1330; // float32
    public const nint m_vAttackLocation = 0x1334; // Vector
    public const nint m_bAttacking = 0x1340; // bool
    public const nint m_bReturning = 0x1341; // bool
    public const nint m_fCurHeight = 0x1344; // float32
    public const nint m_fEstimatedTravelTime = 0x1348; // float32
    public const nint think_interval = 0x134C; // float32
    public const nint m_bInFlight = 0x1350; // bool
}

public static class CDOTA_Modifier_DataDriven {
    public const nint m_nAbilityID = 0x1330; // AbilityID_t
    public const nint m_nIndexInAbility = 0x1334; // int32
    public const nint m_bIsHidden = 0x1338; // bool
    public const nint m_bIsDebuff = 0x1339; // bool
    public const nint m_bIsPurgable = 0x133A; // bool
    public const nint m_bIsStunDebuff = 0x133B; // bool
    public const nint m_bAllowIllusionDuplicate = 0x133C; // bool
    public const nint m_bRemoveOnDeath = 0x133D; // bool
    public const nint m_pszAuraModifier = 0x1340; // char*
    public const nint m_nAuraModifierIndex = 0x1348; // int32
    public const nint m_nAuraRadius = 0x134C; // int32
    public const nint m_nAuraSearchTeam = 0x1350; // int32
    public const nint m_nAuraSearchType = 0x1354; // int32
    public const nint m_nAuraSearchFlags = 0x1358; // int32
    public const nint m_bAuraApplyToCaster = 0x135C; // bool
    public const nint m_bAuraApplyToParent = 0x135D; // bool
    public const nint m_nAttributes = 0x1360; // int32
    public const nint m_pszEffectName = 0x1368; // char*
    public const nint m_nEffectAttachType = 0x1370; // int32
    public const nint m_nPriority = 0x1374; // int32
    public const nint m_pszStatusEffectName = 0x1378; // char*
    public const nint m_nStatusEffectPriority = 0x1380; // int32
    public const nint m_nOverrideAnimation = 0x1384; // int32
    public const nint m_nOrbPriority = 0x1388; // int32
    public const nint m_nOrbLabel = 0x138C; // int32
    public const nint m_bOrbIsCastAttack = 0x1390; // bool
    public const nint m_flThinkInterval = 0x1394; // float32
    public const nint m_bNeedsReParseIfRefreshed = 0x1398; // bool
    public const nint m_pszModelName = 0x13A0; // char*
    public const nint m_pszOrbProjectileName = 0x13A8; // char*
    public const nint m_nModifierStatesEnabled = 0x3830; // uint64
    public const nint m_nModifierStatesDisabled = 0x3838; // uint64
    public const nint m_pOnCreated = 0x3840; // KeyValues*
    public const nint m_pOnIntervalThink = 0x3848; // KeyValues*
    public const nint m_pOnDestroy = 0x3850; // KeyValues*
    public const nint m_pOnAttackStart = 0x3858; // KeyValues*
    public const nint m_pOnAttack = 0x3860; // KeyValues*
    public const nint m_pOnAttackLanded = 0x3868; // KeyValues*
    public const nint m_pOnAttackFailed = 0x3870; // KeyValues*
    public const nint m_pOnAttackAllied = 0x3878; // KeyValues*
    public const nint m_pOnProjectileDodge = 0x3880; // KeyValues*
    public const nint m_pOnOrder = 0x3888; // KeyValues*
    public const nint m_pOnUnitMoved = 0x3890; // KeyValues*
    public const nint m_pOnAbilityStart = 0x3898; // KeyValues*
    public const nint m_pOnAbilityExecuted = 0x38A0; // KeyValues*
    public const nint m_pOnBreakInvisibility = 0x38A8; // KeyValues*
    public const nint m_pOnAbilityEndChannel = 0x38B0; // KeyValues*
    public const nint m_pOnTakeDamage = 0x38B8; // KeyValues*
    public const nint m_pOnDealDamage = 0x38C0; // KeyValues*
    public const nint m_pOnStateChanged = 0x38C8; // KeyValues*
    public const nint m_pOnAttacked = 0x38D0; // KeyValues*
    public const nint m_pOnDeath = 0x38D8; // KeyValues*
    public const nint m_pOnKill = 0x38E0; // KeyValues*
    public const nint m_pOnRespawn = 0x38E8; // KeyValues*
    public const nint m_pOnSpentMana = 0x38F0; // KeyValues*
    public const nint m_pOnTeleporting = 0x38F8; // KeyValues*
    public const nint m_pOnTeleported = 0x3900; // KeyValues*
    public const nint m_pOnHealthGained = 0x3908; // KeyValues*
    public const nint m_pOnManaGained = 0x3910; // KeyValues*
    public const nint m_pOnHeroKilled = 0x3918; // KeyValues*
    public const nint m_pOnHealReceived = 0x3920; // KeyValues*
    public const nint m_pOnAttackFinished = 0x3928; // KeyValues*
    public const nint m_pOnAttackCancelled = 0x3930; // KeyValues*
}

public static class CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint travel_speed_pct = 0x1320; // int32
    public const nint m_nMaxRange = 0x1324; // int32
    public const nint m_vStartPoint = 0x1328; // Vector
    public const nint m_vLastTrailThinkerLocation = 0x1334; // Vector
    public const nint m_vEndPointShard = 0x1340; // Vector
    public const nint m_nStatusFXIndex = 0x134C; // ParticleIndex_t
    public const nint flare_radius = 0x1350; // int32
    public const nint bHasStartedBurning = 0x1354; // bool
    public const nint flare_debuff_duration = 0x1358; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Converge {
    public const nint move_slow = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Converge_Thinker {
    public const nint flare_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Attack_Bonus {
    public const nint attack_damage = 0x1318; // int32
    public const nint creep_damage_penalty = 0x131C; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Caster {
    public const nint movement_speed = 0x1318; // int32
    public const nint shard_movement_penalty = 0x131C; // int32
    public const nint swipe_radius = 0x1320; // int32
    public const nint swipe_damage = 0x1324; // int32
    public const nint smash_radius = 0x1328; // int32
    public const nint smash_damage = 0x132C; // int32
    public const nint m_nCurrentSpeed = 0x1330; // int32
    public const nint flSwipeInterval = 0x1334; // float32
    public const nint m_flNextHit = 0x1338; // GameTime_t
    public const nint iCurrentAttack = 0x133C; // int32
    public const nint total_attacks = 0x1340; // int32
    public const nint smash_stun_duration = 0x1344; // float32
    public const nint sweep_stun_duration = 0x1348; // float32
    public const nint m_bHasCompletedMove = 0x134C; // bool
    public const nint duration = 0x1350; // float32
    public const nint m_vTargetHorizontalDirection = 0x1354; // Vector
    public const nint smash_distance_from_hero = 0x1360; // int32
    public const nint animation_rate = 0x1364; // float32
    public const nint turn_rate = 0x1368; // float32
    public const nint m_flFacingTarget = 0x136C; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Slow {
    public const nint swipe_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Smash_Stun {
    public const nint damage = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Luminosity {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint attack_count = 0x131C; // int32
    public const nint m_bShouldIncrement = 0x1320; // bool
}

public static class CDOTA_Modifier_Dawnbreaker_Luminosity_Attack_Buff {
    public const nint m_bIsBuffedAttack = 0x1318; // bool
    public const nint heal_pct = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint heal_radius = 0x1324; // int32
    public const nint heal_from_creeps = 0x1328; // int32
    public const nint allied_healing_pct = 0x132C; // int32
    public const nint hTargets = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flTotalToHeal = 0x1348; // float32
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_AirTime {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_vDirection = 0x1320; // Vector
    public const nint m_flEndTime = 0x132C; // float32
    public const nint m_hThinker = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vCurrentTargetPosition = 0x1334; // Vector
    public const nint m_vDesiredTargetPosition = 0x1340; // Vector
    public const nint m_vStartPosition = 0x134C; // Vector
    public const nint airtime_scepter_movement_speed = 0x1358; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Disable {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Evasion {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Thinker {
    public const nint pulse_interval = 0x1318; // float32
    public const nint iEffectRadius = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint m_nThinkerFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Armor {
    public const nint armor_reduction = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Armor_Counter {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint armor_reduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Dazzle_Bad_Juju_Manacost {
    public const nint mana_cost_increase_duration = 0x1318; // float32
    public const nint m_vecExpirationTimes = 0x1320; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_Dazzle_Good_Juju {
    public const nint cooldown_reduction = 0x1318; // float32
    public const nint item_cooldown_reduction = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Dazzle_Poison_Touch {
    public const nint slow = 0x1318; // int32
    public const nint bonus_slow = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
    public const nint flAccummulatedBonusSlow = 0x1324; // float32
    public const nint iAccummulatedBonusDamage = 0x1328; // int32
    public const nint attack_range_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Dazzle_Poison_Touch_Self {
    public const nint attack_range_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Dazzle_Rain_Of_Vermin {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint hex_chance = 0x1320; // float32
    public const nint hex_duration = 0x1324; // float32
    public const nint damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Dazzle_Shallow_Grave {
    public const nint m_bHasPostedEvent = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint fx_halo_height = 0x1320; // float32
    public const nint heal_amplify = 0x1324; // int32
}

public static class CDOTA_Modifier_Dazzle_Weave_Armor {
    public const nint armor_per_second = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_DeathProphet_CryptSwarm_Slow {
    public const nint slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Exorcism {
    public const nint radius = 0x1318; // int32
    public const nint spirit_speed = 0x131C; // int32
    public const nint max_distance = 0x1320; // int32
    public const nint give_up_distance = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_damage = 0x132C; // int32
    public const nint heal_percent = 0x1330; // int32
    public const nint spirit_duration = 0x1334; // int32
    public const nint ghost_spawn_rate = 0x1338; // float32
    public const nint movement_bonus = 0x133C; // int32
    public const nint m_iSpirits = 0x1340; // int32
    public const nint m_fStartTime = 0x1344; // GameTime_t
    public const nint m_fLastThinkTime = 0x1348; // GameTime_t
    public const nint m_fSpawnTime = 0x134C; // GameTime_t
    public const nint m_bFirstSpawn = 0x1350; // bool
    public const nint m_bCommentedOnExpired = 0x1351; // bool
    public const nint m_bForceExpired = 0x1352; // bool
    public const nint m_vecSpirits = 0x1358; // CUtlVector< sSpiritInfo* >
}

public static class CDOTA_Modifier_DeathProphet_Scepter {
    public const nint radius = 0x1318; // int32
    public const nint spirit_speed = 0x131C; // int32
    public const nint max_distance = 0x1320; // int32
    public const nint give_up_distance = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_damage = 0x132C; // int32
    public const nint heal_percent = 0x1330; // int32
    public const nint spirit_duration = 0x1334; // int32
    public const nint m_fStartTime = 0x1338; // GameTime_t
    public const nint m_fLastThinkTime = 0x133C; // GameTime_t
    public const nint m_bExpired = 0x1340; // bool
    public const nint m_SpiritInfo = 0x1348; // sSpiritInfo*
}

public static class CDOTA_Modifier_DeathProphet_Silence_Debuff {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Slow {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon {
    public const nint flSmoothness = 0x1318; // float32
    public const nint damage = 0x131C; // float32
    public const nint damage_pct = 0x1320; // float32
    public const nint drain_range = 0x1324; // int32
    public const nint haunt_duration = 0x1328; // float32
    public const nint siphon_buffer = 0x132C; // int32
    public const nint movement_steal = 0x1330; // int32
    public const nint m_hTarget = 0x1334; // CHandle< CBaseEntity >
    public const nint m_iLinkIndex = 0x1338; // ParticleIndex_t
    public const nint m_nSelfBuffSerialNumber = 0x133C; // int32
    public const nint m_nTargetDebuffSerialNumber = 0x1340; // int32
    public const nint m_bAppliedFear = 0x1344; // bool
    public const nint shard_fear_duration = 0x1348; // float32
    public const nint shard_consecutive_siphon_duration = 0x134C; // float32
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_DeathProphet_SpiritSiphon_Slow {
    public const nint movement_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_DeathProphet_Witchcraft {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Demonicon_Bonus {
    public const nint hp_bonus = 0x1318; // int32
    public const nint damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Desolator_2_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Desolator_Corruption {
    public const nint corruption_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Devastator_Debuff {
    public const nint active_mres_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Diretide_Portal_Buff {
    public const nint m_hInvader = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Disruptor_Glimpse {
    public const nint m_PositionIndex = 0x1318; // Vector[18]
}

public static class CDOTA_Modifier_Disruptor_Glimpse_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_hEntity = 0x1324; // CHandle< CBaseEntity >
    public const nint m_flDistance = 0x1328; // float32
}

public static class CDOTA_Modifier_Disruptor_KineticField {
    public const nint radius = 0x1318; // int32
    public const nint m_vOriginLoc = 0x131C; // Vector
    public const nint m_bTruesight = 0x1328; // bool
    public const nint damage_per_second = 0x132C; // float32
}

public static class CDOTA_Modifier_Disruptor_KineticFieldThinker {
    public const nint radius = 0x1318; // int32
    public const nint formation_time = 0x131C; // float32
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_Disruptor_StaticStorm {
    public const nint miss_rate = 0x1318; // int32
    public const nint movement_speed_reduction = 0x131C; // int32
    public const nint attack_speed_reduction = 0x1320; // int32
    public const nint m_bHasScepter = 0x1324; // bool
}

public static class CDOTA_Modifier_Disruptor_StaticStormThinker {
    public const nint m_nCurrentPulse = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_max = 0x1320; // int32
    public const nint pulses = 0x1324; // int32
    public const nint duration = 0x1328; // float32
    public const nint m_bHasGrantedThreeHeroKillEater = 0x132C; // bool
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike {
    public const nint strike_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint strike_damage = 0x1320; // int32
    public const nint strike_damage_bonus = 0x1324; // int32
    public const nint m_flGroundDelayEndTime = 0x1328; // GameTime_t
    public const nint is_thinker = 0x132C; // bool
    public const nint m_bTransferred = 0x132D; // bool
    public const nint m_nThinkerViewer = 0x1330; // int32
    public const nint m_nStrikeCount = 0x1334; // int32
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Disruptor_Thunder_Strike_Speed {
    public const nint shard_movement_speed_bonus = 0x1318; // int32
    public const nint shard_attack_speed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Devour {
    public const nint armor = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Devour_Intrinsic {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint spell_amp_bonus = 0x131C; // int32
    public const nint cooldown_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_DoomBringer_Doom {
    public const nint damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint deniable_pct = 0x1320; // int32
    public const nint flElapsedTime = 0x1324; // float32
    public const nint damage_amp = 0x1328; // int32
    public const nint m_bDoesBreak = 0x132C; // bool
    public const nint m_bDoesMute = 0x132D; // bool
}

public static class CDOTA_Modifier_DoomBringer_Doom_Aura_Enemy {
    public const nint scepter_aura_radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_Doom_Aura_Self {
    public const nint scepter_aura_radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DoomBringer_InfernalBlade {
    public const nint m_bInfernalBladeAttack = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint burn_duration = 0x1320; // float32
    public const nint ministun_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_DoomBringer_InfernalBlade_Burn {
    public const nint burn_damage = 0x1318; // int32
    public const nint burn_damage_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_DoomBringer_ScorchedEarthEffect {
    public const nint bonus_movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_DoomBringer_ScorchedEarthEffectAura {
    public const nint damage_per_second = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint heal_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_DragonKnight_BreatheFire_Reduction {
    public const nint reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_CorrosiveBreath {
    public const nint corrosive_breath_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_DragonKnight_CorrosiveBreathDoT {
    public const nint corrosive_breath_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonBlood {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonBlood_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_DragonKnight_DragonForm {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_damage = 0x131C; // int32
    public const nint bonus_attack_range = 0x1320; // int32
    public const nint attack_projectile_speed_bonus = 0x1324; // int32
    public const nint magic_resistance = 0x1328; // int32
    public const nint model_scale = 0x132C; // int32
    public const nint iLevel = 0x1330; // int32
    public const nint m_iOriginalAttackCapabilities = 0x1334; // int32
    public const nint m_iszRangedAttackEffect = 0x1338; // CUtlSymbolLarge
    public const nint bonus_slow_resistance = 0x1340; // int32
}

public static class CDOTA_Modifier_DragonKnight_Fireball_Burn {
    public const nint burn_interval = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_Fireball_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint linger_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_DragonKnight_FrostBreath {
    public const nint frost_duration = 0x1318; // float32
    public const nint frost_aoe = 0x131C; // float32
}

public static class CDOTA_Modifier_DragonKnight_FrostBreath_Slow {
    public const nint frost_bonus_movement_speed = 0x1318; // int32
    public const nint frost_bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_DragonKnight_SplashAttack {
    public const nint splash_radius = 0x1318; // int32
    public const nint splash_damage_percent = 0x131C; // int32
    public const nint corrosive_breath_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Dragon_Scale_Burn {
    public const nint damage_per_sec = 0x1318; // int32
}

public static class CDOTA_Modifier_DrowRanger_Arcana {
    public const nint m_bFlawlessVictoryProgressGranted = 0x1318; // bool
}

public static class CDOTA_Modifier_DrowRanger_ArcanaKill_Delay {
    public const nint m_nPlayerID_Drow = 0x1318; // PlayerID_t
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint shard_bonus_damage_per_stack = 0x1330; // int32
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Hypothermia {
    public const nint shard_regen_reduction_pct_per_stack = 0x1318; // int32
    public const nint shard_burst_radius = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Shard_Slow {
    public const nint shard_burst_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_DrowRanger_FrostArrows_Slow {
    public const nint frost_arrows_movement_speed = 0x1318; // int32
    public const nint shard_max_stacks = 0x131C; // int32
    public const nint shard_stack_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship {
    public const nint chance = 0x1318; // int32
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_GlacialInFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint bonus_factor = 0x1350; // int32
    public const nint disable_range = 0x1354; // int32
    public const nint agility_range = 0x1358; // int32
    public const nint bonus_damage = 0x135C; // int32
    public const nint split_count = 0x1360; // int32
    public const nint split_range = 0x1364; // int32
    public const nint m_bGlacialAttack = 0x1368; // bool
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship_Aura_Bonus {
    public const nint agility_multiplier = 0x1318; // int32
    public const nint agility_multiplier_ally = 0x131C; // float32
}

public static class CDOTA_Modifier_DrowRanger_Marksmanship_Reduction {
    public const nint split_damage_reduction = 0x1318; // int32
    public const nint m_vecRecords = 0x1320; // CUtlVectorFixedGrowable< int32 >
    public const nint m_vecRecordTimes = 0x1358; // CUtlVectorFixedGrowable< GameTime_t >
}

public static class CDOTA_Modifier_DrowRanger_TrueshotAura {
    public const nint trueshot_ranged_attack_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_DrowRanger_WaveOfSilence {
    public const nint miss_chance = 0x1318; // int32
    public const nint gust_reveals_invis = 0x131C; // int32
}

public static class CDOTA_Modifier_DrowRanger_WaveOfSilence_Buff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop {
    public const nint multishot_arrow_bonus = 0x1318; // int32
    public const nint end_height = 0x131C; // int32
    public const nint attack_range_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Aura {
    public const nint shard_width = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Removal {
    public const nint z_speed_override = 0x1318; // float32
}

public static class CDOTA_Modifier_Drow_Ranger_Glacier_Shard {
    public const nint m_hObstruction = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Drow_Ranger_Multishot {
    public const nint m_iArrowCount = 0x1318; // int32
    public const nint m_vOriginalTarget = 0x131C; // Vector
    public const nint arrow_width = 0x1328; // int32
    public const nint arrow_speed = 0x132C; // float32
    public const nint arrow_range_multiplier = 0x1330; // float32
    public const nint wave_count = 0x1334; // int32
    public const nint arrow_count_per_wave = 0x1338; // int32
    public const nint arrow_angle = 0x133C; // int32
    public const nint m_iLoopCount = 0x1340; // int32
    public const nint m_flInterval = 0x1344; // float32
    public const nint m_flCycleDelay = 0x1348; // float32
    public const nint m_flTimeWaste = 0x134C; // float32
    public const nint m_flExpectedTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Drow_Ranger_Multishot_Damage {
    public const nint arrow_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_EarthSpirit_BoulderSmash {
    public const nint m_bInterrupted = 0x1318; // bool
    public const nint m_nProjectileID = 0x131C; // int32
}

public static class CDOTA_Modifier_EarthSpirit_Boulder_Smash_Debuff {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_EarthSpirit_GeomagneticGrip {
    public const nint radius = 0x1318; // int32
    public const nint rock_damage = 0x131C; // int32
    public const nint pull_units_per_second = 0x1320; // float32
    public const nint pull_units_per_second_heroes = 0x1324; // float32
    public const nint total_pull_distance = 0x1328; // float32
    public const nint duration = 0x132C; // float32
    public const nint m_bUsedStone = 0x1330; // bool
    public const nint m_vDestination = 0x1334; // Vector
    public const nint m_vLocation = 0x1340; // Vector
    public const nint m_hHitEntities = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_EarthSpirit_Magnetize {
    public const nint rock_search_radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint damage_interval = 0x1320; // float32
    public const nint rock_explosion_delay = 0x1324; // float32
    public const nint damage_duration = 0x1328; // float32
    public const nint cast_radius = 0x132C; // int32
    public const nint rock_explosion_radius = 0x1330; // int32
    public const nint m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint duration = 0x1350; // float32
    public const nint m_bShowOverhead = 0x1354; // bool
}

public static class CDOTA_Modifier_EarthSpirit_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_bHasBeenMagnetized = 0x131C; // bool
}

public static class CDOTA_Modifier_EarthSpirit_Polarization {
    public const nint damage_per_second = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint damage_duration = 0x1320; // float32
    public const nint rock_search_radius = 0x1324; // int32
    public const nint m_hMagnetizeAbility = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_EarthSpirit_RollingBoulder_Caster {
    public const nint m_vDir = 0x1318; // Vector
    public const nint m_bBoulderCreated = 0x1324; // bool
}

public static class CDOTA_Modifier_EarthSpirit_StoneThinker {
    public const nint vision_radius = 0x1318; // int32
    public const nint m_bHasBeenMagnetized = 0x131C; // bool
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Earthshaker_Aftershock {
    public const nint aftershock_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Earthshaker_Arcana {
    public const nint m_nComboCount = 0x1318; // int32
    public const nint m_flComboWindow = 0x131C; // float32
    public const nint m_flComboDisplayInterval = 0x1320; // float32
    public const nint m_flDamageDone = 0x1324; // float32
}

public static class CDOTA_Modifier_Earthshaker_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Earthshaker_EnchantTotem {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint totem_damage_percentage = 0x131C; // int32
    public const nint scepter_cleave_pct = 0x1320; // int32
    public const nint scepter_cleave_starting_width = 0x1324; // float32
    public const nint scepter_cleave_ending_width = 0x1328; // float32
    public const nint scepter_cleave_distance = 0x132C; // float32
    public const nint bActive = 0x1338; // bool
}

public static class CDOTA_Modifier_Earthshaker_EnchantTotem_Leap {
    public const nint m_vLoc = 0x131C; // Vector
    public const nint m_flPredictedTotalTime = 0x1328; // float32
    public const nint m_vStartPosition = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1340; // bool
    public const nint m_bDamageApplied = 0x1341; // bool
    public const nint m_bTargetTeleported = 0x1342; // bool
    public const nint m_vHorizontalVelocity = 0x1344; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1350; // Vector
    public const nint m_flInitialVelocityZ = 0x135C; // float32
    public const nint scepter_height = 0x1360; // int32
    public const nint scepter_height_arcbuffer = 0x1364; // int32
    public const nint scepter_acceleration_z = 0x1368; // int32
    public const nint scepter_acceleration_horizontal = 0x136C; // int32
}

public static class CDOTA_Modifier_Earthshaker_Fissure_Shard {
    public const nint shard_aftershock_stun_duration_pct = 0x1318; // int32
    public const nint shard_free_pathing_linger_duration = 0x131C; // float32
    public const nint m_vStartPos = 0x1320; // Vector
    public const nint m_vEndPos = 0x132C; // Vector
    public const nint m_flEndTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_EchoSabre_Debuff {
    public const nint movement_slow = 0x1318; // int32
    public const nint attack_speed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Elder_Titan_AncestralSpirit {
    public const nint pass_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_nCreepsHit = 0x1320; // int32
    public const nint m_nHeroesHit = 0x1324; // int32
    public const nint m_flSpeed = 0x1328; // float32
    public const nint m_hHitUnits = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nBonusMoveSpeed = 0x1348; // int32
}

public static class CDOTA_Modifier_Elder_Titan_AncestralSpirit_Buff {
    public const nint move_pct_creeps = 0x1318; // float32
    public const nint move_pct_heroes = 0x131C; // int32
    public const nint damage_creeps = 0x1320; // int32
    public const nint damage_heroes = 0x1324; // int32
    public const nint armor_creeps = 0x1328; // float32
    public const nint armor_heroes = 0x132C; // float32
    public const nint move_pct_cap = 0x1330; // float32
    public const nint m_nCreepsHit = 0x1334; // int32
    public const nint m_nHeroesHit = 0x1338; // int32
    public const nint m_fSpeedPercentage = 0x133C; // float32
    public const nint m_nDamage = 0x1340; // int32
    public const nint m_nArmor = 0x1344; // int32
    public const nint m_bSpellImmunity = 0x1348; // bool
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter_Caster {
    public const nint m_hHitUnits = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint vision_width = 0x1330; // int32
    public const nint vision_interval = 0x1334; // float32
    public const nint vision_duration = 0x1338; // float32
    public const nint vision_step = 0x133C; // int32
    public const nint total_steps = 0x1340; // int32
    public const nint m_nCompletedSteps = 0x1344; // int32
    public const nint m_vStart = 0x1348; // Vector
    public const nint m_vEnd = 0x1354; // Vector
    public const nint m_vNextVisionLocation = 0x1360; // Vector
    public const nint m_vCastDirection = 0x136C; // Vector
    public const nint m_nHumHeroesHit = 0x1378; // int32
    public const nint m_bHitInvisibleHero = 0x137C; // bool
}

public static class CDOTA_Modifier_Elder_Titan_EarthSplitter_Thinker {
    public const nint crack_width = 0x1318; // int32
    public const nint damage_pct = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
    public const nint slow_duration_scepter = 0x1324; // float32
    public const nint m_pParentModifier = 0x1328; // CDOTA_Buff*
}

public static class CDOTA_Modifier_Elder_Titan_EchoStomp {
    public const nint wake_damage_limit = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
    public const nint initial_stun_duration = 0x1320; // float32
    public const nint ctStunTimer = 0x1328; // CountdownTimer
    public const nint m_flDamageTaken = 0x1340; // float32
}

public static class CDOTA_Modifier_Elder_Titan_EchoStomp_Magic_Immune {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Armor {
    public const nint armor_reduction_pct = 0x1318; // int32
    public const nint m_flArmorReduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_Armor {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_MagicResistance {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Elder_Titan_NaturalOrder_MagicResistance {
    public const nint magic_resistance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_ElixerHealing {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnantThinker {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_bIsShardRemnant = 0x131C; // bool
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_RemnantTracker {
    public const nint m_vActiveRemnants = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vTrackingDelayedRemnants = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint shard_charge_radius = 0x1348; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_Shard {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FireRemnant_Shard_Debuff {
    public const nint shard_damage_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_EmberSpirit_FlameGuard {
    public const nint absorb_amount = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint tick_interval = 0x1324; // float32
    public const nint shield_pct_absorb = 0x1328; // int32
    public const nint m_nAbsorbRemaining = 0x132C; // int32
    public const nint m_flShowParticleInterval = 0x1330; // float32
    public const nint m_bDestroy = 0x1334; // bool
    public const nint linger_duration = 0x1338; // float32
}

public static class CDOTA_Modifier_EmberSpirit_FlameGuard_Debuff {
    public const nint damage_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_EmberSpirit_SearingChains {
    public const nint damage_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint tick_damage = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_EmberSpirit_SleightOfFist_Caster {
    public const nint bonus_hero_damage = 0x1318; // int32
    public const nint creep_damage_penalty = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint attack_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_Enchantress_Bunny_Hop {
    public const nint hop_duration = 0x1318; // float32
    public const nint hop_height = 0x131C; // int32
    public const nint hop_distance = 0x1320; // int32
    public const nint m_flStartZ = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flJumpDuration = 0x132C; // float32
    public const nint m_flJumpHeight = 0x1330; // float32
    public const nint m_vTargetHorizontalDirection = 0x1334; // Vector
    public const nint hUnitsToHit = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bLaunched = 0x1358; // bool
}

public static class CDOTA_Modifier_Enchantress_Enchant_Controlled {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint enchant_health = 0x131C; // int32
    public const nint enchant_armor = 0x1320; // int32
    public const nint enchant_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Enchantress_Enchant_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Enchantress_Impetus {
    public const nint distance_damage_pct = 0x1318; // float32
    public const nint distance_cap = 0x131C; // int32
    public const nint creep_multiplier = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Enchantress_Little_Friends {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint bonus_move_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Enchantress_Little_Friends_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
    public const nint root_base_duration = 0x1330; // float32
    public const nint root_per_target = 0x1334; // float32
    public const nint max_root = 0x1338; // float32
    public const nint m_flLastSeen = 0x133C; // GameTime_t
}

public static class CDOTA_Modifier_Enchantress_Little_Friends_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Enchantress_NaturesAttendants {
    public const nint heal_interval = 0x1318; // float32
    public const nint heal = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint wisp_count = 0x1324; // int32
    public const nint movespeed = 0x1328; // int32
    public const nint m_nWispFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enchantress_NaturesAttendants_Shard {
    public const nint heal_interval = 0x1318; // float32
    public const nint heal = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint shard_permanent_wisp_count = 0x1324; // int32
    public const nint m_bActive = 0x1328; // bool
    public const nint m_nWispFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enchantress_Untouchable_Slow {
    public const nint slow_attack_speed = 0x1318; // int32
    public const nint m_nStatusFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_BlackHoleThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_bFoundFive = 0x131C; // bool
    public const nint m_bGrantedKillEater = 0x131D; // bool
}

public static class CDOTA_Modifier_Enigma_BlackHole_Pull {
    public const nint pull_speed = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint tick_rate = 0x1324; // float32
    public const nint pull_rotate_speed = 0x1328; // float32
    public const nint animation_rate = 0x132C; // float32
    public const nint scepter_pct_damage = 0x1330; // float32
    public const nint m_flDamageTick = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Enigma_Black_Hole_Pull_Scepter {
    public const nint scepter_drag_speed = 0x1318; // int32
    public const nint scepter_pull_rotate_speed = 0x131C; // float32
    public const nint aura_origin_x = 0x1320; // float32
    public const nint aura_origin_y = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_vCenter = 0x132C; // Vector
    public const nint m_flLastThinkTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_Enigma_Black_Hole_Thinker_Scepter {
    public const nint scepter_radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Enigma_DemonicConversion {
    public const nint m_iAttackCount = 0x1320; // int32
    public const nint split_attack_count = 0x1324; // int32
    public const nint life_extension = 0x1328; // float32
    public const nint eidolon_attack_range = 0x132C; // int32
    public const nint eidolon_bonus_damage = 0x1330; // int32
    public const nint eidolon_bonus_attack_speed = 0x1334; // int32
    public const nint m_bAllowSplit = 0x1338; // bool
    public const nint m_nSpawnNum = 0x133C; // int32
}

public static class CDOTA_Modifier_Enigma_DemonicConversion_ModelScale {
    public const nint self_modelscale = 0x1318; // float32
}

public static class CDOTA_Modifier_Enigma_Malefice {
    public const nint tick_rate = 0x1318; // float32
    public const nint stun_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint m_nEidolonSpawnNum = 0x1328; // int32
}

public static class CDOTA_Modifier_Enigma_MidnightPulseThinker {
    public const nint radius = 0x1318; // int32
    public const nint n_FXIndex = 0x131C; // ParticleIndex_t
    public const nint m_bHasGrantedKillEater = 0x1320; // bool
}

public static class CDOTA_Modifier_Enigma_MidnightPulse_Damage {
    public const nint damage_percent = 0x1318; // float32
    public const nint tick_rate = 0x131C; // float32
    public const nint base_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_Hurricane {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_FX = 0x132C; // ParticleIndex_t
    public const nint distance = 0x1330; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_ToughnessAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_EnragedWildkin_ToughnessAura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Ethereal_Blade_Ethereal {
    public const nint ethereal_damage_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Eul_Cyclone {
    public const nint m_hBlocker = 0x1330; // CHandle< CBaseEntity >
    public const nint m_bBlockerCreated = 0x1334; // bool
}

public static class CDOTA_Modifier_FacelessVoid_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_FacelessVoid_Backtrack {
    public const nint dodge_chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere_Freeze {
    public const nint m_vecAbilities = 0x1318; // CUtlVectorFixedGrowable< CHandle< CDOTABaseAbility > >
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere_SelfBuff {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_Chronosphere_Speed {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_FacelessVoid_TimeDilation_Distortion {
    public const nint slow_distance_min = 0x1318; // float32
    public const nint slow_distance_max = 0x131C; // float32
}

public static class CDOTA_Modifier_FacelessVoid_TimeDilation_Slow {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAffectedAbilities = 0x131C; // int32
    public const nint m_flLastDamageTime = 0x1320; // GameTime_t
    public const nint slow = 0x1324; // int32
    public const nint cooldown_percentage = 0x1328; // int32
    public const nint damage_per_stack = 0x132C; // int32
    public const nint base_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_FacelessVoid_TimeLock {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint delay = 0x1320; // float32
    public const nint chance_pct = 0x1324; // int32
    public const nint bonus_damage = 0x1328; // int32
    public const nint last_attack_time = 0x132C; // GameTime_t
    public const nint m_ProcAttackRecords = 0x1330; // CUtlVector< int16 >
    public const nint apply_activity_modifier_until = 0x1348; // GameTime_t
    public const nint disable_activity_modifier_until = 0x134C; // GameTime_t
    public const nint m_mapTargets = 0x1350; // CUtlOrderedMap< CHandle< CDOTA_BaseNPC >, int32, F( size=1 ) >
}

public static class CDOTA_Modifier_FacelessVoid_TimeLock_ForceProc {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
    public const nint delay = 0x1324; // float32
    public const nint m_hTarget = 0x1328; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Modifier_FacelessVoid_TimeWalk_ShardBuff {
    public const nint m_vStartLocation = 0x1318; // Vector
}

public static class CDOTA_Modifier_FacelessVoid_TimeWalk_Slow {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_FelBeast_Haunt {
    public const nint damage_per_second = 0x1318; // int32
}

public static class CDOTA_Modifier_FelBeast_Haunt_OnDeath {
    public const nint projectile_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_FillerThinker {
    public const nint hCasterList = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint bStarted = 0x1330; // bool
    public const nint nCount = 0x1334; // int32
}

public static class CDOTA_Modifier_Filler_Heal {
    public const nint hp_heal = 0x1318; // int32
    public const nint mp_heal = 0x131C; // int32
    public const nint hp_heal_growth = 0x1320; // int32
    public const nint mp_heal_growth = 0x1324; // float32
    public const nint hp_heal_pct = 0x1328; // int32
    public const nint mp_heal_pct = 0x132C; // int32
    public const nint tota_hp_per_second = 0x1330; // int32
    public const nint tota_mp_per_second = 0x1334; // int32
}

public static class CDOTA_Modifier_Filler_Heal_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Filler_LastDitch {
    public const nint melee_number = 0x1318; // float32
    public const nint ranged_number = 0x131C; // float32
    public const nint siege_number = 0x1320; // float32
    public const nint lane = 0x1324; // int32
}

public static class CDOTA_Modifier_Firecracker_Debuff {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Firework_Mine {
    public const nint damage_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_FixedNumberOfHitsToKill {
    public const nint creep_attack_divisor = 0x1318; // int32
    public const nint attack_count = 0x131C; // int32
}

public static class CDOTA_Modifier_Flagbearer_Creep_Aura_Effect {
    public const nint bonus_health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_FlaskHealing {
    public const nint health_regen = 0x1318; // int32
    public const nint break_on_hero_damage = 0x131C; // int32
    public const nint m_fHealingDone = 0x1320; // float32
    public const nint m_sAbilityClassname = 0x1328; // CUtlString
}

public static class CDOTA_Modifier_ForceStaff {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint push_length = 0x132C; // float32
}

public static class CDOTA_Modifier_Force_Boots {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint push_length = 0x132C; // int32
    public const nint push_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAmp {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAmp_Bonus {
    public const nint heal_amp = 0x1318; // float32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_HealAutocast {
    public const nint health = 0x1318; // int32
    public const nint m_hHealTarget = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_ForestTrollHighPriest_ManaAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ForestTrollHighPriest_ManaAura_Bonus {
    public const nint mana_regen = 0x1318; // float32
    public const nint allow_multiple = 0x131C; // int32
    public const nint m_nAttributes = 0x1320; // int32
}

public static class CDOTA_Modifier_ForgedSpirit_MeltingStrike {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_ForgedSpirit_Stats {
    public const nint level = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint mana = 0x1320; // int32
    public const nint attack_range = 0x1324; // float32
    public const nint armor_per_attack = 0x1328; // float32
}

public static class CDOTA_Modifier_FountainInvulnerabilityBuff {
    public const nint m_vecPosition = 0x1318; // Vector
}

public static class CDOTA_Modifier_FountainPassive {
    public const nint bonus_chance = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_FrostbittenGolem_TimeWarpAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_FrostbittenGolem_TimeWarpAura_Bonus {
    public const nint bonus_cdr = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_BroodBaby_Launch {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bDamageApplied = 0x133D; // bool
    public const nint m_bTargetTeleported = 0x133E; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return {
    public const nint return_damage = 0x1318; // int32
    public const nint strength_gain_duration = 0x131C; // float32
    public const nint max_stacks = 0x1320; // int32
    public const nint ally_factor = 0x1324; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Return_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede {
    public const nint radius = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint m_hEntitiesAffected = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Bonus_Armor {
    public const nint bonus_base_armor_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army {
    public const nint attack_rate = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_vFacePosition = 0x131C; // Vector
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_SearingArrows {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_bBonusAttack = 0x1330; // bool
    public const nint damage_bonus = 0x1334; // int32
    public const nint attack_spill_width = 0x1338; // int32
    public const nint attack_spill_range = 0x133C; // int32
    public const nint spill_damage_multiplier = 0x1340; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_Strafe {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint attack_spill_width = 0x131C; // int32
    public const nint attack_spill_range = 0x1320; // int32
    public const nint spill_damage_multiplier = 0x1324; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk {
    public const nint m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bFreePathing = 0x1340; // bool
    public const nint move_speed_bonus_pct = 0x1344; // int32
    public const nint radius = 0x1348; // int32
    public const nint attack_steal_amount = 0x134C; // int32
    public const nint attack_steal_duration = 0x1350; // float32
    public const nint max_stacks = 0x1354; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_AttackDebuff {
    public const nint attack_steal_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_BonusDamage {
    public const nint bonus_base_dmg_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_Bedlam {
    public const nint m_flRotation = 0x1318; // float32
    public const nint m_hWisp = 0x131C; // CHandle< CBaseEntity >
    public const nint m_flLastAttack = 0x1320; // GameTime_t
    public const nint roaming_radius = 0x1324; // int32
    public const nint attack_radius = 0x1328; // int32
    public const nint roaming_seconds_per_rotation = 0x132C; // float32
    public const nint attack_interval = 0x1330; // float32
    public const nint attack_targets = 0x1334; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Creation_Thinker {
    public const nint latch_creation_interval = 0x1318; // float32
    public const nint initial_creation_delay = 0x131C; // float32
    public const nint placement_count = 0x1320; // int32
    public const nint placement_duration = 0x1324; // float32
    public const nint m_iBramblesIndex = 0x1328; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Thinker {
    public const nint latch_count = 0x1318; // int32
    public const nint latch_range = 0x131C; // int32
    public const nint latch_vision = 0x1320; // int32
    public const nint latch_creation_delay = 0x1324; // float32
    public const nint latch_duration = 0x1328; // float32
    public const nint m_bActive = 0x1334; // bool
    public const nint m_nLatchedEnemies = 0x1338; // int32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Buff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint damage = 0x131C; // float32
    public const nint max_damage_duration = 0x1320; // float32
    public const nint slow_radius = 0x1324; // float32
    public const nint burn_duration = 0x1328; // float32
    public const nint burn_damage = 0x132C; // float32
    public const nint slow_attack_speed_pct = 0x1330; // float32
}

public static class CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Burn_Slow {
    public const nint burn_damage = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
    public const nint m_flDamageScale = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Decorate_Tree_Thinker {
    public const nint num_explosions = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_fExplosions = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Earthshaker_Aftershock {
    public const nint aftershock_range = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint ability_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeLock {
    public const nint duration = 0x1318; // float32
    public const nint duration_creep = 0x131C; // float32
    public const nint chance_pct = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint radius = 0x1328; // int32
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker {
    public const nint m_vDamageSources = 0x1318; // CUtlVector< CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker::sDamageSources >
}

public static class CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker_sDamageSources {
    public const nint flTime = 0x0; // GameTime_t
    public const nint flAmount = 0x4; // float32
}

public static class CDOTA_Modifier_Frostivus2018_FestiveFirework_Blind {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Counter {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Debuff {
    public const nint burn_damage = 0x1318; // int32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Self {
    public const nint health_cost = 0x1318; // int32
    public const nint spear_aoe = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Frostivus2018_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint m_flBeamStun = 0x132C; // float32
    public const nint vPosition = 0x1330; // Vector
    public const nint lucent_beam_radius = 0x133C; // int32
    public const nint bAreaTarget = 0x1340; // bool
    public const nint m_iTickCount = 0x1344; // int32
    public const nint m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_HitTargets = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint beam_interval = 0x1368; // float32
    public const nint beam_interval_scepter = 0x136C; // float32
    public const nint m_flInterval = 0x1370; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Magnataur_Skewer_Bonus_Strength {
    public const nint strength_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Omniknight_Repel {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Pangolier_ShieldCrash_Jump {
    public const nint jump_duration = 0x1318; // float32
    public const nint jump_duration_gyroshell = 0x131C; // float32
    public const nint jump_height = 0x1320; // int32
    public const nint jump_height_gyroshell = 0x1324; // int32
    public const nint m_flStartZ = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_flJumpDuration = 0x1330; // float32
    public const nint m_flJumpHeight = 0x1334; // float32
    public const nint jump_horizontal_distance = 0x1338; // int32
    public const nint m_vTargetHorizontalDirection = 0x133C; // Vector
}

public static class CDOTA_Modifier_Frostivus2018_Puck_DreamCoil_Thinker {
    public const nint m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint coil_radius = 0x1330; // int32
    public const nint coil_break_radius = 0x1334; // int32
    public const nint coil_stun_duration = 0x1338; // float32
    public const nint coil_stun_duration_scepter = 0x133C; // float32
    public const nint coil_slow = 0x1340; // float32
    public const nint coil_break_damage = 0x1344; // int32
    public const nint coil_break_damage_scepter = 0x1348; // int32
    public const nint m_bHasScepter = 0x134C; // bool
    public const nint m_FXIndex = 0x1350; // CUtlVector< ParticleIndex_t >
}

public static class CDOTA_Modifier_Frostivus2018_Siege_Fireball_Burn {
    public const nint damage_per_tick = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Frostivus2018_Siege_Fireball_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint tick_interval = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Frostivus2018_Snowman_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion_Thinker {
    public const nint m_fDamage = 0x1318; // float32
    public const nint m_fLastRadius = 0x131C; // float32
    public const nint m_fCurRadius = 0x1320; // float32
    public const nint m_fLastThink = 0x1324; // GameTime_t
    public const nint m_bContracting = 0x1328; // bool
    public const nint m_ViewerTimer = 0x1330; // CountdownTimer
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1368; // int32
    public const nint radius = 0x136C; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Summon_Snowman_Thinker {
    public const nint tick_rate = 0x1318; // float32
    public const nint taunt_radius = 0x131C; // int32
    public const nint taunt_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Frostivus2018_TrollWarlord_BattleTrance {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint bonus_damage_pct = 0x1324; // int32
    public const nint cleave_damage_pct = 0x1328; // float32
    public const nint cleave_starting_width = 0x132C; // int32
    public const nint cleave_ending_width = 0x1330; // int32
    public const nint cleave_distance = 0x1334; // int32
    public const nint splash_damage_pct = 0x1338; // float32
    public const nint splash_radius = 0x133C; // int32
    public const nint m_hTarget = 0x1340; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Frostivus2018_TrollWarlord_Fervor {
    public const nint attack_speed = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint m_hUnit = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_AirTime {
    public const nint hp_threshold = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint m_flEndTime = 0x1344; // float32
    public const nint push_length = 0x1348; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Frostivus2018_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
    public const nint arrow_count = 0x1358; // int32
    public const nint bonus_range = 0x135C; // int32
}

public static class CDOTA_Modifier_Furbolg_Enrage_AttackSpeed_OnDeath {
    public const nint duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Furbolg_Enrage_Damage_OnDeath {
    public const nint duration = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Furion_Arboreal_Might_Armor {
    public const nint armor_per_stack = 0x1318; // float32
}

public static class CDOTA_Modifier_Furion_Arboreal_Might_Attack_Damage {
    public const nint damage_per_stack = 0x1318; // float32
    public const nint iMaxStacks = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Furion_CurseOfTheForest {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_tree = 0x131C; // int32
    public const nint slow_per_tree = 0x1320; // int32
    public const nint m_nSlow = 0x1324; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Damage {
    public const nint sprout_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Furion_Sprout_Damage_Aura {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Furion_WrathOfNature_Thinker {
    public const nint damage = 0x1318; // int32
    public const nint max_targets = 0x131C; // int32
    public const nint damage_percent_add = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint m_iFixedDamage = 0x1328; // int32
    public const nint m_flLastTickTime = 0x132C; // GameTime_t
    public const nint m_flTimeAccumulator = 0x1330; // float32
    public const nint m_hHitTargets = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nBaseDamage = 0x1350; // int32
    public const nint m_nMaxTargets = 0x1354; // int32
    public const nint m_flJumpDelay = 0x1358; // float32
}

public static class CDOTA_Modifier_Fusion_runeHealing {
    public const nint health_regen = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Gem_Active_TrueSight {
    public const nint active_radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_GhostScepter_Active {
    public const nint extra_spell_damage_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Ghost_FrostAttack {
    public const nint duration = 0x1318; // float32
    public const nint movespeed_slow = 0x131C; // int32
    public const nint attackspeed_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Ghost_FrostAttack_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_GiantWolf_CriticalStrike {
    public const nint crit_mult = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
}

public static class CDOTA_Modifier_GiantWolf_Intimidate {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Gladiator_Helm_Buff {
    public const nint damage = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_GlimmerCape_Fade {
    public const nint active_movement_speed = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint barrier_amount = 0x1320; // int32
    public const nint initial_fade_delay = 0x1324; // float32
    public const nint secondary_fade_delay = 0x1328; // float32
    public const nint m_flFadeTime = 0x132C; // float32
    public const nint m_flCurentFadeDelay = 0x1330; // float32
    public const nint m_flLastActionTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_GnollAssassin_EnvenomedWeapon {
    public const nint damage_per_second = 0x1318; // int32
    public const nint non_hero_duration = 0x131C; // float32
    public const nint hero_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_GnollAssassin_EnvenomedWeapon_Poison {
    public const nint damage_per_second = 0x1318; // int32
    public const nint regen_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Gold_Bag_Launch {
    public const nint gold_amount = 0x1348; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Agi {
    public const nint agi_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Int {
    public const nint int_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_Grandmasters_Glaive_Bonus_Str {
    public const nint str_stance = 0x1318; // int32
}

public static class CDOTA_Modifier_GraniteGolem_HPAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_GraniteGolem_HPAura_Bonus {
    public const nint bonus_hp = 0x1318; // float32
}

public static class CDOTA_Modifier_GreaterClarity {
    public const nint total_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Black_Nightmare {
    public const nint animation_rate = 0x1318; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_ColdFeet {
    public const nint m_vecStartPosition = 0x1318; // Vector
    public const nint m_nCurrentTick = 0x1324; // int32
    public const nint damage = 0x1328; // float32
    public const nint break_distance = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortex {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint spell_resist_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortexThinker {
    public const nint radius = 0x1318; // int32
    public const nint movement_speed_pct = 0x131C; // int32
    public const nint spell_resist_pct = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hChilledEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Greevil_Miniboss_Casting {
    public const nint cast_animation = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Green_LivingArmor {
    public const nint health_regen = 0x1318; // int32
    public const nint damage_block = 0x131C; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Orange_LightStrikeArray_Thinker {
    public const nint m_iDamage = 0x1318; // int32
    public const nint m_flStunDuration = 0x131C; // float32
    public const nint light_strike_array_aoe = 0x1320; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Purple_VenomousGale {
    public const nint movement_slow = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Red_Earthshock {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Red_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Sight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Greevil_Miniboss_Yellow_IonShell {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
}

public static class CDOTA_Modifier_Grimstroke_DarkArtistry_Slow {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAmbientFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nAttackCount = 0x1320; // int32
    public const nint m_bIsLatched = 0x1324; // bool
    public const nint m_hAttachTarget = 0x1328; // CHandle< CBaseEntity >
    public const nint m_EnemyVision = 0x1330; // CountdownTimer
    public const nint latch_duration = 0x1348; // float32
    public const nint speed = 0x134C; // float32
    public const nint destroy_attacks = 0x1350; // int32
    public const nint hero_attack_multiplier = 0x1354; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Debuff {
    public const nint m_flCurrentArmorReduction = 0x1318; // float32
    public const nint m_hLatchedCreature = 0x131C; // CHandle< CBaseEntity >
    public const nint tick_interval = 0x1320; // float32
    public const nint damage_per_second = 0x1324; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Latched {
    public const nint m_hAttachTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_fZOffset = 0x131C; // float32
    public const nint m_bRemovedByEnemy = 0x1320; // bool
    public const nint latch_duration = 0x1324; // float32
    public const nint pop_damage = 0x1328; // int32
    public const nint latched_unit_offset = 0x132C; // int32
    public const nint latched_unit_offset_short = 0x1330; // int32
}

public static class CDOTA_Modifier_Grimstroke_InkCreature_Spawning {
    public const nint m_hAttachTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Grimstroke_Scepter_Buff {
    public const nint images_movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Grimstroke_Shard_Buff {
    public const nint total_damage = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint move_speed = 0x1320; // int32
    public const nint m_flInterval = 0x1324; // float32
}

public static class CDOTA_Modifier_Grimstroke_SoulChain {
    public const nint m_hPartner = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bIsPrimary = 0x131C; // bool
    public const nint m_bEscaped = 0x131D; // bool
    public const nint m_bTethered = 0x131E; // bool
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_nFXIndexA = 0x1324; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1328; // ParticleIndex_t
    public const nint m_bStartedLeashSound = 0x132C; // bool
    public const nint m_fLeashDistance = 0x1330; // float32
    public const nint m_fOriginalStartTime = 0x1334; // GameTime_t
    public const nint m_nOverheadFXIndex = 0x1338; // ParticleIndex_t
    public const nint chain_latch_radius = 0x133C; // int32
    public const nint chain_break_distance = 0x1340; // int32
    public const nint leash_limit_multiplier = 0x1344; // float32
    public const nint chain_duration = 0x1348; // float32
    public const nint creep_duration_pct = 0x134C; // float32
    public const nint bonus_reflected_spell_damage = 0x1350; // int32
}

public static class CDOTA_Modifier_Grimstroke_SoulChain_ChannelCheck {
    public const nint m_hAbility = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_hAbilities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vLocation = 0x1338; // Vector
    public const nint m_fChannelEnd = 0x1344; // GameTime_t
    public const nint m_bInterrupt = 0x1348; // bool
    public const nint m_bExpired = 0x1349; // bool
}

public static class CDOTA_Modifier_Grimstroke_SpiritWalk_Buff {
    public const nint m_fStartTime = 0x1318; // GameTime_t
    public const nint m_nHeroTickDamageApplied = 0x131C; // int32
    public const nint m_fLastEffectsTime = 0x1320; // GameTime_t
    public const nint radius = 0x1324; // int32
    public const nint buff_duration = 0x1328; // float32
    public const nint debuff_duration = 0x132C; // float32
    public const nint max_damage = 0x1330; // int32
    public const nint max_stun = 0x1334; // float32
    public const nint movespeed_bonus_pct = 0x1338; // int32
    public const nint damage_per_tick = 0x133C; // int32
    public const nint tick_rate = 0x1340; // float32
    public const nint max_threshold_duration = 0x1344; // float32
    public const nint shard_bonus_damage_pct = 0x1348; // int32
    public const nint shard_heal_pct = 0x134C; // int32
    public const nint shard_creep_penalty = 0x1350; // float32
    public const nint m_bIsReflection = 0x1354; // bool
}

public static class CDOTA_Modifier_GungirChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Gyrocopter_Call_Down {
    public const nint slow_duration = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint slow = 0x1324; // int32
    public const nint m_bDelayed = 0x1328; // bool
    public const nint m_bAttachToRocket1 = 0x1329; // bool
    public const nint m_vecHitHeroes = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bHitInvisibleHeroes = 0x1348; // bool
    public const nint m_nMarkerIndex = 0x134C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Gyrocopter_Call_Down_Slow {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Flak_Cannon {
    public const nint max_attacks = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint bonus_night_vision = 0x1328; // int32
    public const nint radius = 0x132C; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Flak_Cannon_Scepter {
    public const nint fire_rate = 0x1318; // float32
    public const nint scepter_radius = 0x131C; // int32
    public const nint m_iAttackRecord = 0x1320; // int32
}

public static class CDOTA_Modifier_Gyrocopter_Homing_Missile {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x131C; // ParticleIndex_t
    public const nint hero_damage = 0x1320; // int32
    public const nint acceleration = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
    public const nint max_distance = 0x132C; // int32
    public const nint shard_radius = 0x1330; // int32
    public const nint shard_delay = 0x1334; // float32
    public const nint pre_flight_time = 0x1338; // float32
    public const nint stun_duration = 0x133C; // float32
    public const nint m_nMissileDamage = 0x1340; // int32
    public const nint m_nTeamNumber = 0x1344; // int32
    public const nint speed = 0x1350; // float32
    public const nint m_hAttachTarget = 0x1354; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1358; // Vector
    public const nint m_EnemyVision = 0x1368; // CountdownTimer
    public const nint m_MoveTime = 0x1380; // CountdownTimer
}

public static class CDOTA_Modifier_Gyrocopter_Homing_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint shard_radius = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Gyrocopter_Rocket_Barrage {
    public const nint rocket_damage = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint slow_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_HallOfFame_Glow {
    public const nint m_vecGlowingPlayerIDs = 0x1318; // CUtlVector< PlayerID_t >
    public const nint m_vecGlowingPlayerIDs2 = 0x1330; // CUtlVector< PlayerID_t >
}

public static class CDOTA_Modifier_HarpyScout_TakeOff {
    public const nint move_speed_penalty = 0x1318; // int32
    public const nint cost_per_second = 0x131C; // float32
}

public static class CDOTA_Modifier_HarpyStorm_ChainLightning {
    public const nint jump_range = 0x1318; // int32
    public const nint max_targets = 0x131C; // int32
    public const nint damage_percent_loss = 0x1320; // float32
    public const nint m_flCurDamage = 0x1324; // float32
    public const nint m_vJumpPosition = 0x1328; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Havoc_Hammer_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Healing_Campfire_Heal {
    public const nint heal_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_HeavensHalberd_Debuff {
    public const nint m_bPierceDebuffImmunity = 0x1318; // bool
}

public static class CDOTA_Modifier_HeroStatue {
    public const nint m_unStatusEffectIndex = 0x1318; // uint32
    public const nint m_hPedestal = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Hide_On_Minimap {
    public const nint m_bEnemiesOnly = 0x1318; // bool
}

public static class CDOTA_Modifier_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_HillTroll_Rally {
    public const nint damage_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_HillTroll_RallyAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_HoldoutCullingBlade {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint leap_distance = 0x1344; // int32
    public const nint leap_radius = 0x1348; // int32
    public const nint leap_speed = 0x134C; // float32
    public const nint leap_acceleration = 0x1350; // float32
}

public static class CDOTA_Modifier_Holdout_GladiatorsUnite {
    public const nint bonus_armor_per_hero = 0x1318; // int32
    public const nint bonus_damage_per_hero = 0x131C; // int32
    public const nint lifesteal_per_hero = 0x1320; // int32
    public const nint scepter_damage_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Holdout_GladiatorsUnite_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Holdout_StaticRemnantThinker {
    public const nint static_remnant_radius = 0x1318; // int32
    public const nint static_remnant_damage_radius = 0x131C; // int32
    public const nint static_remnant_damage = 0x1320; // int32
    public const nint static_remnant_delay = 0x1324; // float32
    public const nint overload_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_ArmorCorruption {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_BonusDamage {
    public const nint acorn_shot_damage = 0x1318; // int32
    public const nint base_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_DelayThinker {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nSourceProjectileHandle = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_AcornShot_TreeThinker {
    public const nint m_hTree = 0x1318; // CHandle< CDOTA_TempTree >
    public const nint fow_viewer = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_ArcingBoomerang {
    public const nint m_vLeftControl = 0x1318; // Vector
    public const nint m_vRightControl = 0x1324; // Vector
    public const nint m_vTargetLoc = 0x1330; // Vector
    public const nint m_vOriginalTargetLoc = 0x133C; // Vector
    public const nint m_vSourceLoc = 0x1348; // Vector
    public const nint m_bGroundTargeted = 0x1354; // bool
    public const nint m_flDuration = 0x1358; // float32
    public const nint m_flDieTime = 0x135C; // GameTime_t
    public const nint m_bReturning = 0x1360; // bool
    public const nint m_bCatchingBoomerang = 0x1361; // bool
    public const nint m_bDisjointed = 0x1362; // bool
    public const nint m_nFramesToWait = 0x1364; // int32
    public const nint m_hBoomerang = 0x1368; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x136C; // CHandle< CBaseEntity >
    public const nint m_nBoomerangFXIndex = 0x1370; // ParticleIndex_t
    public const nint m_nOldBoomerangFXindex = 0x1374; // ParticleIndex_t
    public const nint m_vecUniqueHitList = 0x1378; // CUtlVector< CHandle< CBaseEntity > >
    public const nint radius = 0x1390; // int32
    public const nint spread = 0x1394; // int32
    public const nint damage = 0x1398; // int32
    public const nint mark_duration = 0x139C; // float32
    public const nint min_throw_duration = 0x13A0; // float32
    public const nint max_throw_duration = 0x13A4; // float32
}

public static class CDOTA_Modifier_Hoodwink_Bushwhack_Trap {
    public const nint visual_height = 0x1318; // int32
    public const nint animation_rate = 0x131C; // float32
    public const nint m_iIndex = 0x1320; // ParticleIndex_t
    public const nint m_bPullComplete = 0x1324; // bool
    public const nint m_TreeId = 0x1328; // uint32
    public const nint m_flDamagePerTick = 0x132C; // float32
    public const nint m_nDamageTicks = 0x1330; // int32
    public const nint m_flLastTick = 0x1334; // GameTime_t
    public const nint m_hTree = 0x1338; // CHandle< CDOTA_TempTree >
    public const nint m_pTree = 0x1340; // CDOTA_Tree*
    public const nint m_vPullPosition = 0x1348; // Vector
    public const nint m_vDir = 0x1354; // Vector
}

public static class CDOTA_Modifier_Hoodwink_Caltrops {
    public const nint effect_radius = 0x1318; // int32
    public const nint caltrops_damage = 0x131C; // int32
    public const nint activation_radius = 0x1320; // int32
    public const nint debuff_duration = 0x1324; // float32
    public const nint activation_delay = 0x1328; // float32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Hoodwink_Caltrops_Debuff {
    public const nint movespeed_pct = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Hoodwink_Camouflage {
    public const nint fade_time = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_bInvisLastThink = 0x1320; // bool
}

public static class CDOTA_Modifier_Hoodwink_Decoy_Illusion {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Hoodwink_Decoy_Invisibility {
    public const nint movement_speed = 0x1328; // int32
    public const nint m_hEntitiesAffected = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Hoodwink_HeavyQuiver {
    public const nint bonus_projectile_speed_pct = 0x1318; // int32
    public const nint bonus_attack_range = 0x131C; // int32
    public const nint deadly_blow_multiplier = 0x1320; // int32
    public const nint maim_duration = 0x1324; // float32
    public const nint m_nAttackRecord = 0x1328; // int32
}

public static class CDOTA_Modifier_Hoodwink_HuntersQuiver {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint debuff_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Hoodwink_HuntersQuiver_Mark {
    public const nint stack_crit_chance_pct = 0x1318; // int32
    public const nint critical_damage_pct = 0x131C; // int32
    public const nint stack_slow_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Hoodwink_Hunters_Mark {
    public const nint slow_pct = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Hoodwink_Scurry_Active {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint attack_range = 0x131C; // int32
    public const nint cast_range = 0x1320; // int32
    public const nint m_flTreeDuration = 0x1324; // float32
}

public static class CDOTA_Modifier_Hoodwink_Scurry_Passive {
    public const nint evasion = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint bonus_active_evasion = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_Debuff {
    public const nint slow_move_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_Recoil {
    public const nint recoil_duration = 0x1318; // float32
    public const nint recoil_height = 0x131C; // int32
    public const nint recoil_distance = 0x1320; // int32
    public const nint m_flStartZ = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flJumpDuration = 0x132C; // float32
    public const nint m_flJumpHeight = 0x1330; // float32
    public const nint m_vTargetHorizontalDirection = 0x1334; // Vector
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_VisionThinker {
    public const nint arrow_width = 0x1318; // int32
}

public static class CDOTA_Modifier_Hoodwink_Sharpshooter_Windup {
    public const nint m_bReachedMax = 0x1318; // bool
    public const nint m_flLastOverheadTime = 0x131C; // float32
    public const nint m_flFacingTarget = 0x1320; // float32
    public const nint m_vAimTarget = 0x1324; // Vector
    public const nint m_nCrosshairFX = 0x1330; // ParticleIndex_t
    public const nint m_vecVisionThinkers = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint arrow_vision = 0x1350; // int32
    public const nint max_charge_time = 0x1354; // float32
    public const nint turn_rate = 0x1358; // float32
    public const nint base_power = 0x135C; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Active {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint push_length = 0x132C; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Active_Alternate {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint enemy_length = 0x132C; // float32
}

public static class CDOTA_Modifier_Hurricane_Pike_Range {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint max_attacks = 0x131C; // int32
    public const nint m_iNumAttacks = 0x1320; // int32
    public const nint bActive = 0x1324; // bool
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Huskar_Berserkers_Blood {
    public const nint maximum_health_regen = 0x1318; // int32
    public const nint maximum_attack_speed = 0x131C; // int32
    public const nint maximum_magic_resist = 0x1320; // int32
    public const nint hp_threshold_max = 0x1324; // int32
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Counter {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Debuff {
    public const nint burn_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Huskar_Burning_Spear_Self {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Huskar_Inner_Fire_Disarm {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Huskar_Inner_Fire_Knockback {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint knockback_distance = 0x132C; // float32
    public const nint knockback_duration = 0x1330; // float32
    public const nint effective_distance = 0x1334; // float32
}

public static class CDOTA_Modifier_Huskar_Inner_Vitality {
    public const nint heal = 0x1318; // int32
    public const nint attrib_bonus = 0x131C; // float32
    public const nint hurt_attrib_bonus = 0x1320; // float32
    public const nint hurt_percent = 0x1324; // float32
}

public static class CDOTA_Modifier_Huskar_Life_Break {
    public const nint attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Huskar_Life_Break_Taunt {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bDidSetAttackTarget = 0x131C; // bool
}

public static class CDOTA_Modifier_IceShaman_IncendiaryBomb {
    public const nint burn_damage = 0x1318; // int32
    public const nint building_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_IceSlide {
    public const nint m_fLastUpdateTime = 0x1318; // GameTime_t
    public const nint m_vVelocity = 0x131C; // Vector
}

public static class CDOTA_Modifier_Illusion {
    public const nint outgoing_damage = 0x1318; // int32
    public const nint outgoing_damage_structure = 0x131C; // int32
    public const nint outgoing_damage_roshan = 0x1320; // int32
    public const nint incoming_damage = 0x1324; // int32
    public const nint bounty_base = 0x1328; // int32
    public const nint bounty_growth = 0x132C; // int32
    public const nint m_strIllusionType = 0x1330; // CUtlString
    public const nint m_szIllusionLabel = 0x1338; // char[64]
    public const nint m_bHidden = 0x1378; // bool
}

public static class CDOTA_Modifier_InvisibilityEdge_WindWalk {
    public const nint windwalk_bonus_damage = 0x1328; // int32
    public const nint windwalk_movement_speed = 0x132C; // int32
}

public static class CDOTA_Modifier_Invisible {
    public const nint m_bSubtle = 0x1318; // bool
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_flFadeTimeValue = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoke_Bonuses {
    public const nint spell_amp = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
}

public static class CDOTA_Modifier_Invoker_Alacrity {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Invoker_ChaosMeteor_Burn {
    public const nint spell_amp = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
    public const nint m_flDamagePerSecond = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoker_ChaosMeteor_Land {
    public const nint m_vDir = 0x1318; // Vector
    public const nint travel_speed = 0x1324; // int32
    public const nint travel_distance = 0x1328; // int32
    public const nint vision_distance = 0x132C; // int32
    public const nint spell_amp = 0x1330; // float32
    public const nint spell_lifesteal = 0x1334; // float32
}

public static class CDOTA_Modifier_Invoker_ColdSnap {
    public const nint freeze_damage = 0x1318; // float32
    public const nint freeze_duration = 0x131C; // float32
    public const nint freeze_cooldown = 0x1320; // float32
    public const nint damage_trigger = 0x1324; // float32
    public const nint spell_lifesteal = 0x1328; // float32
    public const nint spell_amp = 0x132C; // float32
    public const nint freeze_heal = 0x1330; // float32
    public const nint nQuasApplications = 0x1334; // int32
    public const nint nExortApplications = 0x1338; // int32
    public const nint m_freezeCooldownTimer = 0x1340; // CountdownTimer
}

public static class CDOTA_Modifier_Invoker_DeafeningBlast_Knockback {
    public const nint disarm_duration = 0x1318; // float32
    public const nint m_vPushDir = 0x131C; // Vector
    public const nint m_flStartTime = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_Invoker_EMP {
    public const nint area_of_effect = 0x1318; // int32
    public const nint mana_burned = 0x131C; // int32
    public const nint damage_per_mana = 0x1320; // float32
    public const nint spell_lifesteal = 0x1324; // float32
    public const nint spell_amp = 0x1328; // float32
    public const nint self_mana_restore_pct = 0x132C; // int32
    public const nint m_hPullThinker = 0x1330; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Invoker_EMP_Pull {
    public const nint shard_drag_speed = 0x1318; // int32
    public const nint aura_origin_x = 0x131C; // float32
    public const nint aura_origin_y = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_vCenter = 0x1328; // Vector
    public const nint m_flLastThinkTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Invoker_EMP_Pull_Thinker {
    public const nint area_of_effect = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_ExortInstance {
    public const nint bonus_damage_per_instance = 0x1318; // int32
    public const nint spell_amp = 0x131C; // float32
    public const nint m_pSlotName = 0x1320; // char*
}

public static class CDOTA_Modifier_Invoker_GhostWalk_Enemy {
    public const nint enemy_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_GhostWalk_Self {
    public const nint self_slow = 0x1328; // int32
    public const nint area_of_effect = 0x132C; // int32
    public const nint aura_fade_time = 0x1330; // float32
    public const nint health_regen = 0x1334; // float32
    public const nint mana_regen = 0x1338; // float32
    public const nint disable_time = 0x133C; // float32
    public const nint m_timeLastDamage = 0x1340; // GameTime_t
}

public static class CDOTA_Modifier_Invoker_IceWall_SlowAura {
    public const nint radius = 0x1318; // int32
    public const nint slow = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoker_IceWall_SlowDebuff {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Invoker_IceWall_Thinker {
    public const nint damage_per_second = 0x1318; // float32
    public const nint num_wall_elements = 0x131C; // int32
    public const nint wall_element_spacing = 0x1320; // int32
    public const nint wall_element_radius = 0x1324; // int32
    public const nint spell_amp = 0x1328; // float32
    public const nint spell_lifesteal = 0x132C; // float32
    public const nint m_vWallDir = 0x1330; // Vector
    public const nint m_bGrantedGem = 0x133C; // bool
}

public static class CDOTA_Modifier_Invoker_QuasInstance {
    public const nint spell_lifesteal = 0x1318; // float32
    public const nint health_regen_per_instance = 0x131C; // int32
    public const nint m_pSlotName = 0x1320; // char*
}

public static class CDOTA_Modifier_Invoker_SunStrike {
    public const nint area_of_effect = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint vision_distance = 0x1320; // int32
    public const nint vision_duration = 0x1324; // float32
    public const nint spell_amp = 0x1328; // float32
    public const nint spell_lifesteal = 0x132C; // float32
}

public static class CDOTA_Modifier_Invoker_SunStrike_Cataclysm {
    public const nint area_of_effect = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint vision_distance = 0x1320; // int32
    public const nint vision_duration = 0x1324; // float32
    public const nint spell_amp = 0x1328; // float32
    public const nint spell_lifesteal = 0x132C; // float32
    public const nint m_vSoundPos = 0x1330; // Vector
    public const nint m_bPlaySound = 0x133C; // bool
}

public static class CDOTA_Modifier_Invoker_SunStrike_Cataclysm_Thinker {
    public const nint damage = 0x1318; // float32
    public const nint spell_lifesteal = 0x131C; // float32
    public const nint spell_amp = 0x1320; // float32
}

public static class CDOTA_Modifier_Invoker_Tornado {
    public const nint m_flLandDamage = 0x1330; // float32
    public const nint spell_lifesteal = 0x1334; // float32
    public const nint spell_amp = 0x1338; // float32
}

public static class CDOTA_Modifier_Invoker_WexInstance {
    public const nint move_speed_per_instance = 0x1318; // float32
    public const nint cooldown_reduction = 0x131C; // float32
    public const nint m_pSlotName = 0x1320; // char*
}

public static class CDOTA_Modifier_Invoker_Wex_Cooldown_Reduction {
    public const nint cooldown_reduction = 0x1318; // int32
    public const nint m_nTotalCDR = 0x131C; // int32
}

public static class CDOTA_Modifier_IonShell {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint bonus_health = 0x1324; // int32
}

public static class CDOTA_Modifier_ItemWiggle_Thinker {
    public const nint m_vOriginalPosition = 0x1318; // Vector
    public const nint m_flOriginalScale = 0x1324; // float32
    public const nint m_flLastChangeTime = 0x1328; // GameTime_t
    public const nint m_vLastChangePosition = 0x132C; // Vector
    public const nint m_flLastChangeScale = 0x1338; // float32
    public const nint m_vTargetPosition = 0x133C; // Vector
    public const nint m_flTargetScale = 0x1348; // float32
    public const nint m_bFirstThink = 0x134C; // bool
    public const nint m_flStartAmplitude = 0x1350; // float32
    public const nint m_flEndAmplitude = 0x1354; // float32
    public const nint m_flScaleAmplitude = 0x1358; // float32
    public const nint m_flStartFrequency = 0x135C; // float32
    public const nint m_flEndFrequency = 0x1360; // float32
}

public static class CDOTA_Modifier_Item_AbyssalBlade {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bash_chance_melee = 0x131C; // int32
    public const nint bash_chance_ranged = 0x1320; // int32
    public const nint bash_duration = 0x1324; // float32
    public const nint bash_cooldown = 0x1328; // float32
    public const nint bonus_chance_damage = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint bonus_health = 0x1350; // int32
    public const nint bonus_health_regen = 0x1354; // float32
    public const nint block_damage_ranged = 0x1358; // int32
    public const nint block_damage_melee = 0x135C; // int32
    public const nint block_chance = 0x1360; // int32
}

public static class CDOTA_Modifier_Item_Aegis {
    public const nint reincarnate_time = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_AeonDisk {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint health_threshold_pct = 0x1320; // int32
    public const nint buff_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_AeonDisk_Buff {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // float32
    public const nint mana_regen_multiplier = 0x1328; // float32
    public const nint spell_lifesteal_amp = 0x132C; // float32
    public const nint bonus_aoe = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint burn_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_AetherialHalo_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_AghsFort_Bloodstone {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint mana_regen_multiplier = 0x1320; // int32
    public const nint regen_per_charge = 0x1324; // float32
    public const nint amp_per_charge = 0x1328; // float32
    public const nint death_charges = 0x132C; // int32
    public const nint kill_charges = 0x1330; // int32
    public const nint hero_lifesteal = 0x1334; // float32
    public const nint creep_lifesteal = 0x1338; // float32
    public const nint bonus_intellect = 0x133C; // int32
    public const nint spell_amp = 0x1340; // int32
    public const nint spell_lifesteal_amp = 0x1344; // int32
}

public static class CDOTA_Modifier_Item_AghsFort_Bloodstone_Active {
    public const nint mana_cost_percentage = 0x1318; // int32
    public const nint restore_duration = 0x131C; // float32
    public const nint m_flDrainAmount = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_AncientGuardian {
    public const nint actual_bonus_damage = 0x1318; // int32
    public const nint extra_bonus_damage = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint radius = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo {
    public const nint radius = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
    public const nint bonus_int = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo_Active {
    public const nint bonus_attack_speed_pct = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Janggo_Aura {
    public const nint aura_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ancient_Perseverance {
    public const nint damage = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
    public const nint mana_regen_amp = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Angels_Demise {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_spell_damage = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint bonus_all_stats = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint crit_chance = 0x1334; // int32
    public const nint crit_multiplier = 0x1338; // int32
    public const nint spell_crit_multiplier = 0x133C; // int32
    public const nint spell_crit_flat = 0x1340; // int32
    public const nint vecActivatedAbilities = 0x1348; // CUtlVector< CDOTABaseAbility* >
}

public static class CDOTA_Modifier_Item_Angels_Demise_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Apex {
    public const nint primary_stat = 0x1318; // int32
    public const nint primary_stat_universal = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Blink {
    public const nint blink_damage_cooldown = 0x1318; // float32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Blink_Buff {
    public const nint cast_pct_improvement = 0x1318; // int32
    public const nint manacost_reduction = 0x131C; // int32
    public const nint debuff_amp = 0x1320; // int32
    public const nint cast_range_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Boots {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
    public const nint mana_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Arcane_Ring {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_intelligence = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Scout {
    public const nint vision_bonus = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Arcane_Scout_Invulnerability {
    public const nint scout_movespeed = 0x1318; // int32
    public const nint sight_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Armlet {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_AsceticCap {
    public const nint bonus_health = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_AsceticCapBuff {
    public const nint status_resistance = 0x1318; // int32
    public const nint slow_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_AssassinsDagger {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint debuff_duration = 0x1330; // int32
    public const nint bonus_attack_speed = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass_Negative_Armor {
    public const nint aura_negative_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Assault_Cuirass_Positive {
    public const nint aura_attack_speed = 0x1318; // int32
    public const nint aura_positive_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ballista {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint knockback_distance = 0x131C; // float32
    public const nint knockback_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Barricade {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Barricade_Thinker {
    public const nint length = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint max_hits = 0x1320; // int32
    public const nint m_iCurrentHits = 0x1324; // int32
    public const nint m_hObstruction = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Battlefury {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint cleave_damage_percent = 0x1324; // int32
    public const nint cleave_damage_percent_creep = 0x1328; // int32
    public const nint cleave_starting_width = 0x132C; // int32
    public const nint cleave_ending_width = 0x1330; // int32
    public const nint cleave_distance = 0x1334; // int32
    public const nint upgraded_cleave_bonus = 0x1338; // int32
    public const nint upgraded_damage_bonus = 0x133C; // int32
    public const nint quelling_bonus = 0x1340; // int32
    public const nint quelling_bonus_ranged = 0x1344; // int32
}

public static class CDOTA_Modifier_Item_BeltOfStrength {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Black_King_Bar {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_BladeOfAlacrity {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blade_Mail {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint passive_reflection_constant = 0x1324; // int32
    public const nint passive_reflection_pct = 0x1328; // int32
    public const nint active_reflection_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_BladesOfAttack {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blight_Stone {
    public const nint corruption_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_BlightedSpirit_Blight {
    public const nint damage_per_second = 0x1318; // int32
    public const nint heal_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_BlinkDagger {
    public const nint blink_damage_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Blood_Grenade {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Blood_Grenade_Debuff {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint damage_over_time = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Blood_Grenade_Flight_Thinker {
    public const nint speed = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage_over_time = 0x1320; // int32
    public const nint impact_damage = 0x1324; // int32
    public const nint debuff_duration = 0x1328; // float32
    public const nint movespeed_slow = 0x132C; // int32
    public const nint tick_rate = 0x1330; // float32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Bloodstone {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_aoe = 0x1320; // int32
    public const nint spell_lifesteal = 0x1324; // float32
    public const nint lifesteal_multiplier = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Bloodthorn {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint bonus_intellect = 0x1330; // int32
    public const nint bonus_mana_regen = 0x1334; // float32
    public const nint bonus_damage = 0x1338; // int32
    public const nint bonus_attack_speed = 0x133C; // int32
    public const nint spell_amp = 0x1340; // int32
    public const nint mana_regen_multiplier = 0x1344; // int32
    public const nint bonus_magic_resist = 0x1348; // int32
    public const nint duration = 0x134C; // float32
    public const nint proc_damage = 0x1350; // int32
    public const nint proc_chance = 0x1354; // int32
    public const nint bonus_health_regen = 0x1358; // float32
}

public static class CDOTA_Modifier_Item_Book_Of_Shadows {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Book_Of_Shadows_Buff {
    public const nint m_bUntargetableAllies = 0x1318; // bool
    public const nint m_bUntargetableEnemies = 0x1319; // bool
}

public static class CDOTA_Modifier_Item_BootsOfElven {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_BootsOfSpeed {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_BootsOfTravel {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // int32
    public const nint bonus_str = 0x1324; // int32
    public const nint bonus_int = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing_Active {
    public const nint bonus_attack_speed_pct = 0x1318; // int32
    public const nint bonus_movement_speed_pct = 0x131C; // int32
    public const nint bonus_ms_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Boots_Of_Bearing_Aura {
    public const nint aura_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Bottomless_Chalice {
    public const nint max_charges_per_kill = 0x1318; // int32
    public const nint recharge_time = 0x131C; // float32
    public const nint m_bFull = 0x1320; // bool
    public const nint bonus_intellect = 0x1324; // int32
    public const nint movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Bottomless_Chalice_Regen {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Bracer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint clock_time = 0x1324; // int32
    public const nint bonus_health_regen = 0x1328; // float32
    public const nint bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Broadsword {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Broom_Handle {
    public const nint melee_attack_range = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Buckler {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bonus_aoe_radius = 0x131C; // int32
    public const nint armor = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Buckler_Effect {
    public const nint bonus_aoe_armor = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Bullwhip {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Bullwhip_Buff {
    public const nint speed = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Bullwhip_Buff_Thinker {
    public const nint speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Butterfly {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_evasion = 0x1320; // int32
    public const nint bonus_attack_speed_pct = 0x1324; // int32
    public const nint bonus_slow_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Butterfly_Extra {
    public const nint bonus_move_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Caster_Rapier {
    public const nint cast_range_limit = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint backstab_duration = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Ceremonial_Robe {
    public const nint bonus_mana = 0x1318; // int32
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_ChainMail {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Chipped_Vest {
    public const nint hp_regen = 0x1318; // float32
    public const nint damage_return_hero = 0x131C; // int32
    public const nint damage_return_creep = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Circlet {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Claymore {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Cloak_Of_Flames {
    public const nint armor = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Clumsy_Net {
    public const nint all_stats = 0x1318; // int32
    public const nint mana_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Cornucopia {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Craggy_Coat {
    public const nint armor_bonus = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Craggy_Coat_Tanky {
    public const nint active_armor = 0x1318; // int32
    public const nint move_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_CraniumBasher {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bash_chance_melee = 0x131C; // int32
    public const nint bash_chance_ranged = 0x1320; // int32
    public const nint bash_duration = 0x1324; // float32
    public const nint bash_cooldown = 0x1328; // float32
    public const nint bonus_chance_damage = 0x132C; // int32
    public const nint bonus_damage = 0x1330; // int32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Crimson_Guard {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // float32
    public const nint block_damage_ranged = 0x1324; // int32
    public const nint block_damage_melee = 0x1328; // int32
    public const nint block_chance = 0x132C; // int32
    public const nint bonus_aoe_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Crimson_Guard_Extra {
    public const nint block_chance_active = 0x1318; // int32
    public const nint block_damage_active = 0x131C; // int32
    public const nint strength_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Crown {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Cyclone {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_DaggerOfRistul {
    public const nint aspd = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Dagon {
    public const nint bonus_int = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
    public const nint bonus_agi = 0x1320; // int32
    public const nint passive_spell_lifesteal = 0x1324; // float32
    public const nint dagon_spell_lifesteal = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_DemonEdge {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Demonicon {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Desolator {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_per_kill = 0x131C; // int32
    public const nint bonus_damage_per_assist = 0x1320; // int32
    public const nint max_damage = 0x1324; // int32
    public const nint corruption_duration = 0x1328; // float32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Desolator_2 {
    public const nint bonus_damage = 0x1318; // int32
    public const nint corruption_duration = 0x131C; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Devastator {
    public const nint bonus_armor = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint mana_cost = 0x1328; // int32
    public const nint slow_duration = 0x132C; // int32
    public const nint spell_amp_duration = 0x1330; // int32
    public const nint damage_penalty = 0x1334; // int32
    public const nint passive_cooldown = 0x1338; // int32
    public const nint m_InFlightWitchBladeAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Diadem {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Diffusal_Blade {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint damage_per_burn = 0x1320; // float32
    public const nint feedback_mana_burn = 0x1324; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1328; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Diffusal_Blade_Slow {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint damage_per_burn = 0x132C; // float32
    public const nint feedback_mana_burn = 0x1330; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1334; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x1338; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Attack_Debuff {
    public const nint attack_speed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Evasion_Buff {
    public const nint purge_bonus_miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Disperser_Movespeed_Buff {
    public const nint movement_speed_buff_rate = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_DivineRapier {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Doubloon {
    public const nint conversion_pct = 0x1318; // float32
    public const nint bonus_health_regen = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_DragonLance {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint base_attack_range = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Dragon_Scale {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_DuelistGloves {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint radius = 0x1320; // float32
    public const nint actual_attack_speed = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_DustofAppearance {
    public const nint movespeed = 0x1318; // int32
    public const nint m_bCastOnInvisibleHero = 0x131C; // bool
}

public static class CDOTA_Modifier_Item_DustofAppearance_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint duration = 0x131C; // float32
    public const nint linger_duration = 0x1320; // float32
    public const nint movespeed = 0x1324; // int32
    public const nint damage = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Dynamite_Jacket {
    public const nint bonus_armor = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint blind_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_EagleEye {
    public const nint radius = 0x1318; // int32
    public const nint bonus_agi = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_EagleHorn {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_EchoSabre {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_strength = 0x1328; // int32
    public const nint slow_duration = 0x132C; // float32
    public const nint bonus_speed = 0x1330; // bool
}

public static class CDOTA_Modifier_Item_Elven_Tunic {
    public const nint attack_speed = 0x1318; // int32
    public const nint evasion = 0x131C; // int32
    public const nint movment = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Enchanted_Mango {
    public const nint hp_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Enchanted_Quiver {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint active_bonus_attack_range = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_EnergyBooster {
    public const nint bonus_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Essence_Ring {
    public const nint bonus_int = 0x1318; // int32
    public const nint mp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Essence_Ring_Active {
    public const nint health_gain = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud {
    public const nint bonus_spell_resist = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health = 0x1324; // float32
    public const nint mana_restore_pct = 0x1328; // int32
    public const nint stack_threshold = 0x132C; // float32
    public const nint stack_resist = 0x1330; // float32
    public const nint stack_duration = 0x1334; // float32
    public const nint max_stacks = 0x1338; // int32
    public const nint m_flCumulativeDamage = 0x133C; // float32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud_Barrier {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Eternal_Shroud_Bonus_Magic_Resist {
    public const nint max_stacks = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ethereal_Blade {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint bonus_cast_range = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Ethereal_Blade_Slow {
    public const nint blast_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ex_Machina {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_EyeOfTheVizier {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint mana_reduction_pct = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Faded_Broach {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Faerie_Fire {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Falcon_Blade {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_per_kill = 0x131C; // int32
    public const nint bonus_damage_per_assist = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint max_damage = 0x1328; // int32
    public const nint bonus_mana_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_health_regen = 0x1320; // float32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint blink_damage_cooldown = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Fallen_Sky_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Flicker {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Fluffy_Hat {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ForceStaff {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Force_Boots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Force_Field {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bonus_aoe_radius = 0x131C; // int32
    public const nint self_armor = 0x1320; // int32
    public const nint self_mres = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Force_Field_Bonus_Aura {
    public const nint bonus_aoe_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Force_Field_Effect {
    public const nint bonus_aoe_armor = 0x1318; // float32
    public const nint bonus_aoe_ms = 0x131C; // float32
    public const nint bonus_aoe_mres = 0x1320; // float32
    public const nint self_mres = 0x1324; // float32
    public const nint self_armor = 0x1328; // float32
    public const nint active_reflection_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Fortitude_Ring {
    public const nint bonus_health = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Fortitude_Ring_Active {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gauntlets {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GemOfTrueSight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GhostScepter {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Giants_Ring {
    public const nint bonus_strength = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint model_scale = 0x1320; // int32
    public const nint damage_radius = 0x1324; // int32
    public const nint pct_str_damage_per_second = 0x1328; // int32
    public const nint tick_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_GlimmerCape {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gloves_Of_Travel {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Gossamer_Cape {
    public const nint movement_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Grandmasters_Glaive {
    public const nint sange_bonus_strength = 0x1318; // int32
    public const nint sange_status_resistance = 0x131C; // int32
    public const nint sange_hp_regen_amp = 0x1320; // int32
    public const nint kaya_bonus_intellect = 0x1324; // int32
    public const nint kaya_spell_amp = 0x1328; // int32
    public const nint kaya_mana_regen_multiplier = 0x132C; // int32
    public const nint kaya_magic_damage_attack = 0x1330; // int32
    public const nint yasha_bonus_agility = 0x1334; // int32
    public const nint yasha_bonus_attack_speed = 0x1338; // int32
    public const nint yasha_movement_speed_percent_bonus = 0x133C; // int32
    public const nint m_iCurrentStance = 0x1340; // int32
    public const nint bonus_strength = 0x1344; // int32
    public const nint bash_chance_melee = 0x1348; // int32
    public const nint bash_chance_ranged = 0x134C; // int32
    public const nint bash_duration = 0x1350; // float32
    public const nint bash_cooldown = 0x1354; // float32
    public const nint bonus_chance_damage = 0x1358; // int32
    public const nint bonus_damage = 0x135C; // int32
    public const nint m_InFlightAttackRecords = 0x1360; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_GreaterCritical {
    public const nint bonus_damage = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Greater_Faerie_Fire {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Grove_Bow {
    public const nint attack_range_bonus = 0x1318; // int32
    public const nint attack_speed_bonus = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Grove_Bow_Debuff {
    public const nint magic_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_GuardianShell_Active {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Guardian_Greaves {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mres = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint aura_radius = 0x1328; // int32
    public const nint mana_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Guardian_Greaves_Aura {
    public const nint aura_health_regen = 0x1318; // float32
    public const nint aura_armor = 0x131C; // float32
    public const nint aura_health_regen_bonus = 0x1320; // float32
    public const nint aura_armor_bonus = 0x1324; // float32
    public const nint aura_mana_regen = 0x1328; // float32
    public const nint aura_mana_regen_bonus = 0x132C; // float32
    public const nint aura_bonus_threshold = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Guardian_Shell {
    public const nint all_stats = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint counter_cooldown = 0x1320; // float32
    public const nint m_flLastCounterTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_Item_Gungir {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_strength = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
    public const nint bonus_intellect = 0x1328; // int32
    public const nint bonus_hp = 0x132C; // int32
    public const nint chain_chance = 0x1330; // int32
    public const nint chain_strikes = 0x1334; // int32
    public const nint chain_damage = 0x1338; // int32
    public const nint chain_radius = 0x133C; // int32
    public const nint chain_cooldown = 0x1340; // float32
    public const nint m_InFlightAttackRecords = 0x1348; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1360; // CountdownTimer
}

public static class CDOTA_Modifier_Item_HandOfMidas {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint charge_gain_timer = 0x131C; // float32
    public const nint max_charges = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Harpoon {
    public const nint bonus_chance = 0x1318; // int32
    public const nint bonus_chance_damage = 0x131C; // int32
    public const nint bonus_strength = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
    public const nint bonus_intellect = 0x1328; // int32
    public const nint bonus_mana_regen = 0x132C; // float32
    public const nint bonus_damage = 0x1330; // int32
    public const nint bonus_speed = 0x1334; // int32
    public const nint m_InFlightProcAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nBonusProcAttackRecord = 0x1350; // int32
}

public static class CDOTA_Modifier_Item_Harpoon_EchoSabre_Component {
    public const nint slow_duration = 0x1318; // float32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_speed = 0x1320; // bool
    public const nint passive_cooldown = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Harpoon_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flDistance = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Harpoon_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Havoc_Hammer {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Headdress {
    public const nint health_regen = 0x1318; // float32
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Headdress_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Heart {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint health_regen_pct = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_HeavensHalberd {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint bonus_evasion = 0x1320; // int32
    public const nint status_resistance = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Heavy_Blade {
    public const nint damage = 0x1318; // float32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_HelmOfIronWill {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_HelmOfTheDominator {
    public const nint bonus_stats = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_HelmOfTheDominator_BonusHealth {
    public const nint health_min = 0x1318; // int32
    public const nint new_max = 0x131C; // int32
    public const nint health_bonus = 0x1320; // int32
    public const nint model_scale = 0x1324; // int32
    public const nint creep_bonus_damage = 0x1328; // int32
    public const nint creep_bonus_hp_regen = 0x132C; // int32
    public const nint creep_bonus_mp_regen = 0x1330; // int32
    public const nint creep_bonus_armor = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Helm_Of_The_Undying {
    public const nint bonus_armor = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Helm_Of_The_Undying_Active {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bPassive = 0x131C; // bool
}

public static class CDOTA_Modifier_Item_Hermes_Sandals {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_melee = 0x131C; // int32
    public const nint bonus_damage_range = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint bonus_agility = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hermes_Sandals_Active {
    public const nint phase_movement_speed = 0x1318; // int32
    public const nint phase_movement_speed_range = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_bWasRooted = 0x1324; // bool
}

public static class CDOTA_Modifier_Item_Holy_Locket {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_mana = 0x1320; // int32
    public const nint heal_increase = 0x1324; // int32
    public const nint charge_radius = 0x1328; // int32
    public const nint max_charges = 0x132C; // int32
    public const nint bonus_all_stats = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Holy_Locket_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Hood_Of_Defiance {
    public const nint bonus_spell_resist = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Hood_Of_Defiance_Barrier {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_HorizonsEquilibrium {
    public const nint distance = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint attack_lifesteal = 0x1320; // int32
    public const nint spell_lifesteal = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hurricane_Pike {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint bonus_agility = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint base_attack_range = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Hyperstone {
    public const nint bonus_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_IcarusWings {
    public const nint move_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_IcarusWingsBuff {
    public const nint status_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_IcarusWingsDebuff {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Illusionists_Cape_Aura {
    public const nint attack_damage_aura = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Illusionsts_Cape {
    public const nint bonus_agi = 0x1318; // int32
    public const nint bonus_str = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Imp_Claw {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Infused_Raindrop {
    public const nint mana_regen = 0x1318; // float32
    public const nint bonus_armor = 0x131C; // float32
    public const nint bonus_magical_armor = 0x1320; // int32
    public const nint magic_damage_block = 0x1324; // int32
    public const nint min_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_InvisibilityEdge {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Iron_Talon {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_IronwoodBranch {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ironwood_tree {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Javelin {
    public const nint bonus_chance = 0x1318; // int32
    public const nint bonus_chance_damage = 0x131C; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Kaya {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint mana_regen_multiplier = 0x1320; // int32
    public const nint spell_lifesteal_amp = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Kaya_And_Sange {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // int32
    public const nint mana_regen_multiplier = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
    public const nint spell_lifesteal_amp = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_LanceOfPursuit {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint backstab_damage = 0x1320; // int32
    public const nint backstab_angle = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint m_bBackstab = 0x132C; // bool
}

public static class CDOTA_Modifier_Item_Lance_of_Pursuit_Slow {
    public const nint slow_pct_melee = 0x1318; // int32
    public const nint slow_pct_ranged = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_LesserCritical {
    public const nint bonus_damage = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_LightRobes {
    public const nint health_penalty = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Lotus_Orb {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint block_cooldown = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Lotus_Orb_Active {
    public const nint m_LastParams = 0x1318; // CModifierParams
}

public static class CDOTA_Modifier_Item_Lotus_Orb_ChannelCheck {
    public const nint m_hAbility = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_vLocation = 0x1320; // Vector
    public const nint m_fChannelEnd = 0x132C; // GameTime_t
    public const nint m_bInterrupt = 0x1330; // bool
    public const nint m_bExpired = 0x1331; // bool
}

public static class CDOTA_Modifier_Item_Lunar_Crest {
    public const nint bonus_health = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint bonus_spell_resist = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Lunar_Crest_Barrier_Addition {
    public const nint barrier_block = 0x1318; // int32
    public const nint barrier_amount = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Lunar_Crest_Barrier_Reduction {
    public const nint barrier_block = 0x1318; // int32
    public const nint m_flDamageTotal = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Maelstrom {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint chain_chance = 0x1320; // int32
    public const nint chain_strikes = 0x1324; // int32
    public const nint chain_damage = 0x1328; // int32
    public const nint chain_radius = 0x132C; // int32
    public const nint chain_cooldown = 0x1330; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1350; // CountdownTimer
}

public static class CDOTA_Modifier_Item_Mage_Slayer {
    public const nint bonus_magical_armor = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint duration = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint bonus_intellect = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Mage_Slayer_Debuff {
    public const nint spell_amp_debuff = 0x1318; // int32
    public const nint dps = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MagicStick {
    public const nint charge_radius = 0x1318; // int32
    public const nint max_charges = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MagicWand {
    public const nint charge_radius = 0x1318; // int32
    public const nint max_charges = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Magus_Minimus {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_intellect = 0x131C; // int32
    public const nint damage_per_burn = 0x1320; // float32
    public const nint feedback_mana_burn = 0x1324; // int32
    public const nint feedback_mana_burn_illusion_melee = 0x1328; // int32
    public const nint feedback_mana_burn_illusion_ranged = 0x132C; // int32
    public const nint aura_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Magus_Minimus_Aura_Slow {
    public const nint max_slow_pct = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Magus_Minimus_Inhibit {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ManaclesOfPower {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_ManaclesOfPower_Effect {
    public const nint m_hPartner = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint leash_distance = 0x1320; // float32
    public const nint leash_limit_multiplier = 0x1324; // float32
    public const nint m_hAnchor = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Item_Mango_Tree {
    public const nint m_hTree = 0x1318; // CHandle< CBaseEntity >
    public const nint m_Timer = 0x1320; // CountdownTimer
    public const nint seconds = 0x1338; // float32
}

public static class CDOTA_Modifier_Item_MantaStyle {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint bonus_agility = 0x1320; // int32
    public const nint bonus_intellect = 0x1324; // int32
    public const nint bonus_movement_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Mantle {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MartyrsPlate {
    public const nint duration = 0x1318; // float32
    public const nint magic_resist = 0x131C; // int32
    public const nint hp_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_MartyrsPlate_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MartyrsPlate_Effect {
    public const nint damage_redirection = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_MaskOfDeath {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MaskOfDispair {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
    public const nint spell_lifesteal = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_MaskOfMadness {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Mechanical_Arm {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint bat = 0x131C; // float32
    public const nint stun_duration = 0x1320; // float32
    public const nint stun_chance = 0x1324; // int32
    public const nint m_nAttack = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana_regen_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Addition {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Reduction {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mekansm {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Mekansm_Aura {
    public const nint aura_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_MeteorHammer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint spell_amp = 0x1324; // float32
    public const nint mana_regen_multiplier = 0x1328; // float32
    public const nint spell_lifesteal_amp = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_MeteorHammer_Burn {
    public const nint burn_dps_buildings = 0x1318; // int32
    public const nint burn_dps_units = 0x131C; // int32
    public const nint burn_interval = 0x1320; // float32
    public const nint burn_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_MeteorHammer_Land {
    public const nint impact_radius = 0x1318; // int32
    public const nint land_time = 0x131C; // float32
    public const nint burn_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Mind_Breaker {
    public const nint magic_damage = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Minotaur_Horn {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mirror_Shield {
    public const nint m_LastParams = 0x1318; // CModifierParams
    public const nint all_stats = 0x14F8; // int32
    public const nint reflect_chance = 0x14FC; // int32
    public const nint m_bProcSuccessful = 0x1500; // bool
}

public static class CDOTA_Modifier_Item_Misericorde {
    public const nint bonus_damage = 0x1318; // int32
    public const nint missing_hp = 0x131C; // int32
    public const nint damage = 0x1320; // int32
    public const nint aspd = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_MithrilHammer {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Mjollnir {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint chain_chance = 0x1320; // int32
    public const nint chain_strikes = 0x1324; // int32
    public const nint chain_damage = 0x1328; // int32
    public const nint chain_radius = 0x132C; // int32
    public const nint chain_damage_per_charge = 0x1330; // int32
    public const nint max_charges = 0x1334; // int32
    public const nint chain_cooldown = 0x1338; // float32
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
    public const nint m_ChainTimer = 0x1358; // CountdownTimer
}

public static class CDOTA_Modifier_Item_Mjollnir_Static {
    public const nint static_chance = 0x1320; // int32
    public const nint static_strikes = 0x1324; // int32
    public const nint static_damage = 0x1328; // int32
    public const nint static_primary_radius = 0x132C; // int32
    public const nint static_seconary_radius = 0x1330; // int32
    public const nint static_radius = 0x1334; // int32
    public const nint static_cooldown = 0x1338; // float32
    public const nint chain_damage_per_charge = 0x133C; // int32
    public const nint m_StaticTimer = 0x1340; // CountdownTimer
}

public static class CDOTA_Modifier_Item_MonkeyKingBar {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_chance = 0x131C; // int32
    public const nint bonus_chance_damage = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Moonshard {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Moonshard_Consumed {
    public const nint consumed_bonus = 0x1318; // int32
    public const nint consumed_bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_MuertasGun {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_cast_pct = 0x131C; // int32
    public const nint bonus_spell_amp = 0x1320; // int32
    public const nint health_pct_penalty = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Mysterious_Hat {
    public const nint bonus_health = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint manacost_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_MysticStaff {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Naginata {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint cooldown_reduction_percent = 0x132C; // int32
    public const nint bonus_chance = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_2 {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint bonus_strength = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_3 {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint bonus_strength = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_Archer_Aura {
    public const nint ms_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura_2 {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Necronomicon_Mana_Aura_3 {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Nemesis_Curse_Debuff {
    public const nint debuff_enemy = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Nether_Shawl {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Ninja_Gear {
    public const nint bonus_agility = 0x1318; // int32
    public const nint passive_movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_NullTalisman {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_max_mana_percentage = 0x1328; // int32
    public const nint clock_time = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Nullifier_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Oakheart {
    public const nint strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_OblivionStaff {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Item_Occult_Bracelet {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint stack_limit = 0x131C; // int32
    public const nint stack_duration = 0x1320; // float32
    public const nint m_flStackDieTime = 0x1324; // GameTime_t
    public const nint magic_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Occult_Bracelet_Stack {
    public const nint mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Ocean_Heart {
    public const nint water_hp_regen = 0x1318; // float32
    public const nint water_mp_regen = 0x131C; // float32
    public const nint all_stats = 0x1320; // int32
    public const nint m_bInRiver = 0x1324; // bool
}

public static class CDOTA_Modifier_Item_Octarine_Core {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_cooldown = 0x1320; // float32
    public const nint bonus_health_regen = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_OgreAxe {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_OgreSealTotem {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Orb_Of_Corrosion {
    public const nint armor = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Orb_Of_Destruction {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Orb_of_Pestilence {
    public const nint poison_movement_speed_melee = 0x1318; // int32
    public const nint poison_movement_speed_range = 0x131C; // int32
    public const nint poison_duration = 0x1320; // float32
    public const nint poison_damage = 0x1324; // float32
    public const nint armor = 0x1328; // int32
    public const nint hp_regen = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Pestilence_Slow {
    public const nint duration = 0x1318; // float32
    public const nint slow = 0x131C; // int32
    public const nint damage = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Venom {
    public const nint poison_movement_speed_melee = 0x1318; // int32
    public const nint poison_movement_speed_range = 0x131C; // int32
    public const nint poison_duration = 0x1320; // float32
    public const nint poison_damage_melee = 0x1324; // float32
    public const nint poison_damage_range = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Orb_of_Venom_Slow {
    public const nint duration = 0x1318; // float32
    public const nint slow = 0x131C; // float32
    public const nint damage = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_OrchidMalevolence {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_health_regen = 0x1320; // float32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Overwhelming_Blink {
    public const nint bonus_strength = 0x1318; // int32
    public const nint blink_damage_cooldown = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Overwhelming_Blink_Debuff {
    public const nint caster_strength = 0x1318; // float32
    public const nint movement_slow = 0x131C; // int32
    public const nint attack_slow = 0x1320; // int32
    public const nint damage_pct_over_time = 0x1324; // float32
    public const nint m_flTickDamage = 0x1328; // float32
}

public static class CDOTA_Modifier_Item_Paintball {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Paintball_Debuff {
    public const nint dps = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Paladin_Sword {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_lifesteal = 0x131C; // int32
    public const nint bonus_spell_lifesteal = 0x1320; // int32
    public const nint bonus_amp = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Panic_Button {
    public const nint bonus_health = 0x1318; // int32
    public const nint health_threshold = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Pavise {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // float32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Pavise_Shield {
    public const nint absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Penta_Edged_Sword {
    public const nint damage = 0x1318; // int32
    public const nint maim_chance = 0x131C; // int32
    public const nint maim_duration = 0x1320; // float32
    public const nint melee_attack_range = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Perseverance {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_PhaseBoots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_damage_melee = 0x131C; // int32
    public const nint bonus_damage_range = 0x1320; // int32
    public const nint damage_block_melee = 0x1324; // int32
    public const nint damage_block_ranged = 0x1328; // int32
    public const nint block_chance = 0x132C; // int32
    public const nint bonus_attack_speed = 0x1330; // int32
    public const nint bonus_armor = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_PhaseBoots_Active {
    public const nint phase_movement_speed = 0x1318; // int32
    public const nint phase_movement_speed_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Philosophers_Stone {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_gpm = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Phoenix_Ash {
    public const nint health_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Phylactery {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_spell_damage = 0x1324; // int32
    public const nint slow_duration = 0x1328; // float32
    public const nint bonus_all_stats = 0x132C; // int32
    public const nint vecActivatedAbilities = 0x1330; // CUtlVector< CDOTABaseAbility* >
}

public static class CDOTA_Modifier_Item_Phylactery_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Pipe {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint health_regen = 0x131C; // float32
    public const nint magic_resistance = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Pipe_Aura {
    public const nint aura_health_regen = 0x1318; // float32
    public const nint magic_resistance_aura = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Pipe_Barrier {
    public const nint barrier_amount = 0x1318; // int32
    public const nint barrier_block = 0x131C; // int32
    public const nint barrier_block_creep = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Pirate_Hat {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_ms = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PlaneswalkersCloak {
    public const nint bonus_magical_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_PlateMail {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_PogoStick {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_PointBooster {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PoorMansShield {
    public const nint damage_block_melee = 0x1318; // int32
    public const nint damage_block_ranged = 0x131C; // int32
    public const nint block_chance = 0x1320; // int32
    public const nint bonus_agility = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Possessed_Mask {
    public const nint primary_attribute = 0x1318; // int32
    public const nint lifesteal = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_PowerTreads {
    public const nint bonus_movement_speed_ranged = 0x1318; // int32
    public const nint bonus_movement_speed_melee = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_stat = 0x1324; // int32
    public const nint bonus_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Princes_Knife {
    public const nint duration = 0x1318; // float32
    public const nint projectile_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Princes_Knife_Hex {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Psychic_Headband {
    public const nint intelligence_pct = 0x1318; // int32
    public const nint cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Pupils_gift {
    public const nint secondary_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Quarterstaff {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_QuellingBlade {
    public const nint damage_bonus = 0x1318; // int32
    public const nint damage_bonus_ranged = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Quickening_Charm {
    public const nint bonus_cooldown = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Quicksilver_Amulet {
    public const nint base_attack = 0x1318; // int32
    public const nint bonus_attack = 0x131C; // int32
    public const nint base_movement = 0x1320; // int32
    public const nint bonus_movement = 0x1324; // int32
    public const nint projectile_increase = 0x1328; // int32
    public const nint anim_increase = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Radiance {
    public const nint bonus_damage = 0x1318; // int32
    public const nint evasion = 0x131C; // int32
    public const nint upgrade_day_vision = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
    public const nint m_bLastToggleState = 0x1328; // bool
}

public static class CDOTA_Modifier_Item_Radiance_Debuff {
    public const nint aura_damage = 0x1320; // int32
    public const nint aura_damage_upgrade_bonus = 0x1324; // int32
    public const nint aura_damage_illusions = 0x1328; // int32
    public const nint blind_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Rattlecage {
    public const nint m_iDamageTaken = 0x1318; // int32
    public const nint damage_threshold = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint damage_reset_interval = 0x1324; // float32
    public const nint bonus_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Rattlecage_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Reaver {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_RefresherOrb {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_RefresherShard {
    public const nint bonus_health_regen = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Repair_Kit {
    public const nint hp_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Revenants_Brooch {
    public const nint m_bScepter = 0x1318; // bool
    public const nint bonus_damage = 0x131C; // int32
    public const nint spell_lifesteal = 0x1320; // int32
    public const nint bonus_spell_lifesteal = 0x1324; // int32
    public const nint manacost_per_hit = 0x1328; // int32
    public const nint m_bActive = 0x132C; // bool
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_RingOfAquila {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_RingOfAquila_Aura {
    public const nint m_bAppliesToCreeps = 0x1318; // bool
    public const nint aura_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_RingOfAquila_Aura_Bonus {
    public const nint aura_bonus_armor = 0x1318; // int32
    public const nint aura_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_RingOfHealth {
    public const nint bonus_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfProtection {
    public const nint bonus_armor = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfRegeneration {
    public const nint bonus_health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RingOfTarrasque {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Ring_Of_Basilius {
    public const nint aura_radius = 0x1318; // int32
    public const nint mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Ring_Of_Basilius_Effect {
    public const nint aura_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_RobeOfMagi {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_RodOfAtos {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_hp = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Royal_Jelly {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_SacredRelic {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SamplePicker {
    public const nint base_gold = 0x1318; // int32
    public const nint gold_per_level = 0x131C; // int32
    public const nint strength_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Agi {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint base_interval = 0x131C; // float32
    public const nint max_tick_count = 0x1320; // int32
    public const nint bonus_all_stats = 0x1324; // int32
    public const nint agi_counter_chance = 0x1328; // int32
    public const nint agi_counter_cooldown = 0x132C; // float32
    public const nint m_flLastCounterTime = 0x1330; // GameTime_t
    public const nint iCurrentTickCount = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Int {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint base_interval = 0x131C; // float32
    public const nint max_tick_count = 0x1320; // int32
    public const nint int_damage_interval = 0x1324; // float32
    public const nint int_damage_range = 0x1328; // float32
    public const nint int_damage = 0x132C; // float32
    public const nint iCurrentTickCount = 0x1330; // int32
    public const nint int_max_targets = 0x1334; // int32
    public const nint m_flNextHit = 0x1338; // GameTime_t
    public const nint bonus_all_stats = 0x133C; // int32
}

public static class CDOTA_Modifier_Item_Samurai_Tabi_Str {
    public const nint stat_per_tick = 0x1318; // int32
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint base_interval = 0x1320; // float32
    public const nint max_tick_count = 0x1324; // int32
    public const nint str_root_duration = 0x1328; // float32
    public const nint str_root_cooldown = 0x132C; // float32
    public const nint str_root_chance = 0x1330; // int32
    public const nint str_bonus_damage = 0x1334; // float32
    public const nint iCurrentTickCount = 0x1338; // int32
    public const nint m_flLastRootTime = 0x133C; // GameTime_t
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Sange {
    public const nint bonus_strength = 0x1318; // int32
    public const nint hp_regen_amp = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_SangeAndYasha {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint hp_regen_amp = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Satanic {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_strength = 0x131C; // int32
    public const nint lifesteal_percent = 0x1320; // int32
    public const nint unholy_lifesteal_percent = 0x1324; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Satanic_Unholy {
    public const nint unholy_lifesteal_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Satchel {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint xp_gain = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity_Active {
    public const nint aura_health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SeedsOfSerenity_Active_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_SheepStick {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_mana_regen = 0x1324; // float32
    public const nint bonus_mana = 0x1328; // int32
    public const nint cast_range_bonus = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint aura_radius = 0x1320; // int32
    public const nint bonus_hp_regen = 0x1324; // int32
    public const nint bonus_strength = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Aura {
    public const nint aura_attack_speed = 0x1318; // int32
    public const nint hp_regen_degen_aura = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Blast {
    public const nint blast_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Shivas_Guard_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint blast_speed = 0x1350; // int32
    public const nint blast_radius = 0x1354; // int32
    public const nint blast_damage = 0x1358; // int32
    public const nint illusion_multiplier_pct = 0x135C; // int32
    public const nint blast_debuff_duration = 0x1360; // float32
    public const nint resist_debuff_duration = 0x1364; // float32
}

public static class CDOTA_Modifier_Item_Silver_Edge {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_attack_speed = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint crit_chance = 0x1328; // int32
    public const nint crit_multiplier = 0x132C; // int32
    public const nint backstab_duration = 0x1330; // float32
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Skadi {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
    public const nint bonus_mana = 0x1320; // int32
    public const nint cold_duration = 0x1324; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Skadi_Slow {
    public const nint cold_slow_melee = 0x1318; // int32
    public const nint cold_slow_ranged = 0x131C; // int32
    public const nint cold_attack_slow_melee = 0x1320; // int32
    public const nint cold_attack_slow_ranged = 0x1324; // int32
    public const nint heal_reduction = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial {
    public const nint health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial_Spill_Debuff {
    public const nint spill_movement_speed = 0x1318; // int32
    public const nint spill_attack_speed = 0x131C; // int32
    public const nint spill_self_bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Slime_Vial_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint spill_speed = 0x1350; // int32
    public const nint spill_radius = 0x1354; // int32
    public const nint spill_damage = 0x1358; // int32
    public const nint spill_debuff_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Item_Slippers {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_SobiMask {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Solar_Crest {
    public const nint bonus_mana = 0x1318; // float32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_health = 0x1324; // int32
    public const nint self_movement_speed = 0x1328; // int32
    public const nint nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_Solar_Crest_Armor_Addition {
    public const nint target_armor = 0x1318; // int32
    public const nint target_attack_speed = 0x131C; // int32
    public const nint target_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Solar_Crest_Armor_Reduction {
    public const nint target_armor = 0x1318; // int32
    public const nint target_attack_speed = 0x131C; // int32
    public const nint target_movement_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Sorcerers_Staff {
    public const nint mana_regen_amp = 0x1318; // int32
    public const nint spell_amp_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Soul_Booster {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_magical_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Soul_Ring {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Spark_Of_Courage {
    public const nint damage = 0x1318; // int32
    public const nint armor = 0x131C; // int32
    public const nint health_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_SpecialistsArray {
    public const nint all_stats = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint proc_bonus_damage = 0x1320; // int32
    public const nint count = 0x1324; // int32
    public const nint secondary_target_range_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_SpecialistsArray_ProcDamage {
    public const nint proc_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Sphere {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint bonus_damage = 0x1324; // int32
    public const nint block_cooldown = 0x1328; // float32
    public const nint upgrade_absorb_duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_Sphere_Target {
    public const nint upgrade_absorb_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Sphere_Upgrade_Absorb {
    public const nint damage_absorb = 0x1318; // int32
    public const nint m_bStartedTimer = 0x131C; // bool
    public const nint m_flDamageAbsorbed = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Spider_Legs_Active {
    public const nint bonus_movement_speed_active = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // float32
    public const nint bonus_all_stats = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel_Damage {
    public const nint hp_regen_reduction_enemy = 0x1318; // int32
    public const nint soul_damage_amount = 0x131C; // int32
    public const nint enemy_hp_drain = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Spirit_Vessel_Heal {
    public const nint soul_heal_amount = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Spy_Gadget {
    public const nint attack_range = 0x1318; // int32
    public const nint cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Spy_Gadget_Aura {
    public const nint scan_cooldown_reduction = 0x1318; // int32
    public const nint aura_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Star_Mace {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint cleave_damage_percent = 0x1320; // int32
    public const nint cleave_starting_width = 0x1324; // int32
    public const nint cleave_ending_width = 0x1328; // int32
    public const nint cleave_distance = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Stormcrafter {
    public const nint m_flNextHit = 0x1318; // GameTime_t
    public const nint passive_movement_bonus = 0x131C; // int32
    public const nint range = 0x1320; // int32
    public const nint interval = 0x1324; // float32
    public const nint damage = 0x1328; // int32
    public const nint slow_duration = 0x132C; // float32
    public const nint bonus_mana_regen = 0x1330; // float32
    public const nint max_targets = 0x1334; // int32
}

public static class CDOTA_Modifier_Item_StoutShield {
    public const nint damage_block_melee = 0x1318; // int32
    public const nint damage_block_ranged = 0x131C; // int32
    public const nint block_chance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Swift_Blink {
    public const nint blink_damage_cooldown = 0x1318; // float32
    public const nint bonus_agility = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Swift_Blink_Buff {
    public const nint bonus_movement = 0x1318; // int32
    public const nint bonus_agi_active = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_TalismanOfEvasion {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Tenderizer {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bash_chance_melee = 0x1320; // int32
    public const nint bash_chance_ranged = 0x1324; // int32
    public const nint bash_duration = 0x1328; // float32
    public const nint bash_cooldown = 0x132C; // float32
    public const nint bonus_chance_damage = 0x1330; // int32
    public const nint bonus_damage = 0x1334; // int32
    public const nint weaken_per_hit = 0x1338; // int32
    public const nint weaken_duration = 0x133C; // float32
    public const nint m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Terror_Mask {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Terror_Mask_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Item_Terror_Mask_Fear_Aura {
    public const nint effect_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_The_Leveller {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint demolish = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_TiaraOfSelemene {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_Timeless_Relic {
    public const nint spell_amp = 0x1318; // int32
    public const nint debuff_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Titan_Sliver {
    public const nint base_attack_damage = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint status_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Tome_of_Omniscience {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_xpm = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_TranquilBoots {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint broken_movement_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
    public const nint break_threshold = 0x1328; // int32
    public const nint break_time = 0x132C; // int32
    public const nint break_count = 0x1330; // int32
    public const nint m_flResetTime = 0x1334; // float32
}

public static class CDOTA_Modifier_Item_TranquilBoots2 {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint broken_movement_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_health_regen = 0x1324; // int32
    public const nint break_threshold = 0x1328; // int32
    public const nint break_time = 0x132C; // int32
    public const nint break_count = 0x1330; // int32
}

public static class CDOTA_Modifier_Item_Tree_Processor {
    public const nint bonus_int = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Tree_Processor_Speed {
    public const nint health_per_tree = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Trickster_Cloak {
    public const nint evasion = 0x1318; // int32
    public const nint magic_resistance = 0x131C; // int32
    public const nint debuff_limit = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Trident {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_strength = 0x1324; // int32
    public const nint hp_regen_amp = 0x1328; // int32
    public const nint status_resistance = 0x132C; // int32
    public const nint bonus_intellect = 0x1330; // int32
    public const nint spell_amp = 0x1334; // int32
    public const nint mana_regen_multiplier = 0x1338; // int32
    public const nint magic_damage_attack = 0x133C; // int32
}

public static class CDOTA_Modifier_Item_Trusty_Shovel {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_UltimateOrb {
    public const nint bonus_all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_UltimateScepter {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_UltimateScepter_Consumed_Alchemist {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_UnstableWand {
    public const nint all_stats = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Urn_Damage {
    public const nint soul_damage_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Urn_Heal {
    public const nint soul_heal_amount = 0x1318; // int32
    public const nint m_fHealingDone = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Urn_Of_Shadows {
    public const nint mana_regen = 0x1318; // float32
    public const nint bonus_all_stats = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Vambrace {
    public const nint bonus_primary_stat = 0x1318; // int32
    public const nint bonus_secondary_stat = 0x131C; // int32
    public const nint bonus_magic_resistance = 0x1320; // int32
    public const nint bonus_spell_amp = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint m_iStat = 0x132C; // int32
}

public static class CDOTA_Modifier_Item_Vampire_Fangs {
    public const nint attack_lifesteal = 0x1318; // int32
    public const nint spell_lifesteal = 0x131C; // int32
    public const nint night_vision = 0x1320; // int32
    public const nint creep_lifesteal_reduction_pct = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Vanguard {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_health_regen = 0x131C; // float32
    public const nint block_damage_ranged = 0x1320; // int32
    public const nint block_damage_melee = 0x1324; // int32
    public const nint block_chance = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
    public const nint bonus_aoe = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord_Debuff {
    public const nint spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Veil_Of_Discord_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint debuff_radius = 0x131C; // int32
    public const nint resist_debuff_duration = 0x1320; // float32
    public const nint m_nHeroesHit = 0x1324; // int32
    public const nint m_bHitInvisibleHero = 0x1328; // bool
    public const nint m_bFirstPulse = 0x1329; // bool
}

public static class CDOTA_Modifier_Item_Vengeances_Shadow {
    public const nint bonus_health = 0x1318; // int32
    public const nint damage_return = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Venom_Gland {
    public const nint primary_attribute = 0x1318; // int32
    public const nint debuff_amp = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Vermillion_Robe {
    public const nint mana_regen_pct = 0x1318; // int32
    public const nint move_speed_bonus = 0x131C; // int32
    public const nint bonus_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Vermillion_Robe_Flames {
    public const nint radius = 0x1318; // int32
    public const nint damage_per_health_missing = 0x131C; // float32
    public const nint delay = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_VindicatorsAxe {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint bonus_slow_resist = 0x1324; // int32
    public const nint m_nFxIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_VitalityBooster {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Vladmir {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Vladmir_Aura {
    public const nint lifesteal_aura = 0x1318; // int32
    public const nint damage_aura = 0x131C; // int32
    public const nint armor_aura = 0x1320; // float32
    public const nint mana_regen_aura = 0x1324; // float32
    public const nint creep_lifesteal_reduction_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_VoidStone {
    public const nint bonus_mana_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_VoidwalkerScythe {
    public const nint bonus_agility = 0x1318; // int32
    public const nint attacks = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint buff_duration = 0x1324; // float32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint m_nCounter = 0x1340; // int32
}

public static class CDOTA_Modifier_Item_Voodoo_Mask {
    public const nint spell_lifesteal = 0x1318; // float32
}

public static class CDOTA_Modifier_Item_WandOfSanctitude {
    public const nint all_stats = 0x1318; // int32
    public const nint cast_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_WandOfSanctitude_Active_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_WandOfTheBrine {
    public const nint heal_increase = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_WandOfTheBrine_Active {
    public const nint movement_speed = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint heal = 0x1324; // int32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Item_WardTrueSight {
    public const nint true_sight_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ward_Dispenser {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Ward_Maker {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Warhammer {
    public const nint bonus_strength = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Warhammer_Armor {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_WindLace {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Item_Wind_Waker {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_movement_speed = 0x1320; // int32
    public const nint bonus_mana = 0x1324; // int32
    public const nint cast_range_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Item_Witch_Blade {
    public const nint bonus_intellect = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint bonus_armor = 0x1320; // int32
    public const nint slow_duration = 0x1324; // float32
    public const nint bonus_mana_regen = 0x1328; // float32
    public const nint projectile_speed = 0x132C; // int32
    public const nint m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Item_Witch_Blade_Slow {
    public const nint slow = 0x1318; // int32
    public const nint int_damage_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Item_Witches_Switch {
    public const nint bonus_health_regen = 0x1318; // float32
    public const nint bonus_mana_regen = 0x131C; // float32
    public const nint bonus_armor = 0x1320; // int32
    public const nint aura_radius = 0x1324; // int32
}

public static class CDOTA_Modifier_Item_Witches_Switch_Aura_Effect {
    public const nint aura_mana_regen = 0x1318; // float32
    public const nint aura_health_regen = 0x131C; // float32
    public const nint aura_armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Witless_shako {
    public const nint max_health = 0x1318; // int32
    public const nint max_mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Wizard_Glass {
    public const nint debuff_amp = 0x1318; // int32
    public const nint cooldown_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_Woodland_Striders {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Item_WraithBand {
    public const nint bonus_strength = 0x1318; // int32
    public const nint bonus_agility = 0x131C; // int32
    public const nint bonus_intellect = 0x1320; // int32
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint clock_time = 0x1328; // int32
    public const nint bonus_armor = 0x132C; // float32
}

public static class CDOTA_Modifier_Item_WraithPact {
    public const nint aura_radius = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_health = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_WraithPact_DeathAura {
    public const nint armor_penalty_aura = 0x1318; // int32
    public const nint damage_penalty_aura = 0x131C; // int32
    public const nint aura_dps = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_WraithPact_Thinker {
    public const nint pact_aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint aura_dps = 0x1320; // float32
}

public static class CDOTA_Modifier_Item_Yasha {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_Item_Yasha_And_Kaya {
    public const nint bonus_agility = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint movement_speed_percent_bonus = 0x1320; // int32
    public const nint bonus_intellect = 0x1324; // int32
    public const nint spell_amp = 0x1328; // int32
    public const nint mana_regen_multiplier = 0x132C; // int32
    public const nint spell_lifesteal_amp = 0x1330; // int32
}

public static class CDOTA_Modifier_Jacket_Blind {
    public const nint blind_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Burn {
    public const nint m_bFirst = 0x1318; // bool
    public const nint burn_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Slow {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint slow_attack_speed_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Jakiro_DualBreath_Thinker {
    public const nint start_radius = 0x1318; // int32
    public const nint end_radius = 0x131C; // int32
    public const nint m_fStartTime = 0x1320; // GameTime_t
    public const nint m_fTotalTime = 0x1324; // float32
    public const nint m_vCastPosition = 0x1328; // Vector
}

public static class CDOTA_Modifier_Jakiro_IcePath_Thinker {
    public const nint path_delay = 0x1318; // float32
    public const nint path_radius = 0x131C; // int32
    public const nint m_nDamage = 0x1320; // int32
    public const nint m_flRadius = 0x1324; // float32
    public const nint stun_duration = 0x1328; // float32
    public const nint m_hUnitsHit = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vPathStart = 0x1348; // Vector
    public const nint m_vPathEnd = 0x1354; // Vector
    public const nint m_fStartTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Jakiro_LiquidFire {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint radius = 0x1338; // int32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bForceProc = 0x1340; // bool
}

public static class CDOTA_Modifier_Jakiro_LiquidFire_Burn {
    public const nint slow_attack_speed_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
}

public static class CDOTA_Modifier_Jakiro_LiquidIce {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint radius = 0x1338; // int32
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bForceProc = 0x1340; // bool
}

public static class CDOTA_Modifier_Jakiro_LiquidIce_Debuff {
    public const nint base_damage = 0x1318; // int32
    public const nint pct_health_damage = 0x131C; // float32
    public const nint movement_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Burn {
    public const nint damage = 0x1318; // int32
    public const nint burn_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Ice_EdgeThinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint ice_edge_path_radius = 0x1324; // int32
    public const nint cast_range = 0x1328; // int32
    public const nint ice_edge_linger_duration = 0x132C; // float32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Ice_Edge_Slow {
    public const nint ice_edge_movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Jakiro_Macropyre_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint burn_interval = 0x1324; // float32
    public const nint path_radius = 0x1328; // int32
    public const nint cast_range = 0x132C; // int32
    public const nint linger_duration = 0x1330; // float32
    public const nint m_bTestedGem = 0x1334; // bool
}

public static class CDOTA_Modifier_Jugg_Caster {
    public const nint shard_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_BladeDance {
    public const nint blade_dance_crit_mult = 0x1318; // int32
    public const nint blade_dance_crit_chance = 0x131C; // int32
    public const nint blade_dance_lifesteal = 0x1320; // int32
    public const nint m_bHasCrit = 0x1324; // bool
    public const nint m_bWasBladeDanceTriggeredCrit = 0x1325; // bool
}

public static class CDOTA_Modifier_Juggernaut_BladeFury {
    public const nint blade_fury_radius = 0x1318; // int32
    public const nint blade_fury_damage_per_tick = 0x131C; // int32
    public const nint blade_fury_aspd_multiplier = 0x1320; // float32
    public const nint m_flTotalAppliedDamage = 0x1324; // float32
    public const nint bonus_movespeed = 0x1328; // int32
    public const nint m_flNextAttack = 0x132C; // GameTime_t
    public const nint m_bIgnoreAttackRestriction = 0x1330; // bool
}

public static class CDOTA_Modifier_Juggernaut_BladeFury_Pull {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_Healing_Ward_Aura {
    public const nint healing_ward_movespeed_tooltip = 0x1318; // int32
}

public static class CDOTA_Modifier_Juggernaut_Healing_Ward_Heal {
    public const nint healing_ward_heal_amount = 0x1318; // int32
    public const nint m_nStartingHealthThisInterval = 0x131C; // int32
}

public static class CDOTA_Modifier_Juggernaut_Omnislash {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hLastTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_nJumps = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint omni_slash_radius = 0x132C; // int32
    public const nint attack_rate_multiplier = 0x1330; // float32
    public const nint m_bFirstHit = 0x1334; // bool
    public const nint m_iTotalDamage = 0x1338; // int32
    public const nint m_iHeroDamage = 0x133C; // int32
    public const nint m_iKilledHeroes = 0x1340; // int32
    public const nint m_fNextAttackTime = 0x1344; // GameTime_t
    public const nint m_bScepterCast = 0x1348; // bool
    public const nint m_bReflection = 0x1349; // bool
    public const nint m_bEndNext = 0x134A; // bool
}

public static class CDOTA_Modifier_JumpBoots {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flStartZ = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint push_length = 0x132C; // int32
}

public static class CDOTA_Modifier_JumpBootsIntrinsic {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Effect {
    public const nint distance_from_shrine = 0x1318; // int32
}

public static class CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Regen {
    public const nint health_restore = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint regen_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_JungleSpirit_Storm_Cyclone {
    public const nint m_FXIndex = 0x1318; // CUtlVector< ParticleIndex_t >
    public const nint m_hCyclones = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint projectile_distance = 0x1348; // int32
    public const nint projectile_radius = 0x134C; // int32
    public const nint projectile_amount = 0x1350; // int32
    public const nint projectile_duration = 0x1354; // float32
    public const nint delay = 0x1358; // float32
    public const nint m_flDieTime = 0x135C; // GameTime_t
    public const nint m_flStartTime = 0x1360; // GameTime_t
    public const nint m_vLeftControl = 0x1368; // CUtlVector< Vector >
    public const nint m_vSourceLoc = 0x1380; // CUtlVector< Vector >
    public const nint m_vTargetLoc = 0x1398; // Vector
}

public static class CDOTA_Modifier_JungleVarmint_Creator {
    public const nint m_hVarmint = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_JungleVarmint_Dive {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint distance = 0x1344; // int32
    public const nint speed = 0x1348; // float32
    public const nint acceleration = 0x134C; // float32
    public const nint radius = 0x1350; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit {
    public const nint hCasterList = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint bAcceptingGems = 0x1330; // bool
}

public static class CDOTA_Modifier_Jungle_Spirit_Ally_Alert {
    public const nint m_flLastHowl = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Jungle_Spirit_Range_Attack {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint projectile_speed = 0x131C; // int32
    public const nint turn_rate = 0x1320; // float32
    public const nint m_hAttachTarget = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Jungle_Spirit_Reductions {
    public const nint m_vecAlliesNearby = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nAlliesNearby = 0x1330; // int32
    public const nint stat_reduction_pct = 0x1334; // int32
    public const nint armor_reduction = 0x1338; // int32
    public const nint radius = 0x133C; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Debuff {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint m_vStartPos = 0x131C; // Vector
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flHeightT = 0x132C; // float32
    public const nint cyclone_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Invulnerable {
    public const nint nFXIndex = 0x1318; // ParticleIndex_t
    public const nint projectile_radius = 0x131C; // int32
    public const nint projectile_destruction_radius = 0x1320; // int32
}

public static class CDOTA_Modifier_Jungle_Spirit_Volcano_Fire_Strike_Caster {
    public const nint damage_modifier = 0x1318; // int32
}

public static class CDOTA_Modifier_Keen_Optic {
    public const nint bonus_mana_regen = 0x1318; // float32
    public const nint cast_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_KeeperOfTheLight_BlindingLight {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_KeeperOfTheLight_BlindingLight_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_KeeperOfTheLight_Illuminate {
    public const nint range = 0x1318; // int32
    public const nint total_damage = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint channel_vision_radius = 0x1324; // int32
    public const nint channel_vision_interval = 0x1328; // float32
    public const nint channel_vision_duration = 0x132C; // float32
    public const nint channel_vision_step = 0x1330; // int32
    public const nint m_flLastChantTime = 0x1334; // GameTime_t
    public const nint m_vNextVisionLocation = 0x1338; // Vector
    public const nint m_vCastDirection = 0x1344; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_ManaLeak {
    public const nint mana_leak_pct = 0x1318; // float32
    public const nint vLastPos = 0x131C; // Vector
    public const nint bResetPosition = 0x1328; // bool
    public const nint m_fAccumulatedManaLeak = 0x132C; // float32
}

public static class CDOTA_Modifier_KeeperOfTheLight_Radiant_Bind {
    public const nint slow = 0x1318; // float32
    public const nint magic_resistance = 0x131C; // int32
    public const nint stun_duration = 0x1320; // float32
    public const nint vLastPos = 0x1324; // Vector
    public const nint bResetPosition = 0x1330; // bool
    public const nint m_fAccumulatedDistance = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_nStatusFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bStunned = 0x1340; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_Recall {
    public const nint m_bWasAttacked = 0x1318; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_SpiritForm {
    public const nint m_nFXIndexA = 0x1318; // ParticleIndex_t
    public const nint movement_speed = 0x131C; // int32
    public const nint cast_range = 0x1320; // int32
    public const nint m_bDidSwapSpiritForm = 0x1324; // bool
}

public static class CDOTA_Modifier_KeeperOfTheLight_SpiritForm_Illuminate {
    public const nint range = 0x1318; // int32
    public const nint vision_radius = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint total_damage = 0x1324; // int32
    public const nint max_channel_time = 0x1328; // float32
    public const nint speed = 0x132C; // float32
    public const nint vision_duration = 0x1330; // float32
    public const nint channel_vision_radius = 0x1334; // int32
    public const nint channel_vision_interval = 0x1338; // float32
    public const nint channel_vision_duration = 0x133C; // float32
    public const nint channel_vision_step = 0x1340; // int32
    public const nint m_vCastLoc = 0x1344; // Vector
    public const nint m_vTargetLoc = 0x1350; // Vector
    public const nint m_fStartTime = 0x135C; // GameTime_t
    public const nint m_qCastAngle = 0x1360; // QAngle
    public const nint m_iProjectile = 0x136C; // int32
    public const nint m_nFXIndex = 0x1370; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1374; // ParticleIndex_t
    public const nint m_vNextVisionLocation = 0x1378; // Vector
    public const nint m_vCastDirection = 0x1384; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp {
    public const nint fixed_movement_speed = 0x1318; // int32
    public const nint m_vSource = 0x131C; // Vector
}

public static class CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp_Aura {
    public const nint radius = 0x1318; // int32
    public const nint wisp_damage = 0x131C; // float32
    public const nint off_duration = 0x1320; // float32
    public const nint off_duration_initial = 0x1324; // float32
    public const nint on_duration = 0x1328; // float32
    public const nint hit_count = 0x132C; // int32
    public const nint m_iAttackCount = 0x1330; // int32
    public const nint m_flNextTimeOn = 0x1334; // GameTime_t
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint m_flNextTime = 0x1344; // GameTime_t
    public const nint m_vecDamagedEntities = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flCorrectionTime = 0x1360; // float32
}

public static class CDOTA_Modifier_Kill {
    public const nint m_bHideOnKill = 0x1318; // bool
}

public static class CDOTA_Modifier_Knockback {
    public const nint knockback_distance = 0x1318; // float32
    public const nint knockback_height = 0x131C; // int32
    public const nint knockback_duration = 0x1320; // float32
    public const nint m_vHorizOffset = 0x1324; // Vector
    public const nint m_vStartPosition = 0x1330; // Vector
    public const nint m_fCurrentTimeHoriz = 0x133C; // float32
    public const nint m_fCurrentTimeVert = 0x1340; // float32
    public const nint m_bShouldStun = 0x1344; // bool
    public const nint m_bRespectLeash = 0x1345; // bool
    public const nint m_bReversePolarity = 0x1346; // bool
}

public static class CDOTA_Modifier_KoboldTaskmaster_SpeedAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTaskmaster_SpeedAura_Bonus {
    public const nint bonus_movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTunneler_ProspectingAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_KoboldTunneler_ProspectingAura_Money {
    public const nint gpm_aura = 0x1318; // int32
}

public static class CDOTA_Modifier_Kobold_Disarm {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Kunkka_Davy_Jones_Locker_Aura {
    public const nint m_flRadius = 0x1318; // float32
}

public static class CDOTA_Modifier_Kunkka_Fear {
    public const nint m_pEntityToBeAfraidOf = 0x1318; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Modifier_Kunkka_GhostShip_DamageAbsorb {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint movespeed_bonus = 0x131C; // int32
    public const nint ghostship_absorb = 0x1320; // float32
}

public static class CDOTA_Modifier_Kunkka_GhostShip_DamageDelay {
    public const nint m_iAccumulatedDamage = 0x1318; // int32
    public const nint m_flDuration = 0x131C; // float32
}

public static class CDOTA_Modifier_Kunkka_Ghost_Ship_Fleet {
    public const nint vCasterOrigin = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
    public const nint hitcount = 0x1330; // int32
}

public static class CDOTA_Modifier_Kunkka_Man_the_Helm {
    public const nint tick_interval = 0x1318; // float32
    public const nint forward_move_speed = 0x131C; // float32
    public const nint turn_rate_boosted = 0x1320; // float32
    public const nint turn_rate = 0x1324; // float32
    public const nint hit_radius = 0x1328; // int32
    public const nint knockback_radius = 0x132C; // int32
    public const nint m_bHitFirstUpdate = 0x1330; // bool
    public const nint m_flHitEndTime = 0x1334; // GameTime_t
    public const nint hit_recover_time = 0x1338; // float32
    public const nint m_flTurnBoostProgress = 0x133C; // float32
    public const nint m_flFacingTarget = 0x1340; // float32
    public const nint m_flLastHeroAttackTime = 0x1344; // GameTime_t
    public const nint m_nFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_flGyroshellDurationRemaining = 0x134C; // float32
    public const nint m_flTurnHistory = 0x1350; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesCredited = 0x1380; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x1398; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vDirection = 0x13B0; // Vector
}

public static class CDOTA_Modifier_Kunkka_No_Quarter_Counter {
    public const nint m_nStackCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Rumboldened_Immunity {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Tidebringer {
    public const nint m_bTidebringerAttack = 0x1318; // bool
    public const nint cleave_starting_width = 0x131C; // int32
    public const nint cleave_ending_width = 0x1320; // int32
    public const nint cleave_distance = 0x1324; // int32
    public const nint damage_bonus = 0x1328; // int32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint cleave_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_Kunkka_Tidebringer_Slow {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent {
    public const nint torrent_damage = 0x1318; // int32
    public const nint damage_tick_interval = 0x131C; // float32
    public const nint percent_instant = 0x1320; // float32
    public const nint flDamagePerTick = 0x1324; // float32
    public const nint m_flStartZ = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_bTorrentStorm = 0x1330; // bool
}

public static class CDOTA_Modifier_Kunkka_Torrent_Slow {
    public const nint movespeed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent_Storm {
    public const nint torrent_min_distance = 0x1318; // int32
    public const nint torrent_max_distance = 0x131C; // int32
    public const nint m_iExplosionQuadrant = 0x1320; // int32
}

public static class CDOTA_Modifier_Kunkka_Torrent_Thinker {
    public const nint m_bShowEnemies = 0x1318; // bool
    public const nint m_bTorrentStorm = 0x1319; // bool
    public const nint m_bTorrentStarted = 0x131A; // bool
    public const nint m_fTorrentStartTime = 0x131C; // GameTime_t
    public const nint flDamagePerTick = 0x1320; // float32
    public const nint flFirstDamage = 0x1324; // float32
    public const nint damage_tick_interval = 0x1328; // float32
    public const nint percent_instant = 0x132C; // float32
}

public static class CDOTA_Modifier_Kunkka_XMarksTheSpot {
    public const nint ally_ms = 0x1318; // int32
    public const nint ally_armor = 0x131C; // int32
    public const nint hThinker = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Kunkka_XMarksTheSpot_Thinker {
    public const nint m_vStartLoc = 0x1318; // Vector
    public const nint m_bIsReflection = 0x1324; // bool
    public const nint m_hEntity = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Lamp_Off {
    public const nint m_iTempViewer = 0x1318; // int32
}

public static class CDOTA_Modifier_Legion_Commander_Duel {
    public const nint reward_damage = 0x1318; // int32
    public const nint scepter_damage_reduction_pct = 0x131C; // int32
    public const nint m_bAttacked = 0x1320; // bool
    public const nint m_bHadAVictor = 0x1321; // bool
    public const nint m_flTimeDuelStart = 0x1324; // GameTime_t
    public const nint m_hPartner = 0x1328; // CHandle< CBaseEntity >
    public const nint m_flNextTime = 0x132C; // float32
    public const nint hAlreadyHitList = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Legion_Commander_MomentOfCourage {
    public const nint trigger_chance = 0x1318; // int32
    public const nint buff_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Legion_Commander_MomentOfCourage_Lifesteal {
    public const nint hp_leech_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Legion_Commander_OverwhelmingOdds {
    public const nint bonus_attack_speed_creeps = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint armor_per_creep = 0x1320; // float32
    public const nint armor_per_hero = 0x1324; // float32
    public const nint m_nTotalBonus = 0x1328; // int32
    public const nint m_flBonusArmor = 0x132C; // float32
}

public static class CDOTA_Modifier_Legion_Commander_PressTheAttack {
    public const nint move_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Legion_Commander_PressTheAttack_Immunity {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Leshrac_Decrepify {
    public const nint magic_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Decrepify_Aura {
    public const nint magic_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Diabolic_Edict {
    public const nint num_explosions = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_fExplosions = 0x1320; // float32
    public const nint tower_bonus = 0x1324; // float32
    public const nint m_bTalentActive = 0x1328; // bool
}

public static class CDOTA_Modifier_Leshrac_Greater_Lightning_Storm {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm {
    public const nint damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint jump_count = 0x1320; // int32
    public const nint slow_duration = 0x1324; // float32
    public const nint jump_delay = 0x1328; // float32
    public const nint hInitialTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_flDamage = 0x1330; // float32
    public const nint m_iCurJumpCount = 0x1334; // int32
    public const nint m_vCurTargetLoc = 0x1338; // Vector
    public const nint m_hHitEntities = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bGrantedGem = 0x1360; // bool
    public const nint m_bBounceTwice = 0x1361; // bool
    public const nint m_eLastTarget = 0x1364; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm_Scepter_Thinker {
    public const nint pulse_nova_lightning_interval = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Lightning_Storm_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Leshrac_Pulse_Nova {
    public const nint m_bFirst = 0x1318; // bool
    public const nint damage_resistance = 0x1324; // int32
    public const nint bonus_movespeed = 0x1328; // int32
}

public static class CDOTA_Modifier_Leshrac_Split_Earth_Thinker {
    public const nint m_iCount = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Lesser_NightCrawler_Pounce {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint pounce_distance = 0x1344; // int32
    public const nint pounce_speed = 0x1348; // float32
    public const nint pounce_acceleration = 0x134C; // float32
    public const nint pounce_radius = 0x1350; // int32
    public const nint pounce_damage = 0x1354; // int32
    public const nint leash_duration = 0x1358; // float32
}

public static class CDOTA_Modifier_Lich_ChainFrost_OnDeath {
    public const nint should_fire_chain_frost_on_death = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_ChainFrost_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Lich_Chain_Frost_Thinker {
    public const nint m_nDamageToHeroes = 0x1318; // int32
    public const nint m_nHeroesKilled = 0x131C; // int32
    public const nint m_nJumps = 0x1320; // int32
    public const nint m_bFirstJump = 0x1324; // bool
    public const nint m_hTarget = 0x1328; // CHandle< CBaseEntity >
    public const nint m_hAvoidTarget = 0x132C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Lich_DarkSorcery_Buff {
    public const nint mana_drain = 0x1318; // int32
    public const nint attack_count = 0x131C; // int32
    public const nint attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Lich_FrostArmor {
    public const nint armor_bonus = 0x1318; // int32
    public const nint health_regen = 0x131C; // int32
    public const nint slow_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Lich_FrostArmor_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Lich_FrostAura {
    public const nint duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Lich_FrostAura_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_FrostAura_Slow {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_FrostNova_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint slow_attack_speed = 0x131C; // int32
    public const nint slow_attack_speed_primary = 0x1320; // int32
    public const nint m_bIsPrimary = 0x1324; // bool
}

public static class CDOTA_Modifier_Lich_FrostShield {
    public const nint radius = 0x1318; // int32
    public const nint interval = 0x131C; // float32
    public const nint damage_reduction = 0x1320; // int32
    public const nint health_regen = 0x1324; // int32
}

public static class CDOTA_Modifier_Lich_FrostShield_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_Ice_Spire {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_Timer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_Lich_Ice_Spire_Debuff {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Lich_Sinister_Gaze {
    public const nint movement_speed = 0x1318; // int32
    public const nint mana_drain = 0x131C; // int32
    public const nint m_flIntervalRate = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint creep_damage = 0x1328; // float32
    public const nint m_bBlasted = 0x132C; // bool
}

public static class CDOTA_Modifier_Life_Stealer_Assimilate {
    public const nint order_lock_duration = 0x1318; // float32
    public const nint m_fOrderLockDone = 0x131C; // GameTime_t
    public const nint m_nFXIndex = 0x1320; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Feast {
    public const nint hp_leech_percent = 0x1318; // float32
    public const nint hp_damage_percent = 0x131C; // float32
}

public static class CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy {
    public const nint attack_speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy_Slow {
    public const nint miss_pct = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x131C; // int32
    public const nint self_regen = 0x1320; // float32
    public const nint m_nStartingHealth = 0x1324; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Creep {
    public const nint m_bChangedTeams = 0x1318; // bool
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Effect {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_health = 0x131C; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Infest_Enemy_Hero {
    public const nint attack_rate_enemy = 0x1318; // float32
}

public static class CDOTA_Modifier_Life_Stealer_Open_Wounds {
    public const nint slow_steps = 0x1318; // int32[8]
    public const nint heal_percent = 0x1338; // int32
    public const nint m_nDamageTracker = 0x133C; // int32
    public const nint damage_threshold = 0x1340; // int32
    public const nint spread_radius = 0x1344; // int32
    public const nint max_health_as_damage_pct = 0x1348; // int32
}

public static class CDOTA_Modifier_Life_Stealer_Rage {
    public const nint movement_speed_bonus = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Light_Collector {
    public const nint m_bActive = 0x1318; // bool
    public const nint health_regen = 0x131C; // int32
    public const nint mana_regen = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint movespeed_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Light_Collector_Blind {
    public const nint miss_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_DragonSlave_Burn {
    public const nint dragon_slave_burn = 0x1318; // int32
    public const nint target_crit_multiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Lina_FierySoul {
    public const nint fiery_soul_attack_speed_bonus = 0x1318; // int32
    public const nint fiery_soul_move_speed_bonus = 0x131C; // float32
    public const nint fiery_soul_max_stacks = 0x1320; // int32
    public const nint fiery_soul_stack_duration = 0x1324; // float32
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flFierySoulDieTime = 0x132C; // GameTime_t
    public const nint m_flLastFierySoalFullStackTime = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_Lina_Fiery_Cloak {
    public const nint magic_resistance = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
    public const nint visualzdelta = 0x1320; // float32
}

public static class CDOTA_Modifier_Lina_LagunaBlade {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_LagunaBlade_Line {
    public const nint vStart = 0x1318; // Vector
    public const nint vEnd = 0x1324; // Vector
}

public static class CDOTA_Modifier_Lina_LagunaBlade_Superheated {
    public const nint increased_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lina_LightStrikeArray_Thinker {
    public const nint m_iDamage = 0x1318; // int32
    public const nint m_flStunDuration = 0x131C; // float32
    public const nint light_strike_array_aoe = 0x1320; // int32
    public const nint light_strike_array_damage = 0x1324; // int32
    public const nint light_strike_array_stun_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Lion_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Lion_FingerOfDeath {
    public const nint m_bIgnoreBonus = 0x1318; // bool
}

public static class CDOTA_Modifier_Lion_Impale {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_bDamageApplied = 0x1320; // bool
    public const nint damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Lion_ManaDrain {
    public const nint mana_per_second = 0x1318; // int32
    public const nint break_distance = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint movespeed = 0x1324; // int32
    public const nint damage_pct = 0x1328; // int32
    public const nint ally_pct = 0x132C; // int32
    public const nint m_fAppliedTime = 0x1330; // GameTime_t
    public const nint m_nTotalManaDrained = 0x1334; // int32
    public const nint m_nSelfBuffSerialNumber = 0x1338; // int32
    public const nint m_nTargetDebuffSerialNumber = 0x133C; // int32
}

public static class CDOTA_Modifier_Lion_Voodoo {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_Entangling_Claws {
    public const nint attack_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_Rabid {
    public const nint shard_movement_speed_pct = 0x1318; // int32
    public const nint shard_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_LoneDruid_SavageRoar {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_AttackCheck {
    public const nint m_bCanBeResummoned = 0x1318; // bool
    public const nint m_bCanAttack = 0x1319; // bool
    public const nint m_nFxIndex = 0x131C; // ParticleIndex_t
    public const nint m_nStatusFxIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Defender {
    public const nint damage_share = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Demolish {
    public const nint bonus_building_damage = 0x1318; // int32
    public const nint true_form_bonus_building_damage = 0x131C; // int32
    public const nint spell_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Entangle {
    public const nint entangle_chance = 0x1318; // int32
    public const nint hero_entangle_chance = 0x131C; // int32
    public const nint hero_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Entangle_Effect {
    public const nint m_iEntangleDamage = 0x1318; // int32
    public const nint interval_rate = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch {
    public const nint tick_rate = 0x1318; // float32
    public const nint drag_distance = 0x131C; // int32
    public const nint break_distance = 0x1320; // int32
    public const nint vPreviousLocation = 0x1324; // Vector
    public const nint m_hAnchor = 0x1330; // CHandle< CDOTA_BaseNPC >
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Damage {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Self {
    public const nint self_slow = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
    public const nint m_bFetchingRune = 0x1324; // bool
    public const nint m_vPreviousLoc = 0x1328; // Vector
    public const nint drag_distance = 0x1334; // int32
    public const nint break_distance = 0x1338; // int32
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint lifesteal_percent = 0x131C; // int32
    public const nint armor = 0x1320; // int32
    public const nint armor_sharing = 0x1324; // int32
    public const nint active_bonus = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink_Active {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_LoneDruid_SpiritLink_BearFear {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_LoneDruid_TrueForm {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_hp = 0x131C; // int32
    public const nint base_attack_time = 0x1320; // float32
}

public static class CDOTA_Modifier_LoneDruid_TrueForm_BattleCry {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_LootDrop_Thinker {
    public const nint m_bAutoPickup = 0x1318; // bool
    public const nint m_bOnlyPlayerHeroPickup = 0x1319; // bool
    public const nint m_bCreepHeroPickup = 0x131A; // bool
    public const nint m_bAutoUse = 0x131B; // bool
    public const nint m_bFlying = 0x131C; // bool
    public const nint m_bUseSpawnAnim = 0x131D; // bool
    public const nint m_bAutoTeleport = 0x131E; // bool
    public const nint m_flKnockbackStartTime = 0x1320; // GameTime_t
    public const nint m_flKnockbackEndTime = 0x1324; // GameTime_t
    public const nint m_flKnockbackHeight = 0x1328; // float32
    public const nint m_flInitialHeight = 0x132C; // float32
    public const nint m_flKnockbackDuration = 0x1330; // float32
    public const nint m_flEndHeight = 0x1334; // float32
    public const nint m_vStartPos = 0x1338; // Vector
    public const nint m_vEndPos = 0x1344; // Vector
    public const nint m_fPickupRadius = 0x1350; // float32
    public const nint m_strTransitionEffect = 0x1358; // CUtlString
}

public static class CDOTA_Modifier_Lua {
    public const nint m_bHasCustomTransmitterData = 0x1400; // bool
}

public static class CDOTA_Modifier_Luna_Eclipse {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint radius = 0x131C; // int32
    public const nint beams = 0x1320; // int32
    public const nint hit_count = 0x1324; // int32
    public const nint m_iBeamDamage = 0x1328; // int32
    public const nint beam_interval = 0x132C; // float32
    public const nint stun_duration = 0x1330; // float32
    public const nint vPosition = 0x1334; // Vector
    public const nint bAreaTarget = 0x1340; // bool
    public const nint m_iTickCount = 0x1344; // int32
    public const nint m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
    public const nint m_HitTargets = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flBeamStun = 0x1368; // float32
}

public static class CDOTA_Modifier_Luna_LucentBeam_Damage_Buff {
    public const nint damage_buff_per_beam = 0x1318; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing {
    public const nint radius = 0x1318; // int32
    public const nint bonus_night_vision = 0x131C; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessingAura {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_damage_self = 0x131C; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing_Active {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Luna_LunarBlessing_Smoke {
    public const nint bonus_speed_day = 0x1328; // int32
    public const nint bonus_speed_night = 0x132C; // int32
    public const nint break_distance_day = 0x1330; // int32
    public const nint break_distance_night = 0x1334; // int32
    public const nint visibility_radius = 0x1338; // int32
    public const nint bonus_movement_speed = 0x133C; // int32
}

public static class CDOTA_Modifier_Luna_Lunar_Grace {
    public const nint attack_speed = 0x1318; // int32
    public const nint night_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Luna_MoonGlaive {
    public const nint range = 0x1318; // int32
    public const nint bounces = 0x131C; // int32
    public const nint damage_reduction_percent = 0x1320; // int32
    public const nint m_nMoonGlaiveFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Luna_MoonGlaive_Shield {
    public const nint rotating_glaives = 0x1318; // int32
    public const nint rotating_glaives_hit_radius = 0x131C; // float32
    public const nint rotating_glaives_speed = 0x1320; // float32
    public const nint rotating_glaives_collision_damage = 0x1324; // float32
    public const nint rotating_glaives_movement_radius = 0x1328; // float32
    public const nint rotating_glaives_damage_reduction = 0x132C; // float32
    public const nint m_flCurRotation = 0x1330; // float32
    public const nint m_flCurRadius = 0x1334; // float32
    public const nint m_flSecondsPerRotation = 0x1338; // float32
    public const nint m_flMaxRadius = 0x133C; // float32
}

public static class CDOTA_Modifier_Lycan_FeralImpulse {
    public const nint bonus_hp_regen = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Lycan_FeralImpulse_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_Howl {
    public const nint attack_damage_reduction = 0x1318; // int32
    public const nint total_attack_damage_reduction = 0x131C; // int32
    public const nint armor = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Shapeshift {
    public const nint bonus_night_vision = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_iOriginalAttackCapability = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Shapeshift_Speed {
    public const nint speed = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint crit_multiplier = 0x1320; // int32
    public const nint health_bonus = 0x1324; // int32
}

public static class CDOTA_Modifier_Lycan_Shard {
    public const nint m_flNextSpawn = 0x1318; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Bash {
    public const nint bash_chance = 0x1318; // int32
    public const nint bash_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_BonusDamage {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_CriticalStrike {
    public const nint m_CooldownTimer = 0x1318; // CountdownTimer
    public const nint maim_chance = 0x1330; // int32
    public const nint maim_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Health {
    public const nint bonus_health = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_SummonWolves_Maim {
    public const nint maim_movement_speed = 0x1318; // int32
    public const nint maim_attack_speed = 0x131C; // int32
    public const nint maim_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Lycan_Wolf_Bite_Attack_Range {
    public const nint attack_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Lycan_Wolf_Bite_Lifesteal {
    public const nint lifesteal_percent = 0x1318; // int32
    public const nint lifesteal_range = 0x131C; // int32
    public const nint m_vecTargets = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_MaelstromChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Magnataur_Empower {
    public const nint bonus_damage_pct = 0x1318; // int32
    public const nint cleave_damage_pct = 0x131C; // float32
    public const nint cleave_starting_width = 0x1320; // int32
    public const nint cleave_ending_width = 0x1324; // int32
    public const nint cleave_distance = 0x1328; // int32
    public const nint self_multiplier = 0x132C; // float32
    public const nint secondary_cleave_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Magnataur_Horn_Toss {
    public const nint air_duration = 0x1318; // float32
    public const nint air_height = 0x131C; // int32
    public const nint travel_distance = 0x1320; // int32
    public const nint m_vDestination = 0x1324; // Vector
    public const nint m_flStartZ = 0x1330; // float32
    public const nint m_flCurTime = 0x1334; // float32
    public const nint m_flJumpDuration = 0x1338; // float32
    public const nint m_flJumpHeight = 0x133C; // float32
    public const nint m_vTargetHorizontalDirection = 0x1340; // Vector
}

public static class CDOTA_Modifier_Magnataur_Horn_Toss_Slow {
    public const nint horn_toss_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_ReversePolarity_Stats {
    public const nint stats_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Erupt {
    public const nint scepter_width = 0x1318; // int32
    public const nint scepter_duration = 0x131C; // float32
    public const nint play_particle = 0x1320; // bool
    public const nint m_vStart = 0x1324; // Vector
    public const nint m_vEnd = 0x1330; // Vector
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Eruption_Slow {
    public const nint scepter_slow_pct = 0x1318; // int32
    public const nint scepter_armor_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Magnataur_Shockwave_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint pull_duration = 0x132C; // float32
    public const nint effective_distance = 0x1330; // float32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Impact {
    public const nint slow_duration = 0x1318; // float32
    public const nint skewer_damage = 0x131C; // int32
    public const nint damage_distance_pct = 0x1320; // int32
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_vStartPos = 0x1330; // Vector
    public const nint m_flEndTime = 0x133C; // float32
    public const nint m_flCurTime = 0x1340; // float32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Movement {
    public const nint m_nProjectileID = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnataur_Skewer_Slow {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Magnus_Strength_Of_Joelrak {
    public const nint strength_per_stack = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint stack_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Marci_CompanionRun_AllyMovespeed {
    public const nint ally_movespeed_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Marci_Dispose_Debuff {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Grapple_VictimMotion {
    public const nint impact_damage = 0x1318; // int32
    public const nint debuff_duration = 0x131C; // float32
    public const nint landing_radius = 0x1320; // int32
    public const nint air_duration = 0x1324; // float32
    public const nint air_height = 0x1328; // int32
    public const nint travel_distance = 0x132C; // int32
    public const nint m_vDestination = 0x1330; // Vector
    public const nint m_flStartZ = 0x133C; // float32
    public const nint m_flCurTime = 0x1340; // float32
    public const nint m_flJumpDuration = 0x1344; // float32
    public const nint m_flJumpHeight = 0x1348; // float32
    public const nint m_vTargetHorizontalDirection = 0x134C; // Vector
}

public static class CDOTA_Modifier_Marci_Guardian_Buff {
    public const nint lifesteal_pct = 0x1318; // float32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_attack_range = 0x1320; // int32
    public const nint max_partner_distance = 0x1324; // int32
    public const nint max_partner_penalty = 0x1328; // int32
    public const nint creep_lifesteal_reduction_pct = 0x132C; // int32
    public const nint m_fLifestealPct = 0x1330; // float32
    public const nint m_fDamageAbsorbed = 0x1334; // float32
    public const nint m_bActive = 0x1338; // bool
    public const nint m_nFxIndex = 0x133C; // ParticleIndex_t
    public const nint m_hPartner = 0x1340; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Marci_Lunge_Arc {
    public const nint m_flPredictedTotalTime = 0x1318; // float32
    public const nint m_vStartPosition = 0x131C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1328; // float32
    public const nint m_flCurrentTimeVert = 0x132C; // float32
    public const nint m_bDamageApplied = 0x1330; // bool
    public const nint m_bTargetTeleported = 0x1331; // bool
    public const nint m_vHorizontalVelocity = 0x1334; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1340; // Vector
    public const nint m_flInitialVelocityZ = 0x134C; // float32
    public const nint m_fClampedProjectileSpeed = 0x1350; // float32
    public const nint m_nFXIndex = 0x1354; // ParticleIndex_t
    public const nint m_fAcceleration = 0x1358; // float32
    public const nint m_bTriggeredLandingAnim = 0x135C; // bool
    public const nint m_nMaxJumpDistance = 0x1360; // int32
    public const nint min_jump_distance = 0x1364; // int32
    public const nint max_jump_distance = 0x1368; // int32
    public const nint min_lob_travel_time = 0x136C; // float32
    public const nint max_lob_travel_time = 0x1370; // float32
    public const nint landing_radius = 0x1374; // int32
    public const nint debuff_duration = 0x1378; // float32
    public const nint min_height_above_lowest = 0x137C; // float32
    public const nint min_height_above_highest = 0x1380; // float32
    public const nint min_acceleration = 0x1384; // float32
    public const nint max_acceleration = 0x1388; // float32
    public const nint impact_damage = 0x138C; // float32
    public const nint impact_position_offset = 0x1390; // int32
    public const nint ally_buff_duration = 0x1394; // float32
}

public static class CDOTA_Modifier_Marci_Lunge_Buff {
    public const nint scepter_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Lunge_Debuff {
    public const nint movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Marci_Lunge_TrackingMotion {
    public const nint m_nProjectileID = 0x1318; // int32
    public const nint m_nMaxJumpDistance = 0x131C; // int32
    public const nint landing_radius = 0x1320; // int32
    public const nint max_jump_distance = 0x1324; // int32
    public const nint min_jump_distance = 0x1328; // int32
    public const nint target_abort_distance = 0x132C; // int32
    public const nint impact_position_offset = 0x1330; // int32
    public const nint m_flCastDistance = 0x1334; // float32
    public const nint m_nAoEFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_vDestination = 0x133C; // Vector
    public const nint m_hBounceEntity = 0x1348; // CHandle< CBaseEntity >
    public const nint m_hBounceEntityClient = 0x134C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Marci_Unleash {
    public const nint time_between_flurries = 0x1318; // float32
    public const nint charges_per_flurry = 0x131C; // int32
    public const nint flurry_charge_increment = 0x1320; // int32
    public const nint bonus_movespeed = 0x1324; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Marci_Unleash_Flurry {
    public const nint flurry_bonus_attack_speed = 0x1318; // int32
    public const nint time_between_flurries = 0x131C; // float32
    public const nint debuff_duration = 0x1320; // float32
    public const nint max_time_window_per_hit = 0x1324; // float32
    public const nint m_bBonusSpeed = 0x1328; // bool
    public const nint m_nFXStackIndex = 0x132C; // ParticleIndex_t
    public const nint m_bIsDoingFlurryAttack = 0x1330; // bool
    public const nint m_bIsDoingFlurryPulseAttack = 0x1331; // bool
    public const nint m_fLastAttackTime = 0x1334; // GameTime_t
}

public static class CDOTA_Modifier_Marci_Unleash_FlurryCooldown {
    public const nint charges_per_flurry = 0x1318; // int32
    public const nint time_between_flurries = 0x131C; // float32
    public const nint recovery_fixed_attack_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_Marci_Unleash_FlurryPulse_Debuff {
    public const nint pulse_move_slow_pct = 0x1318; // float32
    public const nint pulse_attack_slow_pct = 0x131C; // float32
}

public static class CDOTA_Modifier_Marci_Unleash_Pull {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint shard_push_length = 0x132C; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint spear_damage = 0x1320; // int32
    public const nint spear_distance_from_wall = 0x1324; // int32
    public const nint spear_attack_interval = 0x1328; // float32
    public const nint m_hObstruction = 0x1360; // int32
    public const nint m_vecAvoidLocations = 0x1368; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_AnimationAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Buff {
    public const nint health_regen = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_BuffAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Leash {
    public const nint radius = 0x1318; // int32
    public const nint width = 0x131C; // float32
    public const nint m_vOriginLoc = 0x1320; // Vector
}

public static class CDOTA_Modifier_Mars_ArenaOfBlood_Thinker {
    public const nint radius = 0x1318; // float32
    public const nint formation_time = 0x131C; // float32
    public const nint m_flInitialZ = 0x1320; // float32
    public const nint m_flFinalZ = 0x1324; // float32
    public const nint m_bCaughtOne = 0x1338; // bool
    public const nint m_bKilledOne = 0x1339; // bool
}

public static class CDOTA_Modifier_Mars_Bulwark {
    public const nint physical_damage_reduction = 0x1318; // float32
    public const nint physical_damage_reduction_side = 0x131C; // float32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
    public const nint m_flRecentDamage = 0x1340; // float32
}

public static class CDOTA_Modifier_Mars_Bulwark_Active {
    public const nint redirect_chance = 0x1318; // int32
    public const nint redirect_range = 0x131C; // int32
    public const nint forward_angle = 0x1320; // float32
    public const nint side_angle = 0x1324; // float32
    public const nint redirect_speed_penatly = 0x1328; // int32
    public const nint redirect_close_range = 0x132C; // int32
    public const nint attack_redirection_grace_distance = 0x1330; // int32
}

public static class CDOTA_Modifier_Mars_Bulwark_Soldier_Thinker {
    public const nint m_NextAttack = 0x1318; // GameTime_t
    public const nint soldier_offset = 0x131C; // int32
    public const nint soldier_count = 0x1320; // int32
    public const nint forward_angle = 0x1324; // int32
    public const nint knockback_distance = 0x1328; // int32
    public const nint m_hAllSoldiers = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flLastStationaryTime = 0x1348; // GameTime_t
    public const nint m_vLastStationaryPosition = 0x134C; // Vector
    public const nint stationary_attack_delay = 0x1358; // float32
}

public static class CDOTA_Modifier_Mars_GodsRebuke_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Gods_Rebuke {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Scepter_Damage {
    public const nint scepter_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Scepter_Damage_Slow {
    public const nint scepter_movement_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Mars_Spear_Impale {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_bLatched = 0x131C; // bool
    public const nint m_bHitArenaOfBlood = 0x131D; // bool
}

public static class CDOTA_Modifier_MaskOfDispair_Berserk {
    public const nint berserk_spell_amp = 0x1318; // int32
    public const nint berserk_manacost_reduction = 0x131C; // int32
    public const nint berserk_magic_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_MaskOfMadness_Berserk {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
    public const nint berserk_armor_reduction = 0x1320; // int32
}

public static class CDOTA_Modifier_Medusa_ManaShield {
    public const nint bonus_mana = 0x1318; // int32
    public const nint absorption_pct = 0x131C; // float32
    public const nint damage_per_mana = 0x1320; // float32
    public const nint illusion_damage_per_mana = 0x1324; // float32
}

public static class CDOTA_Modifier_Medusa_Mystic_Snake_Slow {
    public const nint movement_slow = 0x1318; // int32
    public const nint turn_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Medusa_SplitShot {
    public const nint damage_modifier = 0x1318; // int32
    public const nint range = 0x131C; // int32
    public const nint arrow_count = 0x1320; // int32
    public const nint projectile_speed = 0x1324; // int32
    public const nint m_nSplitShotBowFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Medusa_StoneGaze {
    public const nint radius = 0x1318; // int32
    public const nint vision_cone = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint speed_boost = 0x1324; // int32
    public const nint m_hHitEntities = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Facing {
    public const nint face_duration = 0x1318; // float32
    public const nint stone_duration = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint vision_cone = 0x1324; // float32
    public const nint m_flAccumulatedTime = 0x1328; // float32
    public const nint ctFacing = 0x1330; // CountdownTimer
    public const nint m_bAlreadyStoned = 0x1348; // bool
    public const nint m_nFXIndex = 0x134C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Stone {
    public const nint bonus_physical_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Medusa_StoneGaze_Tracker {
    public const nint m_nNumStoned = 0x1318; // int32
    public const nint m_bAnyInvisible = 0x131C; // bool
}

public static class CDOTA_Modifier_Meepo_Divided_We_Stand {
    public const nint respawn = 0x1318; // float32
    public const nint magic_resist = 0x131C; // float32
}

public static class CDOTA_Modifier_Meepo_Fling_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Flung {
    public const nint m_nHandle = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Geostrike_Debuff {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Meepo_MegaMeepo {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint m_vStartLocation = 0x132C; // Vector
    public const nint animation_rate = 0x1338; // float32
    public const nint m_bInterrupted = 0x133C; // bool
    public const nint m_bHasBeenDestroyed = 0x133D; // bool
    public const nint m_bIsHighestMeepo = 0x133E; // bool
}

public static class CDOTA_Modifier_Meepo_MegaMeepo_Self {
    public const nint base_strength = 0x1318; // int32
    public const nint base_int = 0x131C; // int32
    public const nint base_agi = 0x1320; // int32
    public const nint stats_pct = 0x1324; // int32
    public const nint m_hMegameepoFrame = 0x1328; // CHandle< CBaseEntity >
    public const nint m_bWasOutOfGame = 0x132C; // bool
}

public static class CDOTA_Modifier_Meepo_Petrify {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint hp_restore = 0x131C; // int32
}

public static class CDOTA_Modifier_Meepo_Poof_Damage_Sharing {
    public const nint damage_share_percentage = 0x1318; // int32
    public const nint damage_share_radius = 0x131C; // int32
    public const nint m_BondedEntities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Meepo_Poof_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Meepo_Ransack {
    public const nint health_steal_heroes = 0x1318; // int32
    public const nint health_steal_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_MeltingStrike_Debuff {
    public const nint armor_removed = 0x1318; // float32
    public const nint m_nMaxStacks = 0x131C; // int32
}

public static class CDOTA_Modifier_Miniboss_Radiance {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Miniboss_Radiance_Debuff {
    public const nint aura_damage = 0x1320; // int32
    public const nint aura_interval = 0x1324; // float32
    public const nint aura_radius = 0x1328; // float32
}

public static class CDOTA_Modifier_Miniboss_Reflect {
    public const nint passive_reflection_pct = 0x1318; // int32
    public const nint passive_reflection_bonus_per_death = 0x131C; // int32
    public const nint m_bIsDire = 0x1320; // bool
}

public static class CDOTA_Modifier_Miniboss_UnyieldingShield {
    public const nint damage_absorb = 0x1318; // int32
    public const nint regen_per_second = 0x131C; // float32
    public const nint regen_bonus_per_death = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
    public const nint m_timeLastTick = 0x1328; // GameTime_t
    public const nint nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Minotaur_Horn_Immune {
    public const nint model_scale = 0x1318; // int32
}

public static class CDOTA_Modifier_Mirana_Leap {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint m_bIsVectorTargeted = 0x1341; // bool
    public const nint m_vFaceDirection = 0x1344; // Vector
    public const nint leap_distance = 0x1350; // int32
    public const nint shard_radius = 0x1354; // float32
    public const nint shard_radius_end = 0x1358; // float32
    public const nint shard_damage = 0x135C; // float32
    public const nint shard_slow_pct = 0x1360; // float32
    public const nint shard_slow_duration = 0x1364; // float32
    public const nint leap_speed = 0x1368; // float32
    public const nint leap_acceleration = 0x136C; // float32
    public const nint leap_radius = 0x1370; // int32
    public const nint leap_bonus_duration = 0x1374; // float32
    public const nint m_bLaunched = 0x1378; // bool
}

public static class CDOTA_Modifier_Mirana_Leap_Buff {
    public const nint leap_speedbonus = 0x1318; // int32
    public const nint leap_speedbonus_as = 0x131C; // int32
    public const nint m_bCritUsed = 0x1320; // bool
    public const nint m_vCritRecords = 0x1328; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Mirana_Leap_Slow {
    public const nint shard_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Mirana_MoonlightShadow {
    public const nint duration = 0x1328; // float32
    public const nint bonus_movement_speed = 0x132C; // int32
    public const nint evasion = 0x1330; // int32
}

public static class CDOTA_Modifier_Mirana_Starfall_Scepter_Thinker {
    public const nint interval_scepter = 0x1318; // float32
    public const nint bInBufferTime = 0x131C; // bool
    public const nint damage = 0x1320; // int32
    public const nint m_flLastApplyTime = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_Mirana_Starfall_Thinker {
    public const nint starfall_secondary_radius = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_iDamage = 0x1320; // int32
    public const nint m_bStarDropped = 0x1324; // bool
    public const nint m_bSecondStar = 0x1325; // bool
}

public static class CDOTA_Modifier_MjollnirChain {
    public const nint chain_radius = 0x1318; // int32
    public const nint chain_strikes = 0x131C; // int32
    public const nint chain_damage = 0x1320; // int32
    public const nint chain_delay = 0x1324; // float32
    public const nint chain_damage_per_charge = 0x1328; // int32
    public const nint m_iCurJumpCount = 0x132C; // int32
    public const nint m_vCurTargetLoc = 0x1330; // Vector
    public const nint m_hHitEntities = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_MonkeyKing_ArcToGround {
    public const nint leap_speed = 0x1318; // float32
    public const nint give_up_distance = 0x131C; // float32
    public const nint attackspeed_duration = 0x1320; // float32
    public const nint m_flOriginalZDelta = 0x1324; // float32
    public const nint m_flZDelta = 0x1328; // float32
    public const nint m_vStart = 0x132C; // Vector
    public const nint m_vTargetPos = 0x1338; // Vector
    public const nint m_flSpeed = 0x1344; // float32
    public const nint m_bDroppedFromTree = 0x1348; // bool
    public const nint m_nFXIndex = 0x134C; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x1350; // ParticleIndex_t
    public const nint m_flOriginalHeight = 0x1354; // float32
    public const nint m_bRightClickHop = 0x1358; // bool
}

public static class CDOTA_Modifier_MonkeyKing_Bounce {
    public const nint jump_damage_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_MonkeyKing_BounceLeap {
    public const nint give_up_distance = 0x1318; // float32
    public const nint ground_jump_distance = 0x131C; // float32
    public const nint m_flZDelta = 0x1320; // float32
    public const nint perched_day_vision = 0x1324; // float32
    public const nint perched_night_vision = 0x1328; // float32
    public const nint m_vStart = 0x132C; // Vector
    public const nint m_hTarget = 0x1338; // CHandle< CBaseEntity >
    public const nint m_vTargetPos = 0x133C; // Vector
    public const nint m_flSpeed = 0x1348; // float32
    public const nint m_bTargetingEntity = 0x134C; // bool
    public const nint m_bGroundToTree = 0x134D; // bool
    public const nint m_bTreeToGround = 0x134E; // bool
    public const nint m_bTreeToTree = 0x134F; // bool
    public const nint m_bIsSpringJump = 0x1350; // bool
    public const nint m_fSpringChanneledPercent = 0x1354; // float32
    public const nint m_nLeapSpeed = 0x1358; // int32
    public const nint m_nFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x1360; // ParticleIndex_t
}

public static class CDOTA_Modifier_MonkeyKing_BouncePerch {
    public const nint m_hTree = 0x1318; // CHandle< CBaseEntity >
    public const nint m_bGroundToTree = 0x131C; // bool
    public const nint m_bTreeToGround = 0x131D; // bool
    public const nint m_bTreeToTree = 0x131E; // bool
    public const nint perched_day_vision = 0x1320; // float32
    public const nint perched_night_vision = 0x1324; // float32
    public const nint m_bAbilityIsStolen = 0x1328; // bool
}

public static class CDOTA_Modifier_MonkeyKing_BoundlessStrike_ShardMovement {
    public const nint m_flPredictedTotalTime = 0x1318; // float32
    public const nint m_vStartPosition = 0x131C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1328; // float32
    public const nint m_flCurrentTimeVert = 0x132C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1330; // bool
    public const nint m_vHorizontalVelocity = 0x1334; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1340; // Vector
    public const nint m_flInitialVelocityZ = 0x134C; // float32
    public const nint acceleration_z = 0x1350; // int32
    public const nint min_height_above_lowest = 0x1354; // int32
    public const nint min_height_above_highest = 0x1358; // int32
    public const nint max_horizontal_acceleration = 0x135C; // int32
    public const nint spring_channel_pct = 0x1360; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmyThinker {
    public const nint m_fDuration = 0x1318; // float32
    public const nint m_fTimeThinkerCreated = 0x131C; // GameTime_t
    public const nint m_vTargetPositions = 0x1320; // CUtlVector< Vector >
    public const nint m_vInitialPos = 0x1338; // Vector
    public const nint first_radius = 0x1344; // int32
    public const nint num_first_soldiers = 0x1348; // int32
    public const nint second_radius = 0x134C; // int32
    public const nint num_second_soldiers = 0x1350; // int32
    public const nint m_nRingFXIndex = 0x1354; // ParticleIndex_t
    public const nint final_radius = 0x1358; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_BonusDamage {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_Soldier {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_vDirection = 0x1324; // Vector
    public const nint move_speed = 0x1330; // int32
    public const nint m_hThinker = 0x1334; // CHandle< CBaseEntity >
    public const nint m_bIsInPosition = 0x1338; // bool
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bAutoSpawn = 0x1340; // bool
}

public static class CDOTA_Modifier_MonkeyKing_FurArmy_SoldierInPosition {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_hAttackTarget = 0x1324; // CHandle< CBaseEntity >
    public const nint attack_speed = 0x1328; // float32
    public const nint second_radius = 0x132C; // int32
    public const nint outer_attack_buffer = 0x1330; // int32
    public const nint m_hThinker = 0x1334; // CHandle< CBaseEntity >
    public const nint m_bDisarmed = 0x1338; // bool
    public const nint m_flNextAttackTime = 0x133C; // GameTime_t
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_bAutoSpawn = 0x1344; // bool
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap {
    public const nint counter_duration = 0x1318; // int32
    public const nint required_hits = 0x131C; // int32
    public const nint max_duration = 0x1320; // int32
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap_Bonuses {
    public const nint charges = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_nIgnoreStrikeIndex = 0x1328; // int32
    public const nint m_bIsAttackAnim = 0x132C; // bool
}

public static class CDOTA_Modifier_MonkeyKing_QuadrupleTap_Counter {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_MonkeyKing_SpringSlow {
    public const nint impact_movement_slow = 0x1318; // int32
    public const nint m_nSlowPct = 0x131C; // int32
}

public static class CDOTA_Modifier_MonkeyKing_Strike_Crit {
    public const nint strike_crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_MonkeyKing_Transform {
    public const nint m_strDisguise = 0x1318; // CUtlString
    public const nint movespeed = 0x1320; // int32
    public const nint m_nDisguisedSpeed = 0x1324; // int32
    public const nint reveal_radius = 0x1328; // int32
    public const nint m_nDisguiseEffectIndex = 0x132C; // ParticleIndex_t
    public const nint m_hCourierToClone = 0x1330; // CHandle< CBaseEntity >
    public const nint m_hCreepToClone = 0x1334; // CHandle< CBaseEntity >
    public const nint m_aryBountyRuneSpawners = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bIsFlyingCourier = 0x1350; // bool
    public const nint m_bIsRune = 0x1351; // bool
    public const nint m_bIsBanana = 0x1352; // bool
    public const nint m_bIsFakeAlly = 0x1353; // bool
    public const nint m_nMischiefUnitType = 0x1354; // uint32
    public const nint m_nMischiefHealthbarOffset = 0x1358; // int32
    public const nint invul_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_MonkeyKing_TreeDance_Activity {
    public const nint m_fAbilityRangePct = 0x1318; // float32
    public const nint m_bIsSpring = 0x131C; // float32
}

public static class CDOTA_Modifier_Morokai_JungleHealBeam {
    public const nint beam_count = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint beam_radius = 0x1320; // int32
    public const nint beam_buffer = 0x1324; // int32
    public const nint turn_rate = 0x1328; // int32
    public const nint hp_per_second = 0x132C; // int32
    public const nint m_flLastThinkTime = 0x1330; // GameTime_t
    public const nint m_vecTargetedEntities = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint flLastTreeDestroyed = 0x1368; // float32
    public const nint flTreeDestructionCooldown = 0x136C; // float32
}

public static class CDOTA_Modifier_Morphling_Adaptive_Strike {
    public const nint m_vStartPos = 0x1318; // Vector
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_flTotalDistance = 0x1330; // float32
    public const nint m_flCurTime = 0x1334; // float32
}

public static class CDOTA_Modifier_Morphling_Adaptive_Strike_Armor {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Morphling_Morph {
    public const nint tick_rate = 0x1318; // float32
    public const nint bonus_attributes = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_Morph_Agi {
    public const nint mana_cost = 0x1318; // int32
    public const nint points_per_tick = 0x131C; // int32
    public const nint morph_cooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_Morphling_Morph_Str {
    public const nint mana_cost = 0x1318; // int32
    public const nint points_per_tick = 0x131C; // int32
    public const nint morph_cooldown = 0x1320; // float32
}

public static class CDOTA_Modifier_Morphling_Replicate {
    public const nint m_hTinyTreeWearable = 0x1318; // CHandle< CBaseEntity >
    public const nint m_flBaseAttackRange = 0x131C; // float32
    public const nint m_flBaseMovementSpeed = 0x1320; // float32
    public const nint m_iszModelName = 0x1328; // CUtlSymbolLarge
    public const nint m_iszProjectileName = 0x1330; // CUtlSymbolLarge
    public const nint m_iszOriginalModel = 0x1338; // CUtlSymbolLarge
    public const nint m_nCopiedHeroID = 0x1340; // int32
    public const nint m_fOriginalModelScale = 0x1344; // float32
    public const nint m_vecOriginalItems = 0x1348; // CUtlVector< CEconItemView* >
    public const nint m_flOriginalStr = 0x1390; // float32
    public const nint m_flOriginalAgi = 0x1394; // float32
    public const nint m_flOriginalInt = 0x1398; // float32
    public const nint m_iOriginalAttackCapability = 0x139C; // int32
    public const nint m_flOriginalHealthPercentage = 0x13A0; // float32
    public const nint m_flOriginalManaPercentage = 0x13A4; // float32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nAgilitySteal = 0x1324; // int32
    public const nint nIntSteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint nStrengthSteal = 0x131C; // int32
    public const nint nAgiSteal = 0x1320; // int32
    public const nint nIntSteal = 0x1324; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_spell_amplify = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nIntSteal = 0x1324; // int32
    public const nint nAgilitySteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_spell_amplify = 0x131C; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Buff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_status_resist = 0x131C; // int32
    public const nint nStrengthSteal = 0x1320; // int32
    public const nint nAgiSteal = 0x1324; // int32
    public const nint nIntSteal = 0x1328; // int32
}

public static class CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Debuff {
    public const nint scepter_stat_steal = 0x1318; // int32
    public const nint scepter_status_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Morty_Hop {
    public const nint m_vStartPosition = 0x1318; // Vector
    public const nint m_vTargetPosition = 0x1324; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1330; // float32
    public const nint m_flCurrentTimeVert = 0x1334; // float32
    public const nint m_flZCoefficientA = 0x1338; // float32
    public const nint m_flZCoefficientB = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint duration = 0x1344; // float32
    public const nint height = 0x1348; // int32
    public const nint damage = 0x134C; // int32
    public const nint damage_radius = 0x1350; // int32
}

public static class CDOTA_Modifier_MoveSpeed_Percentage {
    public const nint movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_MudGolem_CloakAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_MudGolem_CloakAura_Bonus {
    public const nint bonus_magical_armor = 0x1318; // int32
    public const nint bonus_magical_armor_creeps = 0x131C; // int32
}

public static class CDOTA_Modifier_MudGolem_RockDestroy {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint shard_health = 0x1320; // int32
    public const nint shard_damage = 0x1324; // int32
    public const nint shard_duration = 0x1328; // int32
}

public static class CDOTA_Modifier_MuertaReleaseEvent {
    public const nint m_hEvent = 0x1318; // CHandle< CIngameEvent_MuertaReleaseSpring2023 >
}

public static class CDOTA_Modifier_MuertaReleaseEvent_RemoveGravestone {
    public const nint m_nParticleIndex = 0x1318; // ParticleIndex_t
    public const nint m_pActiveGravestones = 0x1320; // CUtlVector< ParticleIndex_t >*
}

public static class CDOTA_Modifier_Muerta_DeadShot_Fear {
    public const nint m_vFearDir = 0x1318; // Vector
}

public static class CDOTA_Modifier_Muerta_DeadShot_Slow {
    public const nint impact_slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Muerta_Gunslinger {
    public const nint double_shot_chance = 0x1318; // float32
    public const nint target_search_bonus_range = 0x131C; // float32
    public const nint m_hSecondaryTarget = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Muerta_PartingShot_PhysicalBodyDebuff {
    public const nint m_hSoulEntity = 0x1318; // CHandle< CBaseEntity >
    public const nint damage_reduction_percent = 0x131C; // int32
}

public static class CDOTA_Modifier_Muerta_PartingShot_ProjectileReturn {
    public const nint m_nProjectileHandle = 0x1318; // int32
    public const nint m_hPhysicalBody = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Muerta_PartingShot_SoulDebuff {
    public const nint ethereal_damage_bonus = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
    public const nint m_hPhysicalBody = 0x1320; // CHandle< CBaseEntity >
    public const nint m_nTetherFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Muerta_PierceTheVeil {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Muerta_PierceTheVeil_Buff {
    public const nint modelscale = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint spell_lifesteal = 0x1320; // int32
    public const nint attack_projectile_speed_bonus = 0x1324; // int32
    public const nint attack_range_bonus = 0x1328; // int32
    public const nint m_iOriginalAttackCapabilities = 0x132C; // int32
}

public static class CDOTA_Modifier_Muerta_Revenant_Thinker {
    public const nint m_bSpiritsExplode = 0x1318; // bool
    public const nint damage = 0x131C; // int32
    public const nint hit_radius = 0x1320; // int32
    public const nint dead_zone_distance = 0x1324; // int32
    public const nint speed_initial = 0x1328; // float32
    public const nint speed_max = 0x132C; // float32
    public const nint acceleration = 0x1330; // float32
    public const nint num_revenants = 0x1334; // int32
    public const nint rotation_direction = 0x1338; // int32
    public const nint radius = 0x133C; // int32
    public const nint rotation_initial = 0x1340; // float32
    public const nint show_warning = 0x1344; // int32
    public const nint m_nWarningFX = 0x1348; // ParticleIndex_t
    public const nint m_SpiritDefs = 0x1350; // CUtlVector< sRevenantDef >
    public const nint m_nRevenantImpacts = 0x1380; // int32
}

public static class CDOTA_Modifier_Muerta_TheCallingAuraSlow {
    public const nint aura_movespeed_slow = 0x1318; // int32
    public const nint aura_attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Muertas_Gun_Fear {
    public const nint m_vFearDir = 0x1318; // Vector
}

public static class CDOTA_Modifier_Muertas_Gun_Slow {
    public const nint impact_slow_percent = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Cooldown_Reduction {
    public const nint m_iCooldownReduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Crit_Chance {
    public const nint m_iChance = 0x1318; // int32
    public const nint m_iDamageMultiplier = 0x131C; // int32
}

public static class CDOTA_Modifier_Mutation_DeathExplosionDelayed {
    public const nint m_iDamageBase = 0x1318; // int32
    public const nint m_iDamagePerLevel = 0x131C; // int32
    public const nint m_iRadius = 0x1320; // int32
}

public static class CDOTA_Modifier_Mutation_FreeRapiers_Team {
    public const nint m_nLastInterval = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_KillstreakPower {
    public const nint m_iDamageDonePct = 0x1318; // int32
    public const nint m_iDamageTakenPct = 0x131C; // int32
    public const nint m_iModelScale = 0x1320; // int32
}

public static class CDOTA_Modifier_Mutation_Spellcast {
    public const nint m_vecAbilities = 0x1318; // CUtlVector< CDOTABaseAbility* >
    public const nint m_fNextCastTime = 0x1330; // float32
    public const nint m_fCastInterval = 0x1334; // float32
    public const nint m_fWarningTime = 0x1338; // float32
    public const nint m_iNextAbility = 0x133C; // int32
}

public static class CDOTA_Modifier_Mutation_StationaryDamageReduction {
    public const nint m_iReductionPct = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Treecutter {
    public const nint m_iRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_Mutation_Vampire {
    public const nint m_iLifeStealPct = 0x1318; // int32
    public const nint m_iHealthDrain = 0x131C; // int32
}

public static class CDOTA_Modifier_NPXBuff {
    public const nint m_nCurReduction = 0x1318; // int32
}

public static class CDOTA_Modifier_NagaSiren_Crit_Passive {
    public const nint chance = 0x1318; // int32
    public const nint crit = 0x131C; // int32
}

public static class CDOTA_Modifier_NagaSiren_RipTide {
    public const nint armor_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren {
    public const nint animation_rate = 0x1318; // float32
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nAffectedEnemies = 0x131C; // int32
    public const nint m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_NagaSiren_SongOfTheSiren_Healing_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nAffectedAllies = 0x131C; // int32
    public const nint m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Naga_Siren_Reel_In {
    public const nint pull_strength = 0x1318; // float32
    public const nint min_pull_distance = 0x131C; // int32
    public const nint m_flLastThinkTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura {
    public const nint aura_radius = 0x1318; // int32
    public const nint m_bStackCountChanged = 0x131C; // bool
    public const nint m_fStackExpireTimes = 0x1320; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Counter {
    public const nint mana_regen = 0x1318; // float32
    public const nint health_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Effect {
    public const nint aura_damage = 0x1318; // float32
    public const nint heal_reduction_pct = 0x131C; // int32
    public const nint heal_regen_to_damage = 0x1320; // float32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Necrolyte_ReapersScythe {
    public const nint stun_duration = 0x1318; // float32
    public const nint m_bIllusion = 0x131C; // bool
    public const nint m_bArcWardenClone = 0x131D; // bool
    public const nint m_bSpiritBear = 0x131E; // bool
}

public static class CDOTA_Modifier_Necrolyte_ReapersScythe_RespawnTime {
    public const nint hp_per_kill = 0x1318; // float32
    public const nint mana_per_kill = 0x131C; // float32
    public const nint hp_regen = 0x1320; // float32
    public const nint mp_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Necrolyte_Sadist_Active {
    public const nint heal_bonus = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint slow_aoe = 0x1320; // int32
}

public static class CDOTA_Modifier_Necrolyte_Sadist_Aura_Effect {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Archer_AoE {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Archer_Purge {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_LastWill {
    public const nint explosion = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_ManaBurn {
    public const nint burn_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Necronomicon_Warrior_Sight {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Necrophos_Death_Seeker_Ethereal {
    public const nint magic_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Nemesis_Curse {
    public const nint debuff_self = 0x1318; // int32
    public const nint debuff_enemy = 0x131C; // float32
    public const nint debuff_enemy_duration = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Neutral_Creep_Lost {
    public const nint m_bActive = 0x1318; // bool
    public const nint m_flCreationTime = 0x131C; // GameTime_t
    public const nint m_iFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Neutral_Sleep_AI {
    public const nint m_iFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Neutral_Upgrade {
    public const nint increase_time = 0x1318; // float32
    public const nint increase_damage = 0x131C; // int32
    public const nint increase_health = 0x1320; // int32
    public const nint increase_armor = 0x1324; // float32
    public const nint increase_aspd = 0x1328; // int32
    public const nint increase_gold = 0x132C; // int32
    public const nint increase_xp = 0x1330; // int32
    public const nint current_level = 0x1334; // int32
    public const nint max_level = 0x1338; // int32
}

public static class CDOTA_Modifier_Nevermore_Necromastery {
    public const nint necromastery_damage_per_soul = 0x1318; // int32
    public const nint necromastery_max_souls = 0x131C; // int32
    public const nint necromastery_max_souls_scepter = 0x1320; // int32
    public const nint shard_crit_pct = 0x1324; // int32
    public const nint shard_souls_per_kill = 0x1328; // int32
    public const nint shard_fear_duration = 0x132C; // float32
    public const nint m_iParticleSoulsIndex = 0x1330; // ParticleIndex_t
    public const nint m_FXIndex = 0x1334; // ParticleIndex_t
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Nevermore_Presence {
    public const nint presence_armor_reduction = 0x1318; // int32
    public const nint bonus_armor_per_stack = 0x131C; // int32
    public const nint m_bWasHidden = 0x1320; // bool
}

public static class CDOTA_Modifier_Nevermore_Presence_Aura {
    public const nint presence_radius = 0x1318; // int32
    public const nint kill_buff_duration = 0x131C; // float32
    public const nint m_fLastStackChange = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Nevermore_Requiem_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Nevermore_Requiem_InvisBreak {
    public const nint bDisableInvis = 0x1318; // bool
}

public static class CDOTA_Modifier_Nevermore_Requiem_Slow {
    public const nint requiem_reduction_ms = 0x1318; // int32
    public const nint requiem_reduction_mres = 0x131C; // int32
}

public static class CDOTA_Modifier_NianCharge {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_NianChargePinned {
    public const nint pinned_damage_amount = 0x1318; // float32
    public const nint pinned_damage_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Nian_Apocalypse {
    public const nint area_of_effect = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint stun_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Nian_Damage_Reflection {
    public const nint m_flReflectionStartTime = 0x1318; // GameTime_t
    public const nint m_flReflectionAmount = 0x131C; // float32
}

public static class CDOTA_Modifier_Nian_Dive {
    public const nint m_flTotalTimeInAir = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_vTargetPosition = 0x1338; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1344; // float32
    public const nint m_flCurrentTimeVert = 0x1348; // float32
    public const nint m_bInterrupted = 0x134C; // bool
    public const nint m_flHorizDelayTime = 0x1350; // float32
    public const nint m_flVertDelayTime = 0x1354; // float32
    public const nint m_flLeapSequenceDuration = 0x1358; // float32
    public const nint m_flClawDamageTime = 0x135C; // float32
    public const nint m_flPlaybackRate = 0x1360; // float32
    public const nint m_hTarget = 0x1364; // CHandle< CBaseEntity >
    public const nint m_bPlayedSwipeSound = 0x1368; // bool
    public const nint pounce_distance = 0x136C; // int32
    public const nint pounce_speed = 0x1370; // float32
    public const nint pounce_acceleration = 0x1374; // float32
    public const nint pounce_radius = 0x1378; // int32
    public const nint pounce_damage = 0x137C; // int32
    public const nint stun_radius = 0x1380; // int32
    public const nint stun_duration = 0x1384; // float32
    public const nint leash_duration = 0x1388; // float32
    public const nint initial_delay = 0x138C; // float32
    public const nint landing_delay = 0x1390; // float32
    public const nint vertical_adjust = 0x1394; // float32
    public const nint vertical_adjust_max_distance = 0x1398; // float32
    public const nint vertical_adjust_min_distance = 0x139C; // float32
    public const nint claw_damage = 0x13A0; // int32
    public const nint claw_damage_radius = 0x13A4; // int32
    public const nint claw_damage_delay = 0x13A8; // float32
    public const nint claw_damage_duration = 0x13AC; // float32
    public const nint m_vHitEntities = 0x13B0; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Nian_EruptionPendingThinker {
    public const nint tick_count = 0x1318; // int32
    public const nint beam_radius = 0x131C; // int32
    public const nint m_nTickCount = 0x1320; // int32
}

public static class CDOTA_Modifier_Nian_EruptionThinker {
    public const nint explosion_radius = 0x1318; // int32
    public const nint damage_interval = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Nian_Flag_Trap_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Nian_Flag_Trapped {
    public const nint bonus_spell_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Frenzy {
    public const nint damage = 0x1318; // int32
    public const nint damage_radius = 0x131C; // int32
    public const nint stun_radius = 0x1320; // int32
    public const nint dive_distance = 0x1324; // float32
    public const nint initial_rise_time = 0x1328; // float32
    public const nint right_swipe_time = 0x132C; // float32
    public const nint left_swipe_time = 0x1330; // float32
    public const nint knockdown_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint m_nTickCounter = 0x133C; // int32
    public const nint m_hEnemies = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Nian_GreaterBash {
    public const nint chance_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint movespeed_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Nian_GreaterBash_Speed {
    public const nint bonus_movespeed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Hurricane_Whirlpool {
    public const nint pull_switch_interval = 0x1318; // float32
    public const nint pull_speed = 0x131C; // int32
    public const nint m_bForward = 0x1320; // bool
    public const nint m_nfxIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Nian_Knockdown {
    public const nint m_flStandUpDuration = 0x1318; // float32
    public const nint m_flKnockDownDuration = 0x131C; // float32
    public const nint m_bDebuff = 0x1320; // bool
    public const nint m_bStandingUp = 0x1321; // bool
}

public static class CDOTA_Modifier_Nian_Leap {
    public const nint m_flTotalTimeInAir = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_vTargetPosition = 0x1338; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1344; // float32
    public const nint m_flCurrentTimeVert = 0x1348; // float32
    public const nint m_bInterrupted = 0x134C; // bool
    public const nint m_flHorizDelayTime = 0x1350; // float32
    public const nint m_flVertDelayTime = 0x1354; // float32
    public const nint m_flLeapSequenceDuration = 0x1358; // float32
    public const nint m_flPlaybackRate = 0x135C; // float32
    public const nint pounce_distance = 0x1360; // int32
    public const nint pounce_speed = 0x1364; // float32
    public const nint pounce_acceleration = 0x1368; // float32
    public const nint initial_delay = 0x136C; // float32
    public const nint landing_delay = 0x1370; // float32
}

public static class CDOTA_Modifier_Nian_Tail_Swipe_AirTime {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_flOldPitch = 0x1320; // float32
    public const nint m_qRotation = 0x1324; // QAngle
    public const nint m_nRotations = 0x1330; // int32
    public const nint m_flDistance = 0x1334; // float32
}

public static class CDOTA_Modifier_Nian_Tail_Swipe_Wall {
    public const nint m_vWallStartPosition = 0x1318; // Vector
    public const nint m_vWallDirection = 0x1324; // Vector
    public const nint m_vWallLeft = 0x1330; // Vector
    public const nint m_DamageAmount = 0x133C; // int32
    public const nint m_DamageType = 0x1340; // int32
    public const nint speed = 0x1344; // float32
    public const nint starting_width = 0x1348; // float32
    public const nint ending_width = 0x134C; // float32
    public const nint stun_duration = 0x1350; // float32
    public const nint fly_duration = 0x1354; // float32
    public const nint fly_distance = 0x1358; // float32
    public const nint m_nFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_flWallStartTime = 0x1360; // GameTime_t
    public const nint m_flScalar = 0x1364; // float32
    public const nint m_EntitiesToExclude = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Nian_Waterball {
    public const nint trail_damage_per_second = 0x1318; // int32
    public const nint trail_damage_radius = 0x131C; // int32
    public const nint m_vFXIndices = 0x1320; // CUtlVector< int32 >
    public const nint m_vLocations = 0x1338; // CUtlVector< Vector >
}

public static class CDOTA_Modifier_Nian_WhirlpoolThinker {
    public const nint pull_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Nian_Whirlpool_Pull {
    public const nint pull_radius = 0x1318; // int32
    public const nint pull_speed = 0x131C; // int32
    public const nint radius = 0x1320; // int32
    public const nint whirlpool_damage = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
    public const nint m_flDamageTick = 0x132C; // GameTime_t
    public const nint m_hThinker = 0x1330; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_NightStalker_CripplingFear {
    public const nint dps = 0x1320; // int32
    public const nint tick_rate = 0x1324; // float32
}

public static class CDOTA_Modifier_NightStalker_CripplingFear_Aura {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_NightStalker_Darkness {
    public const nint bonus_damage = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint hp_regen = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_bIsDay = 0x1328; // bool
}

public static class CDOTA_Modifier_NightStalker_HunterInTheNight {
    public const nint bonus_movement_speed_pct_night = 0x1318; // int32
    public const nint bonus_attack_speed_night = 0x131C; // int32
    public const nint bonus_status_resist_night = 0x1320; // int32
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_bIsDay = 0x1328; // bool
}

public static class CDOTA_Modifier_NightStalker_Void {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_NightStalker_Void_ZoneThinker {
    public const nint radius_scepter = 0x1318; // int32
}

public static class CDOTA_Modifier_Nullifier {
    public const nint bonus_armor = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Nullifier_Mute {
    public const nint slow_interval_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Nyx_Assassin_Burrow {
    public const nint health_regen_rate = 0x1328; // float32
    public const nint mana_regen_rate = 0x132C; // float32
    public const nint damage_reduction = 0x1330; // int32
    public const nint m_vecInitialPos = 0x1334; // Vector
}

public static class CDOTA_Modifier_Nyx_Assassin_Impale {
    public const nint impale_damage = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_bDamageApplied = 0x1324; // bool
}

public static class CDOTA_Modifier_Nyx_Assassin_Jolt_Debuff {
    public const nint resist_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Nyx_Assassin_SpikedCarapace {
    public const nint stun_duration = 0x1318; // float32
    public const nint m_hProcessedEnemies = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Nyx_Assassin_Vendetta {
    public const nint bonus_damage = 0x1328; // int32
    public const nint movement_speed = 0x132C; // int32
    public const nint shard_movement_speed_bonus = 0x1330; // int32
    public const nint mana_removal_pct = 0x1334; // int32
    public const nint m_bFreePathing = 0x1338; // bool
    public const nint attack_animation_bonus = 0x133C; // int32
    public const nint attack_range_bonus = 0x1340; // int32
}

public static class CDOTA_Modifier_Nyx_Assassin_Vendetta_Armor_Reduction {
    public const nint shard_magic_resist_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Oakheart_Healing {
    public const nint heal = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_ArcaneOrb {
    public const nint mana_pool_damage_pct = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Obsidian_Destroyer_AstralImprisonment_Prison {
    public const nint allied_movement_speed_pct = 0x1318; // int32
    public const nint m_bAllowMovement = 0x131C; // bool
    public const nint m_nDebuffImmuneEffect = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium {
    public const nint proc_chance = 0x1318; // int32
    public const nint mana_restore = 0x131C; // int32
    public const nint mana_capacity_steal = 0x1320; // float32
    public const nint mana_capacity_duration = 0x1324; // float32
    public const nint shard_mana_duration = 0x1328; // float32
    public const nint scepter_barrier_threshold = 0x132C; // float32
    public const nint scepter_barrier_duration = 0x1330; // float32
    public const nint scepter_barrier_cooldown = 0x1334; // float32
    public const nint scepter_max_mana_barrier_pct = 0x1338; // float32
    public const nint spell_lifesteal = 0x133C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Barrier {
    public const nint barrier_amt = 0x1318; // float32
    public const nint m_nDamageAbsorbed = 0x131C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_BonusMana {
    public const nint shard_bonus_mana = 0x1318; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Buff {
    public const nint mana_steal = 0x1318; // int32
    public const nint m_flCurrentMana = 0x131C; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Debuff {
    public const nint mana_steal = 0x1318; // int32
    public const nint m_flCurrentMana = 0x131C; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_EssenceAura {
    public const nint bonus_mana = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_EssenceAura_Effect {
    public const nint radius = 0x1318; // int32
    public const nint restore_chance = 0x131C; // int32
    public const nint restore_amount = 0x1320; // float32
}

public static class CDOTA_Modifier_Obsidian_Destroyer_Mana_Allergy {
    public const nint percentage_damage = 0x1318; // int32
    public const nint percentage_heal = 0x131C; // int32
}

public static class CDOTA_Modifier_OgreMagi_FrostArmor {
    public const nint armor_bonus = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_OgreMagi_FrostArmor_Slow {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_OgreSealTotem_Active {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint m_nCurrentBounce = 0x1344; // int32
    public const nint leap_distance = 0x1348; // int32
    public const nint leap_speed = 0x134C; // float32
    public const nint leap_acceleration = 0x1350; // float32
    public const nint leap_radius = 0x1354; // int32
    public const nint leap_bonus_duration = 0x1358; // float32
    public const nint m_bLaunched = 0x135C; // bool
}

public static class CDOTA_Modifier_OgreSealTotem_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Arcana {
    public const nint m_nLastMulticastCount = 0x1318; // int32
    public const nint m_nMulticastStreakCount = 0x131C; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Bloodlust {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint self_bonus = 0x1320; // int32
    public const nint modelscale = 0x1324; // float32
}

public static class CDOTA_Modifier_Ogre_Magi_DumbLuck {
    public const nint mana_per_str = 0x1318; // float32
    public const nint mana_regen_per_str = 0x131C; // float32
}

public static class CDOTA_Modifier_Ogre_Magi_Fireblast_Multicast {
    public const nint m_hTarget = 0x1318; // CHandle< CDOTA_BaseNPC >
    public const nint multicast_delay = 0x131C; // float32
    public const nint m_nMultiCastCount = 0x1320; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Ignite {
    public const nint slow_movement_speed_pct = 0x1318; // int32
    public const nint burn_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Ignite_Multicast {
    public const nint m_hTarget = 0x1318; // CHandle< CDOTA_BaseNPC >
    public const nint multicast_delay = 0x131C; // float32
    public const nint m_nMultiCastCount = 0x1320; // int32
    public const nint ignite_multicast_aoe = 0x1324; // int32
}

public static class CDOTA_Modifier_Ogre_Magi_Smash_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint attacks = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Omniknight_Angelic_Flight {
    public const nint movement_speed = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Omniknight_Degen_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Degen_Aura_Effect {
    public const nint speed_bonus = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_GuardianAngel {
    public const nint scepter_status_resist = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_HammerOfPurity {
    public const nint m_flNextAttackTime = 0x1318; // GameTime_t
    public const nint attack_cooldown = 0x131C; // float32
}

public static class CDOTA_Modifier_Omniknight_Hammer_Of_Purity_Bomb {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Marty {
    public const nint base_strength = 0x1318; // int32
    public const nint base_hpregen = 0x131C; // int32
    public const nint strength_bonus = 0x1320; // int32
    public const nint nDebuffAmount = 0x1324; // int32
}

public static class CDOTA_Modifier_Omniknight_Pacify {
    public const nint spell_resistance_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Omniknight_Repel {
    public const nint status_resistance = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint bonus_str = 0x1320; // int32
}

public static class CDOTA_Modifier_Oracle_FalsePromise {
    public const nint m_bWaitingForInvulnerability = 0x1348; // bool
    public const nint m_bDisableHealing = 0x1349; // bool
    public const nint m_flHealthOnCreated = 0x134C; // float32
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_nFXIndexB = 0x1354; // ParticleIndex_t
    public const nint m_flRunningDmg = 0x1358; // float32
    public const nint m_flRunningHealth = 0x135C; // float32
    public const nint bonus_armor = 0x1360; // int32
}

public static class CDOTA_Modifier_Oracle_FalsePromise_Invis {
    public const nint shard_spell_amp_bonus = 0x1328; // float32
    public const nint shard_bat_bonus = 0x132C; // float32
}

public static class CDOTA_Modifier_Oracle_PurifyingFlames {
    public const nint heal_per_second = 0x1318; // float32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Oracle_RainOfDestiny {
    public const nint heal_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Oracle_RainOfDestiny_Aura {
    public const nint damage = 0x1318; // float32
    public const nint radius = 0x131C; // int32
    public const nint m_nFXIndex = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Orb_Of_Corrosion_Debuff {
    public const nint armor = 0x1318; // int32
    public const nint slow_melee = 0x131C; // int32
    public const nint slow_range = 0x1320; // int32
    public const nint heal_reduction = 0x1324; // int32
    public const nint bCasterRanged = 0x1328; // bool
    public const nint damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Orb_Of_Destruction_Debuff {
    public const nint armor_reduction = 0x1318; // int32
    public const nint slow_melee = 0x131C; // int32
    public const nint slow_range = 0x1320; // int32
    public const nint bCasterRanged = 0x1324; // bool
}

public static class CDOTA_Modifier_Orb_Of_Revelations {
    public const nint bonus_health = 0x1318; // int32
    public const nint bonus_mana = 0x131C; // int32
    public const nint bonus_mana_regen = 0x1320; // float32
    public const nint cast_range_bonus = 0x1324; // int32
    public const nint bonus_magical_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Orb_Of_Revelations_Reveal {
    public const nint movespeed = 0x1318; // int32
    public const nint m_bCastOnInvisibleHero = 0x131C; // bool
}

public static class CDOTA_Modifier_OrchidMalevolence_Debuff {
    public const nint silence_damage_percent = 0x1318; // float32
    public const nint m_flDamageTaken = 0x131C; // float32
}

public static class CDOTA_Modifier_Overflowing_Elixir_Regen {
    public const nint health = 0x1318; // int32
    public const nint mana = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_Gyroshell {
    public const nint mp_cost_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint forward_move_speed = 0x1320; // float32
    public const nint turn_rate_boosted = 0x1324; // float32
    public const nint turn_rate = 0x1328; // float32
    public const nint hit_radius = 0x132C; // int32
    public const nint knockback_radius = 0x1330; // int32
    public const nint m_bHitFirstUpdate = 0x1334; // bool
    public const nint m_flHitEndTime = 0x1338; // GameTime_t
    public const nint hit_recover_time = 0x133C; // float32
    public const nint m_flJumpEndTime = 0x1340; // GameTime_t
    public const nint jump_recover_time = 0x1344; // float32
    public const nint m_flTurnBoostProgress = 0x1348; // float32
    public const nint m_flFacingTarget = 0x134C; // float32
    public const nint m_bIsJumping = 0x1350; // bool
    public const nint m_nFXIndex = 0x1354; // ParticleIndex_t
    public const nint m_flTurnHistory = 0x1358; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1370; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesCredited = 0x1388; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x13A0; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Pangolier_GyroshellBounce {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bTargetTeleported = 0x133D; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_Pangolier_Gyroshell_Ricochet {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer {
    public const nint debuff_delay = 0x1318; // float32
    public const nint chance_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer_Debuff {
    public const nint slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_HeartPiercer_Delay {
    public const nint duration = 0x1318; // float32
    public const nint debuff_delay = 0x131C; // float32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot {
    public const nint chance_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot_Disarm {
    public const nint armor = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Pangolier_LuckyShot_Silence {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_Rollup {
    public const nint mp_cost_per_second = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
    public const nint forward_move_speed = 0x1320; // float32
    public const nint turn_rate_boosted = 0x1324; // float32
    public const nint turn_rate = 0x1328; // float32
    public const nint hit_radius = 0x132C; // int32
    public const nint knockback_radius = 0x1330; // int32
    public const nint m_bHitFirstUpdate = 0x1334; // bool
    public const nint m_flHitEndTime = 0x1338; // GameTime_t
    public const nint hit_recover_time = 0x133C; // float32
    public const nint m_flJumpEndTime = 0x1340; // GameTime_t
    public const nint jump_recover_time = 0x1344; // float32
    public const nint m_flTurnBoostProgress = 0x1348; // float32
    public const nint m_flFacingTarget = 0x134C; // float32
    public const nint m_flLastHeroAttackTime = 0x1350; // GameTime_t
    public const nint m_bIsJumping = 0x1354; // bool
    public const nint m_nFXIndex = 0x1358; // ParticleIndex_t
    public const nint m_flGyroshellDurationRemaining = 0x135C; // float32
    public const nint m_flTurnHistory = 0x1360; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1378; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesCredited = 0x1390; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x13A8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Pangolier_ShieldCrash_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nAbsorbRemaining = 0x131C; // int32
    public const nint hero_shield = 0x1320; // int32
    public const nint base_shield = 0x1324; // int32
    public const nint accummulated_value = 0x1328; // int32
}

public static class CDOTA_Modifier_Pangolier_ShieldCrash_Jump {
    public const nint jump_duration = 0x1318; // float32
    public const nint jump_duration_gyroshell = 0x131C; // float32
    public const nint jump_height = 0x1320; // int32
    public const nint jump_height_gyroshell = 0x1324; // int32
    public const nint m_flStartZ = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_flJumpDuration = 0x1330; // float32
    public const nint m_flJumpHeight = 0x1334; // float32
    public const nint jump_horizontal_distance = 0x1338; // int32
    public const nint m_vTargetHorizontalDirection = 0x133C; // Vector
}

public static class CDOTA_Modifier_Pangolier_ShieldCrash_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Pangolier_Swashbuckle {
    public const nint m_nStrikesLeft = 0x1318; // int32
    public const nint attack_interval = 0x131C; // float32
    public const nint m_vSpawnPos = 0x1320; // Vector
    public const nint m_vStrikeDir = 0x132C; // Vector
    public const nint m_vDashDir = 0x1338; // Vector
}

public static class CDOTA_Modifier_Pangolier_Swashbuckle_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Passive_Mango_Tree {
    public const nint m_hTree = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nMangoSeconds = 0x131C; // int32
    public const nint m_MangoTimer = 0x1320; // CountdownTimer
    public const nint m_nRespawnSeconds = 0x1338; // int32
    public const nint m_RespawnTimer = 0x1340; // CountdownTimer
    public const nint m_nMangosAvailable = 0x1358; // int32
    public const nint m_nChannelCount = 0x135C; // int32
}

public static class CDOTA_Modifier_Penta_Edged_Sword_Maim {
    public const nint maim_slow_movement = 0x1318; // int32
    public const nint maim_slow_attack = 0x131C; // int32
}

public static class CDOTA_Modifier_PersistentInvisibility {
    public const nint fade_delay = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // float32
    public const nint m_flLastActionTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_PhantomAssassin_Blur {
    public const nint bonus_evasion = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_BlurActive {
    public const nint radius = 0x1328; // int32
    public const nint fade_duration = 0x132C; // float32
    public const nint scepter_fade_duration = 0x1330; // float32
    public const nint m_bDestroyNext = 0x1334; // bool
}

public static class CDOTA_Modifier_PhantomAssassin_CoupdeGrace {
    public const nint crit_bonus = 0x1318; // int32
    public const nint crit_chance = 0x131C; // int32
    public const nint dagger_crit_chance = 0x1320; // int32
    public const nint crit_active = 0x1324; // bool
    public const nint duration = 0x1328; // float32
}

public static class CDOTA_Modifier_PhantomAssassin_Fan_Of_Knives_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_ViewerTimer = 0x1338; // CountdownTimer
    public const nint projectile_speed = 0x1350; // int32
    public const nint radius = 0x1354; // int32
    public const nint duration = 0x1358; // float32
    public const nint pct_health_damage_initial = 0x135C; // float32
    public const nint max_damage_initial = 0x1360; // float32
}

public static class CDOTA_Modifier_PhantomAssassin_Gravestone {
    public const nint m_nFXIndex = 0x1318; // int32
    public const nint m_bContractGravestoneComplete = 0x131C; // bool
}

public static class CDOTA_Modifier_PhantomAssassin_Gravestone_Thinker {
    public const nint m_nEpitaph = 0x1318; // int32
    public const nint m_nVictimPlayerID = 0x131C; // PlayerID_t
    public const nint m_nVictimHeroID = 0x1320; // int32
    public const nint m_nCritDmg = 0x1324; // int32
    public const nint m_nContractComplete = 0x1328; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_PhantomStrike {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint lifesteal_pct = 0x131C; // int32
    public const nint creep_lifesteal_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_StiflingDagger {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomAssassin_StiflingDagger_Caster {
    public const nint base_damage = 0x1318; // int32
    public const nint attack_factor = 0x131C; // int32
}

public static class CDOTA_Modifier_PhantomLancer_Doppelwalk_Illusion {
    public const nint flDamageTaken = 0x1318; // float32
}

public static class CDOTA_Modifier_PhantomLancer_Dopplewalk_Phase {
    public const nint vTargetPosition = 0x1318; // Vector
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose {
    public const nint proc_chance_pct = 0x1318; // int32
    public const nint illusion_proc_chance_pct = 0x131C; // int32
    public const nint max_illusions = 0x1320; // int32
    public const nint illusion_duration = 0x1324; // float32
    public const nint illusion_damage_out_pct = 0x1328; // int32
    public const nint illusion_damage_in_pct = 0x132C; // int32
    public const nint shard_bonus_illusions = 0x1330; // int32
}

public static class CDOTA_Modifier_PhantomLancer_JuxtaposeIllusion {
    public const nint m_bstrongIllusion = 0x1318; // bool
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Cache {
    public const nint m_nControllingPlayer = 0x1318; // PlayerID_t
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Invisibility {
    public const nint invis_movespeed = 0x1328; // float32
}

public static class CDOTA_Modifier_PhantomLancer_Juxtapose_Thinker {
    public const nint max_illusions = 0x1318; // int32
    public const nint scepter_bonus_illusions = 0x131C; // int32
    public const nint illusion_duration = 0x1320; // float32
    public const nint illusion_damage_out_pct = 0x1324; // int32
    public const nint illusion_damage_in_pct = 0x1328; // int32
    public const nint scepter_bonus_duration = 0x132C; // float32
    public const nint m_iIllusionsSoFar = 0x1330; // int32
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge {
    public const nint min_distance = 0x1318; // int32
    public const nint max_distance = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge_Agility {
    public const nint bonus_agility = 0x1318; // int32
}

public static class CDOTA_Modifier_PhantomLancer_PhantomEdge_Boost {
    public const nint bonus_speed = 0x1318; // int32
    public const nint agility_duration = 0x131C; // float32
    public const nint m_bGiveAgility = 0x1320; // bool
    public const nint m_hTarget = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_PhantomLancer_SpiritLance {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Phantom_Assassin_GroundDagger {
    public const nint m_bLanded = 0x1318; // bool
}

public static class CDOTA_Modifier_Phoenix_FireSpiritBurn {
    public const nint tick_interval = 0x1318; // float32
    public const nint attackspeed_slow = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
}

public static class CDOTA_Modifier_Phoenix_FireSpiritCount {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Phoenix_IcarusDive {
    public const nint m_vSource = 0x1318; // Vector
    public const nint m_vTarget = 0x1324; // Vector
    public const nint m_vDirection = 0x1330; // Vector
    public const nint m_angDirection = 0x133C; // QAngle
    public const nint m_flCurrentTime = 0x1348; // float32
    public const nint dash_length = 0x134C; // int32
    public const nint dash_width = 0x1350; // int32
    public const nint hit_radius = 0x1354; // int32
    public const nint burn_duration = 0x1358; // float32
    public const nint dive_duration = 0x135C; // float32
    public const nint impact_damage = 0x1360; // float32
    public const nint m_vecHitEntities = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Phoenix_IcarusDiveBurn {
    public const nint burn_tick_interval = 0x1318; // float32
    public const nint damage_per_second = 0x131C; // int32
    public const nint slow_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Phoenix_Sun {
    public const nint aura_radius = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint max_hero_attacks = 0x1320; // int32
    public const nint max_hero_attacks_scepter = 0x1324; // int32
    public const nint max_hero_attacks_required = 0x1328; // int32
    public const nint m_hSecondaryTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_iAttackCount = 0x1330; // int32
    public const nint creep_attacks_count = 0x1334; // int32
}

public static class CDOTA_Modifier_Phoenix_SunRay {
    public const nint hp_cost_perc_per_second = 0x1318; // int32
    public const nint beam_range = 0x131C; // int32
    public const nint base_damage = 0x1320; // int32
    public const nint base_heal = 0x1324; // int32
    public const nint tick_interval = 0x1328; // float32
    public const nint forward_move_speed = 0x132C; // float32
    public const nint turn_rate_initial = 0x1330; // float32
    public const nint turn_rate = 0x1334; // float32
    public const nint radius = 0x1338; // int32
    public const nint m_flCurrentTime = 0x133C; // float32
    public const nint m_flAccumulatedSelfDamage = 0x1340; // float32
    public const nint m_bMovingForward = 0x1344; // bool
    public const nint m_bTurningFast = 0x1345; // bool
    public const nint m_flFacingTarget = 0x1348; // float32
    public const nint hp_perc_damage = 0x134C; // float32
    public const nint hp_perc_heal = 0x1350; // float32
    public const nint blind_duration = 0x1354; // float32
    public const nint blind_per_second = 0x1358; // int32
    public const nint m_nBeamFXIndex = 0x135C; // ParticleIndex_t
    public const nint m_hVisionThinkers = 0x1360; // CHandle< CBaseEntity >[8]
    public const nint m_hBeamEnd = 0x1380; // CHandle< CBaseEntity >
    public const nint m_bCreatedVisionThinkers = 0x1384; // bool
    public const nint m_hBeamEndSound = 0x1388; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Phoenix_SunRay_Luminance {
    public const nint pct_of_heal_as_attack_speed = 0x1318; // float32
    public const nint m_fAttackSpeedBonus = 0x131C; // float32
}

public static class CDOTA_Modifier_Phoenix_Sun_Debuff {
    public const nint damage_per_sec = 0x1318; // int32
    public const nint tick_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Phoenix_Sun_Ray_Slow {
    public const nint shard_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_BonusDamage {
    public const nint acorn_shot_damage = 0x1318; // int32
    public const nint base_damage_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_DelayThinker {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nSourceProjectileHandle = 0x131C; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_AcornShot_TreeThinker {
    public const nint m_hTree = 0x1318; // CHandle< CDOTA_TempTree >
    public const nint fow_viewer = 0x131C; // int32
}

public static class CDOTA_Modifier_PineCone_ShieldBash_Crit {
    public const nint crit_mult = 0x1318; // int32
}

public static class CDOTA_Modifier_PineCone_ShieldBash_Slow {
    public const nint knockback_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Plague_Wards_Bonus {
    public const nint ward_hp = 0x1318; // int32
    public const nint ward_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Plague_Wards_Bonus_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Plus_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Pogo_Stick_Active {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint leap_distance = 0x1344; // int32
    public const nint leap_speed = 0x1348; // float32
    public const nint leap_acceleration = 0x134C; // float32
    public const nint leap_radius = 0x1350; // int32
    public const nint leap_bonus_duration = 0x1354; // float32
    public const nint m_bLaunched = 0x1358; // bool
}

public static class CDOTA_Modifier_PoisonNova_Thinker {
    public const nint m_fCurRadius = 0x1318; // float32
    public const nint m_fLastThink = 0x131C; // GameTime_t
    public const nint m_entitiesHit = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1338; // int32
    public const nint radius = 0x133C; // int32
    public const nint start_radius = 0x1340; // int32
    public const nint duration = 0x1344; // float32
}

public static class CDOTA_Modifier_PolarFurbolgUrsaWarrior_ThunderClap {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Onslaught_Knockback {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bTargetTeleported = 0x133D; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_PrimalBeast_Onslaught_Movement {
    public const nint tick_interval = 0x1318; // float32
    public const nint charge_speed = 0x131C; // float32
    public const nint movement_turn_rate = 0x1320; // float32
    public const nint knockback_radius = 0x1324; // int32
    public const nint knockback_distance = 0x1328; // float32
    public const nint knockback_damage = 0x132C; // int32
    public const nint m_nEnemyHeroesHit = 0x1330; // int32
    public const nint m_flFacingTarget = 0x1334; // float32
    public const nint m_nFXIndex = 0x1338; // ParticleIndex_t
    public const nint m_hHitEntities = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_PrimalBeast_Onslaught_Windup {
    public const nint m_bReachedMax = 0x1318; // bool
    public const nint m_bShouldCharge = 0x1319; // bool
    public const nint m_flLastOverheadTime = 0x131C; // float32
    public const nint m_flFacingTarget = 0x1320; // float32
    public const nint m_vAimTarget = 0x1324; // Vector
    public const nint m_nCrosshairFX = 0x1330; // ParticleIndex_t
    public const nint m_flChargeDuration = 0x1334; // float32
    public const nint max_distance = 0x1338; // int32
    public const nint max_charge_time = 0x133C; // float32
    public const nint turn_rate = 0x1340; // float32
    public const nint base_power = 0x1344; // float32
    public const nint charge_speed = 0x1348; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Pulverize {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_flOffset = 0x131C; // float32
    public const nint m_vStartAngles = 0x1320; // QAngle
    public const nint m_vStartLocation = 0x132C; // Vector
    public const nint animation_rate = 0x1338; // float32
    public const nint m_bInterrupted = 0x133C; // bool
    public const nint m_bHasBeenDestroyed = 0x133D; // bool
}

public static class CDOTA_Modifier_PrimalBeast_Pulverize_Self {
    public const nint m_hTarget = 0x1318; // CHandle< CDOTA_BaseNPC >
    public const nint m_vPulverizeCenter = 0x131C; // Vector
    public const nint m_vCasterStartPos = 0x1328; // Vector
    public const nint splash_radius = 0x1334; // int32
    public const nint interval = 0x1338; // float32
    public const nint ministun = 0x133C; // float32
    public const nint damage = 0x1340; // int32
    public const nint bonus_damage_per_hit = 0x1344; // int32
    public const nint m_nHitCount = 0x1348; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Uproar {
    public const nint stack_limit = 0x1338; // int32
    public const nint damage_limit = 0x133C; // int32
    public const nint stack_duration = 0x1340; // float32
    public const nint damage_min = 0x1344; // float32
    public const nint damage_max = 0x1348; // float32
    public const nint bonus_damage_per_stack = 0x134C; // int32
    public const nint m_nFxIndexA = 0x1350; // ParticleIndex_t
    public const nint iCur_stack = 0x1354; // int32
    public const nint bonus_damage = 0x1358; // int32
    public const nint slow_duration = 0x135C; // float32
    public const nint m_fTotalDamage = 0x1378; // float32
    public const nint m_flLastStackTime = 0x137C; // GameTime_t
}

public static class CDOTA_Modifier_PrimalBeast_Uproar_Roared_Self {
    public const nint roared_bonus_attack_speed = 0x1318; // int32
    public const nint roared_bonus_armor = 0x131C; // int32
    public const nint m_nBuffStackCount = 0x1320; // int32
}

public static class CDOTA_Modifier_PrimalBeast_Uproar_Slow {
    public const nint move_slow_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Primal_Beast_Uproar_Projectile_Thinker {
    public const nint projectiles_per_stack = 0x1318; // int32
    public const nint projectile_speed = 0x131C; // int32
    public const nint projectile_distance = 0x1320; // int32
    public const nint projectile_width = 0x1324; // int32
    public const nint splinter_angle = 0x1328; // int32
    public const nint split_delay = 0x132C; // float32
    public const nint projectile_waves = 0x1330; // int32
    public const nint m_nCurrentWaveCount = 0x1334; // int32
    public const nint tectonic_shift_projectiles = 0x1338; // int32
    public const nint m_vecEnemiesHit = 0x1340; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecProjectileHandles = 0x1358; // CUtlVector< int32 >
}

public static class CDOTA_Modifier_Primalbeast_Trample {
    public const nint effect_radius = 0x1318; // int32
    public const nint vLastPos = 0x131C; // Vector
    public const nint flCurrentDistance = 0x1328; // float32
    public const nint step_distance = 0x132C; // int32
    public const nint bonus_magic_resistance = 0x1330; // int32
    public const nint m_bIsUnslowable = 0x1334; // bool
}

public static class CDOTA_Modifier_Psychic_Headband {
    public const nint m_vDirection = 0x1318; // Vector
    public const nint m_flEndTime = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint push_length = 0x132C; // int32
    public const nint push_duration = 0x1330; // float32
}

public static class CDOTA_Modifier_Puck_Coil_Break_Stun {
    public const nint m_vCastLocation = 0x1318; // Vector
    public const nint coil_rapid_fire_z_offset = 0x1324; // int32
    public const nint coil_rapid_fire_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Puck_Coiled {
    public const nint m_vCastLocation = 0x1318; // Vector
    public const nint coil_rapid_fire_z_offset = 0x1324; // int32
    public const nint coil_rapid_fire_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Puck_DreamCoil_Thinker {
    public const nint m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint coil_radius = 0x1330; // int32
    public const nint coil_break_radius = 0x1334; // int32
    public const nint coil_initial_damage = 0x1338; // int32
    public const nint coil_stun_duration = 0x133C; // float32
    public const nint coil_duration = 0x1340; // float32
    public const nint coil_break_damage = 0x1344; // int32
    public const nint m_FXIndex = 0x1348; // CUtlVector< ParticleIndex_t >
}

public static class CDOTA_Modifier_Puck_PhaseShift_AttackBonus {
    public const nint shard_bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_PudgeMiniboss_ArmorCorruption {
    public const nint armor_reduction_per_stack = 0x1318; // float32
    public const nint stack_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_PudgeMiniboss_ArmorCorruptionDebuff {
    public const nint armor_reduction_per_stack = 0x1318; // float32
    public const nint stack_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_PudgeMiniboss_HatefulStrike {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint maxhp_percent_damage = 0x131C; // int32
    public const nint every_n_attacks = 0x1320; // int32
    public const nint crit_active = 0x1324; // bool
}

public static class CDOTA_Modifier_Pudge_Dismember {
    public const nint dismember_damage = 0x1318; // int32
    public const nint strength_damage = 0x131C; // float32
    public const nint m_nTicks = 0x1320; // int32
    public const nint m_nMaxTicks = 0x1324; // int32
    public const nint m_flTickRate = 0x1328; // float32
    public const nint animation_rate = 0x132C; // float32
}

public static class CDOTA_Modifier_Pudge_Dismember_Pull {
    public const nint m_vDestination = 0x1318; // Vector
    public const nint pull_units_per_second = 0x1324; // int32
    public const nint pull_distance_limit = 0x1328; // float32
    public const nint animation_rate = 0x1334; // float32
}

public static class CDOTA_Modifier_Pudge_FleshHeap {
    public const nint magic_resistance = 0x1318; // float32
    public const nint damage_block = 0x131C; // float32
    public const nint flesh_heap_strength_buff_amount = 0x1320; // float32
}

public static class CDOTA_Modifier_Pudge_FleshHeap_Block {
    public const nint damage_block = 0x1318; // float32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Pudge_Rot {
    public const nint rot_damage = 0x1318; // int32
    public const nint rot_slow = 0x131C; // int32
    public const nint scepter_rot_regen_reduction_pct = 0x1320; // int32
    public const nint m_flLastRotTime = 0x132C; // GameTime_t
    public const nint m_bQualifiesAsPotentionalDeny = 0x1330; // bool
}

public static class CDOTA_Modifier_Pudge_Swallow {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Pudge_Swallow_Hide {
    public const nint order_lock_duration = 0x1318; // float32
    public const nint m_fOrderLockDone = 0x131C; // GameTime_t
    public const nint m_nFXIndex = 0x1320; // int32
    public const nint shard_regen_pct = 0x1324; // float32
}

public static class CDOTA_Modifier_Pugna_Decrepify {
    public const nint bonus_spell_damage_pct = 0x1318; // int32
    public const nint bonus_heal_amp_pct_allies = 0x131C; // int32
    public const nint bonus_movement_speed = 0x1320; // int32
    public const nint bonus_movement_speed_allies = 0x1324; // int32
}

public static class CDOTA_Modifier_Pugna_LifeDrain {
    public const nint health_drain = 0x1318; // int32
    public const nint ally_healing = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
    public const nint m_bDoRangeCheck = 0x1324; // bool
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint m_flElapsedTime = 0x132C; // GameTime_t
    public const nint m_bPrimary = 0x1330; // bool
    public const nint m_bShard = 0x1331; // bool
    public const nint m_bFromWard = 0x1332; // bool
    public const nint m_hWard = 0x1334; // CHandle< CBaseEntity >
    public const nint spell_amp_drain_duration = 0x1338; // float32
    public const nint max_spell_amp_drain_pct = 0x133C; // int32
    public const nint spell_amp_drain_rate = 0x1340; // int32
    public const nint spell_amp_drain_rate_ward = 0x1344; // int32
    public const nint spell_amp_drain_max = 0x1348; // int32
    public const nint health_to_mana_rate = 0x134C; // int32
}

public static class CDOTA_Modifier_Pugna_LifeDrain_SpellAmp {
    public const nint m_bIsFriendly = 0x1318; // bool
}

public static class CDOTA_Modifier_Pugna_NetherWard {
    public const nint radius = 0x1318; // int32
    public const nint mana_multiplier = 0x131C; // float32
    public const nint mana_drained_per_attack = 0x1320; // float32
    public const nint attacks_to_destroy = 0x1324; // int32
}

public static class CDOTA_Modifier_Pugna_NetherWard_Aura {
    public const nint mana_regen = 0x1318; // float32
    public const nint spell_damage_reduction = 0x131C; // float32
}

public static class CDOTA_Modifier_QueenOfPain_Arcana {
    public const nint m_vecHitPlayers = 0x1318; // CUtlOrderedMap< PlayerID_t, bool, F( size=1 ) >
    public const nint m_vecKilledPlayers = 0x1340; // CUtlOrderedMap< PlayerID_t, bool, F( size=1 ) >
    public const nint m_flLastSonicWaveCast = 0x1368; // GameTime_t
    public const nint m_bSpeechComplete = 0x136C; // bool
    public const nint m_bMessageComplete = 0x136D; // bool
    public const nint m_bIsMeleeAttack = 0x136E; // bool
}

public static class CDOTA_Modifier_QueenOfPain_ScreamOfPain_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_QueenOfPain_ShadowStrike {
    public const nint duration_damage = 0x1318; // int32
    public const nint duration_heal = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint m_SlowInterval = 0x1328; // CountdownTimer
    public const nint m_flSlowStep = 0x1340; // float32
    public const nint m_flSlowStepStep = 0x1344; // float32
    public const nint attack_buff_duration = 0x1348; // float32
}

public static class CDOTA_Modifier_QueenOfPain_SonicWave_Damage {
    public const nint m_flDamagePerTick = 0x1318; // float32
    public const nint m_nCurrentTick = 0x131C; // int32
    public const nint m_nTotalTicks = 0x1320; // int32
}

public static class CDOTA_Modifier_Radar_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_bEverFound = 0x131C; // bool
    public const nint m_bBonus = 0x131D; // bool
}

public static class CDOTA_Modifier_Rattletrap_Cog {
    public const nint m_bEnabled = 0x1318; // bool
    public const nint trigger_distance = 0x131C; // int32
    public const nint push_length = 0x1320; // int32
    public const nint push_duration = 0x1324; // float32
    public const nint cogs_radius = 0x1328; // int32
    public const nint attacks_to_destroy = 0x132C; // int32
    public const nint m_iCogIndex = 0x1330; // int32
    public const nint m_nFXIndex = 0x1334; // ParticleIndex_t
    public const nint vCenter = 0x1338; // Vector
}

public static class CDOTA_Modifier_Rattletrap_CogPush {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint m_vDirection = 0x131C; // Vector
    public const nint m_flEndTime = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint push_length = 0x1330; // int32
    public const nint push_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Barrier {
    public const nint magic_barrier = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Leash {
    public const nint leash = 0x1318; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Leash {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Self_Bonuses {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Cog_Thinker_Talent {
    public const nint cogs_radius = 0x1318; // int32
    public const nint extra_pull_buffer = 0x131C; // int32
}

public static class CDOTA_Modifier_Rattletrap_Hookshot {
    public const nint m_hDamaged = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1334; // Vector
    public const nint speed = 0x1348; // int32
    public const nint stun_radius = 0x134C; // float32
    public const nint damage = 0x1350; // float32
    public const nint duration = 0x1354; // float32
}

public static class CDOTA_Modifier_Rattletrap_JetPack {
    public const nint m_nMovementSpeed = 0x1318; // int32
    public const nint bonus_speed = 0x131C; // int32
    public const nint turn_rate = 0x1320; // float32
    public const nint m_flStartTime = 0x1324; // GameTime_t
    public const nint tick_interval = 0x1328; // float32
    public const nint m_flFacingTarget = 0x132C; // float32
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t
    public const nint m_flTurnHistory = 0x1338; // CUtlVector< float32 >
    public const nint m_vecHeroesHitLastRicochet = 0x1350; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesCredited = 0x1368; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_vecHeroesHitCurrentRicochet = 0x1380; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Rattletrap_Overclocking {
    public const nint m_nOverclockFX = 0x1318; // ParticleIndex_t
    public const nint bonus_movement_speed = 0x131C; // int32
    public const nint bonus_attack_speed = 0x1320; // int32
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare {
    public const nint projectile_vision_radius = 0x1320; // int32
    public const nint projectile_vision_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare_Overclock {
    public const nint rocket_flare_interval = 0x1318; // float32
    public const nint rocket_flare_offset_pct = 0x131C; // int32
    public const nint rocket_flare_rockets = 0x1320; // int32
    public const nint m_nRocketsFired = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint m_vOriginalTarget = 0x132C; // Vector
}

public static class CDOTA_Modifier_Rattletrap_RocketFlare_Slow {
    public const nint slow_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Razor_Arcana {
    public const nint m_bIsMeleeAttack = 0x1318; // bool
    public const nint m_bTauntQueued = 0x1319; // bool
}

public static class CDOTA_Modifier_Razor_Arcana_EmpoweredState {
    public const nint m_nEmpoweredBodyFX = 0x1318; // ParticleIndex_t
    public const nint m_nEmpoweredWeaponFX = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Razor_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Razor_EyeOfTheStorm {
    public const nint radius = 0x1318; // int32
    public const nint armor_reduction = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Razor_EyeOfTheStorm_Passive {
    public const nint passive_area_damage = 0x1318; // int32
    public const nint passive_area_interval = 0x131C; // float32
    public const nint radius = 0x1320; // int32
    public const nint m_bHitNext = 0x1324; // bool
}

public static class CDOTA_Modifier_Razor_PlasmaField_Slow {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Razor_PlasmaField_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bContracting = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage_min = 0x1368; // float32
    public const nint damage_max = 0x136C; // float32
    public const nint slow_min = 0x1370; // int32
    public const nint slow_max = 0x1374; // int32
    public const nint slow_duration = 0x1378; // float32
    public const nint m_bHasCreatedFx = 0x137C; // bool
    public const nint total_ability_time = 0x1380; // float32
}

public static class CDOTA_Modifier_Razor_StaticLink {
    public const nint flSmoothness = 0x1318; // float32
    public const nint drain_duration = 0x131C; // float32
    public const nint drain_rate = 0x1320; // int32
    public const nint drain_range = 0x1324; // int32
    public const nint drain_range_buffer = 0x1328; // int32
    public const nint m_hTarget = 0x132C; // CHandle< CBaseEntity >
    public const nint m_iTotalDrainAmount = 0x1330; // int32
    public const nint pull_speed = 0x1334; // int32
    public const nint min_pull_range = 0x1338; // int32
    public const nint m_iLinkIndex = 0x133C; // ParticleIndex_t
    public const nint m_pBuffPositive = 0x1340; // CDOTA_Buff*
    public const nint m_pNegative = 0x1348; // CDOTA_Buff*
    public const nint m_flLastThinkTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Razor_StaticLink_Buff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint drain_rate = 0x131C; // int32
    public const nint drain_length = 0x1320; // float32
    public const nint attack_speed_factor = 0x1324; // int32
    public const nint drain_armor = 0x1328; // int32
}

public static class CDOTA_Modifier_Razor_StaticLink_Debuff {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint attack_speed_factor = 0x131C; // int32
    public const nint drain_rate = 0x1320; // int32
    public const nint drain_armor = 0x1324; // int32
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Aura {
    public const nint self_movement_speed_pct = 0x1318; // int32
    public const nint strike_pct_chance = 0x131C; // int32
    public const nint strike_damage = 0x1320; // float32
    public const nint strike_move_slow_pct = 0x1324; // int32
    public const nint strike_search_radius = 0x1328; // int32
    public const nint strike_target_count = 0x132C; // int32
    public const nint strike_slow_duration = 0x1330; // float32
    public const nint strike_internal_cd = 0x1334; // float32
    public const nint m_flNextShardProcTime = 0x1338; // GameTime_t
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Delayed_Damage {
    public const nint strike_damage = 0x1318; // float32
    public const nint strike_slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Razor_UnstableCurrent_Slow {
    public const nint strike_move_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Repair_Kit {
    public const nint health_regen = 0x1318; // float32
    public const nint armor_bonus = 0x131C; // int32
    public const nint multishot_count = 0x1320; // int32
}

public static class CDOTA_Modifier_Riki_Backstab {
    public const nint fade_delay = 0x1328; // float32
    public const nint backstab_angle = 0x132C; // int32
    public const nint cleave = 0x1330; // int32
    public const nint damage_multiplier = 0x1334; // float32
    public const nint bonus_xp_kill = 0x1338; // float32
    public const nint bonus_xp_assist = 0x133C; // float32
    public const nint m_bBackstab = 0x1340; // bool
}

public static class CDOTA_Modifier_Riki_Permanent_Invisibility {
    public const nint movement_speed = 0x1328; // int32
    public const nint fade_delay = 0x132C; // float32
}

public static class CDOTA_Modifier_Riki_Poison_Dart {
    public const nint wake_damage_limit = 0x1318; // int32
    public const nint m_flDamageTaken = 0x131C; // float32
}

public static class CDOTA_Modifier_Riki_Poison_Dart_Debuff {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Riki_SmokeScreen {
    public const nint miss_rate = 0x1318; // int32
    public const nint dodge_chance = 0x131C; // int32
    public const nint block_targeting = 0x1320; // int32
    public const nint armor_reduction = 0x1324; // int32
}

public static class CDOTA_Modifier_Riki_SmokeScreenThinker {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Riki_TricksOfTheTrade_Phase {
    public const nint m_nFxIndex = 0x1318; // ParticleIndex_t
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_Timer = 0x1320; // CountdownTimer
    public const nint m_hPreviousTarget = 0x1338; // CHandle< CBaseEntity >
    public const nint m_nSucceessiveHits = 0x133C; // int32
    public const nint m_bGrantedGem = 0x1340; // bool
    public const nint attack_rate = 0x1344; // float32
    public const nint damage_pct = 0x1348; // int32
    public const nint agility_pct = 0x134C; // int32
}

public static class CDOTA_Modifier_Roshan_Bash {
    public const nint bash_chance = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint stun_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Roshan_DevotionAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshan_Moving {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_bFlipped = 0x1320; // bool
}

public static class CDOTA_Modifier_Roshan_RevengeRoar {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshan_Slam {
    public const nint slow_amount = 0x1318; // int32
}

public static class CDOTA_Modifier_Roshans_Banner_Aura {
    public const nint radius = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
    public const nint damage_bonus = 0x1320; // int32
    public const nint model_scale = 0x1324; // int32
    public const nint buff_linger_duration = 0x1328; // float32
}

public static class CDOTA_Modifier_Roshans_Banner_Effect {
    public const nint damage_bonus = 0x1318; // int32
    public const nint hp_bonus = 0x131C; // int32
    public const nint model_scale = 0x1320; // int32
}

public static class CDOTA_Modifier_Roshans_Banner_HP {
    public const nint health = 0x1318; // int32
}

public static class CDOTA_Modifier_Royal_Jelly_Regen {
    public const nint health_regen = 0x1318; // float32
    public const nint mana_regen = 0x131C; // float32
    public const nint charges = 0x1320; // int32
}

public static class CDOTA_Modifier_Royale_With_Cheese {
    public const nint shield = 0x1318; // float32
    public const nint regen = 0x131C; // float32
    public const nint idle = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
    public const nint m_timeLastTick = 0x1328; // GameTime_t
    public const nint m_timeLastDamage = 0x132C; // GameTime_t
    public const nint nFXIndex = 0x1330; // ParticleIndex_t
}

public static class CDOTA_Modifier_Rubick_Arcane_Supremacy {
    public const nint cast_range = 0x1318; // int32
    public const nint spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Rubick_FadeBolt {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint jump_damage_reduction_pct = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint m_iCurJumpCount = 0x1328; // int32
    public const nint m_vCurTargetLoc = 0x132C; // Vector
    public const nint m_hHitEntities = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Rubick_FadeBoltBuff {
    public const nint attack_damage_bonus = 0x1318; // int32
    public const nint attack_damage_reduction = 0x131C; // int32
}

public static class CDOTA_Modifier_Rubick_FadeBoltDebuff {
    public const nint attack_damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Rubick_NullField {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Rubick_NullField_Effect {
    public const nint magic_damage_reduction_pct = 0x1318; // int32
    public const nint m_bWasHidden = 0x131C; // bool
}

public static class CDOTA_Modifier_Rubick_SpellSteal {
    public const nint m_strActivityModifier = 0x1318; // CUtlString
    public const nint m_vecAbilities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bUsesTwoSlots = 0x1338; // bool
    public const nint stolen_debuff_amp = 0x133C; // int32
}

public static class CDOTA_Modifier_Rubick_Telekinesis {
    public const nint m_fStartTime = 0x1318; // GameTime_t
    public const nint m_fEndTime = 0x131C; // GameTime_t
    public const nint m_fTargetHeight = 0x1320; // float32
    public const nint m_fCurHeight = 0x1324; // float32
    public const nint m_vStartLoc = 0x1328; // Vector
    public const nint m_vCurLoc = 0x1334; // Vector
    public const nint max_land_distance = 0x1340; // int32
    public const nint fall_duration = 0x1344; // float32
    public const nint m_bOverrideDuration = 0x1348; // bool
    public const nint m_flOverrideDuration = 0x134C; // float32
}

public static class CDOTA_Modifier_Rune_Arcane {
    public const nint m_iCooldownReductionPct = 0x1318; // int32
    public const nint m_iCostReductionPct = 0x131C; // int32
}

public static class CDOTA_Modifier_Rune_ExtraDamage {
    public const nint m_iAdditionalDamagePct = 0x1318; // int32
}

public static class CDOTA_Modifier_Rune_Shield {
    public const nint damage_absorb = 0x1318; // int32
    public const nint m_bStartedTimer = 0x131C; // bool
    public const nint m_nDamageAbsorbed = 0x1320; // int32
}

public static class CDOTA_Modifier_Safety_Bubble {
    public const nint m_nDamageAbsorbed = 0x1318; // int32
    public const nint m_timeLastDamage = 0x131C; // GameTime_t
    public const nint bonus_hp_regen = 0x1320; // int32
    public const nint shield = 0x1324; // int32
    public const nint restore_time = 0x1328; // float32
}

public static class CDOTA_Modifier_SandKing_CausticFinale {
    public const nint caustic_finale_duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_SandKing_CausticFinaleOrb {
    public const nint caustic_finale_radius = 0x1318; // int32
    public const nint caustic_finale_damage_base = 0x131C; // int32
    public const nint caustic_finale_damage_pct = 0x1320; // int32
    public const nint caustic_finale_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_SandKing_Epicenter {
    public const nint epicenter_radius_base = 0x1318; // int32
    public const nint epicenter_radius_increment = 0x131C; // int32
    public const nint epicenter_pulses = 0x1320; // int32
    public const nint epicenter_radius = 0x1324; // int32[16]
    public const nint m_iMaxPulses = 0x1364; // int32
    public const nint m_iPulseCount = 0x1368; // int32
}

public static class CDOTA_Modifier_SandKing_Epicenter_Slow {
    public const nint epicenter_slow = 0x1318; // int32
    public const nint epicenter_slow_as = 0x131C; // int32
}

public static class CDOTA_Modifier_SandKing_Impale {
    public const nint m_flPower = 0x1318; // float32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_bDamageApplied = 0x1324; // bool
}

public static class CDOTA_Modifier_SandKing_SandStorm {
    public const nint sand_storm_radius = 0x1328; // int32
    public const nint sand_storm_damage = 0x132C; // int32
    public const nint damage_tick_rate = 0x1330; // float32
    public const nint m_flLastDamageTime = 0x1334; // GameTime_t
    public const nint m_nSandStormParticleIndex1 = 0x1338; // ParticleIndex_t
    public const nint m_nSandStormParticleIndex2 = 0x133C; // ParticleIndex_t
    public const nint m_hThinker = 0x1348; // CHandle< CBaseEntity >
    public const nint sand_storm_move_speed = 0x134C; // int32
    public const nint vecSpawnPos = 0x1350; // Vector
    public const nint m_iExplosionQuadrant = 0x135C; // int32
    public const nint m_iExplosionDistance = 0x1360; // int32
}

public static class CDOTA_Modifier_SandKing_SandStorm_Slow {
    public const nint slow = 0x1318; // int32
    public const nint blind = 0x131C; // int32
}

public static class CDOTA_Modifier_SandKing_SandStorm_Slow_Aura_Thinker {
    public const nint sand_storm_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Sand_King_BurrowStrike {
    public const nint m_vPopupLocation = 0x1318; // Vector
    public const nint m_bTeleported = 0x1324; // bool
}

public static class CDOTA_Modifier_Sand_King_Shard {
    public const nint shard_move_distance = 0x1318; // float32
    public const nint shard_interval = 0x131C; // float32
    public const nint vLastPos = 0x1320; // Vector
    public const nint m_fAccumulatedDistance = 0x132C; // float32
}

public static class CDOTA_Modifier_SatyrHellcaller_UnholyAura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SatyrHellcaller_UnholyAura_Bonus {
    public const nint health_regen = 0x1318; // float32
}

public static class CDOTA_Modifier_SatyrSoulstealer_ManaBurn {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SatyrTrickster_Purge {
    public const nint purge_rate = 0x1318; // int32
}

public static class CDOTA_Modifier_ScoutBonuses {
    public const nint reveal_radius = 0x1318; // int32
    public const nint increase_health = 0x131C; // float32
    public const nint max_health = 0x1320; // int32
    public const nint increase_armor = 0x1324; // float32
    public const nint max_armor = 0x1328; // float32
}

public static class CDOTA_Modifier_ScoutVisible {
    public const nint reveal_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_ScriptedMotionController {
    public const nint m_hHorizontalControlFunction = 0x1318; // HSCRIPT
    public const nint m_hVerticalControlFunction = 0x1320; // HSCRIPT
    public const nint m_hOnDestroyFunction = 0x1328; // HSCRIPT
    public const nint m_parameterTable = 0x1330; // CVariantBase< CVariantDefaultAllocator >
}

public static class CDOTA_Modifier_Seasonal_10thAnniversary_PartyHat {
    public const nint controlled_unit_search_radius = 0x1318; // int32
    public const nint child_modifier = 0x131C; // bool
    public const nint m_strEffectName = 0x1320; // CUtlString
    public const nint m_nHatFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Seasonal_Diretide2020_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Seasonal_PartyHat {
    public const nint controlled_unit_search_radius = 0x1318; // int32
    public const nint child_modifier = 0x131C; // bool
    public const nint m_strEffectName = 0x1320; // CUtlString
    public const nint m_nHatFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Seasonal_Penguin {
    public const nint m_fLifetimeGained = 0x1318; // float32
    public const nint m_vTargetPos = 0x131C; // Vector
    public const nint m_nCurrentSpeed = 0x1328; // int32
    public const nint m_fLastBumpTime = 0x132C; // GameTime_t
    public const nint m_vLastPos = 0x1330; // Vector
    public const nint m_hLastHit = 0x133C; // CHandle< CBaseEntity >
    public const nint m_vDir = 0x1340; // Vector
    public const nint m_vRunEndPos = 0x134C; // Vector
    public const nint m_bIsInInitialRun = 0x1358; // bool
    public const nint m_vJumpEndPos = 0x135C; // Vector
    public const nint m_bPlayedVroomSinceLastCrash = 0x1368; // bool
    public const nint m_nVroomFX = 0x136C; // ParticleIndex_t
    public const nint m_fLastSpeedStepTime = 0x1370; // GameTime_t
    public const nint m_fLastSpeechTime = 0x1374; // GameTime_t
    public const nint m_nFXStackIndex = 0x1378; // ParticleIndex_t
    public const nint m_nBumpsSinceLastCrash = 0x137C; // int32
    public const nint m_hLastBumpingHero = 0x1380; // CHandle< CBaseEntity >
    public const nint initial_speed = 0x1384; // int32
    public const nint max_speed = 0x1388; // int32
    public const nint speed_step = 0x138C; // int32
    public const nint speed_step_interval = 0x1390; // float32
    public const nint bump_delay = 0x1394; // float32
    public const nint bump_delay_absolute = 0x1398; // float32
    public const nint bump_collision_radius = 0x139C; // int32
    public const nint run_distance = 0x13A0; // int32
    public const nint jump_distance = 0x13A4; // int32
    public const nint speed_after_crash = 0x13A8; // int32
    public const nint speed_gain_per_hero_bump = 0x13AC; // int32
    public const nint max_gainable_lifetime = 0x13B0; // float32
    public const nint lifetime_gain_per_hero_bump = 0x13B4; // float32
    public const nint min_speech_repeat_time = 0x13B8; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_CNY_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint m_vLastPos = 0x1338; // Vector
    public const nint m_vDir = 0x1344; // Vector
    public const nint m_flSpeed = 0x1350; // float32
    public const nint m_flDistRemaining = 0x1354; // float32
    public const nint m_flTreeTimeRemaining = 0x1358; // float32
    public const nint m_hLastHit = 0x135C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Seasonal_Summon_Common_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_Snowman_Thinker {
    public const nint grace_period = 0x1318; // float32
    public const nint search_distance = 0x131C; // int32
    public const nint think_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint max_bounces = 0x1338; // int32
    public const nint max_model_scale = 0x133C; // float32
    public const nint power_growth_exponent = 0x1340; // float32
    public const nint m_vLastPos = 0x1344; // Vector
    public const nint m_vDir = 0x1350; // Vector
    public const nint m_flSpeed = 0x135C; // float32
    public const nint m_flDistRemaining = 0x1360; // float32
    public const nint m_flTreeTimeRemaining = 0x1364; // float32
    public const nint m_nTimesBounced = 0x1368; // int32
    public const nint m_flModelScale = 0x136C; // float32
    public const nint m_hLastHit = 0x1370; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Visuals {
    public const nint model_scale_per_stack = 0x1318; // float32
    public const nint m_bIsRadiant = 0x131C; // bool
}

public static class CDOTA_Modifier_Seasonal_Summon_TI9_Balloon_Thinker {
    public const nint speed = 0x1318; // float32
    public const nint min_distance_before_bounce = 0x131C; // int32
    public const nint drag = 0x1320; // float32
    public const nint max_height = 0x1324; // float32
    public const nint max_vertical_move_time = 0x1328; // float32
    public const nint bounce_turn_angle = 0x132C; // float32
    public const nint bounce_turn_angle_tree = 0x1330; // float32
    public const nint bounce_delay = 0x1334; // float32
    public const nint m_vLastPos = 0x1338; // Vector
    public const nint m_vDir = 0x1344; // Vector
    public const nint m_flSpeed = 0x1350; // float32
    public const nint m_flDistRemaining = 0x1354; // float32
    public const nint m_flTreeTimeRemaining = 0x1358; // float32
    public const nint m_hLastHit = 0x135C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Seasonal_TI10_DiscoBall_Channeling {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nGesture = 0x131C; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_HighFiveRequested {
    public const nint acknowledge_range = 0x1318; // int32
    public const nint think_interval = 0x131C; // float32
    public const nint acknowledged_cooldown = 0x1320; // float32
    public const nint m_bAcknowledged = 0x1324; // bool
    public const nint m_bFirstThink = 0x1325; // bool
    public const nint high_five_level = 0x1328; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_HotPotato {
    public const nint debuff_duration = 0x1318; // float32
    public const nint time_to_explode = 0x131C; // float32
    public const nint throw_time = 0x1320; // float32
    public const nint m_fLastThink = 0x1324; // GameTime_t
}

public static class CDOTA_Modifier_Seasonal_TI10_Portal {
    public const nint m_nPhaseStartFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_vSpawnPos = 0x131C; // Vector
    public const nint m_vecEmissions = 0x1328; // CUtlVector< Vector >
    public const nint m_bChatSent = 0x1340; // bool
    public const nint m_nPhase = 0x1344; // int32
    public const nint m_nNumEmitted = 0x1348; // int32
    public const nint m_nNumDrops = 0x134C; // int32
    public const nint m_flStartTime = 0x1350; // GameTime_t
    public const nint m_flLastEmitTime = 0x1354; // GameTime_t
    public const nint m_bIsOnRadiant = 0x1358; // bool
    public const nint m_bUseLargeEmit = 0x1359; // bool
    public const nint m_nOutcome = 0x135C; // int32
    public const nint PHASE_OPEN = 0x1370; // int32
    public const nint PHASE_EMIT = 0x1374; // int32
    public const nint PHASE_EMIT_DONE = 0x1378; // int32
    public const nint PHASE_CLOSE = 0x137C; // int32
}

public static class CDOTA_Modifier_Seasonal_TI10_SoccerBall {
    public const nint m_vPost1 = 0x1318; // Vector
    public const nint m_vPost2 = 0x1324; // Vector
    public const nint m_vPostForward = 0x1330; // Vector
    public const nint m_nPost1FXIndex = 0x133C; // ParticleIndex_t
    public const nint m_nPost2FXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nPost3FXIndex = 0x1344; // ParticleIndex_t
    public const nint PHASE_START = 0x1348; // int32
    public const nint PHASE_GESTURE = 0x134C; // int32
    public const nint PHASE_FX = 0x1350; // int32
    public const nint PHASE_MOTION = 0x1354; // int32
    public const nint PHASE_IMPACT = 0x1358; // int32
    public const nint PHASE_FAIL = 0x135C; // int32
    public const nint PHASE_CROSSED_GOAL = 0x1360; // int32
    public const nint PHASE_GOAL = 0x1364; // int32
    public const nint tick_interval = 0x1368; // float32
    public const nint forward_move_speed = 0x136C; // float32
    public const nint magnus_coefficient = 0x1370; // float32
    public const nint magnus_falloff = 0x1374; // float32
    public const nint drag_coefficient = 0x1378; // float32
    public const nint min_delay = 0x137C; // float32
    public const nint max_delay = 0x1380; // float32
    public const nint hit_radius = 0x1384; // int32
    public const nint m_nFXIndex = 0x1388; // ParticleIndex_t
    public const nint m_vVelocity = 0x138C; // Vector
    public const nint m_vSpawnPos = 0x1398; // Vector
    public const nint m_vTargetPos = 0x13A4; // Vector
    public const nint m_nPhase = 0x13B0; // int32
    public const nint m_nHits = 0x13B4; // int32
    public const nint m_flMagnusValue = 0x13B8; // float32
    public const nint m_flStartTime = 0x13BC; // GameTime_t
    public const nint m_flDelay = 0x13C0; // float32
    public const nint m_flStateChangeTime = 0x13C4; // GameTime_t
    public const nint m_bFirstThink = 0x13C8; // bool
    public const nint m_bGroundHit = 0x13C9; // bool
    public const nint m_nTargetPlayerID = 0x13CC; // PlayerID_t
    public const nint m_flCurTime = 0x13D0; // float32
    public const nint m_flStartZ = 0x13D4; // float32
    public const nint m_flAirTime = 0x13D8; // float32
    public const nint m_flHeight = 0x13DC; // float32
}

public static class CDOTA_Modifier_Seasonal_TI11_BubbleGun {
    public const nint think_interval = 0x1318; // float32
    public const nint max_charges = 0x131C; // int32
    public const nint m_nChargesUsed = 0x1320; // int32
}

public static class CDOTA_Modifier_Seasonal_TI11_CongaLine {
    public const nint NUM_SOUNDS = 0x1318; // int32
    public const nint dance_interval = 0x131C; // float32
    public const nint gesture_duration = 0x1320; // float32
    public const nint catch_up_distance = 0x1324; // float32
    public const nint slow_duration = 0x1328; // float32
    public const nint slow_amount = 0x132C; // float32
    public const nint m_nGesture = 0x1330; // int32
    public const nint m_vecDancers = 0x1338; // CUtlVector< CHandle< CDOTA_BaseNPC > >
    public const nint m_bIsGesturing = 0x1380; // bool
}

public static class CDOTA_Modifier_Seasonal_TI11_CongaLineSlow {
    public const nint m_flMaxSpeed = 0x1318; // float32
}

public static class CDOTA_Modifier_Seasonal_TI11_DuelAccepted {
    public const nint m_nDuelOpponent = 0x1318; // PlayerID_t
}

public static class CDOTA_Modifier_Seasonal_TI11_RockPaperScissors {
    public const nint challenge_duration = 0x1318; // float32
    public const nint reveal_duration = 0x131C; // float32
    public const nint reveal_delay = 0x1320; // float32
    public const nint completed_cooldown = 0x1324; // float32
    public const nint think_interval = 0x1328; // float32
    public const nint acknowledge_range = 0x132C; // float32
    public const nint m_flRevealTime = 0x1334; // GameTime_t
    public const nint m_bFirstThink = 0x1338; // bool
    public const nint m_nRevealOpponentPlayerID = 0x133C; // PlayerID_t
}

public static class CDOTA_Modifier_Seasonal_TI11_RockPaperScissors_Playing {
    public const nint input_duration = 0x1318; // float32
    public const nint think_interval = 0x131C; // float32
    public const nint m_bChoseOption = 0x1320; // bool
}

public static class CDOTA_Modifier_Seasonal_TI9_Drums_Thinker {
    public const nint m_nNextSoundIndex = 0x1328; // int32
}

public static class CDOTA_Modifier_Seasonal_TI9_Monkey_Thinker {
    public const nint attack_range = 0x1318; // float32
    public const nint attack_time = 0x131C; // float32
    public const nint attack_projectile_time = 0x1320; // float32
    public const nint projectile_speed = 0x1324; // int32
    public const nint turn_time = 0x1328; // float32
    public const nint turn_angle = 0x132C; // float32
    public const nint shoot_angle = 0x1330; // float32
    public const nint m_flTurnRate = 0x1334; // float32
    public const nint m_flTargetYaw = 0x1338; // float32
    public const nint m_flLastTurnTime = 0x133C; // float32
    public const nint m_nLastTickCount = 0x1340; // GameTick_t
    public const nint m_bHappyMonkeyCondition = 0x1348; // bool
    public const nint m_hAngryTarget = 0x134C; // CHandle< CDOTA_BaseNPC >
    public const nint m_hAttackTarget = 0x1350; // CHandle< CDOTA_BaseNPC >
    public const nint m_AttackTimer = 0x1358; // CountdownTimer
    public const nint m_AttackProjectileTimer = 0x1370; // CountdownTimer
    public const nint m_HappyTimer = 0x1388; // CountdownTimer
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_BabyRoshan {
    public const nint m_bFirstThink = 0x1318; // bool
    public const nint m_flStartTime = 0x131C; // GameTime_t
    public const nint m_vecStartingPos = 0x1320; // Vector
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_Ghost_Haunt {
    public const nint nDamageInstances = 0x1318; // int32
    public const nint m_flLastAttackTime = 0x131C; // GameTime_t
    public const nint m_flLastMoveTime = 0x1320; // GameTime_t
    public const nint m_hGhost = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_Pudgling {
    public const nint m_flStartTime = 0x1318; // GameTime_t
    public const nint m_nActionCount = 0x131C; // int32
    public const nint m_vecStartingPos = 0x1320; // Vector
    public const nint m_vecDestinationOffset = 0x132C; // Vector
}

public static class CDOTA_Modifier_Seasonal_TI9_Shovel_Stasis_Trap {
    public const nint m_hHero = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Seer_Stone {
    public const nint cast_range_bonus = 0x1318; // int32
    public const nint vision_bonus = 0x131C; // int32
    public const nint mana_regen = 0x1320; // int32
}

public static class CDOTA_Modifier_Seer_Stone_Truesight {
    public const nint radius = 0x1318; // int32
    public const nint duration = 0x131C; // float32
}

public static class CDOTA_Modifier_SetScaleset {
    public const nint m_Scaleset = 0x1318; // CUtlString
    public const nint m_bActive = 0x1320; // bool
}

public static class CDOTA_Modifier_ShadowAmulet_Fade {
    public const nint fade_time = 0x1318; // float32
    public const nint m_flFadeTime = 0x131C; // GameTime_t
    public const nint m_bFaded = 0x1320; // bool
}

public static class CDOTA_Modifier_ShadowShaman_SerpentWard {
    public const nint scepter_range = 0x1318; // int32
}

public static class CDOTA_Modifier_ShadowShaman_Shackles {
    public const nint tick_interval = 0x1318; // float32
    public const nint total_damage = 0x131C; // float32
    public const nint channel_time = 0x1320; // float32
}

public static class CDOTA_Modifier_ShadowShaman_Voodoo {
    public const nint movespeed = 0x1318; // int32
    public const nint damage_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Disruption {
    public const nint m_flHealth = 0x1318; // float32
    public const nint m_flDisseminate_Duration = 0x131C; // float32
    public const nint m_hDisseminateAbility = 0x1320; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Shadow_Demon_Disruption_Bonus_Damage {
    public const nint illusion_flat_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Disseminate {
    public const nint damage_reflection_pct = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint m_flLastDispersionPulseEffectTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Shadow_Demon_Shadow_Poison {
    public const nint stack_damage = 0x1318; // float32
    public const nint bonus_stack_damage = 0x131C; // float32
    public const nint max_multiply_stacks = 0x1320; // int32
    public const nint m_nFXStackIndex = 0x1324; // ParticleIndex_t
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher {
    public const nint actual_health_lost = 0x1318; // int32
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher_Illusion {
    public const nint hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Shadow_Demon_Soul_Catcher_SpellAmp {
    public const nint num_heroes = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Shadowraze_Counter {
    public const nint shadowraze_cooldown = 0x1318; // float32
}

public static class CDOTA_Modifier_Shadowraze_Debuff {
    public const nint movement_speed_pct = 0x1318; // int32
    public const nint turn_rate_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_SheepStick_Debuff {
    public const nint sheep_movement_speed = 0x1318; // float32
}

public static class CDOTA_Modifier_Shredder_Chakram_Debuff {
    public const nint slow = 0x1318; // int32
    public const nint slow_health_percentage = 0x131C; // int32
}

public static class CDOTA_Modifier_Shredder_Chakram_Thinker {
    public const nint damage_per_second = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint radius = 0x1320; // float32
    public const nint break_distance = 0x1324; // float32
    public const nint damage_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_Shredder_Flamethrower {
    public const nint length = 0x1318; // int32
    public const nint width = 0x131C; // int32
    public const nint damage_per_second = 0x1320; // int32
    public const nint m_nBeamFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1328; // CHandle< CBaseEntity >
    public const nint m_flLastHit = 0x132C; // GameTime_t
    public const nint m_vecBurningTrees = 0x1330; // CUtlVector< CBaseEntity* >
    public const nint m_hTreeFireThinker = 0x1348; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Shredder_Flamethrower_Damage {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nActiveFXIndex = 0x131C; // ParticleIndex_t
    public const nint m_nActiveStatusFXIndex = 0x1320; // ParticleIndex_t
    public const nint damage_per_second = 0x1324; // float32
    public const nint building_dmg_pct = 0x1328; // int32
    public const nint move_slow_pct = 0x132C; // int32
}

public static class CDOTA_Modifier_Shredder_Flamethrower_TreeFire_Thinker {
    public const nint m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< CBaseEntity >, GameTime_t > >
    public const nint m_bCleanupWhenEmpty = 0x1330; // bool
}

public static class CDOTA_Modifier_Shredder_ReactiveArmor_Bomb {
    public const nint initial_shield = 0x1318; // float32
    public const nint max_shield = 0x131C; // float32
    public const nint shield_per_sec = 0x1320; // float32
    public const nint shield_per_sec_per_enemy = 0x1324; // float32
    public const nint duration = 0x1328; // float32
    public const nint base_explosion = 0x132C; // float32
    public const nint radius = 0x1330; // int32
    public const nint explosion_radius = 0x1334; // int32
    public const nint m_nDamageAbsorbed = 0x1338; // int32
    public const nint m_timeLastTick = 0x133C; // GameTime_t
    public const nint m_StartTime = 0x1340; // GameTime_t
    public const nint m_nLastParticleTime = 0x1344; // int32
}

public static class CDOTA_Modifier_Shredder_Reactive_Armor {
    public const nint stack_limit = 0x1318; // int32
    public const nint stack_duration = 0x131C; // float32
    public const nint stacks_per_hero_attack = 0x1320; // int32
    public const nint m_flStackDieTime = 0x1324; // GameTime_t
    public const nint m_pFXIndex = 0x1328; // ParticleIndex_t[4]
}

public static class CDOTA_Modifier_Shredder_Reactive_Armor_Stack {
    public const nint bonus_armor = 0x1318; // float32
    public const nint bonus_hp_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Shredder_TimberChain {
    public const nint m_hDamaged = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1334; // Vector
    public const nint speed = 0x1340; // int32
    public const nint radius = 0x1344; // int32
    public const nint damage = 0x1348; // int32
}

public static class CDOTA_Modifier_Shredder_WhirlingDeath_Debuff {
    public const nint stat_loss_pct = 0x1318; // int32
    public const nint stat_loss_univ = 0x131C; // int32
    public const nint iPrimaryAttribute = 0x1320; // int32
    public const nint flStatLossStr = 0x1324; // float32
    public const nint flStatLossAgi = 0x1328; // float32
    public const nint flStatLossInt = 0x132C; // float32
}

public static class CDOTA_Modifier_Silencer_CurseOfTheSilent {
    public const nint damage = 0x1318; // int32
    public const nint nFxIndex = 0x131C; // ParticleIndex_t
    public const nint penalty_duration = 0x1320; // int32
    public const nint penalty_multiplier = 0x1324; // float32
    public const nint movespeed = 0x1328; // int32
    public const nint undispellable = 0x132C; // int32
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom {
    public const nint intellect_damage_pct = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_InFlightSilenceAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_pAttackCounterBuff = 0x1350; // CDOTA_Buff*
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom_Buff {
    public const nint int_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Silencer_GlaivesOfWisdom_Debuff {
    public const nint int_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Silencer_LastWord {
    public const nint duration = 0x1318; // int32
    public const nint spellcast = 0x131C; // bool
    public const nint damage = 0x1320; // int32
    public const nint debuff_duration = 0x1324; // float32
    public const nint int_multiplier = 0x1328; // float32
    public const nint scepter_bonus_damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Silver_Edge_WindWalk {
    public const nint windwalk_bonus_damage = 0x1328; // int32
    public const nint windwalk_movement_speed = 0x132C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_HellfireBlast {
    public const nint blast_dot_damage = 0x1318; // int32
    public const nint blast_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_HellfireBlast_Skeleton_Buff {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_move_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_MortalStrike {
    public const nint crit_mult = 0x1318; // int32
    public const nint m_vCritRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation {
    public const nint reincarnate_time = 0x1318; // float32
    public const nint scepter_aura_radius = 0x131C; // int32
    public const nint m_fLastReincarnationTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter {
    public const nint scepter_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_Active {
    public const nint scepter_move_speed_pct = 0x1318; // int32
    public const nint scepter_attack_speed = 0x131C; // int32
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
    public const nint m_bPassive = 0x1324; // bool
    public const nint m_bKillAtEnd = 0x1325; // bool
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_RespawnTime {
    public const nint scepter_respawn_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_Slow {
    public const nint movespeed = 0x1318; // int32
    public const nint attackslow = 0x131C; // int32
}

public static class CDOTA_Modifier_SkeletonKing_Reincarnation_SpawnSkeletons {
    public const nint shard_skeleton_count = 0x1318; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura {
    public const nint vampiric_aura = 0x1318; // int32
    public const nint creep_lifesteal_reduction_pct = 0x131C; // int32
    public const nint skeleton_duration = 0x1320; // float32
    public const nint max_skeleton_charges = 0x1324; // int32
    public const nint m_iKillCounter = 0x1328; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura_Summon {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint talent_skeleton_damage = 0x131C; // int32
    public const nint m_bRespawnReady = 0x1320; // bool
    public const nint m_bRespawnConsumed = 0x1321; // bool
    public const nint m_bKillParentOnDestroy = 0x1322; // bool
    public const nint m_flRespawnTime = 0x1324; // GameTime_t
    public const nint vampiric_aura = 0x1328; // int32
    public const nint gold_bounty = 0x132C; // int32
    public const nint xp_bounty = 0x1330; // int32
    public const nint skeleton_building_damage_reduction = 0x1334; // int32
    public const nint skeleton_bonus_hero_damage = 0x1338; // int32
}

public static class CDOTA_Modifier_SkeletonKing_VampiricAura_Summon_Thinker {
    public const nint m_iCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Skeleton_King_Arcana {
    public const nint m_bHasCrit = 0x1318; // bool
}

public static class CDOTA_Modifier_Skywrath_Mage_Ancient_Seal {
    public const nint resist_debuff = 0x1318; // int32
}

public static class CDOTA_Modifier_Skywrath_Mage_Arcane_Bolt_Lifesteal {
    public const nint lifesteal_amt = 0x1318; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Concussive_Shot {
    public const nint movement_speed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Skywrath_Mage_Mystic_Flare {
    public const nint radius = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint duration = 0x1320; // float32
    public const nint damage_interval = 0x1324; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard {
    public const nint stack_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard_Bonus {
    public const nint bonus_intelligence = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Skywrath_Mage_Shard_Bonus_Counter {
    public const nint bonus_intelligence = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Slardar_Amplify_Damage {
    public const nint armor_reduction = 0x1318; // int32
    public const nint scepter_delay = 0x131C; // float32
    public const nint undispellable = 0x1320; // int32
    public const nint puddle_radius = 0x1324; // int32
    public const nint puddle_duration = 0x1328; // float32
    public const nint m_vecLastPuddle = 0x132C; // Vector
    public const nint m_hPuddle = 0x1338; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Slardar_Bash_Active {
    public const nint bonus_damage = 0x1318; // int32
    public const nint duration = 0x131C; // float32
    public const nint attack_count = 0x1320; // int32
    public const nint river_damage = 0x1324; // int32
}

public static class CDOTA_Modifier_Slardar_Puddle_Thinker {
    public const nint puddle_radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Slardar_Slithereen_Crush {
    public const nint crush_extra_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Slardar_Sprint {
    public const nint bonus_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slardar_Sprint_River {
    public const nint river_speed = 0x1318; // int32
    public const nint puddle_regen = 0x131C; // int32
    public const nint puddle_armor = 0x1320; // int32
    public const nint puddle_status_resistance = 0x1324; // int32
}

public static class CDOTA_Modifier_Slark_DarkPact_Pulses {
    public const nint m_iPulseCount = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint total_damage = 0x1320; // int32
    public const nint total_pulses = 0x1324; // int32
    public const nint self_damage_pct = 0x1328; // int32
    public const nint pulse_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Slark_Depth_Shroud {
    public const nint m_nFXIndex = 0x1328; // ParticleIndex_t
    public const nint bonus_movement_speed = 0x132C; // int32
    public const nint bonus_regen = 0x1330; // float32
}

public static class CDOTA_Modifier_Slark_Depth_Shroud_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_hVisibleEntity = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Slark_EssenceShift {
    public const nint agi_gain = 0x1338; // int32
    public const nint duration = 0x133C; // float32
}

public static class CDOTA_Modifier_Slark_EssenceShift_Debuff {
    public const nint stat_loss = 0x1320; // int32
}

public static class CDOTA_Modifier_Slark_Fish_Bait_Post {
    public const nint attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_Fish_Bait_Pre {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_Pounce {
    public const nint m_flTotalTime = 0x1318; // float32
    public const nint m_flInitialVelocity = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_vTargetHorizontalDirection = 0x132C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1338; // float32
    public const nint m_flCurrentTimeVert = 0x133C; // float32
    public const nint m_bInterrupted = 0x1340; // bool
    public const nint m_bFoundUnit = 0x1341; // bool
    public const nint pounce_distance = 0x1344; // int32
    public const nint pounce_distance_scepter = 0x1348; // int32
    public const nint pounce_speed = 0x134C; // float32
    public const nint pounce_acceleration = 0x1350; // float32
    public const nint pounce_radius = 0x1354; // int32
    public const nint pounce_damage = 0x1358; // int32
    public const nint leash_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Slark_Pounce_Leash {
    public const nint leash_radius = 0x1318; // int32
    public const nint vLeashLocation = 0x131C; // Vector
    public const nint m_bEscaped = 0x1328; // bool
    public const nint m_bFishBait = 0x1329; // bool
}

public static class CDOTA_Modifier_Slark_ShadowDance {
    public const nint m_hVisibleEntity = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Slark_ShadowDance_Aura {
    public const nint scepter_aoe = 0x1318; // int32
}

public static class CDOTA_Modifier_Slark_ShadowDance_Passive {
    public const nint activation_delay = 0x1318; // float32
    public const nint neutral_disable = 0x131C; // float32
    public const nint m_bPendingRefresh = 0x1320; // bool
    public const nint m_fPendingStateChangeTime = 0x1324; // GameTime_t
    public const nint m_NeutralHitTimer = 0x1328; // CountdownTimer
}

public static class CDOTA_Modifier_Slark_ShadowDance_PassiveRegen {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_regen = 0x131C; // float32
}

public static class CDOTA_Modifier_Slark_ShadowDance_Visual {
    public const nint m_bScepter = 0x1318; // bool
}

public static class CDOTA_Modifier_Smoke_Of_Deceit {
    public const nint bonus_movement_speed = 0x1328; // int32
    public const nint visibility_radius = 0x132C; // int32
    public const nint secondary_application_radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Snapfire_FiresnapCookie_PreHop {
    public const nint jump_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Snapfire_FiresnapCookie_ShortHop {
    public const nint jump_duration = 0x1318; // float32
    public const nint jump_height = 0x131C; // int32
    public const nint jump_horizontal_distance = 0x1320; // int32
    public const nint pre_land_anim_time = 0x1324; // float32
    public const nint landing_gesture_duration = 0x1328; // float32
    public const nint impact_radius = 0x132C; // int32
    public const nint impact_damage = 0x1330; // int32
    public const nint impact_stun_duration = 0x1334; // float32
    public const nint m_flStartZ = 0x1338; // float32
    public const nint m_flCurTime = 0x133C; // float32
    public const nint m_flJumpDuration = 0x1340; // float32
    public const nint m_flJumpHeight = 0x1344; // float32
    public const nint m_vTargetHorizontalDirection = 0x1348; // Vector
}

public static class CDOTA_Modifier_Snapfire_GobbleUp_BellyHasUnit {
    public const nint m_hGobbledUnit = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nOriginalControllingUnit = 0x131C; // PlayerID_t
    public const nint m_bUnitWasLaunched = 0x1320; // bool
    public const nint max_time_in_belly = 0x1324; // float32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Attack {
    public const nint damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Attack_Reduction {
    public const nint damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Buff {
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    public const nint m_nIsActive = 0x1338; // int32
    public const nint m_bHasAttackTalent = 0x133C; // bool
    public const nint m_bBonusAttack = 0x133D; // bool
    public const nint attack_range_bonus = 0x1340; // int32
    public const nint buffed_attacks = 0x1344; // int32
    public const nint base_attack_time = 0x1348; // float32
    public const nint attack_speed_bonus = 0x134C; // int32
    public const nint armor_duration = 0x1350; // float32
}

public static class CDOTA_Modifier_Snapfire_LilShredder_Debuff {
    public const nint armor_reduction_per_attack = 0x1318; // float32
}

public static class CDOTA_Modifier_Snapfire_Magma_Burn_Slow {
    public const nint m_nMoveSlowPct = 0x1318; // int32
    public const nint m_fBurnDamagePerTick = 0x131C; // float32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_interval = 0x1324; // float32
    public const nint burn_damage = 0x1328; // int32
}

public static class CDOTA_Modifier_Snapfire_Magma_Thinker {
    public const nint burn_interval = 0x1318; // float32
    public const nint impact_radius = 0x131C; // int32
    public const nint move_slow_pct = 0x1320; // int32
    public const nint burn_linger_duration = 0x1324; // float32
    public const nint m_nPathEffectIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Snapfire_MortimerKisses {
    public const nint m_fIntervalPerRocket = 0x1318; // float32
    public const nint m_flFacingTarget = 0x131C; // float32
    public const nint m_nBeamFXIndex = 0x1320; // ParticleIndex_t
    public const nint m_hBeamEnd = 0x1324; // CHandle< CBaseEntity >
    public const nint m_flCurDistance = 0x1328; // float32
    public const nint m_vAimTarget = 0x132C; // Vector
    public const nint m_fLastTurnAmount = 0x1338; // float32
    public const nint m_nProjectilesLaunched = 0x133C; // int32
    public const nint m_bDestroyOnNextThink = 0x1340; // bool
    public const nint m_nProjectilesToLaunch = 0x1344; // int32
    public const nint m_bHasProjectileTalent = 0x1348; // bool
    public const nint projectile_count = 0x1354; // int32
    public const nint projectile_speed = 0x1358; // int32
    public const nint projectile_width = 0x135C; // int32
    public const nint projectile_vision = 0x1360; // int32
    public const nint turn_rate = 0x1364; // float32
    public const nint min_range = 0x1368; // int32
    public const nint impact_radius = 0x136C; // int32
    public const nint min_lob_travel_time = 0x1370; // float32
    public const nint max_lob_travel_time = 0x1374; // float32
    public const nint delay_after_last_projectile = 0x1378; // float32
}

public static class CDOTA_Modifier_Snapfire_Scatterblast_Slow {
    public const nint m_bIsPointBlank = 0x1318; // bool
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint attack_slow_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Snapfire_SpitCreep_ArcingUnit {
    public const nint m_flPredictedTotalTime = 0x1318; // float32
    public const nint m_vStartPosition = 0x131C; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1328; // float32
    public const nint m_flCurrentTimeVert = 0x132C; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1330; // bool
    public const nint m_bDamageApplied = 0x1331; // bool
    public const nint m_bTargetTeleported = 0x1332; // bool
    public const nint m_vHorizontalVelocity = 0x1334; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1340; // Vector
    public const nint m_flInitialVelocityZ = 0x134C; // float32
    public const nint m_fClampedProjectileSpeed = 0x1350; // float32
    public const nint m_nFXIndex = 0x1354; // ParticleIndex_t
    public const nint m_fAcceleration = 0x1358; // float32
    public const nint min_range = 0x135C; // int32
    public const nint min_lob_travel_time = 0x1360; // float32
    public const nint max_lob_travel_time = 0x1364; // float32
    public const nint impact_radius = 0x1368; // int32
    public const nint projectile_vision = 0x136C; // int32
    public const nint stun_duration = 0x1370; // float32
    public const nint min_height_above_lowest = 0x1374; // float32
    public const nint min_height_above_highest = 0x1378; // float32
    public const nint min_acceleration = 0x137C; // float32
    public const nint max_acceleration = 0x1380; // float32
}

public static class CDOTA_Modifier_Sniper_Assassinate_Crit {
    public const nint scepter_crit_damage = 0x1318; // int32
    public const nint scatter_damage_pct = 0x131C; // int32
    public const nint is_secondary = 0x1320; // bool
}

public static class CDOTA_Modifier_Sniper_Concussive_Grenade {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_Headshot {
    public const nint proc_chance = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
    public const nint knockback_distance = 0x1320; // float32
    public const nint bonus_damage_creeps = 0x1324; // int32
    public const nint bonus_attack_range = 0x1328; // int32
    public const nint damage = 0x132C; // int32
}

public static class CDOTA_Modifier_Sniper_Headshot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_Shrapnel_Slow {
    public const nint slow_movement_speed = 0x1318; // int32
    public const nint shrapnel_damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Sniper_Shrapnel_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_bExploded = 0x131C; // bool
    public const nint m_bGrantedGem = 0x131D; // bool
}

public static class CDOTA_Modifier_Sniper_TakeAim {
    public const nint bonus_attack_range = 0x1318; // int32
}

public static class CDOTA_Modifier_Sniper_TakeAim_Bonus {
    public const nint slow = 0x1318; // int32
    public const nint active_attack_range_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Soul_Ring_Buff {
    public const nint m_iTempExtraMaxMana = 0x1318; // int32
    public const nint m_iManaToRemove = 0x131C; // int32
    public const nint duration = 0x1320; // float32
}

public static class CDOTA_Modifier_Spawnlord_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Spawnlord_Aura_Bonus {
    public const nint lifesteal = 0x1318; // int32
    public const nint hp_regen = 0x131C; // int32
}

public static class CDOTA_Modifier_Spawnlord_Master_Freeze {
    public const nint m_bFreezeAttack = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Spawnlord_Master_Freeze_Root {
    public const nint max_ticks = 0x1318; // int32
    public const nint damage = 0x131C; // float32
}

public static class CDOTA_Modifier_Spawnlord_Master_Stomp {
    public const nint armor_reduction_pct = 0x1318; // int32
    public const nint m_flArmorReduction = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_20_Bash {
    public const nint value = 0x1318; // float32
    public const nint value2 = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Agility {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Agility_And_Intelligence {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_All_Stats {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Armor {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Base_Damage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Damage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attack_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Attributes {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Base_Attack_Rate {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Cast_Range {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Cast_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Cleave {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Cooldown_Reduction {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Corruption {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Corruption_Debuff {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Crit {
    public const nint crit_chance = 0x1318; // float32
    public const nint crit_multiplier = 0x131C; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Day_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Evasion {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Exp_Boost {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Gold {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Gold_Income {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_HP {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_HP_Regen {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Haste {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Intelligence {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Lifesteal {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_MP {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_MP_Regen {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_MP_Regen_Amp {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Magic_Resistance {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Mana_Break {
    public const nint value = 0x1318; // int32
    public const nint burn_illusions_ranged = 0x131C; // int32
    public const nint burn_illusions_melee = 0x1320; // int32
    public const nint damage_per_burn = 0x1324; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Manaloss_Reduction {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Movement_Speed {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Movement_Speed_Percentage {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Night_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Reincarnation {
    public const nint value = 0x1318; // float32
    public const nint reincarnate_time = 0x131C; // float32
    public const nint m_fLastReincarnationTime = 0x1320; // GameTime_t
}

public static class CDOTA_Modifier_Special_Bonus_Respawn_Reduction {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Amplify {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Block {
    public const nint block_cooldown = 0x1318; // float32
    public const nint m_CooldownTimer = 0x1320; // CountdownTimer
}

public static class CDOTA_Modifier_Special_Bonus_Spell_Lifesteal {
    public const nint value = 0x1318; // float32
}

public static class CDOTA_Modifier_Special_Bonus_Status_Resistance {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Strength {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_5 {
    public const nint bonus_ms = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_6 {
    public const nint bonus_hp = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Bonus_Vision {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_Special_Gyrocopter_Call_Down_Land_Mines {
    public const nint radius = 0x1318; // int32
    public const nint proximity_threshold = 0x131C; // float32
    public const nint damage = 0x1320; // float32
    public const nint activation_delay = 0x1324; // float32
    public const nint bActivated = 0x1328; // bool
    public const nint m_Timer = 0x1330; // CountdownTimer
}

public static class CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Burn {
    public const nint shard_dps = 0x1318; // int32
    public const nint shard_move_slow_pct = 0x131C; // int32
    public const nint shard_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Thinker {
    public const nint m_vPathDir = 0x1318; // Vector
    public const nint shard_trail_radius = 0x1324; // int32
    public const nint shard_debuff_linger_duration = 0x1328; // float32
    public const nint shard_interval = 0x132C; // float32
}

public static class CDOTA_Modifier_Spectre_Arcana_Kill_Effect {
    public const nint m_nCasterFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Spectre_Desolate {
    public const nint bonus_damage = 0x1318; // int32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Spectre_Desolate_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Spectre_Dispersion {
    public const nint damage_reflection_pct = 0x1318; // int32
    public const nint min_radius = 0x131C; // int32
    public const nint max_radius = 0x1320; // int32
    public const nint activation_bonus_pct = 0x1324; // int32
    public const nint m_flLastDispersionPulseEffectTime = 0x1328; // GameTime_t
    public const nint m_fDamageCounter = 0x132C; // float32
    public const nint m_fLastTime = 0x1330; // float32
}

public static class CDOTA_Modifier_Spectre_Haunt {
    public const nint m_bRealityApplied = 0x1318; // bool
    public const nint m_fStartAttackTime = 0x131C; // GameTime_t
    public const nint hTarget = 0x1320; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Spectre_SpectralDagger {
    public const nint path_radius = 0x1318; // int32
    public const nint hero_path_duration = 0x131C; // float32
    public const nint m_vLastPosition = 0x1320; // Vector
}

public static class CDOTA_Modifier_Spectre_SpectralDaggerInPath {
    public const nint bonus_movespeed = 0x1318; // int32
    public const nint m_hTrackingTarget = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Spectre_SpectralDaggerPath {
    public const nint m_hUnitsInPath = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint path_radius = 0x1348; // int32
    public const nint vision_radius = 0x134C; // int32
    public const nint dagger_radius = 0x1350; // int32
    public const nint buff_persistence = 0x1354; // float32
    public const nint dagger_grace_period = 0x1358; // float32
    public const nint dagger_path_duration = 0x135C; // float32
}

public static class CDOTA_Modifier_Spell_Prism {
    public const nint bonus_all_stats = 0x1318; // int32
    public const nint bonus_cooldown = 0x131C; // int32
    public const nint mana_regen = 0x1320; // float32
}

public static class CDOTA_Modifier_Spider_Legs {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint turn_rate = 0x131C; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_Bulldoze {
    public const nint movement_speed = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint damage_barrier = 0x1320; // float32
    public const nint m_flCurrentBarrier = 0x1324; // float32
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarkness {
    public const nint movement_speed = 0x1318; // int32
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessTarget {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_iChargeTargetEntityIndex = 0x131C; // CEntityIndex
}

public static class CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessVision {
    public const nint m_nFXIndex = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_EmpoweringHaste {
    public const nint bonus_movespeed_pct_self = 0x1318; // int32
    public const nint bonus_movespeed_pct_allies = 0x131C; // int32
    public const nint bonus_movespeed_pct_extra = 0x1320; // int32
    public const nint duration = 0x1324; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_EmpoweringHasteAura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_GreaterBash {
    public const nint chance_pct = 0x1318; // int32
    public const nint damage = 0x131C; // float32
    public const nint movespeed_duration = 0x1320; // float32
}

public static class CDOTA_Modifier_SpiritBreaker_GreaterBash_Speed {
    public const nint bonus_movespeed_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_NetherStrike {
    public const nint damage = 0x1318; // int32
    public const nint m_bStrikeLanded = 0x131C; // bool
    public const nint m_vCastLocation = 0x1320; // Vector
    public const nint m_hTarget = 0x132C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_SpiritBreaker_NetherStrike_Vision {
    public const nint invis_threshold_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_PlanarPocket {
    public const nint m_hRedirectAbility = 0x1318; // CHandle< CBaseEntity >
    public const nint nRedirectTick = 0x131C; // GameTick_t
}

public static class CDOTA_Modifier_SpiritBreaker_PlanarPocketAura {
    public const nint m_bHasActivated = 0x1318; // bool
    public const nint radius = 0x131C; // int32
    public const nint magic_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_SpiritBreaker_SpecialAttack {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Spirit_Bear_Attack_Damage {
    public const nint bear_bat = 0x1318; // float32
    public const nint bear_magic_resistance = 0x131C; // int32
    public const nint bonus_bear_hp = 0x1320; // int32
    public const nint bear_movespeed = 0x1324; // int32
    public const nint bonus_bear_armor = 0x1328; // int32
    public const nint hp_gain_per_druid_level = 0x132C; // int32
    public const nint damage_gain_per_druid_level = 0x1330; // int32
}

public static class CDOTA_Modifier_Spirit_Gem {
    public const nint m_flOriginalModelScale = 0x1318; // float32
    public const nint m_nHealthBarOffsetOverride = 0x131C; // int32
    public const nint m_nFXStackIndex = 0x1320; // ParticleIndex_t
    public const nint m_fScaleGainPerGem = 0x1324; // float32
    public const nint m_nLevel = 0x1328; // int32
}

public static class CDOTA_Modifier_Spring2021_DefusalBomb {
    public const nint BOMB_DURATION = 0x1318; // float32
    public const nint BOMB_FAST_TICK_START = 0x131C; // float32
    public const nint BOMB_DEFAULT_TICK = 0x1320; // float32
}

public static class CDOTA_Modifier_Spring2021_TowerDeathRing_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_bWindingUp = 0x1324; // bool
    public const nint m_ViewerTimer = 0x1328; // CountdownTimer
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1360; // int32
    public const nint radius = 0x1364; // int32
    public const nint damage = 0x1368; // int32
    public const nint windup_time = 0x136C; // float32
}

public static class CDOTA_Modifier_Stacking_Base {
    public const nint max_stacks = 0x1318; // int32
    public const nint destroy_on_zero_stacks = 0x131C; // bool
    public const nint sub_modifier_forced_duration = 0x1320; // float32
    public const nint m_szSubModifierName = 0x1328; // CUtlString
    public const nint m_pSubModifierKV = 0x1330; // KeyValues*
}

public static class CDOTA_Modifier_Stacking_Multiple_Buff_Base {
    public const nint m_nParentBuffIndex = 0x1318; // int32
}

public static class CDOTA_Modifier_StaffOfWizardry {
    public const nint bonus_intellect = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_ElectricVortex_Pull {
    public const nint m_vDestination = 0x1318; // Vector
    public const nint electric_vortex_pull_distance = 0x1324; // int32
    public const nint electric_vortex_pull_tether_range = 0x1328; // float32
}

public static class CDOTA_Modifier_StormSpirit_ElectricVortex_SelfSlow {
    public const nint electric_vortex_self_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_Electric_Rave {
    public const nint overload_aoe = 0x1318; // int32
    public const nint overload_damage = 0x131C; // int32
    public const nint shard_attack_speed_bonus = 0x1320; // int32
}

public static class CDOTA_Modifier_StormSpirit_Overload {
    public const nint overload_aoe = 0x1318; // int32
    public const nint overload_cast_range = 0x131C; // int32
}

public static class CDOTA_Modifier_StormSpirit_OverloadSlow {
    public const nint overload_move_slow = 0x1318; // int32
    public const nint overload_attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_StormSpirit_Overload_Attack_Speed_Buff {
    public const nint hit_attack_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_StormSpirit_StaticRemnantThinker {
    public const nint static_remnant_radius = 0x1318; // int32
    public const nint static_remnant_damage_radius = 0x131C; // int32
    public const nint static_remnant_damage = 0x1320; // int32
    public const nint static_remnant_delay = 0x1324; // float32
    public const nint m_iSearchRadius = 0x1328; // int32
    public const nint m_iDamageRadius = 0x132C; // int32
}

public static class CDOTA_Modifier_Stormcrafter_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_GodsStrength {
    public const nint gods_strength_damage = 0x1318; // int32
    public const nint bonus_slow_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Sven_GreatCleave {
    public const nint cleave_starting_width = 0x1318; // int32
    public const nint cleave_ending_width = 0x131C; // int32
    public const nint cleave_distance = 0x1320; // int32
    public const nint great_cleave_damage = 0x1324; // int32
    public const nint strength_bonus = 0x1328; // int32
    public const nint m_nLastCleaveRecord = 0x132C; // int16
    public const nint m_nLastCleaveKills = 0x1330; // int32
}

public static class CDOTA_Modifier_Sven_Stormbolt_Hide {
    public const nint m_nHandle = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_Warcry {
    public const nint movespeed = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Sven_Warcry_Aura {
    public const nint shard_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Sven_Warcry_Passive {
    public const nint shard_passive_armor = 0x1318; // int32
    public const nint shard_passive_movespeed = 0x131C; // int32
}

public static class CDOTA_Modifier_TangoHeal {
    public const nint health_regen = 0x1318; // float32
    public const nint superheal = 0x131C; // bool
    public const nint m_fHealingDone = 0x1320; // float32
    public const nint m_sAbilityClassname = 0x1328; // CUtlString
}

public static class CDOTA_Modifier_Techies_LandMine {
    public const nint radius = 0x1328; // int32
    public const nint proximity_threshold = 0x132C; // float32
    public const nint damage = 0x1330; // float32
    public const nint activation_delay = 0x1334; // float32
    public const nint outer_damage = 0x1338; // float32
    public const nint min_distance = 0x133C; // int32
    public const nint bActivated = 0x1340; // bool
    public const nint m_Timer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_Techies_LandMine_Burn {
    public const nint mres_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Scepter {
    public const nint aura_radius = 0x1318; // int32
    public const nint minefield_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Scepter_Aura {
    public const nint aura_radius = 0x1318; // float32
    public const nint scepter_move_damage = 0x131C; // float32
    public const nint scepter_move_amt = 0x1320; // float32
    public const nint minefield_duration = 0x1324; // float32
    public const nint m_flMoveAmount = 0x1328; // float32
    public const nint m_vLastPosition = 0x132C; // Vector
}

public static class CDOTA_Modifier_Techies_Minefield_Sign_Thinker {
    public const nint aura_radius = 0x1318; // int32
    public const nint trigger_radius = 0x131C; // float32
    public const nint minefield_duration = 0x1320; // float32
    public const nint m_bTriggered = 0x1324; // bool
}

public static class CDOTA_Modifier_Techies_ReactiveTazer {
    public const nint bonus_ms = 0x1320; // int32
    public const nint stun_radius = 0x1324; // int32
    public const nint stun_duration = 0x1328; // float32
    public const nint damage_percent = 0x132C; // int32
    public const nint m_nDamageRemaining = 0x1330; // int32
}

public static class CDOTA_Modifier_Techies_RemoteMine {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint radius_scepter = 0x1330; // int32
    public const nint damage_scepter = 0x1334; // int32
    public const nint vision_radius = 0x1338; // int32
    public const nint vision_duration = 0x133C; // float32
    public const nint model_scale = 0x1340; // int32
    public const nint bExploding = 0x1344; // bool
}

public static class CDOTA_Modifier_Techies_StasisTrap {
    public const nint activation_radius = 0x1328; // int32
    public const nint stun_radius = 0x132C; // int32
    public const nint stun_duration = 0x1330; // float32
    public const nint explode_delay = 0x1334; // float32
    public const nint activation_time = 0x1338; // float32
    public const nint m_bActivated = 0x133C; // bool
    public const nint m_bTriggered = 0x133D; // bool
}

public static class CDOTA_Modifier_Techies_StickyBombThrow {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_flPredictedTotalTime = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_flCurrentTimeHoriz = 0x132C; // float32
    public const nint m_flCurrentTimeVert = 0x1330; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1334; // bool
    public const nint m_bDamageApplied = 0x1335; // bool
    public const nint m_bTargetTeleported = 0x1336; // bool
    public const nint m_vHorizontalVelocity = 0x1338; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1344; // Vector
    public const nint m_flInitialVelocityZ = 0x1350; // float32
    public const nint m_bDone = 0x1354; // bool
    public const nint radius = 0x1358; // int32
}

public static class CDOTA_Modifier_Techies_StickyBomb_Chase {
    public const nint acceleration = 0x1318; // int32
    public const nint m_nTeamNumber = 0x131C; // int32
    public const nint speed = 0x1320; // float32
    public const nint pre_chase_time = 0x1324; // float32
    public const nint m_hAttachTarget = 0x1328; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x132C; // Vector
    public const nint m_MoveTime = 0x1338; // CountdownTimer
}

public static class CDOTA_Modifier_Techies_StickyBomb_Countdown {
    public const nint m_vLastLoc = 0x1318; // Vector
    public const nint m_hAttachTarget = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Techies_StickyBomb_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_StickyBomb_Slow_Secondary {
    public const nint secondary_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Techies_Suicide_Leap {
    public const nint m_vLoc = 0x1318; // Vector
    public const nint m_flPredictedTotalTime = 0x1324; // float32
    public const nint m_vStartPosition = 0x1328; // Vector
    public const nint m_flCurrentTimeHoriz = 0x1334; // float32
    public const nint m_flCurrentTimeVert = 0x1338; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x133C; // bool
    public const nint m_bDamageApplied = 0x133D; // bool
    public const nint m_bTargetTeleported = 0x133E; // bool
    public const nint m_vHorizontalVelocity = 0x1340; // Vector
    public const nint m_vLastKnownTargetPosition = 0x134C; // Vector
    public const nint m_flInitialVelocityZ = 0x1358; // float32
}

public static class CDOTA_Modifier_Techies_Suicide_RespawnTime {
    public const nint m_nSuicideKillCount = 0x1318; // int32
}

public static class CDOTA_Modifier_Teleporting {
    public const nint m_fStartTime = 0x1338; // float32
    public const nint m_iszPortalLoopAppear = 0x133C; // char[260]
    public const nint m_iszPortalLoopDisappear = 0x1440; // char[260]
    public const nint m_iszHeroLoopAppear = 0x1544; // char[260]
    public const nint m_iszHeroLoopDisappear = 0x1648; // char[260]
    public const nint m_bSkipTeleportAnim = 0x174C; // bool
    public const nint m_bPlayingCoopAnim = 0x174D; // bool
    public const nint m_bIsPlayingTauntGesture = 0x174E; // bool
    public const nint m_fChannelTime = 0x1750; // float32
    public const nint m_vStart = 0x1754; // Vector
    public const nint m_vEnd = 0x1760; // Vector
}

public static class CDOTA_Modifier_TemplarAssassin_Meld {
    public const nint bonus_damage = 0x1318; // int32
    public const nint launched_attack = 0x131C; // bool
    public const nint m_hTarget = 0x1320; // CHandle< CBaseEntity >
    public const nint m_nAttackRecord = 0x1324; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_MeldArmor {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Meld_Animation {
    public const nint launched_attack = 0x1318; // bool
}

public static class CDOTA_Modifier_TemplarAssassin_PsiBlades {
    public const nint bonus_attack_range = 0x1318; // int32
    public const nint attack_spill_range = 0x131C; // float32
    public const nint attack_spill_width = 0x1320; // int32
    public const nint attack_spill_pct = 0x1324; // int32
    public const nint attack_spill_penalty = 0x1328; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_PsiBlades_Slow {
    public const nint value = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_RefractionAbsorb {
    public const nint damage_threshold = 0x1318; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_RefractionDamage {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint bonus_damage = 0x1330; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Refraction_Holdout {
    public const nint bonus_damage = 0x1318; // int32
    public const nint damage_absorb = 0x131C; // int32
    public const nint m_flDamageAbsorbed = 0x1320; // float32
}

public static class CDOTA_Modifier_TemplarAssassin_Trap {
    public const nint bonus_vision = 0x1328; // int32
}

public static class CDOTA_Modifier_TemplarAssassin_Trap_Slow {
    public const nint movement_speed_min = 0x1318; // int32
    public const nint movement_speed_max = 0x131C; // int32
    public const nint extra_damage = 0x1320; // int32
    public const nint trap_max_charge_duration = 0x1324; // float32
    public const nint min_silence_duration = 0x1328; // float32
    public const nint max_silence_duration = 0x132C; // float32
    public const nint stage = 0x1330; // float32
    public const nint flDamagePerTick = 0x1334; // float32
    public const nint bExtraDamage = 0x1338; // bool
}

public static class CDOTA_Modifier_Tenderizer_Weaken {
    public const nint weaken_per_hit = 0x1338; // int32
}

public static class CDOTA_Modifier_Terrorblade_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
    public const nint m_bFlail = 0x1319; // bool
}

public static class CDOTA_Modifier_Terrorblade_Demon_Zeal {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
    public const nint berserk_bonus_armor = 0x1320; // int32
    public const nint reflection_pct = 0x1324; // int32
    public const nint melee_bonus = 0x1328; // int32
}

public static class CDOTA_Modifier_Terrorblade_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Terrorblade_Metamorphosis {
    public const nint base_attack_time = 0x1318; // float32
    public const nint bonus_range = 0x131C; // int32
    public const nint m_iOriginalAttackCapabilities = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint speed_loss = 0x1328; // int32
    public const nint attack_projectile_speed_bonus = 0x132C; // int32
    public const nint m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
    public const nint m_iszOriginalRangedAttackEffect = 0x1338; // CUtlSymbolLarge
}

public static class CDOTA_Modifier_Terrorblade_Metamorphosis_Fear_Thinker {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint scepter_speed = 0x1340; // int32
    public const nint scepter_radius = 0x1344; // int32
    public const nint m_bFirstThink = 0x1348; // bool
}

public static class CDOTA_Modifier_Terrorblade_Reflection_Invulnerability {
    public const nint hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Terrorblade_Reflection_Slow {
    public const nint move_slow = 0x1318; // int32
    public const nint attack_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Third_Eye {
    public const nint truesight_radius = 0x1318; // int32
    public const nint bonus_vision = 0x131C; // int32
    public const nint bonus_all_stats = 0x1320; // int32
}

public static class CDOTA_Modifier_Tidehunter_AnchorSmash {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Tidehunter_AnchorSmash_Caster {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tidehunter_Anchor_Unit {
    public const nint chain_length = 0x1318; // int32
    public const nint attacks_to_destroy = 0x131C; // int32
}

public static class CDOTA_Modifier_Tidehunter_DeadInTheWater {
    public const nint max_movement_speed = 0x1318; // int32
    public const nint chain_length = 0x131C; // int32
    public const nint m_hAnchor = 0x1320; // CHandle< CBaseEntity >
    public const nint m_bDragging = 0x1324; // bool
}

public static class CDOTA_Modifier_Tidehunter_Gush {
    public const nint movement_speed = 0x1318; // int32
    public const nint negative_armor = 0x131C; // float32
}

public static class CDOTA_Modifier_Tidehunter_KrakenShell {
    public const nint m_iDamageTaken = 0x1318; // int32
    public const nint damage_reduction = 0x131C; // int32
    public const nint damage_cleanse = 0x1320; // int32
    public const nint bonus_reduction_per_stack = 0x1324; // int32
    public const nint damage_reset_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_Tidehunter_Ravage {
    public const nint m_flStartZ = 0x1318; // float32
    public const nint m_flCurTime = 0x131C; // float32
    public const nint m_bDamageApplied = 0x1320; // bool
    public const nint damage = 0x1324; // float32
}

public static class CDOTA_Modifier_Tidehunter_SmashAttack {
    public const nint attack_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tinker_Defensive_Matrix {
    public const nint damage_absorb = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
    public const nint cooldown_reduction = 0x1320; // int32
    public const nint m_bStartedTimer = 0x1324; // bool
    public const nint m_nDamageAbsorbed = 0x1328; // int32
}

public static class CDOTA_Modifier_Tinker_LaserBlind {
    public const nint miss_rate = 0x1318; // int32
    public const nint max_health_removed = 0x131C; // float32
}

public static class CDOTA_Modifier_Tinker_MarchOfTheMachinesThinker {
    public const nint collision_radius = 0x1318; // int32
    public const nint radius = 0x131C; // int32
    public const nint distance = 0x1320; // int32
    public const nint distance_scepter = 0x1324; // int32
    public const nint speed = 0x1328; // int32
    public const nint machines_per_sec = 0x132C; // int32
    public const nint m_vDir = 0x1330; // Vector
}

public static class CDOTA_Modifier_Tinker_Rearmor {
    public const nint magic_resistance = 0x1318; // int32
}

public static class CDOTA_Modifier_Tinker_Warp_Grenade {
    public const nint range_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Avalanche {
    public const nint m_pHeroesHit = 0x1318; // CUtlVector< CDOTA_BaseNPC* >
    public const nint radius = 0x1330; // int32
    public const nint total_duration = 0x1334; // float32
    public const nint stun_duration = 0x1338; // float32
    public const nint tick_count = 0x133C; // int32
    public const nint toss_multiplier = 0x1340; // float32
    public const nint m_damage = 0x1344; // int32
    public const nint m_nTicks = 0x1348; // int32
}

public static class CDOTA_Modifier_Tiny_CraggyExterior {
    public const nint stun_chance = 0x1318; // int32
    public const nint stun_duration = 0x131C; // float32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Tiny_Grow {
    public const nint bonus_armor = 0x1318; // int32
    public const nint attack_speed_reduction = 0x131C; // int32
    public const nint bonus_damage = 0x1320; // int32
    public const nint tree_bonus_damage_pct = 0x1324; // float32
    public const nint slow_resistance = 0x1328; // float32
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tiny_Toss {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_flPredictedTotalTime = 0x131C; // float32
    public const nint m_vStartPosition = 0x1320; // Vector
    public const nint m_flCurrentTimeHoriz = 0x132C; // float32
    public const nint m_flCurrentTimeVert = 0x1330; // float32
    public const nint m_bHorizontalMotionInterrupted = 0x1334; // bool
    public const nint m_bDamageApplied = 0x1335; // bool
    public const nint m_bTargetTeleported = 0x1336; // bool
    public const nint m_vHorizontalVelocity = 0x1338; // Vector
    public const nint m_vLastKnownTargetPosition = 0x1344; // Vector
    public const nint m_flInitialVelocityZ = 0x1350; // float32
    public const nint m_bDone = 0x1354; // bool
    public const nint radius = 0x1358; // int32
    public const nint toss_damage = 0x135C; // int32
}

public static class CDOTA_Modifier_Tiny_TossTree_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_TossTree_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Tree_Channel {
    public const nint tree_grab_radius = 0x1318; // int32
    public const nint splash_radius = 0x131C; // int32
    public const nint speed = 0x1320; // int32
    public const nint interval = 0x1324; // float32
    public const nint m_vPos = 0x1328; // Vector
}

public static class CDOTA_Modifier_Tiny_Tree_Channel_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Tiny_Tree_Grab {
    public const nint attack_count = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_buildings = 0x1320; // int32
    public const nint stun_duration = 0x1324; // float32
    public const nint attack_range = 0x1328; // int32
    public const nint m_nOriginalAttackCapability = 0x132C; // int32
    public const nint bat_increase = 0x1330; // float32
    public const nint speed_reduction = 0x1334; // int32
    public const nint m_nBonusAttackRange = 0x1338; // int32
    public const nint m_hStolenTree = 0x133C; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nFXAttackIndex = 0x1344; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tornado_Tempest {
    public const nint near_radius = 0x1318; // int32
    public const nint near_damage = 0x131C; // int32
    public const nint far_radius = 0x1320; // int32
    public const nint far_damage = 0x1324; // int32
    public const nint tick_rate = 0x1328; // float32
}

public static class CDOTA_Modifier_Tornado_Tempest_Debuff {
    public const nint movespeed_slow = 0x1318; // int32
    public const nint attackspeed_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Tower_Armor_Bonus {
    public const nint bonus_armor = 0x1318; // int32
}

public static class CDOTA_Modifier_Tower_Aura {
    public const nint bonus_armor = 0x1318; // int32
    public const nint m_bOverrideArmor = 0x131C; // bool
    public const nint hp_regen = 0x1320; // float32
    public const nint m_bOverrideRegen = 0x1324; // bool
    public const nint m_nRadius = 0x1328; // int32
}

public static class CDOTA_Modifier_Tower_Aura_Bonus {
    public const nint bonus_armor = 0x1318; // int32
    public const nint hp_regen = 0x131C; // float32
    public const nint m_bOverrideArmor = 0x1320; // bool
    public const nint m_bOverrideRegen = 0x1321; // bool
    public const nint m_bSentFirstRefresh = 0x1322; // bool
}

public static class CDOTA_Modifier_Track_Order_Issuer {
    public const nint m_nIssuerPlayerIndex = 0x1318; // PlayerID_t
    public const nint m_bTeamFirstCourier = 0x131C; // bool
    public const nint m_nPlayerCommandTime = 0x1320; // GameTime_t[24]
}

public static class CDOTA_Modifier_Treant_Bonus {
    public const nint treant_hp_bonus = 0x1318; // int32
    public const nint treant_damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_EyesInTheForest_Thinker {
    public const nint vision_aoe = 0x1318; // float32
    public const nint m_Tree = 0x1320; // CDOTA_Tree*
    public const nint m_hTree = 0x1328; // CHandle< CBaseEntity >
    public const nint m_nFXIndex = 0x132C; // ParticleIndex_t
    public const nint m_bUpgradedVision = 0x1330; // bool
}

public static class CDOTA_Modifier_Treant_Large_Bonus {
    public const nint treant_large_hp_bonus = 0x1318; // int32
    public const nint treant_large_damage_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_LeechSeed {
    public const nint damage_interval = 0x1318; // float32
    public const nint leech_damage = 0x131C; // int32
    public const nint movement_slow = 0x1320; // int32
    public const nint radius = 0x1324; // int32
    public const nint projectile_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Treant_LeechSeed_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Treant_Lifebomb_Explode {
    public const nint flStartTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Treant_LivingArmor {
    public const nint heal_per_second = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Creation_Thinker {
    public const nint creation_interval = 0x1318; // float32
    public const nint vines_duration = 0x131C; // float32
    public const nint vine_spawn_interval = 0x1320; // int32
    public const nint m_vInitialLoc = 0x1324; // Vector
    public const nint m_vFinalLoc = 0x1330; // Vector
    public const nint m_iVineCount = 0x133C; // int32
    public const nint m_iVinesIndex = 0x1340; // int32
    public const nint m_bFoundTree = 0x1344; // bool
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Damage {
    public const nint movement_slow = 0x1318; // int32
    public const nint damage_per_second = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
}

public static class CDOTA_Modifier_Treant_NaturesGrasp_Latch_Thinker {
    public const nint latch_range = 0x1318; // int32
    public const nint latch_vision = 0x131C; // int32
    public const nint initial_latch_delay = 0x1320; // float32
    public const nint m_bBonus = 0x132C; // bool
}

public static class CDOTA_Modifier_Treant_NaturesGuise {
    public const nint m_RevealTimer = 0x1318; // CountdownTimer
    public const nint m_InvisAttackTimer = 0x1330; // CountdownTimer
    public const nint m_CooldownTimer = 0x1348; // CountdownTimer
}

public static class CDOTA_Modifier_Treant_NaturesGuise_Root {
    public const nint m_flEntangleDamage = 0x1318; // float32
}

public static class CDOTA_Modifier_Treant_NaturesGuise_Tree_Walking {
    public const nint movement_bonus = 0x1318; // int32
    public const nint regen_amp = 0x131C; // int32
}

public static class CDOTA_Modifier_Treant_Overgrowth {
    public const nint damage = 0x1318; // float32
    public const nint mute = 0x131C; // int32
    public const nint bPurgable = 0x1320; // bool
}

public static class CDOTA_Modifier_TrollWarlord_BattleTrance {
    public const nint movement_speed = 0x1318; // int32
    public const nint attack_speed = 0x131C; // int32
    public const nint lifesteal = 0x1320; // int32
    public const nint m_hTarget = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_TrollWarlord_BerserkersRage {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_range = 0x131C; // int32
    public const nint bonus_hp = 0x1320; // int32
    public const nint bonus_armor = 0x1324; // int32
    public const nint ensnare_chance = 0x1328; // int32
    public const nint ensnare_duration = 0x132C; // float32
    public const nint base_attack_time = 0x1330; // float32
    public const nint m_iOriginalAttackCapabilities = 0x1334; // int32
}

public static class CDOTA_Modifier_TrollWarlord_BerserkersRage_Maim {
    public const nint maim_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_Fervor {
    public const nint attack_speed = 0x1318; // int32
    public const nint max_stacks = 0x131C; // int32
    public const nint extra_attack_chance_per_stack = 0x1320; // int32
    public const nint base_chance = 0x1324; // int32
    public const nint m_hUnit = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_TrollWarlord_WhirlingAxes_Blind {
    public const nint blind_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_WhirlingAxes_Slow {
    public const nint movement_speed = 0x1318; // int32
}

public static class CDOTA_Modifier_TrollWarlord_Whirling_Axes_Melee {
    public const nint damage = 0x1318; // int32
    public const nint hit_radius = 0x131C; // int32
    public const nint axe_movement_speed = 0x1320; // int32
    public const nint whirl_duration = 0x1324; // float32
    public const nint max_range = 0x1328; // float32
    public const nint blind_duration = 0x132C; // float32
    public const nint m_flRotation = 0x1330; // float32
    public const nint m_flAxeRadius = 0x1334; // float32
    public const nint m_flDieTime = 0x1338; // GameTime_t
    public const nint m_bPiercesMagicImmunity = 0x133C; // float32
    public const nint m_nSwapIndex = 0x1340; // int32
    public const nint m_bReturning = 0x1344; // bool
    public const nint m_nAxeFXIndex = 0x1348; // ParticleIndex_t[2]
    public const nint m_nHeroesHitForRelic = 0x1350; // int32
    public const nint hitEntities = 0x1358; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hAxes = 0x1370; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Troll_Warlord_Rampage {
    public const nint attack_speed = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Truesight_Aura {
    public const nint m_nAuraRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_FrozenSigil {
    public const nint aghs_shard_move_slow = 0x1318; // int32
    public const nint aghs_shard_damage = 0x131C; // int32
    public const nint attack_slow = 0x1320; // int32
    public const nint turn_rate_slow = 0x1324; // int32
}

public static class CDOTA_Modifier_Tusk_FrozenSigil_Aura {
    public const nint sigil_radius = 0x1318; // int32
    public const nint m_iIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Tusk_SnowballMeteor_Burn {
    public const nint m_flDamagePerSecond = 0x1318; // float32
}

public static class CDOTA_Modifier_Tusk_SnowballMeteor_Land {
    public const nint m_vDir = 0x1318; // Vector
    public const nint travel_speed = 0x1324; // int32
    public const nint travel_distance = 0x1328; // int32
    public const nint vision_distance = 0x132C; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team {
    public const nint bonus_damage = 0x1318; // int32
    public const nint slow_duration = 0x131C; // float32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow {
    public const nint attack_speed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow_Aura {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Aura {
    public const nint m_iIndex = 0x1318; // ParticleIndex_t
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Tusk_Tag_Team_Slow {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusKick_AirTime {
    public const nint hp_threshold = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint m_flEndTime = 0x1344; // float32
    public const nint push_length = 0x1348; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusKick_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusPunch {
    public const nint crit_multiplier = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint air_time = 0x1320; // float32
    public const nint slow_duration = 0x1324; // float32
    public const nint m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    public const nint m_hTarget = 0x1330; // CHandle< CBaseEntity >
    public const nint m_bWalrusPunch = 0x1334; // bool
    public const nint m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1350; // ParticleIndex_t
    public const nint m_nAttackRecord = 0x1354; // int32
}

public static class CDOTA_Modifier_Tusk_WalrusPunch_AirTime {
    public const nint hp_threshold = 0x1318; // int32
    public const nint m_flStartZ = 0x131C; // float32
    public const nint m_flCurTime = 0x1320; // float32
    public const nint m_flOldPitch = 0x1324; // float32
    public const nint m_qRotation = 0x1328; // QAngle
    public const nint m_nRotations = 0x1334; // int32
    public const nint m_vDirection = 0x1338; // Vector
    public const nint m_flEndTime = 0x1344; // float32
    public const nint air_time = 0x1348; // float32
}

public static class CDOTA_Modifier_Tusk_WalrusPunch_Slow {
    public const nint move_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_TutorialNPCBlocker {
    public const nint m_vecStart = 0x1318; // Vector
    public const nint m_vecEnd = 0x1324; // Vector
    public const nint m_vecCenter = 0x1330; // Vector
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_bHidden = 0x1340; // bool
}

public static class CDOTA_Modifier_TutorialNPCBlocker_Thinker {
    public const nint m_vecStart = 0x1318; // Vector
    public const nint m_vecEnd = 0x1324; // Vector
    public const nint m_flRadius = 0x1330; // float32
    public const nint m_bHidden = 0x1334; // bool
}

public static class CDOTA_Modifier_Tutorial_ForceAnimation {
    public const nint m_nActivity = 0x1318; // int32
    public const nint m_bLoop = 0x131C; // bool
    public const nint m_bFacePlayer = 0x131D; // bool
}

public static class CDOTA_Modifier_Tutorial_HideNPC {
    public const nint m_bRemoveOnDeath = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_LastHitHelper {
    public const nint m_bTargetFriendlies = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_LastHittable {
    public const nint m_bIsFriend = 0x1318; // bool
}

public static class CDOTA_Modifier_Tutorial_SpeechBubble {
    public const nint m_bFacePlayer = 0x1318; // bool
}

public static class CDOTA_Modifier_Twin_Gate_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
    public const nint m_fPortalRadius = 0x131C; // float32
    public const nint m_nChannelFX = 0x1320; // ParticleIndex_t
    public const nint m_nChannelCount = 0x1324; // int32
}

public static class CDOTA_Modifier_Twin_Gate_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint m_hPortal = 0x132C; // CHandle< CBaseEntity >
    public const nint m_hOtherPortal = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x1334; // Vector
    public const nint m_flTotalTime = 0x1340; // float32
    public const nint m_flElapsedTimePortion = 0x1344; // float32
    public const nint animation_rate = 0x1348; // float32
    public const nint stop_distance = 0x134C; // int32
}

public static class CDOTA_Modifier_Underlord_Fear {
    public const nint m_vOriginal = 0x1318; // Vector
}

public static class CDOTA_Modifier_Underlord_Portal_Buff {
    public const nint damage_reduction = 0x1318; // int32
    public const nint bonus_ms = 0x131C; // int32
}

public static class CDOTA_Modifier_Underlord_Portal_FX {
    public const nint m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
    public const nint m_fPortalRadius = 0x131C; // float32
    public const nint m_nChannelFX = 0x1320; // ParticleIndex_t
    public const nint m_nChannelCount = 0x1324; // int32
    public const nint m_nCountdownFX = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Underlord_Portal_Warp_Channel {
    public const nint m_nfxTargetTp = 0x1318; // ParticleIndex_t
    public const nint m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
    public const nint m_nfxAmbientFx = 0x1320; // ParticleIndex_t
    public const nint m_nfxPortal1 = 0x1324; // ParticleIndex_t
    public const nint m_nfxPortal2 = 0x1328; // ParticleIndex_t
    public const nint m_hPortal = 0x1334; // CHandle< CBaseEntity >
    public const nint m_hOtherPortal = 0x1338; // CHandle< CBaseEntity >
    public const nint m_vStartPosition = 0x133C; // Vector
    public const nint m_flTotalTime = 0x1348; // float32
    public const nint m_flElapsedTimePortion = 0x134C; // float32
    public const nint animation_rate = 0x1350; // float32
    public const nint stop_distance = 0x1354; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Buff {
    public const nint str_steal = 0x1318; // int32
    public const nint str_scale_up = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Debuff {
    public const nint str_steal = 0x1318; // int32
}

public static class CDOTA_Modifier_Undying_Decay_Shard {
    public const nint shard_buff_duration = 0x1318; // float32
    public const nint m_vecStackExpirationTimes = 0x1320; // CUtlVector< GameTime_t >
}

public static class CDOTA_Modifier_Undying_FleshGolem {
    public const nint str_percentage = 0x1318; // int32
    public const nint movement_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_FleshGolem_PlagueAura {
    public const nint slow = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint tick_rate = 0x1320; // float32
}

public static class CDOTA_Modifier_Undying_FleshGolem_Slow {
    public const nint damage_amp = 0x1318; // int32
    public const nint slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Bunker {
    public const nint bunker_heal_pct = 0x1318; // float32
    public const nint tombstone_grab_radius = 0x131C; // float32
    public const nint tombstone_stun_penalty = 0x1320; // float32
    public const nint m_hLoadedUnit = 0x1324; // CHandle< CBaseEntity >
    public const nint m_nBunkerEnterFXIndex = 0x1328; // ParticleIndex_t
}

public static class CDOTA_Modifier_Undying_Tombstone_HP {
    public const nint tombstone_health = 0x1318; // int32
    public const nint zombie_damage_interval = 0x131C; // int32
    public const nint m_nDamageCounter = 0x1320; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Aura {
    public const nint radius = 0x1318; // int32
    public const nint zombie_interval = 0x131C; // float32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathlust {
    public const nint bonus_move_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike {
    public const nint radius = 0x1318; // int32
    public const nint health_threshold_pct = 0x131C; // float32
    public const nint duration = 0x1320; // float32
    public const nint m_hTombstoneSourceAbility = 0x1324; // CHandle< CDOTABaseAbility >
    public const nint m_hChaseUnit = 0x1328; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow {
    public const nint slow = 0x1318; // int32
    public const nint m_flDecrementTime = 0x131C; // float32
}

public static class CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Unwavering_Condition {
    public const nint max_health = 0x1318; // int32
    public const nint magic_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_UpgradedBarricade {
    public const nint armor_bonus_per_upgrade = 0x1318; // int32
    public const nint hp_bonus_per_upgrade = 0x131C; // int32
}

public static class CDOTA_Modifier_UpgradedMortar {
    public const nint bonus_per_upgrade = 0x1318; // int32
}

public static class CDOTA_Modifier_UpheavalUrn_Reincarnation {
    public const nint reincarnate_time = 0x1318; // float32
    public const nint m_fLastReincarnationTime = 0x131C; // GameTime_t
}

public static class CDOTA_Modifier_UrnUpheaval {
    public const nint m_iSlow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Earthshock {
    public const nint movement_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Earthshock_Move {
    public const nint hop_duration = 0x1318; // float32
    public const nint hop_height = 0x131C; // int32
    public const nint hop_distance = 0x1320; // int32
    public const nint m_flStartZ = 0x1324; // float32
    public const nint m_flCurTime = 0x1328; // float32
    public const nint m_flJumpDuration = 0x132C; // float32
    public const nint m_flJumpHeight = 0x1330; // float32
    public const nint m_vTargetHorizontalDirection = 0x1334; // Vector
}

public static class CDOTA_Modifier_Ursa_Enrage {
    public const nint damage_reduction = 0x1318; // int32
    public const nint status_resistance = 0x131C; // int32
}

public static class CDOTA_Modifier_Ursa_Fury_Swipes {
    public const nint damage_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Fury_Swipes_Damage_Increase {
    public const nint damage_per_stack = 0x1318; // int32
}

public static class CDOTA_Modifier_Ursa_Overpower {
    public const nint attack_speed_bonus_pct = 0x1318; // int32
    public const nint slow_resist = 0x131C; // int32
}

public static class CDOTA_Modifier_Vengeances_Shadow_Illusions {
    public const nint m_bLeftoverHybrid = 0x1318; // bool
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura_Effect {
    public const nint bonus_base_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Aura_Illusion {
    public const nint hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura_Effect {
    public const nint bonus_damage_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Hybrid_Special {
    public const nint m_bLeftoverHybrid = 0x1318; // bool
    public const nint scepter_illusion_ms_bonus_pct = 0x131C; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_Nether_Swap_DamageReduction {
    public const nint damage_reduction = 0x1318; // float32
    public const nint nFXIndex = 0x131C; // ParticleIndex_t
    public const nint damage = 0x1320; // float32
    public const nint m_nDamageAbsorbed = 0x1324; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_WaveOfTerror {
    public const nint armor_reduction = 0x1318; // int32
    public const nint attack_reduction = 0x131C; // int32
    public const nint damage_reduction_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_VengefulSpirit_WaveOfTerror_Buff {
    public const nint bonus_damage = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint steal_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Venom_Gland_Debuff {
    public const nint damage = 0x1318; // int32
    public const nint degen = 0x131C; // int32
}

public static class CDOTA_Modifier_Venomancer_Latent_Poison {
    public const nint duration_damage = 0x1318; // int32
    public const nint movement_slow = 0x131C; // int32
    public const nint explosion_damage = 0x1320; // int32
    public const nint explosion_stun_duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlaguePrimary {
    public const nint health_damage = 0x1318; // float32
    public const nint debuff_radius = 0x131C; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlagueSecondary {
    public const nint health_damage = 0x1318; // float32
    public const nint attack_slow = 0x131C; // float32
    public const nint movement_slow_max = 0x1320; // float32
}

public static class CDOTA_Modifier_Venomancer_NoxiousPlague_Slow {
    public const nint attack_slow = 0x1318; // float32
    public const nint movement_slow_max = 0x131C; // float32
    public const nint debuff_radius = 0x1320; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonNova {
    public const nint damage = 0x1318; // float32
    public const nint magic_resist = 0x131C; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonStingBase {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint m_nTicksRemaining = 0x1320; // int32
    public const nint m_flAttackDamage = 0x1324; // float32
    public const nint hp_regen_reduction = 0x1328; // int32
}

public static class CDOTA_Modifier_Venomancer_PoisonStingWard {
    public const nint m_iDamage = 0x1318; // int32
    public const nint movement_speed = 0x131C; // int32
    public const nint hp_regen_reduction = 0x1320; // int32
    public const nint m_nTicksRemaining = 0x1324; // int32
    public const nint m_flAttackDamage = 0x1328; // float32
}

public static class CDOTA_Modifier_Venomancer_PoisonSting_Applier {
    public const nint duration = 0x1318; // float32
    public const nint damage = 0x131C; // int32
}

public static class CDOTA_Modifier_Venomancer_VenomousGale {
    public const nint movement_slow = 0x1318; // int32
    public const nint tick_damage = 0x131C; // int32
    public const nint tick_interval = 0x1320; // float32
    public const nint duration = 0x1324; // float32
}

public static class CDOTA_Modifier_Viper_BecomeUniversal {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint is_universal = 0x131C; // int32
}

public static class CDOTA_Modifier_Viper_CorrosiveSkin {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint max_range = 0x131C; // int32
}

public static class CDOTA_Modifier_Viper_CorrosiveSkin_Slow {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint damage = 0x131C; // int32
    public const nint effect_multiplier_distance = 0x1320; // int32
    public const nint effect_multiplier = 0x1324; // int32
    public const nint m_bEffectMultiplied = 0x1328; // bool
}

public static class CDOTA_Modifier_Viper_Nethertoxin {
    public const nint min_damage = 0x1318; // int32
    public const nint max_damage = 0x131C; // int32
    public const nint max_duration = 0x1320; // float32
    public const nint attack_slow = 0x1324; // int32
    public const nint m_flDamageInterval = 0x1328; // float32
    public const nint m_flTimeIncrement = 0x132C; // float32
}

public static class CDOTA_Modifier_Viper_Nethertoxin_Thinker {
    public const nint radius = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Viper_Nose_Dive {
    public const nint m_vTargetPos = 0x1318; // Vector
    public const nint m_vStart = 0x1324; // Vector
    public const nint m_flZDelta = 0x1330; // float32
    public const nint radius = 0x1334; // int32
    public const nint corrosive_radius = 0x1338; // int32
    public const nint effect_duration = 0x133C; // float32
    public const nint dive_speed = 0x1340; // int32
    public const nint start_height = 0x1344; // float32
}

public static class CDOTA_Modifier_Viper_Nose_Dive_Effect {
    public const nint movespeed_slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Viper_PoisonAttack {
    public const nint duration = 0x1318; // float32
    public const nint m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Viper_PoisonAttack_Slow {
    public const nint damage = 0x1318; // float32
    public const nint shard_armor_reduction = 0x131C; // int32
    public const nint shard_building_dmg_pct = 0x1320; // int32
    public const nint movement_speed = 0x1324; // int32
    public const nint magic_resistance = 0x1328; // int32
}

public static class CDOTA_Modifier_Viper_ViperStrike_Slow {
    public const nint bonus_movement_speed = 0x1318; // int32
    public const nint bonus_attack_speed = 0x131C; // int32
    public const nint damage = 0x1320; // int32
}

public static class CDOTA_Modifier_Visage_GraveChill_Buff {
    public const nint movespeed_bonus = 0x1318; // int32
    public const nint attackspeed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_GraveChill_Debuff {
    public const nint movespeed_bonus = 0x1318; // int32
    public const nint attackspeed_bonus = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak {
    public const nint damage_reduction = 0x1318; // int32
    public const nint max_layers = 0x131C; // int32
    public const nint minimum_damage = 0x1320; // float32
    public const nint recovery_time = 0x1324; // int32
    public const nint radius = 0x1328; // int32
    public const nint max_damage_reduction = 0x132C; // int32
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t[4]
    public const nint m_nFXIndexB = 0x1340; // ParticleIndex_t
    public const nint vStacks = 0x1348; // CUtlVector< CDOTA_Modifier_Visage_GravekeepersCloak_Stack* >
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak_Secondary {
    public const nint damage_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_Visage_GravekeepersCloak_Stack {
    public const nint m_bIsRecovering = 0x1318; // bool
    public const nint m_nFXIndex = 0x131C; // int32[4]
}

public static class CDOTA_Modifier_Visage_Scepter {
    public const nint m_flReadyTime = 0x1318; // GameTime_t
}

public static class CDOTA_Modifier_Visage_Silent_As_The_Grave {
    public const nint m_bHasMadeAttack = 0x1328; // bool
}

public static class CDOTA_Modifier_Visage_Silent_As_The_Grave_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Visage_SoulAssumption {
    public const nint radius = 0x1318; // int32
    public const nint stack_limit = 0x131C; // int32
    public const nint damage_limit = 0x1320; // int32
    public const nint stack_duration = 0x1324; // float32
    public const nint damage_min = 0x1328; // float32
    public const nint damage_max = 0x132C; // float32
    public const nint m_nFxIndexA = 0x1330; // ParticleIndex_t
    public const nint m_nFxIndexB = 0x1334; // ParticleIndex_t
    public const nint iCur_stack = 0x1338; // int32
    public const nint m_fTotalDamage = 0x1358; // float32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_DamageCharge {
    public const nint familiar_speed = 0x1318; // int32
    public const nint m_nFXIndex = 0x131C; // int32
    public const nint m_nFXIndexB = 0x1320; // int32
    public const nint m_ctTimer = 0x1328; // CountdownTimer
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Buff {
    public const nint hp_regen = 0x1318; // float32
    public const nint stun_radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Thinker {
    public const nint stun_radius = 0x1318; // int32
    public const nint stun_damage = 0x131C; // int32
    public const nint stun_delay = 0x1320; // float32
    public const nint stun_duration = 0x1324; // float32
    public const nint stone_duration = 0x1328; // float32
    public const nint m_iIntervalCount = 0x132C; // int32
}

public static class CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Timer {
    public const nint stone_duration = 0x1318; // float32
    public const nint m_fStartTime = 0x131C; // GameTime_t
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnantThinker {
    public const nint radius = 0x1318; // int32
    public const nint m_vFacingDir = 0x131C; // Vector
    public const nint m_hRemnant = 0x1328; // CHandle< CBaseEntity >
    public const nint m_bTriggered = 0x132C; // bool
    public const nint m_flCurThink = 0x1330; // float32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnantUnit_Truesight {
    public const nint m_nRadius = 0x1318; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_Pull {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint m_nPlayerID = 0x131C; // PlayerID_t
    public const nint m_fMovementSpeed = 0x1320; // float32
    public const nint m_hPullTarget = 0x1324; // CHandle< CDOTA_BaseNPC >
    public const nint think_interval = 0x1328; // float32
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_Unit {
    public const nint m_vFacingDir = 0x1318; // Vector
    public const nint m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nBeamFXIndex = 0x1340; // ParticleIndex_t
    public const nint m_nViewerIDs = 0x1348; // CUtlVector< int32 >
    public const nint remnant_watch_distance = 0x1360; // int32
    public const nint remnant_watch_radius = 0x1364; // int32
    public const nint duration = 0x1368; // float32
    public const nint watch_path_vision_radius = 0x136C; // int32
    public const nint impact_damage = 0x1370; // int32
    public const nint pull_duration = 0x1374; // float32
    public const nint activation_delay = 0x1378; // float32
    public const nint m_bPiercesCreeps = 0x137C; // bool
    public const nint m_hAlreadyHit = 0x1380; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_VoidSpirit_AetherRemnant_WatchThinker {
    public const nint remnant_watch_radius = 0x1318; // int32
    public const nint m_flLastDamageTick = 0x131C; // GameTime_t
    public const nint damage_tick_rate = 0x1320; // float32
    public const nint flDamage = 0x1324; // float32
    public const nint m_bPiercesCreeps = 0x1328; // bool
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Caster {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Debuff {
    public const nint m_nFXStackIndex = 0x1318; // ParticleIndex_t
    public const nint movement_slow_pct = 0x131C; // int32
    public const nint pop_damage = 0x1320; // int32
}

public static class CDOTA_Modifier_VoidSpirit_AstralStep_Intrinsic {
    public const nint ability_chance_pct = 0x1318; // int32
    public const nint attack_chance_pct = 0x131C; // int32
    public const nint pop_damage_delay = 0x1320; // float32
}

public static class CDOTA_Modifier_VoidSpirit_Dissimilate_Phase {
    public const nint m_vFirstPortalPos = 0x1318; // Vector
    public const nint m_vecDestinations = 0x1328; // CUtlVector< Vector >
    public const nint m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
    public const nint m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
    public const nint m_nCurrentDestinationIndex = 0x1370; // int32
    public const nint m_nClosestIndexPosToClick = 0x1374; // int32
    public const nint m_nPortalHeightOffset = 0x1378; // int32
    public const nint m_szAlliesPortalFX = 0x1380; // char*
    public const nint m_szEnemiesPortalFX = 0x1388; // char*
    public const nint m_nPortalRadius = 0x1390; // int32
    public const nint m_nPortalPadding = 0x1394; // int32
    public const nint m_nFinalImpactDamageRadius = 0x1398; // int32
    public const nint m_nFinalImpactFXRadius = 0x139C; // int32
    public const nint destination_fx_radius = 0x13A0; // int32
    public const nint damage_radius = 0x13A4; // int32
    public const nint portals_per_ring = 0x13A8; // int32
    public const nint angle_per_ring_portal = 0x13AC; // int32
    public const nint first_ring_distance_offset = 0x13B0; // int32
    public const nint debuff_duration = 0x13B4; // float32
}

public static class CDOTA_Modifier_VoidSpirit_ResonantPulse_PhysicalBuff {
    public const nint base_absorb_amount = 0x1318; // int32
    public const nint m_nAbsorbRemaining = 0x131C; // int32
    public const nint m_nMaxAbsorb = 0x1320; // int32
}

public static class CDOTA_Modifier_VoidSpirit_ResonantPulse_Ring {
    public const nint m_fLastRadius = 0x1318; // float32
    public const nint m_fCurRadius = 0x131C; // float32
    public const nint m_fLastThink = 0x1320; // GameTime_t
    public const nint m_nFXIndex = 0x1324; // ParticleIndex_t
    public const nint m_EntitiesHit = 0x1328; // CUtlVector< CHandle< CBaseEntity > >
    public const nint speed = 0x1340; // int32
    public const nint radius = 0x1344; // int32
    public const nint damage = 0x1348; // int32
}

public static class CDOTA_Modifier_Voidwalker_Phased {
    public const nint damage = 0x1318; // int32
    public const nint max_damage_duration = 0x131C; // float32
    public const nint attack_range_bonus = 0x1320; // int32
    public const nint m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    public const nint bAttackRange = 0x1340; // bool
    public const nint m_flStartTime = 0x1344; // float32
    public const nint m_flFadeTime = 0x1348; // float32
    public const nint m_flDamageScale = 0x134C; // float32
    public const nint duration = 0x1350; // float32
}

public static class CDOTA_Modifier_Warlock_FatalBonds {
    public const nint m_FatalBondsEntities = 0x1318; // CUtlVector< CHandle< CBaseEntity > >
    public const nint damage_share_percentage = 0x1330; // int32
    public const nint imp_duration = 0x1334; // float32
}

public static class CDOTA_Modifier_Warlock_Golem_Flaming_Fists {
    public const nint damage = 0x1318; // float32
    public const nint radius = 0x131C; // int32
}

public static class CDOTA_Modifier_Warlock_Golem_Permanent_Immolation {
    public const nint aura_radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Golem_Permanent_Immolation_Debuff {
    public const nint aura_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Imp_AutoAttack {
    public const nint m_hBestTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint bonus_hp = 0x131C; // float32
    public const nint bonus_dmg = 0x1320; // float32
    public const nint bonus_movespeed = 0x1324; // float32
}

public static class CDOTA_Modifier_Warlock_Imp_ExplodeThinker {
    public const nint explosion_radius = 0x1318; // float32
    public const nint explosion_dmg = 0x131C; // float32
    public const nint explosion_nonhero_reduce = 0x1320; // float32
}

public static class CDOTA_Modifier_Warlock_Rain_Of_Chaos_Golem {
    public const nint bonus_magic_resistance = 0x1318; // int32
    public const nint bonus_armor = 0x131C; // int32
    public const nint bonus_slow_resistance = 0x1320; // int32
}

public static class CDOTA_Modifier_Warlock_Rain_Of_Chaos_Thinker {
    public const nint stun_duration = 0x1318; // float32
    public const nint bHasScepter = 0x131C; // bool
    public const nint aoe = 0x1320; // int32
    public const nint m_iCount = 0x1324; // int32
}

public static class CDOTA_Modifier_Warlock_Shadow_Word {
    public const nint tick_interval = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint shard_movement_speed_pct = 0x1320; // int32
}

public static class CDOTA_Modifier_Warlock_Upheaval {
    public const nint m_iSlow = 0x1318; // int32
}

public static class CDOTA_Modifier_Warlock_Upheaval_Ally {
    public const nint m_iAttackSpeed = 0x1318; // int32
}

public static class CDOTA_Modifier_WarpineRaider_SeedShot {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_WarpineRaider_SeedShot_Slow {
    public const nint slow = 0x1318; // int32
}

public static class CDOTA_Modifier_Watch_Tower {
    public const nint m_nTeamNumber = 0x1318; // int32
    public const nint m_iCapturingTeam = 0x131C; // int32
    public const nint m_flCaptureProgress = 0x1320; // float32
    public const nint m_flBonusTime = 0x1324; // float32
    public const nint m_bInitialSetupDone = 0x1328; // bool
    public const nint m_iOriginalTeam = 0x132C; // int32
    public const nint m_hPreviousHero = 0x1330; // CHandle< CBaseEntity >
    public const nint m_vecLastCreditedPlayerIDs = 0x1338; // CUtlVector< PlayerID_t >
    public const nint m_flAccumulatedCaptureTime = 0x1350; // float32
    public const nint m_iBonusCount = 0x1354; // int32
    public const nint m_nFxOutpostAmbient = 0x1358; // ParticleIndex_t
    public const nint m_nFxOutpostInitialAmbient = 0x135C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wave_Blast_Knockback {
    public const nint disarm_duration = 0x1318; // float32
    public const nint m_vPushDir = 0x131C; // Vector
    public const nint m_flStartTime = 0x1328; // GameTime_t
}

public static class CDOTA_Modifier_Weaver_GeminateAttack {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_iAttacksRemaining = 0x131C; // int32
}

public static class CDOTA_Modifier_Weaver_GeminateAttack_Bonus {
    public const nint bonus_damage = 0x1318; // int32
}

public static class CDOTA_Modifier_Weaver_Shukuchi {
    public const nint radius = 0x1328; // int32
    public const nint damage = 0x132C; // int32
    public const nint speed = 0x1330; // int32
    public const nint geminate_attack_mark_duration = 0x1334; // float32
    public const nint m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Weaver_Shukuchi_GeminateAttackManager {
    public const nint m_iAttacksRemaining = 0x1318; // int32
}

public static class CDOTA_Modifier_Weaver_Swarm {
    public const nint m_iMaxDist = 0x1318; // int32
    public const nint m_iAttackCount = 0x131C; // int32
    public const nint destroy_attacks = 0x1320; // int32
    public const nint m_vDirection = 0x1324; // Vector
    public const nint m_vStartLoc = 0x1330; // Vector
    public const nint m_hAttachTarget = 0x133C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Weaver_Swarm_Debuff {
    public const nint armor_reduction = 0x1318; // float32
    public const nint damage = 0x131C; // int32
    public const nint m_flCurrentArmorReduction = 0x1320; // float32
}

public static class CDOTA_Modifier_Weaver_TimeLapse {
    public const nint m_PositionIndex = 0x1318; // Vector[11]
    public const nint m_flLife = 0x139C; // float32[11]
    public const nint m_flMana = 0x13C8; // float32[11]
    public const nint m_bHasValidHistory = 0x13F4; // bool
}

public static class CDOTA_Modifier_Whisper_Of_The_Dread {
    public const nint bonus_mana = 0x1318; // int32
    public const nint bonus_spell_damage = 0x131C; // int32
    public const nint vision_penalty = 0x1320; // int32
}

public static class CDOTA_Modifier_Wildkin_Tornado {
    public const nint radius = 0x1318; // int32
}

public static class CDOTA_Modifier_Wind_Waker {
    public const nint m_hBlocker = 0x1318; // CHandle< CBaseEntity >
    public const nint m_flStartTime = 0x131C; // GameTime_t
    public const nint m_vStartPos = 0x1320; // Vector
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_flHeightT = 0x1330; // float32
    public const nint m_vMoveToPos = 0x1334; // Vector
}

public static class CDOTA_Modifier_Windrunner_Arcana_Kill_Effect {
    public const nint m_bFrozen = 0x1318; // bool
}

public static class CDOTA_Modifier_Windrunner_FocusFire {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint focusfire_damage_reduction = 0x131C; // int32
    public const nint bActive = 0x1320; // bool
    public const nint bonus_attack_speed = 0x1324; // int32
    public const nint focusfire_fire_on_the_move = 0x1328; // int32
    public const nint m_bPause = 0x132C; // bool
    public const nint m_nNumArrowsLanded = 0x1330; // int32
    public const nint m_nDamageDealt = 0x1334; // int32
    public const nint m_nDamageDealtMax = 0x1338; // int32
    public const nint m_nTargetInitialHP = 0x133C; // int32
    public const nint m_bHeroKilled = 0x1340; // bool
    public const nint m_bRecentFocusFireAttack = 0x1341; // bool
    public const nint m_nFXFocusFire = 0x134C; // ParticleIndex_t
    public const nint m_flLastFocusFireAttackTime = 0x1350; // GameTime_t
}

public static class CDOTA_Modifier_Windrunner_GaleForce {
    public const nint m_vEndpoint = 0x1318; // Vector
    public const nint m_vFlowPosition = 0x1324; // Vector
    public const nint m_vPull = 0x1330; // Vector
    public const nint m_nFXIndex = 0x133C; // ParticleIndex_t
    public const nint m_flLastThinkTime = 0x1340; // GameTime_t
    public const nint wind_strength = 0x1344; // float32
}

public static class CDOTA_Modifier_Windrunner_GaleForce_Aura {
    public const nint m_vEndpoint = 0x1318; // Vector
    public const nint m_vFlowPosition = 0x1324; // Vector
    public const nint radius = 0x1330; // int32
}

public static class CDOTA_Modifier_Windrunner_Powershot_Slow {
    public const nint enemy_movespeed_bonus_pct = 0x1318; // float32
}

public static class CDOTA_Modifier_Windrunner_Windrun {
    public const nint radius = 0x1318; // int32
    public const nint scepter_radius = 0x131C; // int32
    public const nint movespeed_bonus_pct = 0x1320; // int32
    public const nint m_bDispellable = 0x1324; // bool
    public const nint physical_damage_pct = 0x1328; // int32
}

public static class CDOTA_Modifier_Windrunner_Windrun_Invis_Thinker {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
}

public static class CDOTA_Modifier_Windrunner_Windrun_Slow {
    public const nint enemy_movespeed_bonus_pct = 0x1318; // float32
    public const nint scepter_movespeed_bonus_pct = 0x131C; // float32
    public const nint scepter_blind = 0x1320; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Flight {
    public const nint attack_point = 0x1318; // float32
    public const nint attack_range_bonus = 0x131C; // int32
    public const nint projectile_speed_bonus = 0x1320; // int32
    public const nint night_vision_bonus = 0x1324; // int32
    public const nint movement_scepter = 0x1328; // int32
    public const nint m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
    public const nint max_attacks = 0x1338; // int32
    public const nint m_iNumAttacks = 0x133C; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Frost_Attack {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Slow {
    public const nint percent_damage = 0x1318; // float32
    public const nint move_slow = 0x131C; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Cold_Embrace {
    public const nint heal_additive = 0x1320; // int32
    public const nint heal_percentage = 0x1324; // float32
}

public static class CDOTA_Modifier_Winter_Wyvern_Splinter_Blast_Slow {
    public const nint bonus_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse {
    public const nint m_hZombieTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hDesiredTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint damage_reduction = 0x1320; // int32
    public const nint damage_amplification = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Aura {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_nAlliesTaunted = 0x131C; // int32
    public const nint m_bRelicTriggered = 0x1320; // bool
    public const nint radius = 0x1324; // int32
    public const nint damage_amplification = 0x1328; // int32
    public const nint damage_reduction = 0x132C; // int32
    public const nint m_flLastSeen = 0x1330; // GameTime_t
}

public static class CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Kill_Credit {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
}

public static class CDOTA_Modifier_Wisp_Overcharge {
    public const nint bonus_attack_speed = 0x1318; // int32
    public const nint bonus_spell_amp = 0x131C; // int32
    public const nint shard_bonus_slow_resistance = 0x1320; // int32
    public const nint hp_regen = 0x1324; // float32
}

public static class CDOTA_Modifier_Wisp_Relocate_Return {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_vecReturnPosition = 0x131C; // Vector
    public const nint return_time = 0x1328; // float32
    public const nint m_nFXTimeRemaining = 0x132C; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wisp_Relocate_Thinker {
    public const nint cast_delay = 0x1318; // float32
    public const nint m_nFXIndexEndTeam = 0x131C; // ParticleIndex_t
    public const nint m_nFXIndexChannel = 0x1320; // ParticleIndex_t
}

public static class CDOTA_Modifier_Wisp_Spirits {
    public const nint m_bSpiritsExplode = 0x1318; // bool
    public const nint creep_damage = 0x131C; // int32
    public const nint hero_damage = 0x1320; // int32
    public const nint hit_radius = 0x1324; // int32
    public const nint hero_hit_radius = 0x1328; // int32
    public const nint explode_radius = 0x132C; // int32
    public const nint min_range = 0x1330; // int32
    public const nint max_range = 0x1334; // int32
    public const nint default_radius = 0x1338; // int32
    public const nint spirit_amount = 0x133C; // int32
    public const nint m_flRotation = 0x1340; // float32
    public const nint m_flSpiritRadius = 0x1344; // float32
    public const nint spirit_movement_rate = 0x1348; // int32
    public const nint m_flNextSpawn = 0x134C; // GameTime_t
    public const nint m_strSpiritsOutSwapAbility = 0x1350; // CUtlString
}

public static class CDOTA_Modifier_Wisp_Spirits_Slow {
    public const nint scepter_slow_pct = 0x1318; // int32
}

public static class CDOTA_Modifier_Wisp_Tentacles {
    public const nint m_nFXIndex = 0x1318; // ParticleIndex_t
    public const nint hCurrentEntity = 0x131C; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Wisp_Tether {
    public const nint m_bInManaGained = 0x1318; // bool
    public const nint m_hTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint hStunnedEntities = 0x1320; // CUtlVector< CHandle< CBaseEntity > >
    public const nint stun_duration = 0x1338; // float32
    public const nint movespeed = 0x133C; // int32
    public const nint self_bonus = 0x1340; // int32
    public const nint m_bIsInRange = 0x1344; // bool
    public const nint radius = 0x1348; // int32
    public const nint latch_distance = 0x134C; // int32
    public const nint m_flHealthHealed = 0x1350; // float32
    public const nint m_flManaHealed = 0x1354; // float32
    public const nint tether_heal_amp = 0x1358; // float32
    public const nint m_flHealMessageTime = 0x135C; // GameTime_t
    public const nint m_flManaMessageTime = 0x1360; // GameTime_t
}

public static class CDOTA_Modifier_Wisp_Tether_Haste {
    public const nint movespeed = 0x1318; // float32
    public const nint shard_bonus_spell_lifesteal = 0x131C; // float32
}

public static class CDOTA_Modifier_Wisp_Tether_Slow {
    public const nint slow = 0x1318; // int32
    public const nint tick_rate = 0x131C; // float32
}

public static class CDOTA_Modifier_Wisp_Tether_Spell_Lifesteal {
    public const nint shard_bonus_spell_lifesteal = 0x1318; // float32
}

public static class CDOTA_Modifier_WitchDoctor_Cask_Thinker {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_WitchDoctor_DeathWard {
    public const nint bonus_damage = 0x1318; // int32
    public const nint m_iBounceRadius = 0x131C; // int32
    public const nint bonus_accuracy = 0x1320; // int32
    public const nint m_bFirstAttack = 0x1324; // bool
}

public static class CDOTA_Modifier_WitchDoctor_DeathWard_Voodoo_Switcheroo_AttackSpeedReduction {
    public const nint attack_speed_reduction = 0x1318; // int32
}

public static class CDOTA_Modifier_WitchDoctor_Maledict {
    public const nint m_iStartHealth = 0x1318; // int32
    public const nint bonus_damage = 0x131C; // int32
    public const nint bonus_damage_threshold = 0x1320; // int32
    public const nint ticks = 0x1324; // int32
    public const nint iCurrentTick = 0x1328; // int32
}

public static class CDOTA_Modifier_WitchDoctor_Voodoo_Restoration_Heal {
    public const nint heal = 0x1318; // int32
    public const nint mana_per_second = 0x131C; // float32
    public const nint heal_interval = 0x1320; // float32
    public const nint enemy_damage_pct = 0x1324; // int32
    public const nint m_flTotalHealing = 0x1328; // float32
}

public static class CDOTA_Modifier_WitchDoctor_Voodoo_Switcheroo {
    public const nint m_vSavedPos = 0x1318; // Vector
    public const nint m_hSavedAbility = 0x1324; // CHandle< CBaseEntity >
}

public static class CDOTA_Modifier_Woodland_Striders_Active {
    public const nint tree_duration = 0x1318; // float32
}

public static class CDOTA_Modifier_Yasha_And_Kaya_Maim {
    public const nint maim_slow_movement = 0x1318; // int32
    public const nint maim_slow_attack = 0x131C; // int32
    public const nint maim_slow_movement_range = 0x1320; // int32
    public const nint maim_slow_attack_range = 0x1324; // int32
}

public static class CDOTA_Modifier_Zombie_Berserk {
    public const nint berserk_bonus_attack_speed = 0x1318; // int32
    public const nint berserk_bonus_movement_speed = 0x131C; // int32
}

public static class CDOTA_Modifier_Zuus_ArcLightning {
    public const nint radius = 0x1318; // int32
    public const nint jump_count = 0x131C; // int32
    public const nint arc_damage = 0x1320; // int32
    public const nint jump_delay = 0x1324; // float32
    public const nint damage_health_pct = 0x1328; // int32
    public const nint total_damage_pct = 0x132C; // int32
    public const nint m_iCurJumpCount = 0x1330; // int32
    public const nint trigger_spell_absorb = 0x1334; // bool
    public const nint m_vCurTargetLoc = 0x1338; // Vector
    public const nint m_hHitEntities = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Modifier_Zuus_Cloud {
    public const nint m_CloudBoltTimer = 0x1318; // CountdownTimer
    public const nint cloud_bolt_interval = 0x1330; // float32
    public const nint cloud_radius = 0x1334; // int32
}

public static class CDOTA_Modifier_Zuus_Heavenly_Jump {
    public const nint hop_duration = 0x1318; // float32
    public const nint hop_height = 0x131C; // int32
    public const nint hop_distance = 0x1320; // int32
    public const nint search_radius = 0x1324; // int32
    public const nint m_flStartZ = 0x1328; // float32
    public const nint m_flCurTime = 0x132C; // float32
    public const nint m_flJumpDuration = 0x1330; // float32
    public const nint m_flJumpHeight = 0x1334; // float32
    public const nint m_vTargetHorizontalDirection = 0x1338; // Vector
    public const nint hUnitsToHit = 0x1348; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bLaunched = 0x1360; // bool
}

public static class CDOTA_Modifier_Zuus_Heavenly_Jump_Boost {
    public const nint postjump_movespeed = 0x1318; // int32
}

public static class CDOTA_Modifier_Zuus_Lightning_Hands {
    public const nint m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    public const nint m_nFXIndex = 0x1330; // ParticleIndex_t
    public const nint arc_lightning_damage_pct = 0x1334; // int32
    public const nint arc_lightning_damage_illusion_pct = 0x1338; // int32
    public const nint attack_range_bonus = 0x133C; // int32
}

public static class CDOTA_Modifier_Zuus_Static_Field_Slow {
    public const nint move_slow = 0x1318; // int32
    public const nint aspd_slow = 0x131C; // int32
    public const nint cast_slow = 0x1320; // int32
}

public static class CDOTA_Modifier_Zuus_ThunderTrail_Debuff {
    public const nint debuff_spell_amp = 0x1318; // int32
}

public static class CDOTA_Modifier_Zuus_ThundergodsWrathThinker {
    public const nint damage = 0x1318; // int32
    public const nint damage_pct = 0x131C; // float32
    public const nint sight_duration = 0x1320; // float32
    public const nint second_strike_damage_percent = 0x1324; // int32
    public const nint second_strike_delay = 0x1328; // float32
    public const nint m_bZeusHasArcana = 0x132C; // bool
    public const nint m_hTargetEntities = 0x1330; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bSecondaryStrike = 0x1348; // bool
    public const nint m_nKills = 0x134C; // int32
}

public static class CDOTA_NPCSpawner {
    public const nint m_szNPCScriptName = 0x4A8; // CUtlSymbolLarge
    public const nint m_szNPCName = 0x4B0; // CUtlSymbolLarge
    public const nint m_szNPCFirstWaypoint = 0x4B8; // CUtlSymbolLarge
    public const nint m_SpawnTimer = 0x4C0; // CountdownTimer
    public const nint m_IntervalTimer = 0x4D8; // CountdownTimer
    public const nint m_iTeam = 0x4F0; // int32
    public const nint m_iUpgradeMelee = 0x4F4; // int32
    public const nint m_iUpgradeRange = 0x4F8; // int32
    public const nint m_iMeleeCount = 0x4FC; // int32
    public const nint m_iSiegeCount = 0x500; // int32
    public const nint m_iRangeCount = 0x504; // int32
    public const nint m_iWaves = 0x508; // int32
    public const nint m_bFirstWave = 0x50C; // bool
    public const nint m_bShouldSpawnStrongCreep = 0x50D; // bool
    public const nint m_Units = 0x510; // CUtlVector< CHandle< CDOTA_BaseNPC > >
}

public static class CDOTA_NPC_Aghsfort_WitchDoctor_Ward {
    public const nint m_nTargetType = 0x1778; // int32
    public const nint m_nTargetFlags = 0x177C; // int32
}

public static class CDOTA_NPC_Lantern {
    public const nint m_szInteractAbilityName = 0x1880; // CUtlSymbolLarge
}

public static class CDOTA_NPC_Observer_Ward {
    public const nint m_iDuration = 0x1778; // int32
    public const nint m_bPlacedInSpawnBox = 0x177C; // bool
    public const nint m_flSpawnTime = 0x1780; // GameTime_t
}

public static class CDOTA_NPC_Observer_Ward_TrueSight {
    public const nint m_iTrueSight = 0x1788; // int32
    public const nint m_hCasterEntity = 0x178C; // CEntityHandle
    public const nint m_hAbilityEntity = 0x1790; // CEntityHandle
}

public static class CDOTA_NPC_Treant_EyesInTheForest {
    public const nint m_bIsBlind = 0x1778; // bool
}

public static class CDOTA_NPC_WitchDoctor_Ward {
    public const nint m_nTargetType = 0x1778; // int32
    public const nint m_nTargetFlags = 0x177C; // int32
}

public static class CDOTA_NeutralSpawner {
    public const nint m_bGameStarted = 0x4A8; // bool
    public const nint m_bFirstSpawn = 0x4A9; // bool
    public const nint m_SpawnTimer = 0x4B0; // CountdownTimer
    public const nint m_iNextSpawnType = 0x4C8; // int32
    public const nint m_iPreviousSpawnType = 0x4CC; // int32
    public const nint m_iTotalToSpawn = 0x4D0; // int32
    public const nint m_iForcedSpawnType = 0x4D4; // int32
    public const nint m_iNumBatchesToSpawn = 0x4D8; // int32
    public const nint m_bLimitedBatches = 0x4DC; // bool
    public const nint m_iStackingCreditPlayerID = 0x4E0; // PlayerID_t
    public const nint m_fInternalSpawnTimerTime = 0x4E4; // float32
    public const nint m_InternalSpawnTimer = 0x4E8; // CountdownTimer
    public const nint m_FXTimer = 0x500; // CountdownTimer
    public const nint m_PendingUnits = 0x518; // CUtlVector< CHandle< CDOTA_BaseNPC > >
    public const nint m_Units = 0x530; // CUtlVector< CHandle< CDOTA_BaseNPC > >
    public const nint m_bSeenClearedByTeam = 0x548; // bool[2]
    public const nint m_szVolumeName = 0x550; // CUtlSymbolLarge
    public const nint m_hVolumes = 0x558; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_OnSpawnerExhausted = 0x570; // CEntityIOOutput
    public const nint m_Type = 0x598; // int32
    public const nint m_PullType = 0x59C; // int32
    public const nint m_AggroType = 0x5A0; // int32
}

public static class CDOTA_Orb {
    public const nint m_hCaster = 0x10; // CHandle< CBaseEntity >
    public const nint m_hAbility = 0x14; // CHandle< CBaseEntity >
}

public static class CDOTA_Pet_CarriedItem {
    public const nint m_hHeroHandle = 0x768; // CHandle< CDOTA_BaseNPC_Hero >
}

public static class CDOTA_PhantomAssassin_Gravestone {
    public const nint m_nVictimPlayerID = 0x1778; // PlayerID_t
}

public static class CDOTA_PlayerChallengeInfo {
    public const nint nType = 0x30; // int32
    public const nint nQuestID = 0x34; // int32
    public const nint nQuestChallengeID = 0x38; // int32
    public const nint nTier = 0x3C; // int32
    public const nint nParam0 = 0x40; // int32
    public const nint nParam1 = 0x44; // int32
    public const nint nSlotID = 0x48; // int32
    public const nint nProgress = 0x4C; // int32
    public const nint nCompletionThreshold = 0x50; // int32
    public const nint nPlayerID = 0x54; // PlayerID_t
    public const nint nQueryIndex = 0x58; // int32
    public const nint nEventID = 0x5C; // int32
    public const nint nSequenceID = 0x60; // int32
    public const nint nCompleted = 0x64; // int32
    public const nint nRank = 0x68; // int32
}

public static class CDOTA_PlayerResource {
    public const nint m_vecPlayerTeamData = 0x4A8; // CUtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
    public const nint m_vecPlayerData = 0x4F8; // CUtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
    public const nint m_vecBrodcasterData = 0x548; // CUtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
    public const nint m_vecEventsForDisplay = 0x598; // CNetworkUtlVectorBase< uint32 >
    public const nint m_nPrimaryEventIndex = 0x5B0; // int8
    public const nint m_playerIDToPlayer = 0x5C4; // CHandle< CBaseEntity >[64]
    public const nint m_vecPendingTreeRemovals = 0x908; // CUtlVector< sPendingTreeRemoval >
    public const nint m_vecPendingTreeModelChanges = 0x920; // CUtlVector< sPendingTreeModelChange >
    public const nint m_flClaimedFarm = 0x938; // float32[24]
    public const nint m_flEarnedCreepFarm = 0x998; // float32[24]
    public const nint m_iScaledPlayerDamage = 0x9F8; // int32[24]
    public const nint m_iScaledTowerDamage = 0xA58; // int32[24]
    public const nint m_iScaledHealing = 0xAB8; // int32[24]
    public const nint m_iSupportAbilityValue = 0xB18; // int32[24]
    public const nint m_nNumMouseClickCastOrders = 0xB78; // int32[24]
    public const nint m_flTimeWithUnspentSkillPoints = 0xBD8; // float32[24]
    public const nint m_iRawPlayerDamage = 0xC38; // int32[24]
    public const nint m_iRawTowerDamage = 0xC98; // int32[24]
    public const nint m_iRawHealing = 0xCF8; // int32[24]
    public const nint m_iRawPlayerDamageReceivedPreReduction = 0xD58; // int32[24][3]
    public const nint m_iRawPlayerDamageReceivedPostReduction = 0xE78; // int32[24][3]
    public const nint m_iTotalPlayerDamageMatrix = 0xF98; // int32[24][24]
    public const nint m_iRawPlayerDamageMatrix = 0x1898; // int32[24][24]
    public const nint m_iAssistsMatrix = 0x2198; // int32[24][24]
    public const nint m_iTimeLastSeen = 0x2A98; // int32[24]
    public const nint m_iTotalDisconnectedTime = 0x2AF8; // int32[24]
    public const nint m_dTimeLastRecieved = 0x2B58; // float64[24]
    public const nint m_iGoldBonusEarned = 0x2C18; // int32[24]
    public const nint m_iExperimentalGoldEarned = 0x2C78; // int32[24]
    public const nint m_iExperimental2GoldEarned = 0x2CD8; // int32[24]
    public const nint m_iCreepDenyGoldEarned = 0x2D38; // int32[24]
    public const nint m_iTPScrollsPurchased = 0x2D98; // int32[24]
    public const nint m_iAegisPickups = 0x3038; // int32[24]
    public const nint m_iTeleportsUsed = 0x3098; // int32[24]
    public const nint m_iNumConsumablesPurchased = 0x30F8; // int32[24]
    public const nint m_iNumItemsPurchased = 0x3158; // int32[24]
    public const nint m_vecItemsPurchased = 0x31B8; // CUtlVector< PurchasedItem_t >[24]
    public const nint m_flTimeOfLastItemPurchase = 0x33F8; // float32[24]
    public const nint m_flTimeOfLastConsumablePurchase = 0x3458; // float32[24]
    public const nint m_flTimeOfLastDeath = 0x34B8; // float32[24]
    public const nint m_iTowerDamageTaken = 0x3518; // int32[24]
    public const nint m_iCreepDamageTaken = 0x3578; // int32[24]
    public const nint m_iHeroDamageTaken = 0x35D8; // int32[24]
    public const nint m_iTotalTowerDamageTaken = 0x3638; // int32[24]
    public const nint m_iTotalCreepDamageTaken = 0x3698; // int32[24]
    public const nint m_iTotalHeroDamageTaken = 0x36F8; // int32[24]
    public const nint m_iRank = 0x3998; // int32[24]
    public const nint m_bRankCalibrated = 0x39F8; // bool[24]
    public const nint m_bLowPriority = 0x3A10; // bool[24]
    public const nint m_bWasHeroPickDotaPlusSuggestion = 0x3A28; // bool[24]
    public const nint m_bIdleInFountain = 0x3A40; // bool[24]
    public const nint m_bLoggedInElsewhere = 0x3A58; // bool[24]
    public const nint m_bPlayerLoadedCompletely = 0x3A70; // bool[64]
    public const nint m_iDisconnectionReason = 0x3AB0; // int32[64]
    public const nint m_SelectedGuide = 0x41B0; // uint64[64]
    public const nint m_bIsUsingPlusGuide = 0x43B0; // bool[64]
    public const nint m_iCustomTeamAssignments = 0x43F0; // int32[24]
    public const nint m_vecPlayerLevelUpTimes = 0x4450; // CUtlVector< float32 >[24]
    public const nint m_iManaSpent = 0x4690; // int32[6][64]
    public const nint m_iNeutralOption = 0x4C90; // int32[6][6][64]
    public const nint m_bLeaverAlreadyDetected = 0x7090; // bool
    public const nint m_TimedKillList = 0x74B8; // CUtlVector< TimedKillEvent_t >
    public const nint m_TimedAssistList = 0x74D0; // CUtlVector< TimedKillEvent_t >
    public const nint m_TimedDeathList = 0x74E8; // CUtlVector< TimedKillEvent_t >
    public const nint m_unLastHeroPickOrder = 0x7500; // uint32
    public const nint m_iBountyGoldEarned = 0x7504; // int32[24]
    public const nint m_iRangeCreepUpgradeGoldEarned = 0x7564; // int32[24]
    public const nint m_iObserverWardsDestroyed = 0x75C4; // int32[24]
    public const nint m_iReliableGoldEarned = 0x7624; // int32[24]
    public const nint m_iGoldLossPrevented = 0x7684; // int32[24]
    public const nint m_hTeamCouriers = 0x7740; // CUtlVector< CHandle< CDOTA_Unit_Courier > >[15]
    public const nint m_hPlayerCouriers = 0x78A8; // CUtlVector< CHandle< CDOTA_Unit_Courier > >[64]
    public const nint m_flAvailableLaneGold = 0x7EA8; // float32[15]
    public const nint m_DamageShareList = 0x7EE8; // CUtlVector< DamageShareEvent_t >[24]
    public const nint m_AbsorbedDamageRollup = 0x8128; // DamageShareEvent_t[25][24]
    public const nint m_playerAbilityUpgradeOrder = 0x9D48; // AbilityID_t[25][24]
    public const nint m_playerAbilityUpgradeTimes = 0xA6A8; // int32[25][24]
    public const nint m_playerAbilityUpgradeCount = 0xB008; // int32[24]
    public const nint m_fullUpdateCount = 0xB0A8; // int32[64]
    public const nint m_iCouriersDeployed = 0xB1A8; // int32[24]
    public const nint m_iCouriersPotentiallyKilled = 0xB208; // int32[24]
    public const nint m_iCommandsIssued = 0xB268; // int32[24]
    public const nint m_hHeroSpawnGroup = 0xB2C8; // uint32[24]
    public const nint m_fNextLaneDetectionUpdate = 0xCAE8; // float32
    public const nint m_fNextTimedHeroStatsUpdate = 0xCAEC; // float32
    public const nint m_bInitializedLaneWaypoints = 0xCD90; // bool
    public const nint m_nLastWardSuggestionBuildingState = 0xD4E8; // uint32
    public const nint m_nLastWardSuggestionUpdateNum = 0xD4EC; // uint32
    public const nint m_bLastWardSuggestionRoshanAlive = 0xD4F0; // bool
    public const nint bDoFinalPregameSuggestion = 0xD4F1; // bool[10]
    public const nint m_hAbilitiesSuggestion = 0xD4FC; // int32[10]
    public const nint m_hPregameItemsSuggestion = 0xD524; // int32[10]
    public const nint m_hItemsSuggestion = 0xD54C; // int32[10]
    public const nint m_hTopNItemsSuggestion = 0xD574; // int32[10]
    public const nint m_hNeutralItemsSuggestion = 0xD59C; // int32[5][10]
    public const nint m_hLanesSuggestion = 0xD664; // int32[15]
    public const nint m_hWinProbabilitySuggestion = 0xD6A0; // int32
    public const nint m_hHeroSuggestion = 0xD6A4; // int32[10]
    public const nint m_hWardLocationsSuggestion = 0xD6CC; // int32[15]
    public const nint m_fNextCreepDistanceUpdate = 0xD708; // float32
    public const nint m_fCreepDistanceSafe = 0xD70C; // float32[15]
    public const nint m_fCreepDistanceMid = 0xD748; // float32[15]
    public const nint m_fCreepDistanceOff = 0xD784; // float32[15]
    public const nint m_fLastSuggestionTime = 0xD7C0; // GameTime_t
    public const nint m_bHasRevealedAnonymizedEnemyPlayerInfo = 0xD7C4; // bool
    public const nint m_nRequestedBotPlayerID = 0xDDC8; // PlayerID_t
    public const nint m_fNextCombatLogLocationUpdateTime = 0xDDCC; // float32
    public const nint m_fNextAPMUpdateTime = 0xDDD0; // float32
    public const nint m_vecPendingPlayerResourceRequests = 0xDDD8; // CUtlVector< uint32 >
    public const nint m_iRampages = 0xDDF0; // int32[24]
    public const nint m_iTripleKills = 0xDE50; // int32[24]
    public const nint m_iCouriersKilled = 0xDEB0; // int32[24]
    public const nint m_iAegisesSnatched = 0xDF10; // int32[24]
    public const nint m_iCheesesEaten = 0xDF70; // int32[24]
    public const nint m_iRapiersPurchased = 0xDFD0; // int32[24]
    public const nint m_flPushingDamage = 0xE030; // float32[24]
    public const nint m_iRoshanKillsNight = 0xE090; // int32[24]
    public const nint m_iRoshanKillsDay = 0xE0F0; // int32[24]
    public const nint m_iPortalsUsed = 0xE150; // int32[24]
    public const nint m_iWisdomRunesGained = 0xE1B0; // int32[24]
    public const nint m_iShieldRunesGained = 0xE210; // int32[24]
}

public static class CDOTA_ReconnectInfo {
    public const nint m_playerSteamId = 0x0; // uint64
    public const nint m_iTeam = 0x8; // int32
    public const nint m_iUnitControlled = 0xC; // CEntityIndex
    public const nint m_bWantsRandomHero = 0x10; // bool
}

public static class CDOTA_RoshanSpawner {
    public const nint m_bIsRoshanAlive = 0x4A8; // bool
    public const nint m_bSpawnRequested = 0x4A9; // bool
    public const nint m_hRoshan = 0x4AC; // CHandle< CBaseEntity >
    public const nint m_fRoshanKillTime = 0x4B0; // GameTime_t
    public const nint m_nSentRoshReclaim = 0x4B4; // int32
    public const nint m_nSentRoshRespawn = 0x4B8; // int32
    public const nint m_fRoshanRespawnDuration = 0x4BC; // float32
    public const nint m_iLastKillerTeam = 0x4C0; // int32
    public const nint m_iKillCount = 0x4C4; // int32
    public const nint m_vRoshanAltLocation = 0x4C8; // Vector
    public const nint m_nFXIndex = 0x4D4; // ParticleIndex_t
    public const nint m_nFXIndex2 = 0x4D8; // ParticleIndex_t
}

public static class CDOTA_ScriptedSpawner {
    public const nint m_szNPCFirstWaypoint = 0x4B8; // CUtlSymbolLarge
    public const nint m_nNPCType = 0x4C0; // int32
    public const nint m_bAllowRelaxation = 0x4C4; // bool
    public const nint m_bPlayPostVictoryAnims = 0x4C5; // bool
    public const nint m_bDisableAutoAttack = 0x4C6; // bool
    public const nint m_bAutomaticallyRespawn = 0x4C7; // bool
    public const nint m_bInvulnerable = 0x4C8; // bool
    public const nint m_bAllowHeroTargets = 0x4C9; // bool
    public const nint m_nActivityOverride = 0x4CC; // int32
    public const nint m_flDuration = 0x4D0; // float32
    public const nint m_bAnimationFireOnce = 0x4D4; // bool
    public const nint m_hMoveToTargets = 0x4D8; // CUtlVector< CDOTA_ScriptedSpawner::scripted_moveto_t >
    public const nint m_OnAllUnitsKilled = 0x4F0; // CEntityIOOutput
    public const nint m_OnUnitKilled = 0x518; // CEntityIOOutput
    public const nint m_OnHealthLow = 0x540; // CEntityIOOutput
    public const nint m_Units = 0x568; // CUtlVector< CHandle< CDOTA_BaseNPC > >
    public const nint m_hSpawnpoint = 0x580; // CHandle< CBaseEntity >
    public const nint m_szCustomNPCName = 0x588; // CUtlSymbolLarge
}

public static class CDOTA_ScriptedSpawner_scripted_moveto_t {
    public const nint hMoveToTarget = 0x0; // CHandle< CBaseEntity >
    public const nint hGivenToNPC = 0x4; // CHandle< CBaseEntity >
}

public static class CDOTA_ShopTrigger {
    public const nint m_ShopType = 0x900; // int32
    public const nint m_OnTrigger = 0x908; // CEntityIOOutput
}

public static class CDOTA_SimpleObstruction {
    public const nint m_bEnabled = 0x4C0; // bool
    public const nint m_bBlockFoW = 0x4C1; // bool
    public const nint m_unOccluderID = 0x4C4; // uint32
    public const nint m_bBlockingGridNav = 0x4C8; // bool
}

public static class CDOTA_TeamCommander {
    public const nint m_nLastUnitsCollectTick = 0x10; // GameTick_t
    public const nint m_LaneFrontUpdate = 0x2C8; // CountdownTimer
    public const nint m_ulBotScriptUGC = 0x2E0; // uint64
    public const nint m_rtBotScriptUpdated = 0x2E8; // uint32
    public const nint m_AvoidanceGridTimer = 0x2F0; // CountdownTimer
    public const nint m_EnemyVisibilityGridTimer = 0x308; // CountdownTimer
    public const nint m_LaneStatusTimer = 0x320; // CountdownTimer
    public const nint m_ChatThrottleTimer = 0x338; // CountdownTimer
    public const nint m_eTeam = 0x350; // DOTATeam_t
    public const nint m_bLateGame = 0x3C0; // bool
    public const nint m_LaneLengths = 0x3C4; // float32[4]
    public const nint m_LaneFrontCreepsAmounts = 0x3D4; // float32[4][2]
    public const nint m_LaneFrontTowersAmounts = 0x3F4; // float32[4][2]
    public const nint m_LaneReassignTimer = 0x418; // CountdownTimer
    public const nint m_AvoidanceGrid = 0x430; // CUtlVector< int32 >
    public const nint m_fNextPotentialLocationTick = 0x448; // GameTime_t[24]
    public const nint m_iPotentialLocationBuffer = 0x4A8; // int32[24]
    public const nint m_PotentialLocationGrid = 0x508; // CUtlVector< uint8 >[24][2]
    public const nint m_hRoamingUnit = 0x988; // CHandle< CBaseEntity >
    public const nint m_RoamTargetLane = 0x98C; // DOTA_LANE
    public const nint m_Buildings = 0x9C0; // CHandle< CBaseEntity >[8][4]
    public const nint m_fBuildingFortTimings = 0xA40; // float32[8][4]
    public const nint m_LaneNodes = 0xAC0; // CHandle< CBaseEntity >[9][4]
    public const nint m_fPushLaneDesire = 0xB50; // float32[4]
    public const nint m_fPushLaneRawDesire = 0xB60; // float32[4]
    public const nint m_fPushLaneConvenienceDesire = 0xB70; // float32[4]
    public const nint m_fDefendLaneDesire = 0xB80; // float32[4]
    public const nint m_fDefendLaneUrgencyDesire = 0xB90; // float32[4]
    public const nint m_fDefendLanePowerDesire = 0xBA0; // float32[4]
    public const nint m_fFarmLaneDesire = 0xBB0; // float32[4]
    public const nint m_iLastSeenRoshanHealth = 0xBC0; // int32
    public const nint m_fRoshanDesire = 0xBC4; // float32
    public const nint m_hProposedPushUnits = 0xBC8; // CUtlVector< CHandle< CBaseEntity > >[4]
    public const nint m_hProposedDefendUnits = 0xC28; // CUtlVector< CHandle< CBaseEntity > >[4]
    public const nint m_hProposedRoamUnits = 0xC88; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hProposedRoshanUnits = 0xCA0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_fRoamDesire = 0xCB8; // float32
    public const nint m_fRoamOffensivePowerFactor = 0xCBC; // float32
    public const nint m_fRoamDistanceFactor = 0xCC0; // float32
    public const nint m_fRoamPositionFactor = 0xCC4; // float32
    public const nint m_hRoamTarget = 0xCC8; // CHandle< CBaseEntity >
    public const nint m_vRoamTargetLoc = 0xCCC; // Vector
    public const nint m_fHeroSelectionTimes = 0xCD8; // float32[24]
    public const nint m_vBaseLocation = 0xD50; // Vector
    public const nint m_AllUnits = 0xD60; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedUnits = 0xD78; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedHeroes = 0xD90; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedCreeps = 0xDA8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedWards = 0xDC0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedBuildings = 0xDD8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllAlliedOther = 0xDF0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyUnits = 0xE08; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyHeroes = 0xE20; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyCreeps = 0xE38; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyWards = 0xE50; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyBuildings = 0xE68; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllEnemyOther = 0xE80; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllNeutralCreeps = 0xE98; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_ThinkerUnits = 0xEB0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_AllUnitsIncludingDead = 0xEC8; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hCouriers = 0xF10; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hDisabledBots = 0xF28; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_fGoodLuckFlavorTextTime = 0x12C0; // GameTime_t
    public const nint m_fTeamfightFlavorTextTime = 0x12C4; // GameTime_t
    public const nint m_fCongratulateHeroFlavorTextTime = 0x12C8; // GameTime_t
    public const nint m_fLastAliveHeroHistorySnapshotTime = 0x12CC; // GameTime_t
    public const nint m_iAliveHeroHistoryIndex = 0x12D0; // int32
    public const nint m_iAliveHeroHistory = 0x12D4; // int32[5]
    public const nint m_fPlayerDraftChooseTime = 0x12E8; // GameTime_t
    public const nint m_sScriptDirectory = 0x12F8; // CUtlString
    public const nint m_hHeroSelectionScriptScope = 0x1300; // HSCRIPT
    public const nint m_hTeamLevelDesiresScriptScope = 0x1308; // HSCRIPT
    public const nint m_nScriptPathAvoidanceUpdateTick = 0x1378; // GameTick_t
    public const nint m_fExecutionTime = 0x137C; // float32[30]
    public const nint m_iCurExecutionTime = 0x13F4; // int32
}

public static class CDOTA_TempTree {
    public const nint m_fExpireTime = 0x788; // GameTime_t
    public const nint m_vecTreeCircleCenter = 0x78C; // Vector
    public const nint m_bCanApplyTreeCostume = 0x798; // bool
    public const nint m_bIsMangoTree = 0x799; // bool
    public const nint m_Particles = 0x7A0; // CUtlVector< ParticleIndex_t >
    public const nint m_bIsPartOfFowSystem = 0x7B8; // bool
    public const nint m_bHasClientSideAnimation = 0x7B9; // bool
    public const nint m_bForceVisible = 0x7BA; // bool[15]
}

public static class CDOTA_Tree {
    public const nint m_bStanding = 0x18; // bool
    public const nint m_bSpecialConsume = 0x19; // bool
    public const nint m_bSpecialToxic = 0x1A; // bool
    public const nint m_bSpecialPathing = 0x1B; // bool
    public const nint m_unOccluderID = 0x1C; // uint32
}

public static class CDOTA_UnitInventory {
    public const nint m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
    public const nint m_hItems = 0x20; // CHandle< CBaseEntity >[19]
    public const nint m_bItemQueried = 0x6C; // bool[21]
    public const nint m_iParity = 0x84; // int32
    public const nint m_hInventoryParent = 0x88; // CHandle< CBaseEntity >
    public const nint m_bIsActive = 0x8C; // bool
    public const nint m_bStashEnabled = 0x8D; // bool
    public const nint m_hTransientCastItem = 0x90; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_AghsFort_Creature_DungeonBat {
    public const nint m_nFXAmbient = 0x18F8; // ParticleIndex_t
}

public static class CDOTA_Unit_Aghsfort_Aziyog_Underlord_Portal {
    public const nint m_hOtherPortal = 0x1778; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_Announcer {
    public const nint m_iAudienceTeam = 0x1778; // int32
}

public static class CDOTA_Unit_Brewmaster_PrimalEarth {
    public const nint m_nFXEarthAmbient1 = 0x17A8; // ParticleIndex_t
    public const nint m_nFXEarthAmbient2 = 0x17AC; // ParticleIndex_t
}

public static class CDOTA_Unit_Brewmaster_PrimalFire {
    public const nint m_nFXAmbient = 0x17A8; // ParticleIndex_t
}

public static class CDOTA_Unit_Brewmaster_PrimalStorm {
    public const nint m_nFXStormAmbient1 = 0x17A8; // ParticleIndex_t
    public const nint m_nFXStormAmbient2 = 0x17AC; // ParticleIndex_t
}

public static class CDOTA_Unit_Brewmaster_PrimalVoid {
    public const nint m_nFXAmbient = 0x17A8; // ParticleIndex_t
}

public static class CDOTA_Unit_Broodmother_Web {
    public const nint m_nFXIndex = 0x1778; // ParticleIndex_t
    public const nint m_vecOrigin = 0x177C; // Vector
}

public static class CDOTA_Unit_Courier {
    public const nint m_bUnitRespawned = 0x1778; // bool
    public const nint m_bPreUpdateFlyingCourier = 0x1779; // bool
    public const nint m_nSoleControllingPlayer = 0x177C; // PlayerID_t
    public const nint m_bFlyingCourier = 0x1780; // bool
    public const nint m_flRespawnTime = 0x1784; // GameTime_t
    public const nint m_nCourierState = 0x1788; // CourierState_t
    public const nint m_hCourierStateEntity = 0x178C; // CHandle< CBaseEntity >
    public const nint m_strCourierModel = 0x1790; // CUtlString
    public const nint m_strFlyingCourierModel = 0x1798; // CUtlString
    public const nint m_vSpawnLocation = 0x17A0; // Vector
}

public static class CDOTA_Unit_Diretide_Portal {
    public const nint m_hPartnerPortal = 0x1880; // CHandle< CBaseEntity >
    public const nint m_nRuneType = 0x1884; // int32
    public const nint m_nOriginalTeamNumber = 0x1888; // int32
    public const nint m_nActiveFXIndex = 0x188C; // ParticleIndex_t
    public const nint m_nRuneFXIndex = 0x1890; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_ArcWarden {
    public const nint m_nTalkFXIndex = 0x1DA8; // ParticleIndex_t
    public const nint m_nFXDeath = 0x1DAC; // ParticleIndex_t
    public const nint m_nTempestFX = 0x1DB0; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_CrystalMaiden {
    public const nint m_iParticleMouthIndex = 0x1DA8; // int32
    public const nint m_iParticleHandRIndex = 0x1DAC; // int32
}

public static class CDOTA_Unit_Hero_DarkSeer {
    public const nint m_nNormalPunchBuffIndex = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Dawnbreaker {
    public const nint m_nAttackState = 0x1DA8; // int32
    public const nint m_flLastAttackAnimAdvanceTime = 0x1DAC; // GameTime_t
}

public static class CDOTA_Unit_Hero_Earthshaker {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_FacelessVoid {
    public const nint m_vecStanceDestinationPoint = 0x1DA8; // Vector
}

public static class CDOTA_Unit_Hero_Grimstroke {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Juggernaut {
    public const nint m_unOmniKills = 0x1DA8; // uint32
}

public static class CDOTA_Unit_Hero_Kunkka {
    public const nint m_nFXIndex = 0x1DA8; // int32
}

public static class CDOTA_Unit_Hero_Legion_Commander {
    public const nint m_unDuelsWon = 0x1DA8; // uint32
}

public static class CDOTA_Unit_Hero_Lion {
    public const nint m_unFingerPrestigeKills = 0x1DA8; // uint32
}

public static class CDOTA_Unit_Hero_Meepo {
    public const nint m_nWhichMeepo = 0x1DA8; // int32
}

public static class CDOTA_Unit_Hero_MonkeyKing {
    public const nint mb_MonkeyHasArcana = 0x1DA8; // bool
    public const nint m_nTreeDisguise = 0x1DAC; // uint32
    public const nint m_nPerchedTree = 0x1DB0; // uint32
    public const nint m_vLastPos = 0x1DB4; // Vector
    public const nint m_bIsOnCloud = 0x1DC0; // bool
    public const nint m_fTotalDistOnCloud = 0x1DC4; // float32
    public const nint m_fTotalDistoffCloud = 0x1DC8; // float32
    public const nint m_fBackOnCloudThresh = 0x1DCC; // float32
}

public static class CDOTA_Unit_Hero_Muerta {
    public const nint m_hDoubleShotTarget = 0x1DA8; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_Hero_Nevermore {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Obsidian_Destroyer {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Oracle {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_PhantomAssassin {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
    public const nint m_nArcanaLevel = 0x1DAC; // uint32
}

public static class CDOTA_Unit_Hero_PhantomLancer {
    public const nint m_bInventoryEnabled = 0x1DA8; // bool
}

public static class CDOTA_Unit_Hero_Razor {
    public const nint m_nTargetAngle = 0x1DA8; // int32
    public const nint m_nTargetRange = 0x1DAC; // int32
}

public static class CDOTA_Unit_Hero_Rubick {
    public const nint m_stolenAbilityColorHSV1 = 0x1DA8; // Vector
    public const nint m_stolenAbilityColorHSV2 = 0x1DB4; // Vector
    public const nint m_stolenAbilityFXColorHSV = 0x1DC0; // Vector
    public const nint m_bHasInitializedAbilityColors = 0x1DCC; // bool
}

public static class CDOTA_Unit_Hero_SkeletonKing {
    public const nint m_nSkeletonWarriors = 0x1DA8; // int32
    public const nint m_vecInitialHeroKillBitmask = 0x1DAC; // int32[5]
    public const nint m_vecInGameHeroKillBitmask = 0x1DC0; // int32[5]
}

public static class CDOTA_Unit_Hero_Spectre {
    public const nint m_bArcanaKillstreakCompleted = 0x1DA8; // bool
    public const nint m_unCurrentArcanaKillStreak = 0x1DA9; // uint8
    public const nint m_unBestArcanaKillStreak = 0x1DAA; // uint8
    public const nint m_nVictimPlayerID = 0x1DAC; // PlayerID_t
    public const nint m_bArcanaKillstreakRecordBroken = 0x1DB0; // bool
}

public static class CDOTA_Unit_Hero_Techies {
    public const nint m_bLastDeathFromSuicide = 0x1DA8; // bool
}

public static class CDOTA_Unit_Hero_Terrorblade {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
    public const nint m_szResponseCriteria = 0x1DB0; // CUtlString
    public const nint m_nArcanaColor = 0x1DB8; // uint32
}

public static class CDOTA_Unit_Hero_Tiny {
    public const nint m_hTreeWearable = 0x1DA8; // CHandle< CBaseEntity >
    public const nint m_nFXIndexScepterAmbient = 0x1DAC; // ParticleIndex_t
    public const nint m_hIllusionOwner = 0x1DB0; // CHandle< CDOTA_BaseNPC >
    public const nint m_bIllusionHasTree = 0x1DB4; // bool
}

public static class CDOTA_Unit_Hero_Windrunner {
    public const nint m_nTargetAngle = 0x1DA8; // int32
    public const nint m_nFXDeath = 0x1DAC; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Winter_Wyvern {
    public const nint m_nFXDeath = 0x1DA8; // ParticleIndex_t
}

public static class CDOTA_Unit_Hero_Wisp {
    public const nint m_nAmbientFXIndex = 0x1DA8; // ParticleIndex_t
    public const nint m_nStunnedFXIndex = 0x1DAC; // ParticleIndex_t
    public const nint m_nTalkFXIndex = 0x1DB0; // ParticleIndex_t
    public const nint m_nIllusionFXIndex = 0x1DB4; // ParticleIndex_t
    public const nint m_bParticleHexed = 0x1DB8; // bool
    public const nint m_bParticleStunned = 0x1DB9; // bool
    public const nint m_bDetermineAmbientEffect = 0x1DBA; // bool
    public const nint m_flPrevHealth = 0x1DBC; // float32
}

public static class CDOTA_Unit_LoopingSound {
    public const nint m_pszNetworkedSoundLoop = 0x1778; // char[256]
    public const nint m_nLoopingSoundParity = 0x1878; // int32
}

public static class CDOTA_Unit_Miniboss {
    public const nint m_nTimesSpawned = 0x1778; // int32
    public const nint m_nTempViewer = 0x177C; // int32
    public const nint m_hAttackingHeroes = 0x1780; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_Unit_Nian {
    public const nint m_vecRecentDamage = 0x18F8; // CUtlVector< NianDamageTaken_t >
    public const nint m_hTail = 0x1910; // CHandle< CBaseEntity >
    public const nint m_hHorn = 0x1914; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_Nian_Attachment {
    public const nint m_bAttachmentBroken = 0x1778; // bool
    public const nint m_nfxIndex_tailgrow = 0x177C; // ParticleIndex_t
    public const nint m_vecRecentDamage = 0x1780; // CUtlVector< NianDamageTaken_t >
}

public static class CDOTA_Unit_Roshan {
    public const nint m_iKillerTeam = 0x1778; // int32
    public const nint m_iLastHealthPercent = 0x177C; // int32
    public const nint m_nFXIndex = 0x1780; // ParticleIndex_t
    public const nint m_hAttackingHeroes = 0x1788; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_bGoldenRoshan = 0x17A0; // bool
    public const nint m_bIsNightTimeMode = 0x17A1; // bool
}

public static class CDOTA_Unit_Scout {
    public const nint m_bUnitRespawned = 0x1778; // bool
    public const nint m_nSoleControllingPlayer = 0x177C; // PlayerID_t
    public const nint m_flRespawnTime = 0x1780; // GameTime_t
    public const nint m_nScoutState = 0x1784; // ScoutState_t
    public const nint m_hScoutStateEntity = 0x1788; // CHandle< CBaseEntity >
    public const nint m_strScoutModel = 0x1790; // CUtlString
    public const nint m_vSpawnLocation = 0x1798; // Vector
}

public static class CDOTA_Unit_SpiritBear {
    public const nint m_bShouldRespawn = 0x1DA8; // bool
    public const nint m_bStolen = 0x1DA9; // bool
}

public static class CDOTA_Unit_TargetDummy {
    public const nint m_flDamageTaken = 0x1DA8; // float32
    public const nint m_flLastHit = 0x1DAC; // float32
    public const nint m_flStartDamageTime = 0x1DB0; // GameTime_t
    public const nint m_flLastTargetDummyDamageTime = 0x1DB4; // GameTime_t
    public const nint m_bIsMoving = 0x1DB8; // bool
}

public static class CDOTA_Unit_Tidehunter_Anchor {
    public const nint m_hTarget = 0x1778; // CHandle< CBaseEntity >
    public const nint m_vProjectilePosition = 0x177C; // Vector
}

public static class CDOTA_Unit_Twin_Gate {
    public const nint m_hOtherPortal = 0x1880; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_Underlord_Portal {
    public const nint m_hOtherPortal = 0x1880; // CHandle< CBaseEntity >
}

public static class CDOTA_Unit_Undying_Zombie {
    public const nint m_ctRespawn = 0x17A8; // CountdownTimer
    public const nint m_pTombstone = 0x17C0; // CDOTA_BaseNPC*
}

public static class CDOTA_Unit_VisageFamiliar {
    public const nint ctTimer = 0x17A8; // CountdownTimer
    public const nint m_nFXAmbient = 0x17C0; // ParticleIndex_t
}

public static class CDOTA_modifier_aghsfort_juggernaut_omnislash {
    public const nint m_hTarget = 0x1318; // CHandle< CBaseEntity >
    public const nint m_hLastTarget = 0x131C; // CHandle< CBaseEntity >
    public const nint m_nJumps = 0x1320; // int32
    public const nint bonus_damage = 0x1324; // int32
    public const nint bonus_attack_speed = 0x1328; // int32
    public const nint omni_slash_radius = 0x132C; // int32
    public const nint attack_rate_multiplier = 0x1330; // float32
    public const nint upgraded_radius = 0x1334; // int32
    public const nint m_iTotalDamage = 0x1338; // int32
    public const nint m_iHeroDamage = 0x133C; // int32
    public const nint m_bReflection = 0x1340; // bool
    public const nint m_bFirstHit = 0x1341; // bool
    public const nint m_bEndNext = 0x1342; // bool
    public const nint m_fNextAttackTime = 0x1344; // GameTime_t
    public const nint m_vCastOrigin = 0x1348; // Vector
    public const nint m_hIllusions = 0x1358; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CDOTA_modifier_aghsfort_juggernaut_omnislash_Camera {
    public const nint m_bIsDone = 0x1318; // bool
}

public static class CDebugHistory {
    public const nint m_nNpcEvents = 0x44E8; // int32
}

public static class CDotaEntityFilterFlags {
    public const nint m_bInvertFilter = 0x0; // bool
    public const nint m_bEveryUnit = 0x1; // bool
    public const nint m_nTeamNumber = 0x4; // int32
    public const nint m_UnitName = 0x8; // CUtlSymbolLarge
    public const nint m_bIsAncient = 0x10; // bool
    public const nint m_bIsNeutralUnitType = 0x11; // bool
    public const nint m_bIsSummoned = 0x12; // bool
    public const nint m_bIsHero = 0x13; // bool
    public const nint m_bIsRealHero = 0x14; // bool
    public const nint m_bIsTower = 0x15; // bool
    public const nint m_bIsPhantom = 0x16; // bool
    public const nint m_bIsIllusion = 0x17; // bool
    public const nint m_bIsCreep = 0x18; // bool
    public const nint m_bIsLaneCreep = 0x19; // bool
}

public static class CDotaParticleRelay {
    public const nint m_particleSystemName = 0x4A8; // CUtlSymbolLarge
}

public static class CDotaQuest {
    public const nint m_pszQuestTitle = 0x4A8; // char[256]
    public const nint m_pszQuestText = 0x5A8; // char[256]
    public const nint m_nQuestType = 0x6A8; // int32
    public const nint m_hSubquests = 0x6AC; // CHandle< CDotaSubquestBase >[8]
    public const nint m_bHidden = 0x6CC; // bool
    public const nint m_bCompleted = 0x6CD; // bool
    public const nint m_bWinIfCompleted = 0x6CE; // bool
    public const nint m_bLoseIfCompleted = 0x6CF; // bool
    public const nint m_pszGameEndText = 0x6D0; // char[256]
    public const nint m_pnTextReplaceValuesCDotaQuest = 0x7D0; // int32[4]
    public const nint m_pszTextReplaceString = 0x7E0; // char[64]
    public const nint m_nTextReplaceValueVersion = 0x820; // int32
    public const nint m_nQuestCompleteFadeAlpha = 0x824; // int32
    public const nint m_pszQuestName = 0x828; // char[256]
}

public static class CDotaSubquestAbilityCastCount {
    public const nint m_sAbilityNameSymbol = 0x700; // int32
    public const nint m_nTargetCastCount = 0x704; // int32
    public const nint m_nCurrentCastCount = 0x708; // int32
    public const nint m_bRequiresChannelSuccess = 0x70C; // bool
}

public static class CDotaSubquestBase {
    public const nint m_pszSubquestText = 0x4A8; // char[256]
    public const nint m_bHidden = 0x5A8; // bool
    public const nint m_bCompleted = 0x5A9; // bool
    public const nint m_bShowProgressBar = 0x5AA; // bool
    public const nint m_nProgressBarHueShift = 0x5AC; // int32
    public const nint m_pnTextReplaceValuesCDotaSubquestBase = 0x5B0; // int32[2]
    public const nint m_pszTextReplaceString = 0x5B8; // char[64]
    public const nint m_nTextReplaceValueVersion = 0x5F8; // int32
    public const nint m_pszSubquestName = 0x5FC; // char[256]
}

public static class CDotaSubquestBuyItems {
    public const nint m_itemList = 0x700; // CUtlVector< char* >
}

public static class CDotaSubquestEntityDeath {
    public const nint m_entityNameList = 0x700; // CUtlVector< CUtlSymbolLarge >
}

public static class CDotaSubquestPlayerStat {
    public const nint m_ePlayerStatType = 0x700; // subquest_player_stat_types_t
    public const nint m_nPlayerStatValue = 0x704; // int32
    public const nint m_nStartingStatOffset = 0x708; // int32
}

public static class CDotaSubquestTutorialEvent {
    public const nint m_sTutorialEvent = 0x700; // CUtlSymbolLarge
}

public static class CDotaTutorialNPCBlocker {
    public const nint m_hAura = 0x4A8; // CHandle< CDOTA_BaseNPC >
    public const nint m_iOtherBlockerName = 0x4B0; // CUtlSymbolLarge
    public const nint m_hOtherBlocker = 0x4B8; // CHandle< CBaseEntity >
    public const nint m_bEndPoint = 0x4BC; // bool
    public const nint m_bEnabled = 0x4BD; // bool
    public const nint m_bStartDisabled = 0x4BE; // bool
    public const nint m_bHidden = 0x4BF; // bool
}

public static class CDotaTutorialNetworker {
    public const nint m_nTutorialState = 0x4A8; // int32
    public const nint m_nTaskProgress = 0x4AC; // int32
    public const nint m_nTaskSteps = 0x4B0; // int32
    public const nint m_nTaskSecondsRemianing = 0x4B4; // int32
    public const nint m_nUIState = 0x4B8; // int32
    public const nint m_nShopState = 0x4BC; // int32
    public const nint m_TargetLocation = 0x4C0; // Vector
    public const nint m_SpeechBubbles = 0x4D0; // CUtlVectorEmbeddedNetworkVar< CSpeechBubbleInfo >
    public const nint m_nLocationID = 0xA30; // int32
    public const nint m_GuideStr = 0xA34; // char[256]
    public const nint m_QuickBuyStr = 0xB34; // char[256]
}

public static class CDynamicLight {
    public const nint m_ActualFlags = 0x758; // uint8
    public const nint m_Flags = 0x759; // uint8
    public const nint m_LightStyle = 0x75A; // uint8
    public const nint m_On = 0x75B; // bool
    public const nint m_Radius = 0x75C; // float32
    public const nint m_Exponent = 0x760; // int32
    public const nint m_InnerAngle = 0x764; // float32
    public const nint m_OuterAngle = 0x768; // float32
    public const nint m_SpotRadius = 0x76C; // float32
}

public static class CDynamicProp {
    public const nint m_bRandomAnimator = 0x8E0; // bool
    public const nint m_flNextRandAnim = 0x8E4; // GameTime_t
    public const nint m_flMinRandAnimDuration = 0x8E8; // float32
    public const nint m_flMaxRandAnimDuration = 0x8EC; // float32
    public const nint m_bCreateNavObstacle = 0x8F8; // bool
    public const nint m_bUseHitboxesForRenderBox = 0x8F9; // bool
    public const nint m_bUseAnimGraph = 0x8FA; // bool
    public const nint m_pOutputAnimBegun = 0x900; // CEntityIOOutput
    public const nint m_pOutputAnimOver = 0x928; // CEntityIOOutput
    public const nint m_pOutputAnimLoopCycleOver = 0x950; // CEntityIOOutput
    public const nint m_OnAnimReachedStart = 0x978; // CEntityIOOutput
    public const nint m_OnAnimReachedEnd = 0x9A0; // CEntityIOOutput
    public const nint m_iszDefaultAnim = 0x9C8; // CUtlSymbolLarge
    public const nint m_nDefaultAnimLoopMode = 0x9D0; // AnimLoopMode_t
    public const nint m_bAnimateOnServer = 0x9D4; // bool
    public const nint m_bRandomizeCycle = 0x9D5; // bool
    public const nint m_bStartDisabled = 0x9D6; // bool
    public const nint m_bScriptedMovement = 0x9D7; // bool
    public const nint m_bFiredStartEndOutput = 0x9D8; // bool
    public const nint m_bForceNpcExclude = 0x9D9; // bool
    public const nint m_bCreateNonSolid = 0x9DA; // bool
    public const nint m_bIsOverrideProp = 0x9DB; // bool
    public const nint m_iInitialGlowState = 0x9DC; // int32
    public const nint m_nGlowRange = 0x9E0; // int32
    public const nint m_nGlowRangeMin = 0x9E4; // int32
    public const nint m_glowColor = 0x9E8; // Color
    public const nint m_nGlowTeam = 0x9EC; // int32
}

public static class CEconEntity {
    public const nint m_AttributeManager = 0x808; // CAttributeContainer
    public const nint m_hOldProvidee = 0x930; // CHandle< CBaseEntity >
    public const nint m_iOldOwnerClass = 0x934; // int32
}

public static class CEconEntity_AttachedParticleInfo_t {
    public const nint m_nAttachedParticleIndex = 0x0; // ParticleIndex_t
    public const nint m_customType = 0x4; // CUtlStringToken
    public const nint m_bShouldDestroyImmediately = 0x8; // bool
}

public static class CEconItemAttribute {
    public const nint m_iAttributeDefinitionIndex = 0x30; // attrib_definition_index_t
    public const nint m_flValue = 0x34; // float32
}

public static class CEconItemView {
    public const nint m_iItemDefinitionIndex = 0x8; // item_definition_index_t
    public const nint m_iEntityQuality = 0xC; // int32
    public const nint m_iEntityLevel = 0x10; // uint32
    public const nint m_iItemID = 0x18; // itemid_t
    public const nint m_iAccountID = 0x20; // uint32
    public const nint m_iInventoryPosition = 0x24; // uint32
    public const nint m_bInitialized = 0x30; // bool
    public const nint m_nOverrideStyle = 0x31; // style_index_t
    public const nint m_bIsStoreItem = 0x32; // bool
    public const nint m_bIsTradeItem = 0x33; // bool
    public const nint m_bHasComputedAttachedParticles = 0x34; // bool
    public const nint m_bHasAttachedParticles = 0x35; // bool
    public const nint m_iEntityQuantity = 0x38; // int32
    public const nint m_unClientFlags = 0x3C; // uint8
    public const nint m_unOverrideOrigin = 0x40; // eEconItemOrigin
    public const nint m_pszGrayedOutReason = 0x50; // char*
    public const nint m_AttributeList = 0x58; // CAttributeList
}

public static class CEffectData {
    public const nint m_vOrigin = 0x8; // Vector
    public const nint m_vStart = 0x14; // Vector
    public const nint m_vNormal = 0x20; // Vector
    public const nint m_vAngles = 0x2C; // QAngle
    public const nint m_hEntity = 0x38; // CEntityHandle
    public const nint m_hOtherEntity = 0x3C; // CEntityHandle
    public const nint m_flScale = 0x40; // float32
    public const nint m_flMagnitude = 0x44; // float32
    public const nint m_flRadius = 0x48; // float32
    public const nint m_nSurfaceProp = 0x4C; // CUtlStringToken
    public const nint m_nEffectIndex = 0x50; // CWeakHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_nDamageType = 0x58; // uint32
    public const nint m_nPenetrate = 0x5C; // uint8
    public const nint m_nMaterial = 0x5E; // uint16
    public const nint m_nHitBox = 0x60; // uint16
    public const nint m_nColor = 0x62; // uint8
    public const nint m_fFlags = 0x63; // uint8
    public const nint m_nAttachmentIndex = 0x64; // AttachmentHandle_t
    public const nint m_nAttachmentName = 0x68; // CUtlStringToken
    public const nint m_iEffectName = 0x6C; // uint16
    public const nint m_nExplosionType = 0x6E; // uint8
}

public static class CEntityDissolve {
    public const nint m_flFadeInStart = 0x758; // float32
    public const nint m_flFadeInLength = 0x75C; // float32
    public const nint m_flFadeOutModelStart = 0x760; // float32
    public const nint m_flFadeOutModelLength = 0x764; // float32
    public const nint m_flFadeOutStart = 0x768; // float32
    public const nint m_flFadeOutLength = 0x76C; // float32
    public const nint m_flStartTime = 0x770; // GameTime_t
    public const nint m_nDissolveType = 0x774; // EntityDisolveType_t
    public const nint m_vDissolverOrigin = 0x778; // Vector
    public const nint m_nMagnitude = 0x784; // uint32
}

public static class CEntityIdentity {
    public const nint m_nameStringableIndex = 0x14; // int32
    public const nint m_name = 0x18; // CUtlSymbolLarge
    public const nint m_designerName = 0x20; // CUtlSymbolLarge
    public const nint m_flags = 0x30; // uint32
    public const nint m_worldGroupId = 0x38; // WorldGroupId_t
    public const nint m_fDataObjectTypes = 0x3C; // uint32
    public const nint m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
    public const nint m_pPrev = 0x58; // CEntityIdentity*
    public const nint m_pNext = 0x60; // CEntityIdentity*
    public const nint m_pPrevByClass = 0x68; // CEntityIdentity*
    public const nint m_pNextByClass = 0x70; // CEntityIdentity*
}

public static class CEntityInstance {
    public const nint m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
    public const nint m_pEntity = 0x10; // CEntityIdentity*
    public const nint m_CScriptComponent = 0x28; // CScriptComponent*
}

public static class CEnvBeam {
    public const nint m_active = 0x7F8; // int32
    public const nint m_spriteTexture = 0x800; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_iszStartEntity = 0x808; // CUtlSymbolLarge
    public const nint m_iszEndEntity = 0x810; // CUtlSymbolLarge
    public const nint m_life = 0x818; // float32
    public const nint m_boltWidth = 0x81C; // float32
    public const nint m_noiseAmplitude = 0x820; // float32
    public const nint m_speed = 0x824; // int32
    public const nint m_restrike = 0x828; // float32
    public const nint m_iszSpriteName = 0x830; // CUtlSymbolLarge
    public const nint m_frameStart = 0x838; // int32
    public const nint m_vEndPointWorld = 0x83C; // Vector
    public const nint m_vEndPointRelative = 0x848; // Vector
    public const nint m_radius = 0x854; // float32
    public const nint m_TouchType = 0x858; // Touch_t
    public const nint m_iFilterName = 0x860; // CUtlSymbolLarge
    public const nint m_hFilter = 0x868; // CHandle< CBaseEntity >
    public const nint m_iszDecal = 0x870; // CUtlSymbolLarge
    public const nint m_OnTouchedByEntity = 0x878; // CEntityIOOutput
}

public static class CEnvCombinedLightProbeVolume {
    public const nint m_Color = 0x1510; // Color
    public const nint m_flBrightness = 0x1514; // float32
    public const nint m_hCubemapTexture = 0x1518; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bCustomCubemapTexture = 0x1520; // bool
    public const nint m_hLightProbeTexture = 0x1528; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightIndicesTexture = 0x1530; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightScalarsTexture = 0x1538; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightShadowsTexture = 0x1540; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vBoxMins = 0x1548; // Vector
    public const nint m_vBoxMaxs = 0x1554; // Vector
    public const nint m_LightGroups = 0x1560; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x1568; // bool
    public const nint m_nHandshake = 0x156C; // int32
    public const nint m_nEnvCubeMapArrayIndex = 0x1570; // int32
    public const nint m_nPriority = 0x1574; // int32
    public const nint m_bStartDisabled = 0x1578; // bool
    public const nint m_flEdgeFadeDist = 0x157C; // float32
    public const nint m_vEdgeFadeDists = 0x1580; // Vector
    public const nint m_nLightProbeSizeX = 0x158C; // int32
    public const nint m_nLightProbeSizeY = 0x1590; // int32
    public const nint m_nLightProbeSizeZ = 0x1594; // int32
    public const nint m_nLightProbeAtlasX = 0x1598; // int32
    public const nint m_nLightProbeAtlasY = 0x159C; // int32
    public const nint m_nLightProbeAtlasZ = 0x15A0; // int32
    public const nint m_bEnabled = 0x15B9; // bool
}

public static class CEnvCubemap {
    public const nint m_hCubemapTexture = 0x530; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bCustomCubemapTexture = 0x538; // bool
    public const nint m_flInfluenceRadius = 0x53C; // float32
    public const nint m_vBoxProjectMins = 0x540; // Vector
    public const nint m_vBoxProjectMaxs = 0x54C; // Vector
    public const nint m_LightGroups = 0x558; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x560; // bool
    public const nint m_nHandshake = 0x564; // int32
    public const nint m_nEnvCubeMapArrayIndex = 0x568; // int32
    public const nint m_nPriority = 0x56C; // int32
    public const nint m_flEdgeFadeDist = 0x570; // float32
    public const nint m_vEdgeFadeDists = 0x574; // Vector
    public const nint m_flDiffuseScale = 0x580; // float32
    public const nint m_bStartDisabled = 0x584; // bool
    public const nint m_bDefaultEnvMap = 0x585; // bool
    public const nint m_bDefaultSpecEnvMap = 0x586; // bool
    public const nint m_bIndoorCubeMap = 0x587; // bool
    public const nint m_bCopyDiffuseFromDefaultCubemap = 0x588; // bool
    public const nint m_bEnabled = 0x598; // bool
}

public static class CEnvCubemapFog {
    public const nint m_flEndDistance = 0x4A8; // float32
    public const nint m_flStartDistance = 0x4AC; // float32
    public const nint m_flFogFalloffExponent = 0x4B0; // float32
    public const nint m_bHeightFogEnabled = 0x4B4; // bool
    public const nint m_flFogHeightWidth = 0x4B8; // float32
    public const nint m_flFogHeightEnd = 0x4BC; // float32
    public const nint m_flFogHeightStart = 0x4C0; // float32
    public const nint m_flFogHeightExponent = 0x4C4; // float32
    public const nint m_flLODBias = 0x4C8; // float32
    public const nint m_bActive = 0x4CC; // bool
    public const nint m_bStartDisabled = 0x4CD; // bool
    public const nint m_flFogMaxOpacity = 0x4D0; // float32
    public const nint m_nCubemapSourceType = 0x4D4; // int32
    public const nint m_hSkyMaterial = 0x4D8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_iszSkyEntity = 0x4E0; // CUtlSymbolLarge
    public const nint m_hFogCubemapTexture = 0x4E8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_bHasHeightFogEnd = 0x4F0; // bool
    public const nint m_bFirstTime = 0x4F1; // bool
}

public static class CEnvDecal {
    public const nint m_hDecalMaterial = 0x758; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_flWidth = 0x760; // float32
    public const nint m_flHeight = 0x764; // float32
    public const nint m_flDepth = 0x768; // float32
    public const nint m_nRenderOrder = 0x76C; // uint32
    public const nint m_bProjectOnWorld = 0x770; // bool
    public const nint m_bProjectOnCharacters = 0x771; // bool
    public const nint m_bProjectOnWater = 0x772; // bool
    public const nint m_flDepthSortBias = 0x774; // float32
}

public static class CEnvDeferredLight {
    public const nint m_hTargetEntity = 0x758; // CHandle< CBaseEntity >
    public const nint m_LightColor = 0x75C; // Color
    public const nint m_flIntensity = 0x760; // float32
    public const nint m_flLightSize = 0x764; // float32
    public const nint m_flSpotFoV = 0x768; // float32
    public const nint m_vLightDirection = 0x76C; // QAngle
    public const nint m_flStartFalloff = 0x778; // float32
    public const nint m_flDistanceFalloff = 0x77C; // float32
    public const nint m_nFlags = 0x780; // uint32
    public const nint m_ProjectedTextureName = 0x784; // char[512]
}

public static class CEnvDetailController {
    public const nint m_flFadeStartDist = 0x4A8; // float32
    public const nint m_flFadeEndDist = 0x4AC; // float32
}

public static class CEnvEntityMaker {
    public const nint m_vecEntityMins = 0x4A8; // Vector
    public const nint m_vecEntityMaxs = 0x4B4; // Vector
    public const nint m_hCurrentInstance = 0x4C0; // CHandle< CBaseEntity >
    public const nint m_hCurrentBlocker = 0x4C4; // CHandle< CBaseEntity >
    public const nint m_vecBlockerOrigin = 0x4C8; // Vector
    public const nint m_angPostSpawnDirection = 0x4D4; // QAngle
    public const nint m_flPostSpawnDirectionVariance = 0x4E0; // float32
    public const nint m_flPostSpawnSpeed = 0x4E4; // float32
    public const nint m_bPostSpawnUseAngles = 0x4E8; // bool
    public const nint m_iszTemplate = 0x4F0; // CUtlSymbolLarge
    public const nint m_pOutputOnSpawned = 0x4F8; // CEntityIOOutput
    public const nint m_pOutputOnFailedSpawn = 0x520; // CEntityIOOutput
}

public static class CEnvExplosion {
    public const nint m_iMagnitude = 0x758; // int32
    public const nint m_flPlayerDamage = 0x75C; // float32
    public const nint m_iRadiusOverride = 0x760; // int32
    public const nint m_flInnerRadius = 0x764; // float32
    public const nint m_spriteScale = 0x768; // int32
    public const nint m_flDamageForce = 0x76C; // float32
    public const nint m_hInflictor = 0x770; // CHandle< CBaseEntity >
    public const nint m_iCustomDamageType = 0x774; // int32
    public const nint m_iszExplosionType = 0x780; // CUtlSymbolLarge
    public const nint m_iszCustomEffectName = 0x788; // CUtlSymbolLarge
    public const nint m_iszCustomSoundName = 0x790; // CUtlSymbolLarge
    public const nint m_iClassIgnore = 0x798; // Class_T
    public const nint m_iClassIgnore2 = 0x79C; // Class_T
    public const nint m_iszEntityIgnoreName = 0x7A0; // CUtlSymbolLarge
    public const nint m_hEntityIgnore = 0x7A8; // CHandle< CBaseEntity >
}

public static class CEnvFade {
    public const nint m_fadeColor = 0x4A8; // Color
    public const nint m_Duration = 0x4AC; // float32
    public const nint m_HoldDuration = 0x4B0; // float32
    public const nint m_OnBeginFade = 0x4B8; // CEntityIOOutput
}

public static class CEnvGlobal {
    public const nint m_outCounter = 0x4A8; // CEntityOutputTemplate< int32 >
    public const nint m_globalstate = 0x4D0; // CUtlSymbolLarge
    public const nint m_triggermode = 0x4D8; // int32
    public const nint m_initialstate = 0x4DC; // int32
    public const nint m_counter = 0x4E0; // int32
}

public static class CEnvInstructorHint {
    public const nint m_iszName = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszReplace_Key = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszHintTargetEntity = 0x4B8; // CUtlSymbolLarge
    public const nint m_iTimeout = 0x4C0; // int32
    public const nint m_iDisplayLimit = 0x4C4; // int32
    public const nint m_iszIcon_Onscreen = 0x4C8; // CUtlSymbolLarge
    public const nint m_iszIcon_Offscreen = 0x4D0; // CUtlSymbolLarge
    public const nint m_iszCaption = 0x4D8; // CUtlSymbolLarge
    public const nint m_iszActivatorCaption = 0x4E0; // CUtlSymbolLarge
    public const nint m_Color = 0x4E8; // Color
    public const nint m_fIconOffset = 0x4EC; // float32
    public const nint m_fRange = 0x4F0; // float32
    public const nint m_iPulseOption = 0x4F4; // uint8
    public const nint m_iAlphaOption = 0x4F5; // uint8
    public const nint m_iShakeOption = 0x4F6; // uint8
    public const nint m_bStatic = 0x4F7; // bool
    public const nint m_bNoOffscreen = 0x4F8; // bool
    public const nint m_bForceCaption = 0x4F9; // bool
    public const nint m_iInstanceType = 0x4FC; // int32
    public const nint m_bSuppressRest = 0x500; // bool
    public const nint m_iszBinding = 0x508; // CUtlSymbolLarge
    public const nint m_bAllowNoDrawTarget = 0x510; // bool
    public const nint m_bAutoStart = 0x511; // bool
    public const nint m_bLocalPlayerOnly = 0x512; // bool
}

public static class CEnvInstructorVRHint {
    public const nint m_iszName = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszHintTargetEntity = 0x4B0; // CUtlSymbolLarge
    public const nint m_iTimeout = 0x4B8; // int32
    public const nint m_iszCaption = 0x4C0; // CUtlSymbolLarge
    public const nint m_iszStartSound = 0x4C8; // CUtlSymbolLarge
    public const nint m_iLayoutFileType = 0x4D0; // int32
    public const nint m_iszCustomLayoutFile = 0x4D8; // CUtlSymbolLarge
    public const nint m_iAttachType = 0x4E0; // int32
    public const nint m_flHeightOffset = 0x4E4; // float32
}

public static class CEnvLightProbeVolume {
    public const nint m_hLightProbeTexture = 0x1488; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightIndicesTexture = 0x1490; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightScalarsTexture = 0x1498; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hLightProbeDirectLightShadowsTexture = 0x14A0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vBoxMins = 0x14A8; // Vector
    public const nint m_vBoxMaxs = 0x14B4; // Vector
    public const nint m_LightGroups = 0x14C0; // CUtlSymbolLarge
    public const nint m_bMoveable = 0x14C8; // bool
    public const nint m_nHandshake = 0x14CC; // int32
    public const nint m_nPriority = 0x14D0; // int32
    public const nint m_bStartDisabled = 0x14D4; // bool
    public const nint m_nLightProbeSizeX = 0x14D8; // int32
    public const nint m_nLightProbeSizeY = 0x14DC; // int32
    public const nint m_nLightProbeSizeZ = 0x14E0; // int32
    public const nint m_nLightProbeAtlasX = 0x14E4; // int32
    public const nint m_nLightProbeAtlasY = 0x14E8; // int32
    public const nint m_nLightProbeAtlasZ = 0x14EC; // int32
    public const nint m_bEnabled = 0x14F9; // bool
}

public static class CEnvMicrophone {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_hMeasureTarget = 0x4AC; // CHandle< CBaseEntity >
    public const nint m_nSoundMask = 0x4B0; // int32
    public const nint m_flSensitivity = 0x4B4; // float32
    public const nint m_flSmoothFactor = 0x4B8; // float32
    public const nint m_flMaxRange = 0x4BC; // float32
    public const nint m_iszSpeakerName = 0x4C0; // CUtlSymbolLarge
    public const nint m_hSpeaker = 0x4C8; // CHandle< CBaseEntity >
    public const nint m_bAvoidFeedback = 0x4CC; // bool
    public const nint m_iSpeakerDSPPreset = 0x4D0; // int32
    public const nint m_iszListenFilter = 0x4D8; // CUtlSymbolLarge
    public const nint m_hListenFilter = 0x4E0; // CHandle< CBaseFilter >
    public const nint m_SoundLevel = 0x4E8; // CEntityOutputTemplate< float32 >
    public const nint m_OnRoutedSound = 0x510; // CEntityIOOutput
    public const nint m_OnHeardSound = 0x538; // CEntityIOOutput
    public const nint m_szLastSound = 0x560; // char[256]
    public const nint m_iLastRoutedFrame = 0x660; // int32
}

public static class CEnvParticleGlow {
    public const nint m_flAlphaScale = 0xCD0; // float32
    public const nint m_flRadiusScale = 0xCD4; // float32
    public const nint m_flSelfIllumScale = 0xCD8; // float32
    public const nint m_ColorTint = 0xCDC; // Color
    public const nint m_hTextureOverride = 0xCE0; // CStrongHandle< InfoForResourceTypeCTextureBase >
}

public static class CEnvProjectedTexture {
    public const nint m_hTargetEntity = 0x758; // CHandle< CBaseEntity >
    public const nint m_bState = 0x75C; // bool
    public const nint m_bAlwaysUpdate = 0x75D; // bool
    public const nint m_flLightFOV = 0x760; // float32
    public const nint m_bEnableShadows = 0x764; // bool
    public const nint m_bSimpleProjection = 0x765; // bool
    public const nint m_bLightOnlyTarget = 0x766; // bool
    public const nint m_bLightWorld = 0x767; // bool
    public const nint m_bCameraSpace = 0x768; // bool
    public const nint m_flBrightnessScale = 0x76C; // float32
    public const nint m_LightColor = 0x770; // Color
    public const nint m_flIntensity = 0x774; // float32
    public const nint m_flLinearAttenuation = 0x778; // float32
    public const nint m_flQuadraticAttenuation = 0x77C; // float32
    public const nint m_bVolumetric = 0x780; // bool
    public const nint m_flNoiseStrength = 0x784; // float32
    public const nint m_flFlashlightTime = 0x788; // float32
    public const nint m_nNumPlanes = 0x78C; // uint32
    public const nint m_flPlaneOffset = 0x790; // float32
    public const nint m_flVolumetricIntensity = 0x794; // float32
    public const nint m_flColorTransitionTime = 0x798; // float32
    public const nint m_flAmbient = 0x79C; // float32
    public const nint m_SpotlightTextureName = 0x7A0; // char[512]
    public const nint m_nSpotlightTextureFrame = 0x9A0; // int32
    public const nint m_nShadowQuality = 0x9A4; // uint32
    public const nint m_flNearZ = 0x9A8; // float32
    public const nint m_flFarZ = 0x9AC; // float32
    public const nint m_flProjectionSize = 0x9B0; // float32
    public const nint m_flRotation = 0x9B4; // float32
    public const nint m_bFlipHorizontal = 0x9B8; // bool
}

public static class CEnvScreenOverlay {
    public const nint m_iszOverlayNames = 0x4A8; // CUtlSymbolLarge[10]
    public const nint m_flOverlayTimes = 0x4F8; // float32[10]
    public const nint m_flStartTime = 0x520; // GameTime_t
    public const nint m_iDesiredOverlay = 0x524; // int32
    public const nint m_bIsActive = 0x528; // bool
}

public static class CEnvShake {
    public const nint m_limitToEntity = 0x4A8; // CUtlSymbolLarge
    public const nint m_Amplitude = 0x4B0; // float32
    public const nint m_Frequency = 0x4B4; // float32
    public const nint m_Duration = 0x4B8; // float32
    public const nint m_Radius = 0x4BC; // float32
    public const nint m_stopTime = 0x4C0; // GameTime_t
    public const nint m_nextShake = 0x4C4; // GameTime_t
    public const nint m_currentAmp = 0x4C8; // float32
    public const nint m_maxForce = 0x4CC; // Vector
    public const nint m_shakeCallback = 0x4E0; // CPhysicsShake
}

public static class CEnvSky {
    public const nint m_hSkyMaterial = 0x758; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_hSkyMaterialLightingOnly = 0x760; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_bStartDisabled = 0x768; // bool
    public const nint m_vTintColor = 0x769; // Color
    public const nint m_vTintColorLightingOnly = 0x76D; // Color
    public const nint m_flBrightnessScale = 0x774; // float32
    public const nint m_nFogType = 0x778; // int32
    public const nint m_flFogMinStart = 0x77C; // float32
    public const nint m_flFogMinEnd = 0x780; // float32
    public const nint m_flFogMaxStart = 0x784; // float32
    public const nint m_flFogMaxEnd = 0x788; // float32
    public const nint m_bEnabled = 0x78C; // bool
}

public static class CEnvSoundscape {
    public const nint m_OnPlay = 0x4A8; // CEntityIOOutput
    public const nint m_flRadius = 0x4D0; // float32
    public const nint m_soundscapeName = 0x4D8; // CUtlSymbolLarge
    public const nint m_soundEventName = 0x4E0; // CUtlSymbolLarge
    public const nint m_bOverrideWithEvent = 0x4E8; // bool
    public const nint m_soundscapeIndex = 0x4EC; // int32
    public const nint m_soundscapeEntityListId = 0x4F0; // int32
    public const nint m_soundEventHash = 0x4F4; // uint32
    public const nint m_positionNames = 0x4F8; // CUtlSymbolLarge[8]
    public const nint m_hProxySoundscape = 0x538; // CHandle< CEnvSoundscape >
    public const nint m_bDisabled = 0x53C; // bool
}

public static class CEnvSoundscapeProxy {
    public const nint m_MainSoundscapeName = 0x540; // CUtlSymbolLarge
}

public static class CEnvSpark {
    public const nint m_flDelay = 0x4A8; // float32
    public const nint m_nMagnitude = 0x4AC; // int32
    public const nint m_nTrailLength = 0x4B0; // int32
    public const nint m_nType = 0x4B4; // int32
    public const nint m_OnSpark = 0x4B8; // CEntityIOOutput
}

public static class CEnvTilt {
    public const nint m_Duration = 0x4A8; // float32
    public const nint m_Radius = 0x4AC; // float32
    public const nint m_TiltTime = 0x4B0; // float32
    public const nint m_stopTime = 0x4B4; // GameTime_t
}

public static class CEnvVolumetricFogController {
    public const nint m_flScattering = 0x4A8; // float32
    public const nint m_flAnisotropy = 0x4AC; // float32
    public const nint m_flFadeSpeed = 0x4B0; // float32
    public const nint m_flDrawDistance = 0x4B4; // float32
    public const nint m_flFadeInStart = 0x4B8; // float32
    public const nint m_flFadeInEnd = 0x4BC; // float32
    public const nint m_flIndirectStrength = 0x4C0; // float32
    public const nint m_nIndirectTextureDimX = 0x4C4; // int32
    public const nint m_nIndirectTextureDimY = 0x4C8; // int32
    public const nint m_nIndirectTextureDimZ = 0x4CC; // int32
    public const nint m_vBoxMins = 0x4D0; // Vector
    public const nint m_vBoxMaxs = 0x4DC; // Vector
    public const nint m_bActive = 0x4E8; // bool
    public const nint m_flStartAnisoTime = 0x4EC; // GameTime_t
    public const nint m_flStartScatterTime = 0x4F0; // GameTime_t
    public const nint m_flStartDrawDistanceTime = 0x4F4; // GameTime_t
    public const nint m_flStartAnisotropy = 0x4F8; // float32
    public const nint m_flStartScattering = 0x4FC; // float32
    public const nint m_flStartDrawDistance = 0x500; // float32
    public const nint m_flDefaultAnisotropy = 0x504; // float32
    public const nint m_flDefaultScattering = 0x508; // float32
    public const nint m_flDefaultDrawDistance = 0x50C; // float32
    public const nint m_bStartDisabled = 0x510; // bool
    public const nint m_bEnableIndirect = 0x511; // bool
    public const nint m_bIsMaster = 0x512; // bool
    public const nint m_hFogIndirectTexture = 0x518; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_nForceRefreshCount = 0x520; // int32
    public const nint m_bFirstTime = 0x524; // bool
}

public static class CEnvVolumetricFogVolume {
    public const nint m_bActive = 0x4A8; // bool
    public const nint m_vBoxMins = 0x4AC; // Vector
    public const nint m_vBoxMaxs = 0x4B8; // Vector
    public const nint m_bStartDisabled = 0x4C4; // bool
    public const nint m_flStrength = 0x4C8; // float32
    public const nint m_nFalloffShape = 0x4CC; // int32
    public const nint m_flFalloffExponent = 0x4D0; // float32
}

public static class CEnvWindShared {
    public const nint m_flStartTime = 0x8; // GameTime_t
    public const nint m_iWindSeed = 0xC; // uint32
    public const nint m_iMinWind = 0x10; // uint16
    public const nint m_iMaxWind = 0x12; // uint16
    public const nint m_windRadius = 0x14; // int32
    public const nint m_iMinGust = 0x18; // uint16
    public const nint m_iMaxGust = 0x1A; // uint16
    public const nint m_flMinGustDelay = 0x1C; // float32
    public const nint m_flMaxGustDelay = 0x20; // float32
    public const nint m_flGustDuration = 0x24; // float32
    public const nint m_iGustDirChange = 0x28; // uint16
    public const nint m_location = 0x2C; // Vector
    public const nint m_iszGustSound = 0x38; // int32
    public const nint m_iWindDir = 0x3C; // int32
    public const nint m_flWindSpeed = 0x40; // float32
    public const nint m_currentWindVector = 0x44; // Vector
    public const nint m_CurrentSwayVector = 0x50; // Vector
    public const nint m_PrevSwayVector = 0x5C; // Vector
    public const nint m_iInitialWindDir = 0x68; // uint16
    public const nint m_flInitialWindSpeed = 0x6C; // float32
    public const nint m_OnGustStart = 0x70; // CEntityIOOutput
    public const nint m_OnGustEnd = 0x98; // CEntityIOOutput
    public const nint m_flVariationTime = 0xC0; // GameTime_t
    public const nint m_flSwayTime = 0xC4; // GameTime_t
    public const nint m_flSimTime = 0xC8; // GameTime_t
    public const nint m_flSwitchTime = 0xCC; // GameTime_t
    public const nint m_flAveWindSpeed = 0xD0; // float32
    public const nint m_bGusting = 0xD4; // bool
    public const nint m_flWindAngleVariation = 0xD8; // float32
    public const nint m_flWindSpeedVariation = 0xDC; // float32
    public const nint m_iEntIndex = 0xE0; // CEntityIndex
}

public static class CEnvWindShared_WindAveEvent_t {
    public const nint m_flStartWindSpeed = 0x0; // float32
    public const nint m_flAveWindSpeed = 0x4; // float32
}

public static class CEnvWindShared_WindVariationEvent_t {
    public const nint m_flWindAngleVariation = 0x0; // float32
    public const nint m_flWindSpeedVariation = 0x4; // float32
}

public static class CFailableAchievement {
    public const nint m_bActivated = 0xC0; // bool
    public const nint m_bFailed = 0xC1; // bool
}

public static class CFilterAttributeInt {
    public const nint m_sAttributeName = 0x500; // CUtlStringToken
}

public static class CFilterClass {
    public const nint m_iFilterClass = 0x500; // CUtlSymbolLarge
}

public static class CFilterContext {
    public const nint m_iFilterContext = 0x500; // CUtlSymbolLarge
}

public static class CFilterDotaEntities {
    public const nint m_FilterFlags = 0x500; // CDotaEntityFilterFlags
}

public static class CFilterEnemy {
    public const nint m_iszEnemyName = 0x500; // CUtlSymbolLarge
    public const nint m_flRadius = 0x508; // float32
    public const nint m_flOuterRadius = 0x50C; // float32
    public const nint m_nMaxSquadmatesPerEnemy = 0x510; // int32
    public const nint m_iszPlayerName = 0x518; // CUtlSymbolLarge
}

public static class CFilterMassGreater {
    public const nint m_fFilterMass = 0x500; // float32
}

public static class CFilterModel {
    public const nint m_iFilterModel = 0x500; // CUtlSymbolLarge
}

public static class CFilterMultiple {
    public const nint m_nFilterType = 0x500; // filter_t
    public const nint m_iFilterName = 0x508; // CUtlSymbolLarge[10]
    public const nint m_hFilter = 0x558; // CHandle< CBaseEntity >[10]
    public const nint m_nFilterCount = 0x580; // int32
}

public static class CFilterName {
    public const nint m_iFilterName = 0x500; // CUtlSymbolLarge
}

public static class CFilterProximity {
    public const nint m_flRadius = 0x500; // float32
}

public static class CFoWBlockerRegion {
    public const nint m_vecFowBlockers = 0x4A8; // CUtlVectorEmbeddedNetworkVar< FowBlocker_t >
    public const nint m_flMinX = 0x4F8; // float32
    public const nint m_flMaxX = 0x4FC; // float32
    public const nint m_flMinY = 0x500; // float32
    public const nint m_flMaxY = 0x504; // float32
    public const nint m_flGridSize = 0x508; // float32
}

public static class CFoWRevealerEntity {
    public const nint m_unViewerTeam = 0x4A8; // uint32
    public const nint m_nVisionRange = 0x4AC; // int32
}

public static class CFogController {
    public const nint m_fog = 0x4A8; // fogparams_t
    public const nint m_bUseAngles = 0x510; // bool
    public const nint m_iChangedVariables = 0x514; // int32
}

public static class CFogTrigger {
    public const nint m_fog = 0x900; // fogparams_t
}

public static class CFogVolume {
    public const nint m_fogName = 0x758; // CUtlSymbolLarge
    public const nint m_postProcessName = 0x760; // CUtlSymbolLarge
    public const nint m_colorCorrectionName = 0x768; // CUtlSymbolLarge
    public const nint m_bDisabled = 0x778; // bool
    public const nint m_bInFogVolumesList = 0x779; // bool
}

public static class CFuncBrush {
    public const nint m_iSolidity = 0x758; // BrushSolidities_e
    public const nint m_iDisabled = 0x75C; // int32
    public const nint m_bSolidBsp = 0x760; // bool
    public const nint m_iszExcludedClass = 0x768; // CUtlSymbolLarge
    public const nint m_bInvertExclusion = 0x770; // bool
    public const nint m_bScriptedMovement = 0x771; // bool
}

public static class CFuncElectrifiedVolume {
    public const nint m_EffectName = 0x778; // CUtlSymbolLarge
    public const nint m_EffectInterpenetrateName = 0x780; // CUtlSymbolLarge
    public const nint m_EffectZapName = 0x788; // CUtlSymbolLarge
    public const nint m_iszEffectSource = 0x790; // CUtlSymbolLarge
}

public static class CFuncInteractionLayerClip {
    public const nint m_bDisabled = 0x758; // bool
    public const nint m_iszInteractsAs = 0x760; // CUtlSymbolLarge
    public const nint m_iszInteractsWith = 0x768; // CUtlSymbolLarge
}

public static class CFuncMoveLinear {
    public const nint m_authoredPosition = 0x7D8; // MoveLinearAuthoredPos_t
    public const nint m_angMoveEntitySpace = 0x7DC; // QAngle
    public const nint m_vecMoveDirParentSpace = 0x7E8; // Vector
    public const nint m_soundStart = 0x7F8; // CUtlSymbolLarge
    public const nint m_soundStop = 0x800; // CUtlSymbolLarge
    public const nint m_currentSound = 0x808; // CUtlSymbolLarge
    public const nint m_flBlockDamage = 0x810; // float32
    public const nint m_flStartPosition = 0x814; // float32
    public const nint m_flMoveDistance = 0x818; // float32
    public const nint m_OnFullyOpen = 0x828; // CEntityIOOutput
    public const nint m_OnFullyClosed = 0x850; // CEntityIOOutput
    public const nint m_bCreateMovableNavMesh = 0x878; // bool
    public const nint m_bCreateNavObstacle = 0x879; // bool
}

public static class CFuncNavBlocker {
    public const nint m_bDisabled = 0x758; // bool
    public const nint m_nBlockedTeamNumber = 0x75C; // int32
}

public static class CFuncNavObstruction {
    public const nint m_bDisabled = 0x760; // bool
}

public static class CFuncPlat {
    public const nint m_sNoise = 0x800; // CUtlSymbolLarge
}

public static class CFuncPlatRot {
    public const nint m_end = 0x808; // QAngle
    public const nint m_start = 0x814; // QAngle
}

public static class CFuncRotating {
    public const nint m_vecMoveAng = 0x758; // QAngle
    public const nint m_flFanFriction = 0x764; // float32
    public const nint m_flAttenuation = 0x768; // float32
    public const nint m_flVolume = 0x76C; // float32
    public const nint m_flTargetSpeed = 0x770; // float32
    public const nint m_flMaxSpeed = 0x774; // float32
    public const nint m_flBlockDamage = 0x778; // float32
    public const nint m_flTimeScale = 0x77C; // float32
    public const nint m_NoiseRunning = 0x780; // CUtlSymbolLarge
    public const nint m_bReversed = 0x788; // bool
    public const nint m_angStart = 0x794; // QAngle
    public const nint m_bStopAtStartPos = 0x7A0; // bool
    public const nint m_vecClientOrigin = 0x7A4; // Vector
    public const nint m_vecClientAngles = 0x7B0; // QAngle
}

public static class CFuncTimescale {
    public const nint m_flDesiredTimescale = 0x4A8; // float32
    public const nint m_flAcceleration = 0x4AC; // float32
    public const nint m_flMinBlendRate = 0x4B0; // float32
    public const nint m_flBlendDeltaMultiplier = 0x4B4; // float32
    public const nint m_isStarted = 0x4B8; // bool
}

public static class CFuncTrackChange {
    public const nint m_trackTop = 0x820; // CPathTrack*
    public const nint m_trackBottom = 0x828; // CPathTrack*
    public const nint m_train = 0x830; // CFuncTrackTrain*
    public const nint m_trackTopName = 0x838; // CUtlSymbolLarge
    public const nint m_trackBottomName = 0x840; // CUtlSymbolLarge
    public const nint m_trainName = 0x848; // CUtlSymbolLarge
    public const nint m_code = 0x850; // TRAIN_CODE
    public const nint m_targetState = 0x854; // int32
    public const nint m_use = 0x858; // int32
}

public static class CFuncTrackTrain {
    public const nint m_ppath = 0x758; // CHandle< CPathTrack >
    public const nint m_length = 0x75C; // float32
    public const nint m_vPosPrev = 0x760; // Vector
    public const nint m_angPrev = 0x76C; // QAngle
    public const nint m_controlMins = 0x778; // Vector
    public const nint m_controlMaxs = 0x784; // Vector
    public const nint m_lastBlockPos = 0x790; // Vector
    public const nint m_lastBlockTick = 0x79C; // int32
    public const nint m_flVolume = 0x7A0; // float32
    public const nint m_flBank = 0x7A4; // float32
    public const nint m_oldSpeed = 0x7A8; // float32
    public const nint m_flBlockDamage = 0x7AC; // float32
    public const nint m_height = 0x7B0; // float32
    public const nint m_maxSpeed = 0x7B4; // float32
    public const nint m_dir = 0x7B8; // float32
    public const nint m_iszSoundMove = 0x7C0; // CUtlSymbolLarge
    public const nint m_iszSoundMovePing = 0x7C8; // CUtlSymbolLarge
    public const nint m_iszSoundStart = 0x7D0; // CUtlSymbolLarge
    public const nint m_iszSoundStop = 0x7D8; // CUtlSymbolLarge
    public const nint m_strPathTarget = 0x7E0; // CUtlSymbolLarge
    public const nint m_flMoveSoundMinDuration = 0x7E8; // float32
    public const nint m_flMoveSoundMaxDuration = 0x7EC; // float32
    public const nint m_flNextMoveSoundTime = 0x7F0; // GameTime_t
    public const nint m_flMoveSoundMinPitch = 0x7F4; // float32
    public const nint m_flMoveSoundMaxPitch = 0x7F8; // float32
    public const nint m_eOrientationType = 0x7FC; // TrainOrientationType_t
    public const nint m_eVelocityType = 0x800; // TrainVelocityType_t
    public const nint m_OnStart = 0x810; // CEntityIOOutput
    public const nint m_OnNext = 0x838; // CEntityIOOutput
    public const nint m_OnArrivedAtDestinationNode = 0x860; // CEntityIOOutput
    public const nint m_bManualSpeedChanges = 0x888; // bool
    public const nint m_flDesiredSpeed = 0x88C; // float32
    public const nint m_flSpeedChangeTime = 0x890; // GameTime_t
    public const nint m_flAccelSpeed = 0x894; // float32
    public const nint m_flDecelSpeed = 0x898; // float32
    public const nint m_bAccelToSpeed = 0x89C; // bool
    public const nint m_flTimeScale = 0x8A0; // float32
    public const nint m_flNextMPSoundTime = 0x8A4; // GameTime_t
}

public static class CFuncTrain {
    public const nint m_hCurrentTarget = 0x800; // CHandle< CBaseEntity >
    public const nint m_activated = 0x804; // bool
    public const nint m_hEnemy = 0x808; // CHandle< CBaseEntity >
    public const nint m_flBlockDamage = 0x80C; // float32
    public const nint m_flNextBlockTime = 0x810; // GameTime_t
    public const nint m_iszLastTarget = 0x818; // CUtlSymbolLarge
}

public static class CFuncVPhysicsClip {
    public const nint m_bDisabled = 0x758; // bool
}

public static class CFuncWall {
    public const nint m_nState = 0x758; // int32
}

public static class CGameChoreoServices {
    public const nint m_hOwner = 0x8; // CHandle< CBaseAnimGraph >
    public const nint m_hScriptedSequence = 0xC; // CHandle< CScriptedSequence >
    public const nint m_scriptState = 0x10; // IChoreoServices::ScriptState_t
    public const nint m_choreoState = 0x14; // IChoreoServices::ChoreoState_t
    public const nint m_flTimeStartedState = 0x18; // GameTime_t
}

public static class CGameGibManager {
    public const nint m_bAllowNewGibs = 0x4C8; // bool
    public const nint m_iCurrentMaxPieces = 0x4CC; // int32
    public const nint m_iMaxPieces = 0x4D0; // int32
    public const nint m_iLastFrame = 0x4D4; // int32
}

public static class CGameRules {
    public const nint m_szQuestName = 0x8; // char[128]
    public const nint m_nQuestPhase = 0x88; // int32
}

public static class CGameSceneNode {
    public const nint m_nodeToWorld = 0x10; // CTransform
    public const nint m_pOwner = 0x30; // CEntityInstance*
    public const nint m_pParent = 0x38; // CGameSceneNode*
    public const nint m_pChild = 0x40; // CGameSceneNode*
    public const nint m_pNextSibling = 0x48; // CGameSceneNode*
    public const nint m_hParent = 0x70; // CGameSceneNodeHandle
    public const nint m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
    public const nint m_angRotation = 0xB8; // QAngle
    public const nint m_flScale = 0xC4; // float32
    public const nint m_vecAbsOrigin = 0xC8; // Vector
    public const nint m_angAbsRotation = 0xD4; // QAngle
    public const nint m_flAbsScale = 0xE0; // float32
    public const nint m_nParentAttachmentOrBone = 0xE4; // int16
    public const nint m_bDebugAbsOriginChanges = 0xE6; // bool
    public const nint m_bDormant = 0xE7; // bool
    public const nint m_bForceParentToBeNetworked = 0xE8; // bool
    public const nint m_bDirtyHierarchy = 0x0; // bitfield:1
    public const nint m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
    public const nint m_bNetworkedPositionChanged = 0x0; // bitfield:1
    public const nint m_bNetworkedAnglesChanged = 0x0; // bitfield:1
    public const nint m_bNetworkedScaleChanged = 0x0; // bitfield:1
    public const nint m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
    public const nint m_bNotifyBoneTransformsChanged = 0x0; // bitfield:1
    public const nint m_bBoneMergeFlex = 0x0; // bitfield:1
    public const nint m_nLatchAbsOrigin = 0x0; // bitfield:2
    public const nint m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
    public const nint m_nHierarchicalDepth = 0xEB; // uint8
    public const nint m_nHierarchyType = 0xEC; // uint8
    public const nint m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xED; // uint8
    public const nint m_name = 0xF0; // CUtlStringToken
    public const nint m_hierarchyAttachName = 0x130; // CUtlStringToken
    public const nint m_flZOffset = 0x134; // float32
    public const nint m_vRenderOrigin = 0x138; // Vector
}

public static class CGameSceneNodeHandle {
    public const nint m_hOwner = 0x8; // CEntityHandle
    public const nint m_name = 0xC; // CUtlStringToken
}

public static class CGameScriptedMoveData {
    public const nint m_vDest = 0x0; // Vector
    public const nint m_vSrc = 0xC; // Vector
    public const nint m_angSrc = 0x18; // QAngle
    public const nint m_angDst = 0x24; // QAngle
    public const nint m_angCurrent = 0x30; // QAngle
    public const nint m_flAngRate = 0x3C; // float32
    public const nint m_flDuration = 0x40; // float32
    public const nint m_flStartTime = 0x44; // GameTime_t
    public const nint m_nPrevMoveType = 0x48; // MoveType_t
    public const nint m_bActive = 0x49; // bool
    public const nint m_bTeleportOnEnd = 0x4A; // bool
    public const nint m_bEndOnDestinationReached = 0x4B; // bool
    public const nint m_bIgnoreRotation = 0x4C; // bool
    public const nint m_nType = 0x50; // ScriptedMoveType_t
    public const nint m_bSuccess = 0x54; // bool
    public const nint m_nForcedCrouchState = 0x58; // ForcedCrouchState_t
    public const nint m_bIgnoreCollisions = 0x5C; // bool
}

public static class CGenericConstraint {
    public const nint m_nLinearMotionX = 0x508; // JointMotion_t
    public const nint m_nLinearMotionY = 0x50C; // JointMotion_t
    public const nint m_nLinearMotionZ = 0x510; // JointMotion_t
    public const nint m_flLinearFrequencyX = 0x514; // float32
    public const nint m_flLinearFrequencyY = 0x518; // float32
    public const nint m_flLinearFrequencyZ = 0x51C; // float32
    public const nint m_flLinearDampingRatioX = 0x520; // float32
    public const nint m_flLinearDampingRatioY = 0x524; // float32
    public const nint m_flLinearDampingRatioZ = 0x528; // float32
    public const nint m_flMaxLinearImpulseX = 0x52C; // float32
    public const nint m_flMaxLinearImpulseY = 0x530; // float32
    public const nint m_flMaxLinearImpulseZ = 0x534; // float32
    public const nint m_flBreakAfterTimeX = 0x538; // float32
    public const nint m_flBreakAfterTimeY = 0x53C; // float32
    public const nint m_flBreakAfterTimeZ = 0x540; // float32
    public const nint m_flBreakAfterTimeStartTimeX = 0x544; // GameTime_t
    public const nint m_flBreakAfterTimeStartTimeY = 0x548; // GameTime_t
    public const nint m_flBreakAfterTimeStartTimeZ = 0x54C; // GameTime_t
    public const nint m_flBreakAfterTimeThresholdX = 0x550; // float32
    public const nint m_flBreakAfterTimeThresholdY = 0x554; // float32
    public const nint m_flBreakAfterTimeThresholdZ = 0x558; // float32
    public const nint m_flNotifyForceX = 0x55C; // float32
    public const nint m_flNotifyForceY = 0x560; // float32
    public const nint m_flNotifyForceZ = 0x564; // float32
    public const nint m_flNotifyForceMinTimeX = 0x568; // float32
    public const nint m_flNotifyForceMinTimeY = 0x56C; // float32
    public const nint m_flNotifyForceMinTimeZ = 0x570; // float32
    public const nint m_flNotifyForceLastTimeX = 0x574; // GameTime_t
    public const nint m_flNotifyForceLastTimeY = 0x578; // GameTime_t
    public const nint m_flNotifyForceLastTimeZ = 0x57C; // GameTime_t
    public const nint m_bAxisNotifiedX = 0x580; // bool
    public const nint m_bAxisNotifiedY = 0x581; // bool
    public const nint m_bAxisNotifiedZ = 0x582; // bool
    public const nint m_nAngularMotionX = 0x584; // JointMotion_t
    public const nint m_nAngularMotionY = 0x588; // JointMotion_t
    public const nint m_nAngularMotionZ = 0x58C; // JointMotion_t
    public const nint m_flAngularFrequencyX = 0x590; // float32
    public const nint m_flAngularFrequencyY = 0x594; // float32
    public const nint m_flAngularFrequencyZ = 0x598; // float32
    public const nint m_flAngularDampingRatioX = 0x59C; // float32
    public const nint m_flAngularDampingRatioY = 0x5A0; // float32
    public const nint m_flAngularDampingRatioZ = 0x5A4; // float32
    public const nint m_flMaxAngularImpulseX = 0x5A8; // float32
    public const nint m_flMaxAngularImpulseY = 0x5AC; // float32
    public const nint m_flMaxAngularImpulseZ = 0x5B0; // float32
    public const nint m_NotifyForceReachedX = 0x5B8; // CEntityIOOutput
    public const nint m_NotifyForceReachedY = 0x5E0; // CEntityIOOutput
    public const nint m_NotifyForceReachedZ = 0x608; // CEntityIOOutput
}

public static class CGlowProperty {
    public const nint m_fGlowColor = 0x8; // Vector
    public const nint m_iGlowType = 0x30; // int32
    public const nint m_iGlowTeam = 0x34; // int32
    public const nint m_nGlowRange = 0x38; // int32
    public const nint m_nGlowRangeMin = 0x3C; // int32
    public const nint m_glowColorOverride = 0x40; // Color
    public const nint m_bFlashing = 0x44; // bool
    public const nint m_flGlowTime = 0x48; // float32
    public const nint m_flGlowStartTime = 0x4C; // float32
    public const nint m_bGlowing = 0x50; // bool
}

public static class CGunTarget {
    public const nint m_on = 0x7D8; // bool
    public const nint m_hTargetEnt = 0x7DC; // CHandle< CBaseEntity >
    public const nint m_OnDeath = 0x7E0; // CEntityIOOutput
}

public static class CHeadLookParams {
    public const nint m_LookPriority = 0x0; // CHeadLookParams::HeadLookPriority_t
    public const nint m_flLookDuration = 0x4; // float32
    public const nint m_pReplyWhenAimed = 0x8; // INextBotReply*
    public const nint m_pReasonStr = 0x10; // char*
    public const nint m_bWaitForSteady = 0x18; // bool
    public const nint m_flEaseInTime = 0x1C; // float32
}

public static class CHeroStatueLiked {
    public const nint m_iPlayerIDLiker = 0x30; // PlayerID_t
    public const nint m_iPlayerIDLiked = 0x34; // PlayerID_t
}

public static class CHeroesPerPlayer {
    public const nint m_vecHeroIDs = 0x30; // CNetworkUtlVectorBase< int32 >
}

public static class CHitboxComponent {
    public const nint m_bvDisabledHitGroups = 0x24; // uint32[1]
}

public static class CInButtonState {
    public const nint m_pButtonStates = 0x8; // uint64[3]
}

public static class CInfoDynamicShadowHint {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_flRange = 0x4AC; // float32
    public const nint m_nImportance = 0x4B0; // int32
    public const nint m_nLightChoice = 0x4B4; // int32
    public const nint m_hLight = 0x4B8; // CHandle< CBaseEntity >
}

public static class CInfoDynamicShadowHintBox {
    public const nint m_vBoxMins = 0x4C0; // Vector
    public const nint m_vBoxMaxs = 0x4CC; // Vector
}

public static class CInfoGameEventProxy {
    public const nint m_iszEventName = 0x4A8; // CUtlSymbolLarge
    public const nint m_flRange = 0x4B0; // float32
}

public static class CInfoOffscreenPanoramaTexture {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_nResolutionX = 0x4AC; // int32
    public const nint m_nResolutionY = 0x4B0; // int32
    public const nint m_szLayoutFileName = 0x4B8; // CUtlSymbolLarge
    public const nint m_RenderAttrName = 0x4C0; // CUtlSymbolLarge
    public const nint m_TargetEntities = 0x4C8; // CNetworkUtlVectorBase< CHandle< CBaseModelEntity > >
    public const nint m_nTargetChangeCount = 0x4E0; // int32
    public const nint m_vecCSSClasses = 0x4E8; // CNetworkUtlVectorBase< CUtlSymbolLarge >
    public const nint m_szTargetsName = 0x500; // CUtlSymbolLarge
    public const nint m_AdditionalTargetEntities = 0x508; // CUtlVector< CHandle< CBaseModelEntity > >
}

public static class CInfoPlayerStart {
    public const nint m_bDisabled = 0x4A8; // bool
}

public static class CInfoPlayerStartDota {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_OnEnabled = 0x4B0; // CEntityIOOutput
    public const nint m_OnDisabled = 0x4D8; // CEntityIOOutput
}

public static class CInfoSpawnGroupLoadUnload {
    public const nint m_OnSpawnGroupLoadStarted = 0x4A8; // CEntityIOOutput
    public const nint m_OnSpawnGroupLoadFinished = 0x4D0; // CEntityIOOutput
    public const nint m_OnSpawnGroupUnloadStarted = 0x4F8; // CEntityIOOutput
    public const nint m_OnSpawnGroupUnloadFinished = 0x520; // CEntityIOOutput
    public const nint m_iszSpawnGroupName = 0x548; // CUtlSymbolLarge
    public const nint m_iszSpawnGroupFilterName = 0x550; // CUtlSymbolLarge
    public const nint m_iszLandmarkName = 0x558; // CUtlSymbolLarge
    public const nint m_sFixedSpawnGroupName = 0x560; // CUtlString
    public const nint m_flTimeoutInterval = 0x568; // float32
    public const nint m_bStreamingStarted = 0x56C; // bool
    public const nint m_bUnloadingStarted = 0x56D; // bool
}

public static class CInfoVisibilityBox {
    public const nint m_nMode = 0x4AC; // int32
    public const nint m_vBoxSize = 0x4B0; // Vector
    public const nint m_bEnabled = 0x4BC; // bool
}

public static class CInfoWorldLayer {
    public const nint m_pOutputOnEntitiesSpawned = 0x4A8; // CEntityIOOutput
    public const nint m_worldName = 0x4D0; // CUtlSymbolLarge
    public const nint m_layerName = 0x4D8; // CUtlSymbolLarge
    public const nint m_bWorldLayerVisible = 0x4E0; // bool
    public const nint m_bEntitiesSpawned = 0x4E1; // bool
    public const nint m_bCreateAsChildSpawnGroup = 0x4E2; // bool
    public const nint m_hLayerSpawnGroup = 0x4E4; // uint32
}

public static class CIngameEvent_Base {
    public const nint m_bInitialized = 0x4C8; // bool
    public const nint m_CompendiumChallengeEventID = 0x4CC; // int32[24]
    public const nint m_CompendiumChallengeSequenceID = 0x52C; // int32[24]
    public const nint m_CompendiumChallengeCoinReward = 0x58C; // int32[24]
    public const nint m_CompendiumChallengeCoinSplash = 0x5EC; // int32[24]
    public const nint m_CompendiumChallengePointReward = 0x64C; // int32[24]
    public const nint m_CompendiumChallengeCompleted = 0x6AC; // bool[24]
    public const nint m_CompendiumChallengeFailed = 0x6C4; // bool[24]
    public const nint m_CompendiumChallengeProgress = 0x6DC; // int32[24]
    public const nint m_QueryIDForProgress = 0x73C; // int32[24]
    public const nint m_SubChallenges = 0x7A0; // CUtlVectorEmbeddedNetworkVar< CDOTASubChallengeInfo >
    public const nint m_CompendiumCoinWager = 0x7F0; // int32[10]
    public const nint m_CompendiumTokenWagerItemID = 0x818; // itemid_t[10]
    public const nint m_CompendiumWagerTokenBonusPct = 0x868; // int32[10]
    public const nint m_CompendiumCoinWagerResults = 0x890; // int32[10]
    public const nint m_CompendiumRankWagers = 0x8B8; // int32[10]
    public const nint m_flWagerTimer = 0x8E0; // float32
    public const nint m_flWagerEndTime = 0x8E4; // GameTime_t
    public const nint m_CompendiumChallengeInfo = 0x8E8; // CUtlVectorEmbeddedNetworkVar< CDOTA_PlayerChallengeInfo >
    public const nint m_PlayerQueryIDs = 0x13A8; // CUtlVectorEmbeddedNetworkVar< CDOTA_CombatLogQueryProgress >
    public const nint m_ProgressForQueryID = 0x13F8; // int32[100]
    public const nint m_GoalForQueryID = 0x1588; // int32[100]
    public const nint m_PlayerQuestRankPreviouslyCompleted = 0x1718; // int32[10]
    public const nint m_PlayerQuestRankCompleted = 0x1740; // int32[10]
    public const nint m_PlayerBountyTarget = 0x1768; // PlayerID_t[10]
    public const nint m_flPlayerBountyTimestamp = 0x1790; // GameTime_t[10]
    public const nint m_PlayerBountyCount = 0x17B8; // int32[10]
    public const nint m_bHasSpentWager = 0x17E0; // bool[10]
    public const nint m_bPendingWagerSpend = 0x17EA; // bool[10]
    public const nint m_bCavernCrawlActive = 0x17F4; // bool[24]
    public const nint m_nCavernCrawlMapVariant = 0x180C; // CavernCrawlMapVariant_t[24]
    public const nint m_bCavernHalfCredit = 0x1824; // bool
    public const nint m_bBountyReminded = 0x1825; // bool[24]
    public const nint m_bBountyAnnounced = 0x183D; // bool[24]
    public const nint m_pCavernCrawlWinnings = 0x1858; // uint32[24]
    public const nint m_pCavernCrawlPlusShardWinnings = 0x18B8; // uint32[24]
    public const nint m_ppVecCavernCrawlMapResult = 0x1918; // CUtlVector< DOTACavernCrawlMapResult_t >*[24]
    public const nint m_event_lobby_updated = 0x19D8; // int32
}

public static class CIngameEvent_MuertaReleaseSpring2023 {
    public const nint m_bMiniGameActive = 0x1A20; // bool
    public const nint m_vecTargetAssignments = 0x1A21; // int8[10]
    public const nint m_vecMiniGamePoints = 0x1A2B; // uint8[10]
    public const nint m_vecMiniGameKills = 0x1A35; // uint8[10]
    public const nint m_activeGravestones = 0x1A50; // CUtlVector< ParticleIndex_t >
}

public static class CInstancedSceneEntity {
    public const nint m_hOwner = 0x9F0; // CHandle< CBaseEntity >
    public const nint m_bHadOwner = 0x9F4; // bool
    public const nint m_flPostSpeakDelay = 0x9F8; // float32
    public const nint m_flPreDelay = 0x9FC; // float32
    public const nint m_bIsBackground = 0xA00; // bool
}

public static class CInstructorEventEntity {
    public const nint m_iszName = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszHintTargetEntity = 0x4B0; // CUtlSymbolLarge
    public const nint m_hTargetPlayer = 0x4B8; // CHandle< CBasePlayerPawn >
}

public static class CItem {
    public const nint m_OnPlayerTouch = 0x770; // CEntityIOOutput
    public const nint m_bActivateWhenAtRest = 0x798; // bool
    public const nint m_OnCacheInteraction = 0x7A0; // CEntityIOOutput
    public const nint m_OnPlayerPickup = 0x7C8; // CEntityIOOutput
    public const nint m_OnGlovePulled = 0x7F0; // CEntityIOOutput
    public const nint m_vOriginalSpawnOrigin = 0x818; // Vector
    public const nint m_vOriginalSpawnAngles = 0x824; // QAngle
    public const nint m_bPhysStartAsleep = 0x830; // bool
}

public static class CItemGeneric {
    public const nint m_bHasTriggerRadius = 0x848; // bool
    public const nint m_bHasPickupRadius = 0x849; // bool
    public const nint m_flPickupRadiusSqr = 0x84C; // float32
    public const nint m_flTriggerRadiusSqr = 0x850; // float32
    public const nint m_flLastPickupCheck = 0x854; // GameTime_t
    public const nint m_bPlayerCounterListenerAdded = 0x858; // bool
    public const nint m_bPlayerInTriggerRadius = 0x859; // bool
    public const nint m_hSpawnParticleEffect = 0x860; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_pAmbientSoundEffect = 0x868; // CUtlSymbolLarge
    public const nint m_bAutoStartAmbientSound = 0x870; // bool
    public const nint m_pSpawnScriptFunction = 0x878; // CUtlSymbolLarge
    public const nint m_hPickupParticleEffect = 0x880; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_pPickupSoundEffect = 0x888; // CUtlSymbolLarge
    public const nint m_pPickupScriptFunction = 0x890; // CUtlSymbolLarge
    public const nint m_hTimeoutParticleEffect = 0x898; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_pTimeoutSoundEffect = 0x8A0; // CUtlSymbolLarge
    public const nint m_pTimeoutScriptFunction = 0x8A8; // CUtlSymbolLarge
    public const nint m_pPickupFilterName = 0x8B0; // CUtlSymbolLarge
    public const nint m_hPickupFilter = 0x8B8; // CHandle< CBaseFilter >
    public const nint m_OnPickup = 0x8C0; // CEntityIOOutput
    public const nint m_OnTimeout = 0x8E8; // CEntityIOOutput
    public const nint m_OnTriggerStartTouch = 0x910; // CEntityIOOutput
    public const nint m_OnTriggerTouch = 0x938; // CEntityIOOutput
    public const nint m_OnTriggerEndTouch = 0x960; // CEntityIOOutput
    public const nint m_pAllowPickupScriptFunction = 0x988; // CUtlSymbolLarge
    public const nint m_flPickupRadius = 0x990; // float32
    public const nint m_flTriggerRadius = 0x994; // float32
    public const nint m_pTriggerSoundEffect = 0x998; // CUtlSymbolLarge
    public const nint m_bGlowWhenInTrigger = 0x9A0; // bool
    public const nint m_glowColor = 0x9A1; // Color
    public const nint m_bUseable = 0x9A5; // bool
    public const nint m_hTriggerHelper = 0x9A8; // CHandle< CItemGenericTriggerHelper >
}

public static class CItemGenericTriggerHelper {
    public const nint m_hParentItem = 0x758; // CHandle< CItemGeneric >
}

public static class CKeepUpright {
    public const nint m_worldGoalAxis = 0x4B0; // Vector
    public const nint m_localTestAxis = 0x4BC; // Vector
    public const nint m_nameAttach = 0x4D0; // CUtlSymbolLarge
    public const nint m_attachedObject = 0x4D8; // CHandle< CBaseEntity >
    public const nint m_angularLimit = 0x4DC; // float32
    public const nint m_bActive = 0x4E0; // bool
    public const nint m_bDampAllRotation = 0x4E1; // bool
}

public static class CLightComponent {
    public const nint __m_pChainEntity = 0x48; // CNetworkVarChainer
    public const nint m_Color = 0x85; // Color
    public const nint m_SecondaryColor = 0x89; // Color
    public const nint m_flBrightness = 0x90; // float32
    public const nint m_flBrightnessScale = 0x94; // float32
    public const nint m_flBrightnessMult = 0x98; // float32
    public const nint m_flRange = 0x9C; // float32
    public const nint m_flFalloff = 0xA0; // float32
    public const nint m_flAttenuation0 = 0xA4; // float32
    public const nint m_flAttenuation1 = 0xA8; // float32
    public const nint m_flAttenuation2 = 0xAC; // float32
    public const nint m_flTheta = 0xB0; // float32
    public const nint m_flPhi = 0xB4; // float32
    public const nint m_hLightCookie = 0xB8; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_nCascades = 0xC0; // int32
    public const nint m_nCastShadows = 0xC4; // int32
    public const nint m_nShadowWidth = 0xC8; // int32
    public const nint m_nShadowHeight = 0xCC; // int32
    public const nint m_bRenderDiffuse = 0xD0; // bool
    public const nint m_nRenderSpecular = 0xD4; // int32
    public const nint m_bRenderTransmissive = 0xD8; // bool
    public const nint m_flOrthoLightWidth = 0xDC; // float32
    public const nint m_flOrthoLightHeight = 0xE0; // float32
    public const nint m_nStyle = 0xE4; // int32
    public const nint m_Pattern = 0xE8; // CUtlString
    public const nint m_nCascadeRenderStaticObjects = 0xF0; // int32
    public const nint m_flShadowCascadeCrossFade = 0xF4; // float32
    public const nint m_flShadowCascadeDistanceFade = 0xF8; // float32
    public const nint m_flShadowCascadeDistance0 = 0xFC; // float32
    public const nint m_flShadowCascadeDistance1 = 0x100; // float32
    public const nint m_flShadowCascadeDistance2 = 0x104; // float32
    public const nint m_flShadowCascadeDistance3 = 0x108; // float32
    public const nint m_nShadowCascadeResolution0 = 0x10C; // int32
    public const nint m_nShadowCascadeResolution1 = 0x110; // int32
    public const nint m_nShadowCascadeResolution2 = 0x114; // int32
    public const nint m_nShadowCascadeResolution3 = 0x118; // int32
    public const nint m_bUsesBakedShadowing = 0x11C; // bool
    public const nint m_nShadowPriority = 0x120; // int32
    public const nint m_nBakedShadowIndex = 0x124; // int32
    public const nint m_bRenderToCubemaps = 0x128; // bool
    public const nint m_LightGroups = 0x130; // CUtlSymbolLarge
    public const nint m_nDirectLight = 0x138; // int32
    public const nint m_nIndirectLight = 0x13C; // int32
    public const nint m_flFadeMinDist = 0x140; // float32
    public const nint m_flFadeMaxDist = 0x144; // float32
    public const nint m_flShadowFadeMinDist = 0x148; // float32
    public const nint m_flShadowFadeMaxDist = 0x14C; // float32
    public const nint m_bEnabled = 0x150; // bool
    public const nint m_bFlicker = 0x151; // bool
    public const nint m_bPrecomputedFieldsValid = 0x152; // bool
    public const nint m_vPrecomputedBoundsMins = 0x154; // Vector
    public const nint m_vPrecomputedBoundsMaxs = 0x160; // Vector
    public const nint m_vPrecomputedOBBOrigin = 0x16C; // Vector
    public const nint m_vPrecomputedOBBAngles = 0x178; // QAngle
    public const nint m_vPrecomputedOBBExtent = 0x184; // Vector
    public const nint m_flPrecomputedMaxRange = 0x190; // float32
    public const nint m_nFogLightingMode = 0x194; // int32
    public const nint m_flFogContributionStength = 0x198; // float32
    public const nint m_flNearClipPlane = 0x19C; // float32
    public const nint m_SkyColor = 0x1A0; // Color
    public const nint m_flSkyIntensity = 0x1A4; // float32
    public const nint m_SkyAmbientBounce = 0x1A8; // Color
    public const nint m_bUseSecondaryColor = 0x1AC; // bool
    public const nint m_bMixedShadows = 0x1AD; // bool
    public const nint m_flLightStyleStartTime = 0x1B0; // GameTime_t
    public const nint m_flCapsuleLength = 0x1B4; // float32
    public const nint m_flMinRoughness = 0x1B8; // float32
    public const nint m_bPvsModifyEntity = 0x1C8; // bool
}

public static class CLightEntity {
    public const nint m_CLightComponent = 0x758; // CLightComponent*
}

public static class CLightGlow {
    public const nint m_nHorizontalSize = 0x758; // uint32
    public const nint m_nVerticalSize = 0x75C; // uint32
    public const nint m_nMinDist = 0x760; // uint32
    public const nint m_nMaxDist = 0x764; // uint32
    public const nint m_nOuterMaxDist = 0x768; // uint32
    public const nint m_flGlowProxySize = 0x76C; // float32
    public const nint m_flHDRColorScale = 0x770; // float32
}

public static class CLocalNPCObstructionsCache {
    public const nint m_nLastUpdatedTick = 0x0; // GameTick_t
    public const nint m_flRadius = 0x4; // float32
    public const nint m_hCachedNPCs = 0x8; // CUtlVector< CHandle< CDOTA_BaseNPC > >
}

public static class CLogicAchievement {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_iszAchievementEventID = 0x4B0; // CUtlSymbolLarge
    public const nint m_OnFired = 0x4B8; // CEntityIOOutput
}

public static class CLogicActiveAutosave {
    public const nint m_TriggerHitPoints = 0x4B8; // int32
    public const nint m_flTimeToTrigger = 0x4BC; // float32
    public const nint m_flStartTime = 0x4C0; // GameTime_t
    public const nint m_flDangerousTime = 0x4C4; // float32
}

public static class CLogicAuto {
    public const nint m_OnMapSpawn = 0x4A8; // CEntityIOOutput
    public const nint m_OnDemoMapSpawn = 0x4D0; // CEntityIOOutput
    public const nint m_OnNewGame = 0x4F8; // CEntityIOOutput
    public const nint m_OnLoadGame = 0x520; // CEntityIOOutput
    public const nint m_OnMapTransition = 0x548; // CEntityIOOutput
    public const nint m_OnBackgroundMap = 0x570; // CEntityIOOutput
    public const nint m_OnMultiNewMap = 0x598; // CEntityIOOutput
    public const nint m_OnMultiNewRound = 0x5C0; // CEntityIOOutput
    public const nint m_OnVREnabled = 0x5E8; // CEntityIOOutput
    public const nint m_OnVRNotEnabled = 0x610; // CEntityIOOutput
    public const nint m_globalstate = 0x638; // CUtlSymbolLarge
}

public static class CLogicAutosave {
    public const nint m_bForceNewLevelUnit = 0x4A8; // bool
    public const nint m_minHitPoints = 0x4AC; // int32
    public const nint m_minHitPointsToCommit = 0x4B0; // int32
}

public static class CLogicBranch {
    public const nint m_bInValue = 0x4A8; // bool
    public const nint m_Listeners = 0x4B0; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_OnTrue = 0x4C8; // CEntityIOOutput
    public const nint m_OnFalse = 0x4F0; // CEntityIOOutput
}

public static class CLogicBranchList {
    public const nint m_nLogicBranchNames = 0x4A8; // CUtlSymbolLarge[16]
    public const nint m_LogicBranchList = 0x528; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_eLastState = 0x540; // CLogicBranchList::LogicBranchListenerLastState_t
    public const nint m_OnAllTrue = 0x548; // CEntityIOOutput
    public const nint m_OnAllFalse = 0x570; // CEntityIOOutput
    public const nint m_OnMixed = 0x598; // CEntityIOOutput
}

public static class CLogicCase {
    public const nint m_nCase = 0x4A8; // CUtlSymbolLarge[32]
    public const nint m_nShuffleCases = 0x5A8; // int32
    public const nint m_nLastShuffleCase = 0x5AC; // int32
    public const nint m_uchShuffleCaseMap = 0x5B0; // uint8[32]
    public const nint m_OnCase = 0x5D0; // CEntityIOOutput[32]
    public const nint m_OnDefault = 0xAD0; // CEntityOutputTemplate< CVariantBase< CVariantDefaultAllocator > >
}

public static class CLogicCollisionPair {
    public const nint m_nameAttach1 = 0x4A8; // CUtlSymbolLarge
    public const nint m_nameAttach2 = 0x4B0; // CUtlSymbolLarge
    public const nint m_disabled = 0x4B8; // bool
    public const nint m_succeeded = 0x4B9; // bool
}

public static class CLogicCompare {
    public const nint m_flInValue = 0x4A8; // float32
    public const nint m_flCompareValue = 0x4AC; // float32
    public const nint m_OnLessThan = 0x4B0; // CEntityOutputTemplate< float32 >
    public const nint m_OnEqualTo = 0x4D8; // CEntityOutputTemplate< float32 >
    public const nint m_OnNotEqualTo = 0x500; // CEntityOutputTemplate< float32 >
    public const nint m_OnGreaterThan = 0x528; // CEntityOutputTemplate< float32 >
}

public static class CLogicDistanceAutosave {
    public const nint m_iszTargetEntity = 0x4A8; // CUtlSymbolLarge
    public const nint m_flDistanceToPlayer = 0x4B0; // float32
    public const nint m_bForceNewLevelUnit = 0x4B4; // bool
    public const nint m_bCheckCough = 0x4B5; // bool
    public const nint m_bThinkDangerous = 0x4B6; // bool
    public const nint m_flDangerousTime = 0x4B8; // float32
}

public static class CLogicDistanceCheck {
    public const nint m_iszEntityA = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszEntityB = 0x4B0; // CUtlSymbolLarge
    public const nint m_flZone1Distance = 0x4B8; // float32
    public const nint m_flZone2Distance = 0x4BC; // float32
    public const nint m_InZone1 = 0x4C0; // CEntityIOOutput
    public const nint m_InZone2 = 0x4E8; // CEntityIOOutput
    public const nint m_InZone3 = 0x510; // CEntityIOOutput
}

public static class CLogicGameEvent {
    public const nint m_iszEventName = 0x4A8; // CUtlSymbolLarge
}

public static class CLogicGameEventListener {
    public const nint m_OnEventFired = 0x4B8; // CEntityIOOutput
    public const nint m_iszGameEventName = 0x4E0; // CUtlSymbolLarge
    public const nint m_iszGameEventItem = 0x4E8; // CUtlSymbolLarge
    public const nint m_bEnabled = 0x4F0; // bool
    public const nint m_bStartDisabled = 0x4F1; // bool
}

public static class CLogicLineToEntity {
    public const nint m_Line = 0x4A8; // CEntityOutputTemplate< Vector >
    public const nint m_SourceName = 0x4D0; // CUtlSymbolLarge
    public const nint m_StartEntity = 0x4D8; // CHandle< CBaseEntity >
    public const nint m_EndEntity = 0x4DC; // CHandle< CBaseEntity >
}

public static class CLogicMeasureMovement {
    public const nint m_strMeasureTarget = 0x4A8; // CUtlSymbolLarge
    public const nint m_strMeasureReference = 0x4B0; // CUtlSymbolLarge
    public const nint m_strTargetReference = 0x4B8; // CUtlSymbolLarge
    public const nint m_hMeasureTarget = 0x4C0; // CHandle< CBaseEntity >
    public const nint m_hMeasureReference = 0x4C4; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x4C8; // CHandle< CBaseEntity >
    public const nint m_hTargetReference = 0x4CC; // CHandle< CBaseEntity >
    public const nint m_flScale = 0x4D0; // float32
    public const nint m_nMeasureType = 0x4D4; // int32
}

public static class CLogicNPCCounter {
    public const nint m_OnMinCountAll = 0x4A8; // CEntityIOOutput
    public const nint m_OnMaxCountAll = 0x4D0; // CEntityIOOutput
    public const nint m_OnFactorAll = 0x4F8; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinPlayerDistAll = 0x520; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinCount_1 = 0x548; // CEntityIOOutput
    public const nint m_OnMaxCount_1 = 0x570; // CEntityIOOutput
    public const nint m_OnFactor_1 = 0x598; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinPlayerDist_1 = 0x5C0; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinCount_2 = 0x5E8; // CEntityIOOutput
    public const nint m_OnMaxCount_2 = 0x610; // CEntityIOOutput
    public const nint m_OnFactor_2 = 0x638; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinPlayerDist_2 = 0x660; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinCount_3 = 0x688; // CEntityIOOutput
    public const nint m_OnMaxCount_3 = 0x6B0; // CEntityIOOutput
    public const nint m_OnFactor_3 = 0x6D8; // CEntityOutputTemplate< float32 >
    public const nint m_OnMinPlayerDist_3 = 0x700; // CEntityOutputTemplate< float32 >
    public const nint m_hSource = 0x728; // CEntityHandle
    public const nint m_iszSourceEntityName = 0x730; // CUtlSymbolLarge
    public const nint m_flDistanceMax = 0x738; // float32
    public const nint m_bDisabled = 0x73C; // bool
    public const nint m_nMinCountAll = 0x740; // int32
    public const nint m_nMaxCountAll = 0x744; // int32
    public const nint m_nMinFactorAll = 0x748; // int32
    public const nint m_nMaxFactorAll = 0x74C; // int32
    public const nint m_iszNPCClassname_1 = 0x758; // CUtlSymbolLarge
    public const nint m_nNPCState_1 = 0x760; // int32
    public const nint m_bInvertState_1 = 0x764; // bool
    public const nint m_nMinCount_1 = 0x768; // int32
    public const nint m_nMaxCount_1 = 0x76C; // int32
    public const nint m_nMinFactor_1 = 0x770; // int32
    public const nint m_nMaxFactor_1 = 0x774; // int32
    public const nint m_flDefaultDist_1 = 0x77C; // float32
    public const nint m_iszNPCClassname_2 = 0x780; // CUtlSymbolLarge
    public const nint m_nNPCState_2 = 0x788; // int32
    public const nint m_bInvertState_2 = 0x78C; // bool
    public const nint m_nMinCount_2 = 0x790; // int32
    public const nint m_nMaxCount_2 = 0x794; // int32
    public const nint m_nMinFactor_2 = 0x798; // int32
    public const nint m_nMaxFactor_2 = 0x79C; // int32
    public const nint m_flDefaultDist_2 = 0x7A4; // float32
    public const nint m_iszNPCClassname_3 = 0x7A8; // CUtlSymbolLarge
    public const nint m_nNPCState_3 = 0x7B0; // int32
    public const nint m_bInvertState_3 = 0x7B4; // bool
    public const nint m_nMinCount_3 = 0x7B8; // int32
    public const nint m_nMaxCount_3 = 0x7BC; // int32
    public const nint m_nMinFactor_3 = 0x7C0; // int32
    public const nint m_nMaxFactor_3 = 0x7C4; // int32
    public const nint m_flDefaultDist_3 = 0x7CC; // float32
}

public static class CLogicNPCCounterAABB {
    public const nint m_vDistanceOuterMins = 0x7E8; // Vector
    public const nint m_vDistanceOuterMaxs = 0x7F4; // Vector
    public const nint m_vOuterMins = 0x800; // Vector
    public const nint m_vOuterMaxs = 0x80C; // Vector
}

public static class CLogicNavigation {
    public const nint m_isOn = 0x4B0; // bool
    public const nint m_navProperty = 0x4B4; // navproperties_t
}

public static class CLogicPlayerProxy {
    public const nint m_hPlayer = 0x4A8; // CHandle< CBaseEntity >
    public const nint m_PlayerHasAmmo = 0x4B0; // CEntityIOOutput
    public const nint m_PlayerHasNoAmmo = 0x4D8; // CEntityIOOutput
    public const nint m_PlayerDied = 0x500; // CEntityIOOutput
    public const nint m_RequestedPlayerHealth = 0x528; // CEntityOutputTemplate< int32 >
}

public static class CLogicRelay {
    public const nint m_OnTrigger = 0x4A8; // CEntityIOOutput
    public const nint m_OnSpawn = 0x4D0; // CEntityIOOutput
    public const nint m_bDisabled = 0x4F8; // bool
    public const nint m_bWaitForRefire = 0x4F9; // bool
    public const nint m_bTriggerOnce = 0x4FA; // bool
    public const nint m_bFastRetrigger = 0x4FB; // bool
    public const nint m_bPassthoughCaller = 0x4FC; // bool
}

public static class CMarkupVolume {
    public const nint m_bEnabled = 0x758; // bool
}

public static class CMarkupVolumeTagged {
    public const nint m_bIsGroup = 0x790; // bool
    public const nint m_bGroupByPrefab = 0x791; // bool
    public const nint m_bGroupByVolume = 0x792; // bool
    public const nint m_bGroupOtherGroups = 0x793; // bool
    public const nint m_bIsInGroup = 0x794; // bool
}

public static class CMarkupVolumeTagged_NavGame {
    public const nint m_bFloodFillAttribute = 0x7B0; // bool
}

public static class CMarkupVolumeWithRef {
    public const nint m_bUseRef = 0x798; // bool
    public const nint m_vRefPos = 0x79C; // Vector
    public const nint m_flRefDot = 0x7A8; // float32
}

public static class CMatchTrackedStatDefinition {
    public const nint m_unStatID = 0x8; // TrackedStatID_t
    public const nint m_eStatImpl = 0xC; // EMatchTrackedStatImpl
    public const nint m_expressionData = 0x10; // TrackedStatExpressionData_t
    public const nint m_aggregateData = 0x20; // TrackedStatAggregateData_t
}

public static class CMathColorBlend {
    public const nint m_flInMin = 0x4A8; // float32
    public const nint m_flInMax = 0x4AC; // float32
    public const nint m_OutColor1 = 0x4B0; // Color
    public const nint m_OutColor2 = 0x4B4; // Color
    public const nint m_OutValue = 0x4B8; // CEntityOutputTemplate< Color >
}

public static class CMathCounter {
    public const nint m_flMin = 0x4A8; // float32
    public const nint m_flMax = 0x4AC; // float32
    public const nint m_bHitMin = 0x4B0; // bool
    public const nint m_bHitMax = 0x4B1; // bool
    public const nint m_bDisabled = 0x4B2; // bool
    public const nint m_OutValue = 0x4B8; // CEntityOutputTemplate< float32 >
    public const nint m_OnGetValue = 0x4E0; // CEntityOutputTemplate< float32 >
    public const nint m_OnHitMin = 0x508; // CEntityIOOutput
    public const nint m_OnHitMax = 0x530; // CEntityIOOutput
    public const nint m_OnChangedFromMin = 0x558; // CEntityIOOutput
    public const nint m_OnChangedFromMax = 0x580; // CEntityIOOutput
}

public static class CMathRemap {
    public const nint m_flInMin = 0x4A8; // float32
    public const nint m_flInMax = 0x4AC; // float32
    public const nint m_flOut1 = 0x4B0; // float32
    public const nint m_flOut2 = 0x4B4; // float32
    public const nint m_flOldInValue = 0x4B8; // float32
    public const nint m_bEnabled = 0x4BC; // bool
    public const nint m_OutValue = 0x4C0; // CEntityOutputTemplate< float32 >
    public const nint m_OnRoseAboveMin = 0x4E8; // CEntityIOOutput
    public const nint m_OnRoseAboveMax = 0x510; // CEntityIOOutput
    public const nint m_OnFellBelowMin = 0x538; // CEntityIOOutput
    public const nint m_OnFellBelowMax = 0x560; // CEntityIOOutput
}

public static class CMessage {
    public const nint m_iszMessage = 0x4A8; // CUtlSymbolLarge
    public const nint m_MessageVolume = 0x4B0; // float32
    public const nint m_MessageAttenuation = 0x4B4; // int32
    public const nint m_Radius = 0x4B8; // float32
    public const nint m_sNoise = 0x4C0; // CUtlSymbolLarge
    public const nint m_OnShowMessage = 0x4C8; // CEntityIOOutput
}

public static class CMessageEntity {
    public const nint m_radius = 0x4A8; // int32
    public const nint m_messageText = 0x4B0; // CUtlSymbolLarge
    public const nint m_drawText = 0x4B8; // bool
    public const nint m_bDeveloperOnly = 0x4B9; // bool
    public const nint m_bEnabled = 0x4BA; // bool
}

public static class CModelState {
    public const nint m_hModel = 0xA0; // CStrongHandle< InfoForResourceTypeCModel >
    public const nint m_ModelName = 0xA8; // CUtlSymbolLarge
    public const nint m_bClientClothCreationSuppressed = 0xE8; // bool
    public const nint m_MeshGroupMask = 0x180; // uint64
    public const nint m_nIdealMotionType = 0x222; // int8
    public const nint m_nForceLOD = 0x223; // int8
    public const nint m_nClothUpdateFlags = 0x224; // int8
}

public static class CModifierParams {
    public const nint ability = 0x0; // CHandle< CDOTABaseAbility >
    public const nint fDamage = 0x4; // float32
    public const nint fOriginalDamage = 0x8; // float32
    public const nint nActivity = 0xC; // int32
    public const nint bTooltip = 0x10; // bool
    public const nint nTooltipParam = 0x14; // int32
    public const nint bIgnoreInvis = 0x18; // bool
    public const nint bNoCooldown = 0x19; // bool
    public const nint bIgnoreBaseArmor = 0x1A; // bool
    public const nint bReincarnate = 0x1B; // bool
    public const nint bDoNotConsume = 0x1C; // bool
    public const nint bReportMax = 0x1D; // bool
    public const nint fDistance = 0x20; // float32
    public const nint fGain = 0x24; // float32
    public const nint fAttackTimeRemaining = 0x28; // float32
    public const nint m_nIssuerPlayerIndex = 0x2C; // PlayerID_t
    public const nint m_nVictimPlayerID = 0x30; // PlayerID_t
    public const nint nDamageType = 0x34; // int32
    public const nint nDamageflags = 0x38; // int32
    public const nint nDamageCategory = 0x3C; // int32
    public const nint iFailType = 0x40; // int32
    public const nint iRecord = 0x44; // int16
    public const nint pOrb = 0x48; // CDOTA_Orb*
    public const nint pOrb2 = 0x50; // CDOTA_Orb*
    public const nint nCost = 0x58; // int32
    public const nint nHealthCost = 0x5C; // int32
    public const nint nOrdertype = 0x60; // int32
    public const nint vOldLoc = 0x64; // Vector
    public const nint vNewLoc = 0x70; // Vector
    public const nint vCastLocation = 0x7C; // Vector
    public const nint bCraniumBasherTested = 0x88; // bool
    public const nint bMKBTested = 0x89; // bool
    public const nint bOctarineTested = 0x8A; // bool
    public const nint bHeartRegenApplied = 0x8B; // bool
    public const nint bSangeAmpApplied = 0x8C; // bool
    public const nint bLocketAmpApplied = 0x8D; // bool
    public const nint bPaladinAmpApplied = 0x8E; // bool
    public const nint bBlademailApplied = 0x8F; // bool
    public const nint bForceFieldApplied = 0x90; // bool
    public const nint bKayaApplied = 0x91; // bool
    public const nint bStoutConsidered = 0x92; // bool
    public const nint bInterrupted = 0x93; // bool
    public const nint bDiffusalApplied = 0x94; // bool
    public const nint bChainLightningConsidered = 0x95; // bool
    public const nint bSuppressDamage = 0x96; // bool
    public const nint bRangedAttack = 0x97; // bool
    public const nint bProcessProcs = 0x98; // bool
    public const nint bProjectileIsFromIllusion = 0x99; // bool
    public const nint bHasMagicComponent = 0x9A; // bool
    public const nint bIsSpellLifesteal = 0x9B; // bool
    public const nint pnMagicStickProcEntityIndices = 0x9C; // CEntityIndex[64]
    public const nint bBloodstoneRegenApplied = 0x19C; // bool
    public const nint bShroudManaRestoreApplied = 0x19D; // bool
    public const nint bPhylacteryApplied = 0x19E; // bool
    public const nint bAllowZeroDamageFromPostReductionBlock = 0x19F; // bool
    public const nint bForceMagicStickProc = 0x1A0; // bool
    public const nint bIgnoreNegativeValuesIfDebuffImmune = 0x1A1; // bool
    public const nint bIgnorePositiveValuesIfDebuffImmune = 0x1A2; // bool
    public const nint bIgnoreAllIfDebuffImmune = 0x1A3; // bool
    public const nint bAlsoIgnoreBuffsIfDebuffImmune = 0x1A4; // bool
    public const nint bIgnoreLowerIfDebuffImmune = 0x1A5; // bool
    public const nint flIgnoreLowerIfDebuffImmune = 0x1A8; // float32
    public const nint bIgnoreHigherIfDebuffImmune = 0x1AC; // bool
    public const nint flIgnoreHigherIfDebuffImmune = 0x1B0; // float32
    public const nint bIgnoreTemporaryAttackSpeedModifiers = 0x1B4; // bool
    public const nint pszAbilitySpecialName = 0x1B8; // char*
    public const nint nAbilitySpecialLevel = 0x1C0; // int32
    public const nint hattacker = 0x1C4; // CHandle< CBaseEntity >
    public const nint htarget = 0x1C8; // CHandle< CBaseEntity >
    public const nint hunit = 0x1CC; // CHandle< CBaseEntity >
    public const nint inflictor = 0x1D0; // CHandle< CDOTABaseAbility >
    public const nint pAddedBuff = 0x1D8; // CDOTA_Buff*
}

public static class CMotorController {
    public const nint m_speed = 0x8; // float32
    public const nint m_maxTorque = 0xC; // float32
    public const nint m_axis = 0x10; // Vector
    public const nint m_inertiaFactor = 0x1C; // float32
}

public static class CMultiLightProxy {
    public const nint m_iszLightNameFilter = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszLightClassFilter = 0x4B0; // CUtlSymbolLarge
    public const nint m_flLightRadiusFilter = 0x4B8; // float32
    public const nint m_flBrightnessDelta = 0x4BC; // float32
    public const nint m_bPerformScreenFade = 0x4C0; // bool
    public const nint m_flTargetBrightnessMultiplier = 0x4C4; // float32
    public const nint m_flCurrentBrightnessMultiplier = 0x4C8; // float32
    public const nint m_vecLights = 0x4D0; // CUtlVector< CHandle< CLightEntity > >
}

public static class CMultiSource {
    public const nint m_rgEntities = 0x4A8; // CHandle< CBaseEntity >[32]
    public const nint m_rgTriggered = 0x528; // int32[32]
    public const nint m_OnTrigger = 0x5A8; // CEntityIOOutput
    public const nint m_iTotal = 0x5D0; // int32
    public const nint m_globalstate = 0x5D8; // CUtlSymbolLarge
}

public static class CMultiplayer_Expresser {
    public const nint m_bAllowMultipleScenes = 0x70; // bool
}

public static class CNavHullPresetVData {
    public const nint m_vecNavHulls = 0x0; // CUtlVector< CUtlString >
}

public static class CNavHullVData {
    public const nint m_bAgentEnabled = 0x0; // bool
    public const nint m_agentRadius = 0x4; // float32
    public const nint m_agentHeight = 0x8; // float32
    public const nint m_agentShortHeightEnabled = 0xC; // bool
    public const nint m_agentShortHeight = 0x10; // float32
    public const nint m_agentMaxClimb = 0x14; // float32
    public const nint m_agentMaxSlope = 0x18; // int32
    public const nint m_agentMaxJumpDownDist = 0x1C; // float32
    public const nint m_agentMaxJumpHorizDistBase = 0x20; // float32
    public const nint m_agentMaxJumpUpDist = 0x24; // float32
    public const nint m_agentBorderErosion = 0x28; // int32
}

public static class CNavLinkAnimgraphVar {
    public const nint m_strAnimgraphVar = 0x0; // CUtlString
    public const nint m_unAlignmentDegrees = 0x8; // uint32
}

public static class CNavLinkAreaEntity {
    public const nint m_flWidth = 0x4A8; // float32
    public const nint m_vLocatorOffset = 0x4AC; // Vector
    public const nint m_qLocatorAnglesOffset = 0x4B8; // QAngle
    public const nint m_strMovementForward = 0x4C8; // CUtlSymbolLarge
    public const nint m_strMovementReverse = 0x4D0; // CUtlSymbolLarge
    public const nint m_nNavLinkIdForward = 0x4D8; // int32
    public const nint m_nNavLinkIdReverse = 0x4DC; // int32
    public const nint m_bEnabled = 0x4E0; // bool
    public const nint m_strFilterName = 0x4E8; // CUtlSymbolLarge
    public const nint m_hFilter = 0x4F0; // CHandle< CBaseFilter >
    public const nint m_OnNavLinkStart = 0x4F8; // CEntityIOOutput
    public const nint m_OnNavLinkFinish = 0x520; // CEntityIOOutput
    public const nint m_bIsTerminus = 0x548; // bool
}

public static class CNavLinkMovementVData {
    public const nint m_bIsInterpolated = 0x0; // bool
    public const nint m_unRecommendedDistance = 0x4; // uint32
    public const nint m_vecAnimgraphVars = 0x8; // CUtlVector< CNavLinkAnimgraphVar >
}

public static class CNavSpaceInfo {
    public const nint m_bCreateFlightSpace = 0x4A8; // bool
}

public static class CNavVolumeBreadthFirstSearch {
    public const nint m_vStartPos = 0xA0; // Vector
    public const nint m_flSearchDist = 0xAC; // float32
}

public static class CNavVolumeSphere {
    public const nint m_vCenter = 0x70; // Vector
    public const nint m_flRadius = 0x7C; // float32
}

public static class CNavVolumeSphericalShell {
    public const nint m_flRadiusInner = 0x80; // float32
}

public static class CNavVolumeVector {
    public const nint m_bHasBeenPreFiltered = 0x78; // bool
}

public static class CNetworkOriginCellCoordQuantizedVector {
    public const nint m_cellX = 0x10; // uint16
    public const nint m_cellY = 0x12; // uint16
    public const nint m_cellZ = 0x14; // uint16
    public const nint m_nOutsideWorld = 0x16; // uint16
    public const nint m_vecX = 0x18; // CNetworkedQuantizedFloat
    public const nint m_vecY = 0x20; // CNetworkedQuantizedFloat
    public const nint m_vecZ = 0x28; // CNetworkedQuantizedFloat
}

public static class CNetworkOriginQuantizedVector {
    public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
    public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
    public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
}

public static class CNetworkTransmitComponent {
    public const nint m_nTransmitStateOwnedCounter = 0x16C; // uint8
}

public static class CNetworkVelocityVector {
    public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
    public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
    public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
}

public static class CNetworkViewOffsetVector {
    public const nint m_vecX = 0x10; // CNetworkedQuantizedFloat
    public const nint m_vecY = 0x18; // CNetworkedQuantizedFloat
    public const nint m_vecZ = 0x20; // CNetworkedQuantizedFloat
}

public static class CNetworkedSequenceOperation {
    public const nint m_hSequence = 0x8; // HSequence
    public const nint m_flPrevCycle = 0xC; // float32
    public const nint m_flCycle = 0x10; // float32
    public const nint m_flWeight = 0x14; // CNetworkedQuantizedFloat
    public const nint m_bSequenceChangeNetworked = 0x1C; // bool
    public const nint m_bDiscontinuity = 0x1D; // bool
    public const nint m_flPrevCycleFromDiscontinuity = 0x20; // float32
    public const nint m_flPrevCycleForAnimEventDetection = 0x24; // float32
}

public static class CObstructionObject {
    public const nint m_nObstructionProperties = 0x10; // int32
}

public static class COrnamentProp {
    public const nint m_initialOwner = 0x9F0; // CUtlSymbolLarge
}

public static class CParticleSystem {
    public const nint m_szSnapshotFileName = 0x758; // char[512]
    public const nint m_bActive = 0x958; // bool
    public const nint m_bFrozen = 0x959; // bool
    public const nint m_flFreezeTransitionDuration = 0x95C; // float32
    public const nint m_nStopType = 0x960; // int32
    public const nint m_bAnimateDuringGameplayPause = 0x964; // bool
    public const nint m_iEffectIndex = 0x968; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_flStartTime = 0x970; // GameTime_t
    public const nint m_flPreSimTime = 0x974; // float32
    public const nint m_vServerControlPoints = 0x978; // Vector[4]
    public const nint m_iServerControlPointAssignments = 0x9A8; // uint8[4]
    public const nint m_hControlPointEnts = 0x9AC; // CHandle< CBaseEntity >[64]
    public const nint m_bNoSave = 0xAAC; // bool
    public const nint m_bNoFreeze = 0xAAD; // bool
    public const nint m_bNoRamp = 0xAAE; // bool
    public const nint m_bStartActive = 0xAAF; // bool
    public const nint m_iszEffectName = 0xAB0; // CUtlSymbolLarge
    public const nint m_iszControlPointNames = 0xAB8; // CUtlSymbolLarge[64]
    public const nint m_nDataCP = 0xCB8; // int32
    public const nint m_vecDataCPValue = 0xCBC; // Vector
    public const nint m_nTintCP = 0xCC8; // int32
    public const nint m_clrTint = 0xCCC; // Color
}

public static class CPathCorner {
    public const nint m_flWait = 0x4A8; // float32
    public const nint m_flRadius = 0x4AC; // float32
    public const nint m_OnPass = 0x4B0; // CEntityIOOutput
}

public static class CPathKeyFrame {
    public const nint m_Origin = 0x4A8; // Vector
    public const nint m_Angles = 0x4B4; // QAngle
    public const nint m_qAngle = 0x4C0; // Quaternion
    public const nint m_iNextKey = 0x4D0; // CUtlSymbolLarge
    public const nint m_flNextTime = 0x4D8; // float32
    public const nint m_pNextKey = 0x4E0; // CPathKeyFrame*
    public const nint m_pPrevKey = 0x4E8; // CPathKeyFrame*
    public const nint m_flSpeed = 0x4F0; // float32
}

public static class CPathParticleRope {
    public const nint m_bStartActive = 0x4A8; // bool
    public const nint m_flMaxSimulationTime = 0x4AC; // float32
    public const nint m_iszEffectName = 0x4B0; // CUtlSymbolLarge
    public const nint m_PathNodes_Name = 0x4B8; // CUtlVector< CUtlSymbolLarge >
    public const nint m_flParticleSpacing = 0x4D0; // float32
    public const nint m_flSlack = 0x4D4; // float32
    public const nint m_flRadius = 0x4D8; // float32
    public const nint m_ColorTint = 0x4DC; // Color
    public const nint m_nEffectState = 0x4E0; // int32
    public const nint m_iEffectIndex = 0x4E8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
    public const nint m_PathNodes_Position = 0x4F0; // CNetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_TangentIn = 0x508; // CNetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_TangentOut = 0x520; // CNetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_Color = 0x538; // CNetworkUtlVectorBase< Vector >
    public const nint m_PathNodes_PinEnabled = 0x550; // CNetworkUtlVectorBase< bool >
    public const nint m_PathNodes_RadiusScale = 0x568; // CNetworkUtlVectorBase< float32 >
}

public static class CPathTrack {
    public const nint m_pnext = 0x4A8; // CPathTrack*
    public const nint m_pprevious = 0x4B0; // CPathTrack*
    public const nint m_paltpath = 0x4B8; // CPathTrack*
    public const nint m_flRadius = 0x4C0; // float32
    public const nint m_length = 0x4C4; // float32
    public const nint m_altName = 0x4C8; // CUtlSymbolLarge
    public const nint m_nIterVal = 0x4D0; // int32
    public const nint m_eOrientationType = 0x4D4; // TrackOrientationType_t
    public const nint m_OnPass = 0x4D8; // CEntityIOOutput
}

public static class CPhysBallSocket {
    public const nint m_flFriction = 0x500; // float32
    public const nint m_bEnableSwingLimit = 0x504; // bool
    public const nint m_flSwingLimit = 0x508; // float32
    public const nint m_bEnableTwistLimit = 0x50C; // bool
    public const nint m_flMinTwistAngle = 0x510; // float32
    public const nint m_flMaxTwistAngle = 0x514; // float32
}

public static class CPhysBox {
    public const nint m_damageType = 0x818; // int32
    public const nint m_massScale = 0x81C; // float32
    public const nint m_damageToEnableMotion = 0x820; // int32
    public const nint m_flForceToEnableMotion = 0x824; // float32
    public const nint m_angPreferredCarryAngles = 0x828; // QAngle
    public const nint m_bNotSolidToWorld = 0x834; // bool
    public const nint m_bEnableUseOutput = 0x835; // bool
    public const nint m_iExploitableByPlayer = 0x838; // int32
    public const nint m_flTouchOutputPerEntityDelay = 0x83C; // float32
    public const nint m_OnDamaged = 0x840; // CEntityIOOutput
    public const nint m_OnAwakened = 0x868; // CEntityIOOutput
    public const nint m_OnMotionEnabled = 0x890; // CEntityIOOutput
    public const nint m_OnPlayerUse = 0x8B8; // CEntityIOOutput
    public const nint m_OnStartTouch = 0x8E0; // CEntityIOOutput
    public const nint m_hCarryingPlayer = 0x908; // CHandle< CBasePlayerPawn >
}

public static class CPhysConstraint {
    public const nint m_nameAttach1 = 0x4B0; // CUtlSymbolLarge
    public const nint m_nameAttach2 = 0x4B8; // CUtlSymbolLarge
    public const nint m_breakSound = 0x4C0; // CUtlSymbolLarge
    public const nint m_forceLimit = 0x4C8; // float32
    public const nint m_torqueLimit = 0x4CC; // float32
    public const nint m_teleportTick = 0x4D0; // uint32
    public const nint m_minTeleportDistance = 0x4D4; // float32
    public const nint m_OnBreak = 0x4D8; // CEntityIOOutput
}

public static class CPhysExplosion {
    public const nint m_bExplodeOnSpawn = 0x4A8; // bool
    public const nint m_flMagnitude = 0x4AC; // float32
    public const nint m_flDamage = 0x4B0; // float32
    public const nint m_radius = 0x4B4; // float32
    public const nint m_targetEntityName = 0x4B8; // CUtlSymbolLarge
    public const nint m_flInnerRadius = 0x4C0; // float32
    public const nint m_flPushScale = 0x4C4; // float32
    public const nint m_bConvertToDebrisWhenPossible = 0x4C8; // bool
    public const nint m_OnPushedPlayer = 0x4D0; // CEntityIOOutput
}

public static class CPhysFixed {
    public const nint m_flLinearFrequency = 0x500; // float32
    public const nint m_flLinearDampingRatio = 0x504; // float32
    public const nint m_flAngularFrequency = 0x508; // float32
    public const nint m_flAngularDampingRatio = 0x50C; // float32
    public const nint m_bEnableLinearConstraint = 0x510; // bool
    public const nint m_bEnableAngularConstraint = 0x511; // bool
}

public static class CPhysForce {
    public const nint m_nameAttach = 0x4B0; // CUtlSymbolLarge
    public const nint m_force = 0x4B8; // float32
    public const nint m_forceTime = 0x4BC; // float32
    public const nint m_attachedObject = 0x4C0; // CHandle< CBaseEntity >
    public const nint m_wasRestored = 0x4C4; // bool
    public const nint m_integrator = 0x4C8; // CConstantForceController
}

public static class CPhysHinge {
    public const nint m_soundInfo = 0x508; // ConstraintSoundInfo
    public const nint m_NotifyMinLimitReached = 0x590; // CEntityIOOutput
    public const nint m_NotifyMaxLimitReached = 0x5B8; // CEntityIOOutput
    public const nint m_bAtMinLimit = 0x5E0; // bool
    public const nint m_bAtMaxLimit = 0x5E1; // bool
    public const nint m_hinge = 0x5E4; // constraint_hingeparams_t
    public const nint m_hingeFriction = 0x624; // float32
    public const nint m_systemLoadScale = 0x628; // float32
    public const nint m_bIsAxisLocal = 0x62C; // bool
    public const nint m_flMinRotation = 0x630; // float32
    public const nint m_flMaxRotation = 0x634; // float32
    public const nint m_flInitialRotation = 0x638; // float32
    public const nint m_flMotorFrequency = 0x63C; // float32
    public const nint m_flMotorDampingRatio = 0x640; // float32
    public const nint m_flAngleSpeed = 0x644; // float32
    public const nint m_flAngleSpeedThreshold = 0x648; // float32
    public const nint m_OnStartMoving = 0x650; // CEntityIOOutput
    public const nint m_OnStopMoving = 0x678; // CEntityIOOutput
}

public static class CPhysImpact {
    public const nint m_damage = 0x4A8; // float32
    public const nint m_distance = 0x4AC; // float32
    public const nint m_directionEntityName = 0x4B0; // CUtlSymbolLarge
}

public static class CPhysLength {
    public const nint m_offset = 0x500; // Vector[2]
    public const nint m_vecAttach = 0x518; // Vector
    public const nint m_addLength = 0x524; // float32
    public const nint m_minLength = 0x528; // float32
    public const nint m_totalLength = 0x52C; // float32
    public const nint m_bEnableCollision = 0x530; // bool
}

public static class CPhysMagnet {
    public const nint m_OnMagnetAttach = 0x768; // CEntityIOOutput
    public const nint m_OnMagnetDetach = 0x790; // CEntityIOOutput
    public const nint m_massScale = 0x7B8; // float32
    public const nint m_forceLimit = 0x7BC; // float32
    public const nint m_torqueLimit = 0x7C0; // float32
    public const nint m_MagnettedEntities = 0x7C8; // CUtlVector< magnetted_objects_t >
    public const nint m_bActive = 0x7E0; // bool
    public const nint m_bHasHitSomething = 0x7E1; // bool
    public const nint m_flTotalMass = 0x7E4; // float32
    public const nint m_flRadius = 0x7E8; // float32
    public const nint m_flNextSuckTime = 0x7EC; // GameTime_t
    public const nint m_iMaxObjectsAttached = 0x7F0; // int32
}

public static class CPhysMotor {
    public const nint m_nameAttach = 0x4A8; // CUtlSymbolLarge
    public const nint m_hAttachedObject = 0x4B0; // CHandle< CBaseEntity >
    public const nint m_spinUp = 0x4B4; // float32
    public const nint m_additionalAcceleration = 0x4B8; // float32
    public const nint m_angularAcceleration = 0x4BC; // float32
    public const nint m_lastTime = 0x4C0; // GameTime_t
    public const nint m_motor = 0x4D8; // CMotorController
}

public static class CPhysPulley {
    public const nint m_position2 = 0x500; // Vector
    public const nint m_offset = 0x50C; // Vector[2]
    public const nint m_addLength = 0x524; // float32
    public const nint m_gearRatio = 0x528; // float32
}

public static class CPhysSlideConstraint {
    public const nint m_axisEnd = 0x508; // Vector
    public const nint m_slideFriction = 0x514; // float32
    public const nint m_systemLoadScale = 0x518; // float32
    public const nint m_initialOffset = 0x51C; // float32
    public const nint m_bEnableLinearConstraint = 0x520; // bool
    public const nint m_bEnableAngularConstraint = 0x521; // bool
    public const nint m_flMotorFrequency = 0x524; // float32
    public const nint m_flMotorDampingRatio = 0x528; // float32
    public const nint m_bUseEntityPivot = 0x52C; // bool
    public const nint m_soundInfo = 0x530; // ConstraintSoundInfo
}

public static class CPhysThruster {
    public const nint m_localOrigin = 0x508; // Vector
}

public static class CPhysTorque {
    public const nint m_axis = 0x508; // Vector
}

public static class CPhysWheelConstraint {
    public const nint m_flSuspensionFrequency = 0x500; // float32
    public const nint m_flSuspensionDampingRatio = 0x504; // float32
    public const nint m_flSuspensionHeightOffset = 0x508; // float32
    public const nint m_bEnableSuspensionLimit = 0x50C; // bool
    public const nint m_flMinSuspensionOffset = 0x510; // float32
    public const nint m_flMaxSuspensionOffset = 0x514; // float32
    public const nint m_bEnableSteeringLimit = 0x518; // bool
    public const nint m_flMinSteeringAngle = 0x51C; // float32
    public const nint m_flMaxSteeringAngle = 0x520; // float32
    public const nint m_flSteeringAxisFriction = 0x524; // float32
    public const nint m_flSpinAxisFriction = 0x528; // float32
}

public static class CPhysicsEntitySolver {
    public const nint m_hMovingEntity = 0x4B0; // CHandle< CBaseEntity >
    public const nint m_hPhysicsBlocker = 0x4B4; // CHandle< CBaseEntity >
    public const nint m_separationDuration = 0x4B8; // float32
    public const nint m_cancelTime = 0x4BC; // GameTime_t
}

public static class CPhysicsProp {
    public const nint m_MotionEnabled = 0x8E8; // CEntityIOOutput
    public const nint m_OnAwakened = 0x910; // CEntityIOOutput
    public const nint m_OnAwake = 0x938; // CEntityIOOutput
    public const nint m_OnAsleep = 0x960; // CEntityIOOutput
    public const nint m_OnPlayerUse = 0x988; // CEntityIOOutput
    public const nint m_OnPlayerPickup = 0x9B0; // CEntityIOOutput
    public const nint m_OnOutOfWorld = 0x9D8; // CEntityIOOutput
    public const nint m_massScale = 0xA00; // float32
    public const nint m_inertiaScale = 0xA04; // float32
    public const nint m_buoyancyScale = 0xA08; // float32
    public const nint m_damageType = 0xA0C; // int32
    public const nint m_damageToEnableMotion = 0xA10; // int32
    public const nint m_flForceToEnableMotion = 0xA14; // float32
    public const nint m_bThrownByPlayer = 0xA18; // bool
    public const nint m_bDroppedByPlayer = 0xA19; // bool
    public const nint m_bTouchedByPlayer = 0xA1A; // bool
    public const nint m_bFirstCollisionAfterLaunch = 0xA1B; // bool
    public const nint m_iExploitableByPlayer = 0xA1C; // int32
    public const nint m_bHasBeenAwakened = 0xA20; // bool
    public const nint m_bIsOverrideProp = 0xA21; // bool
    public const nint m_fNextCheckDisableMotionContactsTime = 0xA24; // GameTime_t
    public const nint m_iInitialGlowState = 0xA28; // int32
    public const nint m_nGlowRange = 0xA2C; // int32
    public const nint m_nGlowRangeMin = 0xA30; // int32
    public const nint m_glowColor = 0xA34; // Color
    public const nint m_bForceNavIgnore = 0xA38; // bool
    public const nint m_bNoNavmeshBlocker = 0xA39; // bool
    public const nint m_bForceNpcExclude = 0xA3A; // bool
    public const nint m_bShouldAutoConvertBackFromDebris = 0xA3B; // bool
    public const nint m_bMuteImpactEffects = 0xA3C; // bool
    public const nint m_bAcceptDamageFromHeldObjects = 0xA44; // bool
    public const nint m_bEnableUseOutput = 0xA45; // bool
    public const nint m_bAwake = 0xA46; // bool
    public const nint m_nCollisionGroupOverride = 0xA48; // int32
}

public static class CPhysicsPropRespawnable {
    public const nint m_vOriginalSpawnOrigin = 0xA50; // Vector
    public const nint m_vOriginalSpawnAngles = 0xA5C; // QAngle
    public const nint m_vOriginalMins = 0xA68; // Vector
    public const nint m_vOriginalMaxs = 0xA74; // Vector
    public const nint m_flRespawnDuration = 0xA80; // float32
}

public static class CPhysicsShake {
    public const nint m_force = 0x8; // Vector
}

public static class CPhysicsSpring {
    public const nint m_flFrequency = 0x4B0; // float32
    public const nint m_flDampingRatio = 0x4B4; // float32
    public const nint m_flRestLength = 0x4B8; // float32
    public const nint m_nameAttachStart = 0x4C0; // CUtlSymbolLarge
    public const nint m_nameAttachEnd = 0x4C8; // CUtlSymbolLarge
    public const nint m_start = 0x4D0; // Vector
    public const nint m_end = 0x4DC; // Vector
    public const nint m_teleportTick = 0x4E8; // uint32
}

public static class CPlatTrigger {
    public const nint m_pPlatform = 0x758; // CHandle< CFuncPlat >
}

public static class CPlayerControllerComponent {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
}

public static class CPlayerPawnComponent {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
}

public static class CPlayerTrackedStatDefinition {
    public const nint m_unStatID = 0x8; // TrackedStatID_t
    public const nint m_eStatImpl = 0xC; // EPlayerTrackedStatImpl
    public const nint m_killEaterData = 0x10; // TrackedStatKillEaterData_t
    public const nint m_combatQueryData = 0x18; // TrackedStatCombatQueryData_t
    public const nint m_expressionData = 0x20; // TrackedStatExpressionData_t
    public const nint m_heroAdjectiveData = 0x30; // TrackedStatHeroAdjectiveData_t
}

public static class CPlayerVisibility {
    public const nint m_flVisibilityStrength = 0x4A8; // float32
    public const nint m_flFogDistanceMultiplier = 0x4AC; // float32
    public const nint m_flFogMaxDensityMultiplier = 0x4B0; // float32
    public const nint m_flFadeTime = 0x4B4; // float32
    public const nint m_bStartDisabled = 0x4B8; // bool
    public const nint m_bIsEnabled = 0x4B9; // bool
}

public static class CPlayer_CameraServices {
    public const nint m_PlayerFog = 0x40; // fogplayerparams_t
    public const nint m_hColorCorrectionCtrl = 0x80; // CHandle< CColorCorrection >
    public const nint m_hViewEntity = 0x84; // CHandle< CBaseEntity >
    public const nint m_hTonemapController = 0x88; // CHandle< CTonemapController2 >
    public const nint m_audio = 0x90; // audioparams_t
    public const nint m_PostProcessingVolumes = 0x108; // CNetworkUtlVectorBase< CHandle< CPostProcessingVolume > >
    public const nint m_flOldPlayerZ = 0x120; // float32
    public const nint m_flOldPlayerViewOffsetZ = 0x124; // float32
    public const nint m_hTriggerSoundscapeList = 0x140; // CUtlVector< CHandle< CEnvSoundscapeTriggerable > >
}

public static class CPlayer_MovementServices {
    public const nint m_nImpulse = 0x40; // int32
    public const nint m_nButtons = 0x48; // CInButtonState
    public const nint m_nQueuedButtonDownMask = 0x68; // uint64
    public const nint m_nQueuedButtonChangeMask = 0x70; // uint64
    public const nint m_nButtonDoublePressed = 0x78; // uint64
    public const nint m_pButtonPressedCmdNumber = 0x80; // uint32[64]
    public const nint m_nLastCommandNumberProcessed = 0x180; // uint32
    public const nint m_nToggleButtonDownMask = 0x188; // uint64
    public const nint m_flMaxspeed = 0x190; // float32
    public const nint m_arrForceSubtickMoveWhen = 0x194; // float32[4]
    public const nint m_flForwardMove = 0x1A4; // float32
    public const nint m_flLeftMove = 0x1A8; // float32
    public const nint m_flUpMove = 0x1AC; // float32
    public const nint m_vecLastMovementImpulses = 0x1B0; // Vector
    public const nint m_vecOldViewAngles = 0x1BC; // QAngle
}

public static class CPlayer_MovementServices_Humanoid {
    public const nint m_flStepSoundTime = 0x1D0; // float32
    public const nint m_flFallVelocity = 0x1D4; // float32
    public const nint m_bInCrouch = 0x1D8; // bool
    public const nint m_nCrouchState = 0x1DC; // uint32
    public const nint m_flCrouchTransitionStartTime = 0x1E0; // GameTime_t
    public const nint m_bDucked = 0x1E4; // bool
    public const nint m_bDucking = 0x1E5; // bool
    public const nint m_bInDuckJump = 0x1E6; // bool
    public const nint m_groundNormal = 0x1E8; // Vector
    public const nint m_flSurfaceFriction = 0x1F4; // float32
    public const nint m_surfaceProps = 0x1F8; // CUtlStringToken
    public const nint m_nStepside = 0x208; // int32
    public const nint m_iTargetVolume = 0x20C; // int32
    public const nint m_vecSmoothedVelocity = 0x210; // Vector
}

public static class CPlayer_ObserverServices {
    public const nint m_iObserverMode = 0x40; // uint8
    public const nint m_hObserverTarget = 0x44; // CHandle< CBaseEntity >
    public const nint m_iObserverLastMode = 0x48; // ObserverMode_t
    public const nint m_bForcedObserverMode = 0x4C; // bool
}

public static class CPlayer_WeaponServices {
    public const nint m_bAllowSwitchToNoWeapon = 0x40; // bool
    public const nint m_hMyWeapons = 0x48; // CNetworkUtlVectorBase< CHandle< CBasePlayerWeapon > >
    public const nint m_hActiveWeapon = 0x60; // CHandle< CBasePlayerWeapon >
    public const nint m_hLastWeapon = 0x64; // CHandle< CBasePlayerWeapon >
    public const nint m_iAmmo = 0x68; // uint16[32]
    public const nint m_bPreventWeaponPickup = 0xA8; // bool
}

public static class CPointAngularVelocitySensor {
    public const nint m_hTargetEntity = 0x4A8; // CHandle< CBaseEntity >
    public const nint m_flThreshold = 0x4AC; // float32
    public const nint m_nLastCompareResult = 0x4B0; // int32
    public const nint m_nLastFireResult = 0x4B4; // int32
    public const nint m_flFireTime = 0x4B8; // GameTime_t
    public const nint m_flFireInterval = 0x4BC; // float32
    public const nint m_flLastAngVelocity = 0x4C0; // float32
    public const nint m_lastOrientation = 0x4C4; // QAngle
    public const nint m_vecAxis = 0x4D0; // Vector
    public const nint m_bUseHelper = 0x4DC; // bool
    public const nint m_AngularVelocity = 0x4E0; // CEntityOutputTemplate< float32 >
    public const nint m_OnLessThan = 0x508; // CEntityIOOutput
    public const nint m_OnLessThanOrEqualTo = 0x530; // CEntityIOOutput
    public const nint m_OnGreaterThan = 0x558; // CEntityIOOutput
    public const nint m_OnGreaterThanOrEqualTo = 0x580; // CEntityIOOutput
    public const nint m_OnEqualTo = 0x5A8; // CEntityIOOutput
}

public static class CPointCamera {
    public const nint m_FOV = 0x4A8; // float32
    public const nint m_Resolution = 0x4AC; // float32
    public const nint m_bFogEnable = 0x4B0; // bool
    public const nint m_FogColor = 0x4B1; // Color
    public const nint m_flFogStart = 0x4B8; // float32
    public const nint m_flFogEnd = 0x4BC; // float32
    public const nint m_flFogMaxDensity = 0x4C0; // float32
    public const nint m_bActive = 0x4C4; // bool
    public const nint m_bUseScreenAspectRatio = 0x4C5; // bool
    public const nint m_flAspectRatio = 0x4C8; // float32
    public const nint m_bNoSky = 0x4CC; // bool
    public const nint m_fBrightness = 0x4D0; // float32
    public const nint m_flZFar = 0x4D4; // float32
    public const nint m_flZNear = 0x4D8; // float32
    public const nint m_bCanHLTVUse = 0x4DC; // bool
    public const nint m_flOverrideShadowFarZ = 0x4E0; // float32
    public const nint m_bDofEnabled = 0x4E4; // bool
    public const nint m_flDofNearBlurry = 0x4E8; // float32
    public const nint m_flDofNearCrisp = 0x4EC; // float32
    public const nint m_flDofFarCrisp = 0x4F0; // float32
    public const nint m_flDofFarBlurry = 0x4F4; // float32
    public const nint m_flDofTiltToGround = 0x4F8; // float32
    public const nint m_TargetFOV = 0x4FC; // float32
    public const nint m_DegreesPerSecond = 0x500; // float32
    public const nint m_bIsOn = 0x504; // bool
    public const nint m_pNext = 0x508; // CPointCamera*
}

public static class CPointCameraVFOV {
    public const nint m_flVerticalFOV = 0x510; // float32
}

public static class CPointClientUIDialog {
    public const nint m_hActivator = 0x908; // CHandle< CBaseEntity >
    public const nint m_bStartEnabled = 0x90C; // bool
}

public static class CPointClientUIWorldPanel {
    public const nint m_bIgnoreInput = 0x908; // bool
    public const nint m_bLit = 0x909; // bool
    public const nint m_bFollowPlayerAcrossTeleport = 0x90A; // bool
    public const nint m_flWidth = 0x90C; // float32
    public const nint m_flHeight = 0x910; // float32
    public const nint m_flDPI = 0x914; // float32
    public const nint m_flInteractDistance = 0x918; // float32
    public const nint m_flDepthOffset = 0x91C; // float32
    public const nint m_unOwnerContext = 0x920; // uint32
    public const nint m_unHorizontalAlign = 0x924; // uint32
    public const nint m_unVerticalAlign = 0x928; // uint32
    public const nint m_unOrientation = 0x92C; // uint32
    public const nint m_bAllowInteractionFromAllSceneWorlds = 0x930; // bool
    public const nint m_vecCSSClasses = 0x938; // CNetworkUtlVectorBase< CUtlSymbolLarge >
    public const nint m_bOpaque = 0x950; // bool
    public const nint m_bNoDepth = 0x951; // bool
    public const nint m_bRenderBackface = 0x952; // bool
    public const nint m_bUseOffScreenIndicator = 0x953; // bool
    public const nint m_bExcludeFromSaveGames = 0x954; // bool
    public const nint m_bGrabbable = 0x955; // bool
    public const nint m_bOnlyRenderToTexture = 0x956; // bool
    public const nint m_bDisableMipGen = 0x957; // bool
    public const nint m_nExplicitImageLayout = 0x958; // int32
}

public static class CPointClientUIWorldTextPanel {
    public const nint m_messageText = 0x960; // char[512]
}

public static class CPointCommentaryNode {
    public const nint m_iszPreCommands = 0x768; // CUtlSymbolLarge
    public const nint m_iszPostCommands = 0x770; // CUtlSymbolLarge
    public const nint m_iszCommentaryFile = 0x778; // CUtlSymbolLarge
    public const nint m_iszViewTarget = 0x780; // CUtlSymbolLarge
    public const nint m_hViewTarget = 0x788; // CHandle< CBaseEntity >
    public const nint m_hViewTargetAngles = 0x78C; // CHandle< CBaseEntity >
    public const nint m_iszViewPosition = 0x790; // CUtlSymbolLarge
    public const nint m_hViewPosition = 0x798; // CHandle< CBaseEntity >
    public const nint m_hViewPositionMover = 0x79C; // CHandle< CBaseEntity >
    public const nint m_bPreventMovement = 0x7A0; // bool
    public const nint m_bUnderCrosshair = 0x7A1; // bool
    public const nint m_bUnstoppable = 0x7A2; // bool
    public const nint m_flFinishedTime = 0x7A4; // GameTime_t
    public const nint m_vecFinishOrigin = 0x7A8; // Vector
    public const nint m_vecOriginalAngles = 0x7B4; // QAngle
    public const nint m_vecFinishAngles = 0x7C0; // QAngle
    public const nint m_bPreventChangesWhileMoving = 0x7CC; // bool
    public const nint m_bDisabled = 0x7CD; // bool
    public const nint m_vecTeleportOrigin = 0x7D0; // Vector
    public const nint m_flAbortedPlaybackAt = 0x7DC; // GameTime_t
    public const nint m_pOnCommentaryStarted = 0x7E0; // CEntityIOOutput
    public const nint m_pOnCommentaryStopped = 0x808; // CEntityIOOutput
    public const nint m_bActive = 0x830; // bool
    public const nint m_flStartTime = 0x834; // GameTime_t
    public const nint m_flStartTimeInCommentary = 0x838; // float32
    public const nint m_iszTitle = 0x840; // CUtlSymbolLarge
    public const nint m_iszSpeakers = 0x848; // CUtlSymbolLarge
    public const nint m_iNodeNumber = 0x850; // int32
    public const nint m_iNodeNumberMax = 0x854; // int32
    public const nint m_bListenedTo = 0x858; // bool
}

public static class CPointEntityFinder {
    public const nint m_hEntity = 0x4A8; // CHandle< CBaseEntity >
    public const nint m_iFilterName = 0x4B0; // CUtlSymbolLarge
    public const nint m_hFilter = 0x4B8; // CHandle< CBaseFilter >
    public const nint m_iRefName = 0x4C0; // CUtlSymbolLarge
    public const nint m_hReference = 0x4C8; // CHandle< CBaseEntity >
    public const nint m_FindMethod = 0x4CC; // EntFinderMethod_t
    public const nint m_OnFoundEntity = 0x4D0; // CEntityIOOutput
}

public static class CPointPrefab {
    public const nint m_targetMapName = 0x4A8; // CUtlSymbolLarge
    public const nint m_forceWorldGroupID = 0x4B0; // CUtlSymbolLarge
    public const nint m_associatedRelayTargetName = 0x4B8; // CUtlSymbolLarge
    public const nint m_fixupNames = 0x4C0; // bool
    public const nint m_bLoadDynamic = 0x4C1; // bool
    public const nint m_associatedRelayEntity = 0x4C4; // CHandle< CPointPrefab >
}

public static class CPointPush {
    public const nint m_bEnabled = 0x4A8; // bool
    public const nint m_flMagnitude = 0x4AC; // float32
    public const nint m_flRadius = 0x4B0; // float32
    public const nint m_flInnerRadius = 0x4B4; // float32
    public const nint m_flConeOfInfluence = 0x4B8; // float32
    public const nint m_iszFilterName = 0x4C0; // CUtlSymbolLarge
    public const nint m_hFilter = 0x4C8; // CHandle< CBaseFilter >
}

public static class CPointTemplate {
    public const nint m_iszWorldName = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszSource2EntityLumpName = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszEntityFilterName = 0x4B8; // CUtlSymbolLarge
    public const nint m_flTimeoutInterval = 0x4C0; // float32
    public const nint m_bAsynchronouslySpawnEntities = 0x4C4; // bool
    public const nint m_pOutputOnSpawned = 0x4C8; // CEntityIOOutput
    public const nint m_clientOnlyEntityBehavior = 0x4F0; // PointTemplateClientOnlyEntityBehavior_t
    public const nint m_ownerSpawnGroupType = 0x4F4; // PointTemplateOwnerSpawnGroupType_t
    public const nint m_createdSpawnGroupHandles = 0x4F8; // CUtlVector< uint32 >
    public const nint m_SpawnedEntityHandles = 0x510; // CUtlVector< CEntityHandle >
    public const nint m_ScriptSpawnCallback = 0x528; // HSCRIPT
    public const nint m_ScriptCallbackScope = 0x530; // HSCRIPT
}

public static class CPointValueRemapper {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_bUpdateOnClient = 0x4A9; // bool
    public const nint m_nInputType = 0x4AC; // ValueRemapperInputType_t
    public const nint m_iszRemapLineStartName = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszRemapLineEndName = 0x4B8; // CUtlSymbolLarge
    public const nint m_hRemapLineStart = 0x4C0; // CHandle< CBaseEntity >
    public const nint m_hRemapLineEnd = 0x4C4; // CHandle< CBaseEntity >
    public const nint m_flMaximumChangePerSecond = 0x4C8; // float32
    public const nint m_flDisengageDistance = 0x4CC; // float32
    public const nint m_flEngageDistance = 0x4D0; // float32
    public const nint m_bRequiresUseKey = 0x4D4; // bool
    public const nint m_nOutputType = 0x4D8; // ValueRemapperOutputType_t
    public const nint m_iszOutputEntityName = 0x4E0; // CUtlSymbolLarge
    public const nint m_iszOutputEntity2Name = 0x4E8; // CUtlSymbolLarge
    public const nint m_iszOutputEntity3Name = 0x4F0; // CUtlSymbolLarge
    public const nint m_iszOutputEntity4Name = 0x4F8; // CUtlSymbolLarge
    public const nint m_hOutputEntities = 0x500; // CNetworkUtlVectorBase< CHandle< CBaseEntity > >
    public const nint m_nHapticsType = 0x518; // ValueRemapperHapticsType_t
    public const nint m_nMomentumType = 0x51C; // ValueRemapperMomentumType_t
    public const nint m_flMomentumModifier = 0x520; // float32
    public const nint m_flSnapValue = 0x524; // float32
    public const nint m_flCurrentMomentum = 0x528; // float32
    public const nint m_nRatchetType = 0x52C; // ValueRemapperRatchetType_t
    public const nint m_flRatchetOffset = 0x530; // float32
    public const nint m_flInputOffset = 0x534; // float32
    public const nint m_bEngaged = 0x538; // bool
    public const nint m_bFirstUpdate = 0x539; // bool
    public const nint m_flPreviousValue = 0x53C; // float32
    public const nint m_flPreviousUpdateTickTime = 0x540; // GameTime_t
    public const nint m_vecPreviousTestPoint = 0x544; // Vector
    public const nint m_hUsingPlayer = 0x550; // CHandle< CBasePlayerPawn >
    public const nint m_flCustomOutputValue = 0x554; // float32
    public const nint m_iszSoundEngage = 0x558; // CUtlSymbolLarge
    public const nint m_iszSoundDisengage = 0x560; // CUtlSymbolLarge
    public const nint m_iszSoundReachedValueZero = 0x568; // CUtlSymbolLarge
    public const nint m_iszSoundReachedValueOne = 0x570; // CUtlSymbolLarge
    public const nint m_iszSoundMovingLoop = 0x578; // CUtlSymbolLarge
    public const nint m_Position = 0x588; // CEntityOutputTemplate< float32 >
    public const nint m_PositionDelta = 0x5B0; // CEntityOutputTemplate< float32 >
    public const nint m_OnReachedValueZero = 0x5D8; // CEntityIOOutput
    public const nint m_OnReachedValueOne = 0x600; // CEntityIOOutput
    public const nint m_OnReachedValueCustom = 0x628; // CEntityIOOutput
    public const nint m_OnEngage = 0x650; // CEntityIOOutput
    public const nint m_OnDisengage = 0x678; // CEntityIOOutput
}

public static class CPointVelocitySensor {
    public const nint m_hTargetEntity = 0x4A8; // CHandle< CBaseEntity >
    public const nint m_vecAxis = 0x4AC; // Vector
    public const nint m_bEnabled = 0x4B8; // bool
    public const nint m_fPrevVelocity = 0x4BC; // float32
    public const nint m_flAvgInterval = 0x4C0; // float32
    public const nint m_Velocity = 0x4C8; // CEntityOutputTemplate< float32 >
}

public static class CPointWorldText {
    public const nint m_messageText = 0x758; // char[512]
    public const nint m_FontName = 0x958; // char[64]
    public const nint m_bEnabled = 0x998; // bool
    public const nint m_bFullbright = 0x999; // bool
    public const nint m_flWorldUnitsPerPx = 0x99C; // float32
    public const nint m_flFontSize = 0x9A0; // float32
    public const nint m_flDepthOffset = 0x9A4; // float32
    public const nint m_Color = 0x9A8; // Color
    public const nint m_nJustifyHorizontal = 0x9AC; // PointWorldTextJustifyHorizontal_t
    public const nint m_nJustifyVertical = 0x9B0; // PointWorldTextJustifyVertical_t
    public const nint m_nReorientMode = 0x9B4; // PointWorldTextReorientMode_t
}

public static class CPostProcessingVolume {
    public const nint m_hPostSettings = 0x910; // CStrongHandle< InfoForResourceTypeCPostProcessingResource >
    public const nint m_flFadeDuration = 0x918; // float32
    public const nint m_flMinLogExposure = 0x91C; // float32
    public const nint m_flMaxLogExposure = 0x920; // float32
    public const nint m_flMinExposure = 0x924; // float32
    public const nint m_flMaxExposure = 0x928; // float32
    public const nint m_flExposureCompensation = 0x92C; // float32
    public const nint m_flExposureFadeSpeedUp = 0x930; // float32
    public const nint m_flExposureFadeSpeedDown = 0x934; // float32
    public const nint m_flTonemapEVSmoothingRange = 0x938; // float32
    public const nint m_bMaster = 0x93C; // bool
    public const nint m_bExposureControl = 0x93D; // bool
}

public static class CPrecipitationVData {
    public const nint m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint m_flInnerDistance = 0x108; // float32
    public const nint m_nAttachType = 0x10C; // ParticleAttachment_t
    public const nint m_bBatchSameVolumeType = 0x110; // bool
    public const nint m_nRTEnvCP = 0x114; // int32
    public const nint m_nRTEnvCPComponent = 0x118; // int32
    public const nint m_szModifier = 0x120; // CUtlString
}

public static class CProjectedDecal {
    public const nint m_nTexture = 0x4A8; // int32
    public const nint m_flDistance = 0x4AC; // float32
}

public static class CRR_Response {
    public const nint m_Type = 0x0; // uint8
    public const nint m_szResponseName = 0x1; // char[192]
    public const nint m_szMatchingRule = 0xC1; // char[128]
    public const nint m_Params = 0x148; // ResponseParams
    public const nint m_fMatchScore = 0x168; // float32
    public const nint m_szSpeakerContext = 0x170; // char*
    public const nint m_szWorldContext = 0x178; // char*
    public const nint m_Followup = 0x180; // ResponseFollowup
    public const nint m_pchCriteriaNames = 0x1B8; // CUtlVector< CUtlSymbol >
    public const nint m_pchCriteriaValues = 0x1D0; // CUtlVector< char* >
}

public static class CRagdollConstraint {
    public const nint m_xmin = 0x500; // float32
    public const nint m_xmax = 0x504; // float32
    public const nint m_ymin = 0x508; // float32
    public const nint m_ymax = 0x50C; // float32
    public const nint m_zmin = 0x510; // float32
    public const nint m_zmax = 0x514; // float32
    public const nint m_xfriction = 0x518; // float32
    public const nint m_yfriction = 0x51C; // float32
    public const nint m_zfriction = 0x520; // float32
}

public static class CRagdollMagnet {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_radius = 0x4AC; // float32
    public const nint m_force = 0x4B0; // float32
    public const nint m_axis = 0x4B4; // Vector
}

public static class CRagdollManager {
    public const nint m_iCurrentMaxRagdollCount = 0x4A8; // int8
    public const nint m_iMaxRagdollCount = 0x4AC; // int32
    public const nint m_bSaveImportant = 0x4B0; // bool
}

public static class CRagdollProp {
    public const nint m_ragdoll = 0x8F0; // ragdoll_t
    public const nint m_bStartDisabled = 0x928; // bool
    public const nint m_ragPos = 0x930; // CNetworkUtlVectorBase< Vector >
    public const nint m_ragAngles = 0x948; // CNetworkUtlVectorBase< QAngle >
    public const nint m_hRagdollSource = 0x960; // CHandle< CBaseEntity >
    public const nint m_lastUpdateTickCount = 0x964; // uint32
    public const nint m_allAsleep = 0x968; // bool
    public const nint m_bFirstCollisionAfterLaunch = 0x969; // bool
    public const nint m_hDamageEntity = 0x96C; // CHandle< CBaseEntity >
    public const nint m_hKiller = 0x970; // CHandle< CBaseEntity >
    public const nint m_hPhysicsAttacker = 0x974; // CHandle< CBasePlayerPawn >
    public const nint m_flLastPhysicsInfluenceTime = 0x978; // GameTime_t
    public const nint m_flFadeOutStartTime = 0x97C; // GameTime_t
    public const nint m_flFadeTime = 0x980; // float32
    public const nint m_vecLastOrigin = 0x984; // Vector
    public const nint m_flAwakeTime = 0x990; // GameTime_t
    public const nint m_flLastOriginChangeTime = 0x994; // GameTime_t
    public const nint m_nBloodColor = 0x998; // int32
    public const nint m_strOriginClassName = 0x9A0; // CUtlSymbolLarge
    public const nint m_strSourceClassName = 0x9A8; // CUtlSymbolLarge
    public const nint m_bHasBeenPhysgunned = 0x9B0; // bool
    public const nint m_bShouldTeleportPhysics = 0x9B1; // bool
    public const nint m_flBlendWeight = 0x9B4; // float32
    public const nint m_flDefaultFadeScale = 0x9B8; // float32
    public const nint m_ragdollMins = 0x9C0; // CUtlVector< Vector >
    public const nint m_ragdollMaxs = 0x9D8; // CUtlVector< Vector >
    public const nint m_bShouldDeleteActivationRecord = 0x9F0; // bool
    public const nint m_bValidatePoweredRagdollPose = 0xA50; // bool
}

public static class CRagdollPropAttached {
    public const nint m_boneIndexAttached = 0xA90; // uint32
    public const nint m_ragdollAttachedObjectIndex = 0xA94; // uint32
    public const nint m_attachmentPointBoneSpace = 0xA98; // Vector
    public const nint m_attachmentPointRagdollSpace = 0xAA4; // Vector
    public const nint m_bShouldDetach = 0xAB0; // bool
    public const nint m_bShouldDeleteAttachedActivationRecord = 0xAC0; // bool
}

public static class CRandSimTimer {
    public const nint m_minInterval = 0x8; // float32
    public const nint m_maxInterval = 0xC; // float32
}

public static class CRandStopwatch {
    public const nint m_minInterval = 0xC; // float32
    public const nint m_maxInterval = 0x10; // float32
}

public static class CRangeFloat {
    public const nint m_pValue = 0x0; // float32[2]
}

public static class CRangeInt {
    public const nint m_pValue = 0x0; // int32[2]
}

public static class CRemapFloat {
    public const nint m_pValue = 0x0; // float32[4]
}

public static class CRenderComponent {
    public const nint __m_pChainEntity = 0x10; // CNetworkVarChainer
    public const nint m_bIsRenderingWithViewModels = 0x50; // bool
    public const nint m_nSplitscreenFlags = 0x54; // uint32
    public const nint m_bEnableRendering = 0x60; // bool
    public const nint m_bInterpolationReadyToDraw = 0xB0; // bool
}

public static class CResponseCriteriaSet {
    public const nint m_nNumPrefixedContexts = 0x28; // int32
    public const nint m_bOverrideOnAppend = 0x2C; // bool
}

public static class CResponseQueue {
    public const nint m_ExpresserTargets = 0x50; // CUtlVector< CAI_Expresser* >
}

public static class CResponseQueue_CDeferredResponse {
    public const nint m_contexts = 0x10; // CResponseCriteriaSet
    public const nint m_fDispatchTime = 0x40; // float32
    public const nint m_hIssuer = 0x44; // CHandle< CBaseEntity >
    public const nint m_response = 0x50; // CRR_Response
    public const nint m_bResponseValid = 0x238; // bool
}

public static class CRevertSaved {
    public const nint m_loadTime = 0x758; // float32
    public const nint m_Duration = 0x75C; // float32
    public const nint m_HoldTime = 0x760; // float32
}

public static class CRopeKeyframe {
    public const nint m_RopeFlags = 0x760; // uint16
    public const nint m_iNextLinkName = 0x768; // CUtlSymbolLarge
    public const nint m_Slack = 0x770; // int16
    public const nint m_Width = 0x774; // float32
    public const nint m_TextureScale = 0x778; // float32
    public const nint m_nSegments = 0x77C; // uint8
    public const nint m_bConstrainBetweenEndpoints = 0x77D; // bool
    public const nint m_strRopeMaterialModel = 0x780; // CUtlSymbolLarge
    public const nint m_iRopeMaterialModelIndex = 0x788; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_Subdiv = 0x790; // uint8
    public const nint m_nChangeCount = 0x791; // uint8
    public const nint m_RopeLength = 0x792; // int16
    public const nint m_fLockedPoints = 0x794; // uint8
    public const nint m_bCreatedFromMapFile = 0x795; // bool
    public const nint m_flScrollSpeed = 0x798; // float32
    public const nint m_bStartPointValid = 0x79C; // bool
    public const nint m_bEndPointValid = 0x79D; // bool
    public const nint m_hStartPoint = 0x7A0; // CHandle< CBaseEntity >
    public const nint m_hEndPoint = 0x7A4; // CHandle< CBaseEntity >
    public const nint m_iStartAttachment = 0x7A8; // AttachmentHandle_t
    public const nint m_iEndAttachment = 0x7A9; // AttachmentHandle_t
}

public static class CSceneEntity {
    public const nint m_iszSceneFile = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszResumeSceneFile = 0x4B8; // CUtlSymbolLarge
    public const nint m_iszTarget1 = 0x4C0; // CUtlSymbolLarge
    public const nint m_iszTarget2 = 0x4C8; // CUtlSymbolLarge
    public const nint m_iszTarget3 = 0x4D0; // CUtlSymbolLarge
    public const nint m_iszTarget4 = 0x4D8; // CUtlSymbolLarge
    public const nint m_iszTarget5 = 0x4E0; // CUtlSymbolLarge
    public const nint m_iszTarget6 = 0x4E8; // CUtlSymbolLarge
    public const nint m_iszTarget7 = 0x4F0; // CUtlSymbolLarge
    public const nint m_iszTarget8 = 0x4F8; // CUtlSymbolLarge
    public const nint m_hTarget1 = 0x500; // CHandle< CBaseEntity >
    public const nint m_hTarget2 = 0x504; // CHandle< CBaseEntity >
    public const nint m_hTarget3 = 0x508; // CHandle< CBaseEntity >
    public const nint m_hTarget4 = 0x50C; // CHandle< CBaseEntity >
    public const nint m_hTarget5 = 0x510; // CHandle< CBaseEntity >
    public const nint m_hTarget6 = 0x514; // CHandle< CBaseEntity >
    public const nint m_hTarget7 = 0x518; // CHandle< CBaseEntity >
    public const nint m_hTarget8 = 0x51C; // CHandle< CBaseEntity >
    public const nint m_bIsPlayingBack = 0x520; // bool
    public const nint m_bPaused = 0x521; // bool
    public const nint m_bMultiplayer = 0x522; // bool
    public const nint m_bAutogenerated = 0x523; // bool
    public const nint m_flForceClientTime = 0x524; // float32
    public const nint m_flCurrentTime = 0x528; // float32
    public const nint m_flFrameTime = 0x52C; // float32
    public const nint m_bCancelAtNextInterrupt = 0x530; // bool
    public const nint m_fPitch = 0x534; // float32
    public const nint m_bAutomated = 0x538; // bool
    public const nint m_nAutomatedAction = 0x53C; // int32
    public const nint m_flAutomationDelay = 0x540; // float32
    public const nint m_flAutomationTime = 0x544; // float32
    public const nint m_hWaitingForThisResumeScene = 0x548; // CHandle< CBaseEntity >
    public const nint m_bWaitingForResumeScene = 0x54C; // bool
    public const nint m_bPausedViaInput = 0x54D; // bool
    public const nint m_bPauseAtNextInterrupt = 0x54E; // bool
    public const nint m_bWaitingForActor = 0x54F; // bool
    public const nint m_bWaitingForInterrupt = 0x550; // bool
    public const nint m_bInterruptedActorsScenes = 0x551; // bool
    public const nint m_bBreakOnNonIdle = 0x552; // bool
    public const nint m_hActorList = 0x558; // CNetworkUtlVectorBase< CHandle< CBaseFlex > >
    public const nint m_hRemoveActorList = 0x570; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_nSceneFlushCounter = 0x598; // int32
    public const nint m_nSceneStringIndex = 0x59C; // uint16
    public const nint m_OnStart = 0x5A0; // CEntityIOOutput
    public const nint m_OnCompletion = 0x5C8; // CEntityIOOutput
    public const nint m_OnCanceled = 0x5F0; // CEntityIOOutput
    public const nint m_OnPaused = 0x618; // CEntityIOOutput
    public const nint m_OnResumed = 0x640; // CEntityIOOutput
    public const nint m_OnTrigger = 0x668; // CEntityIOOutput[16]
    public const nint m_hInterruptScene = 0x978; // CHandle< CSceneEntity >
    public const nint m_nInterruptCount = 0x97C; // int32
    public const nint m_bSceneMissing = 0x980; // bool
    public const nint m_bInterrupted = 0x981; // bool
    public const nint m_bCompletedEarly = 0x982; // bool
    public const nint m_bInterruptSceneFinished = 0x983; // bool
    public const nint m_bRestoring = 0x984; // bool
    public const nint m_hNotifySceneCompletion = 0x988; // CUtlVector< CHandle< CSceneEntity > >
    public const nint m_hListManagers = 0x9A0; // CUtlVector< CHandle< CSceneListManager > >
    public const nint m_iszSoundName = 0x9D0; // CUtlSymbolLarge
    public const nint m_hActor = 0x9D8; // CHandle< CBaseFlex >
    public const nint m_hActivator = 0x9DC; // CHandle< CBaseEntity >
    public const nint m_BusyActor = 0x9E0; // int32
    public const nint m_iPlayerDeathBehavior = 0x9E4; // SceneOnPlayerDeath_t
}

public static class CSceneEventInfo {
    public const nint m_iLayer = 0x0; // int32
    public const nint m_iPriority = 0x4; // int32
    public const nint m_hSequence = 0x8; // HSequence
    public const nint m_flWeight = 0xC; // float32
    public const nint m_bIsMoving = 0x10; // bool
    public const nint m_bHasArrived = 0x11; // bool
    public const nint m_flInitialYaw = 0x14; // float32
    public const nint m_flTargetYaw = 0x18; // float32
    public const nint m_flFacingYaw = 0x1C; // float32
    public const nint m_nType = 0x20; // int32
    public const nint m_flNext = 0x24; // GameTime_t
    public const nint m_bIsGesture = 0x28; // bool
    public const nint m_bShouldRemove = 0x29; // bool
    public const nint m_hTarget = 0x54; // CHandle< CBaseEntity >
    public const nint m_nSceneEventId = 0x58; // uint32
    public const nint m_bClientSide = 0x5C; // bool
    public const nint m_bStarted = 0x5D; // bool
}

public static class CSceneListManager {
    public const nint m_hListManagers = 0x4A8; // CUtlVector< CHandle< CSceneListManager > >
    public const nint m_iszScenes = 0x4C0; // CUtlSymbolLarge[16]
    public const nint m_hScenes = 0x540; // CHandle< CBaseEntity >[16]
}

public static class CScriptComponent {
    public const nint m_scriptClassName = 0x30; // CUtlSymbolLarge
}

public static class CScriptItem {
    public const nint m_OnPlayerPickup = 0x840; // CEntityIOOutput
    public const nint m_MoveTypeOverride = 0x868; // MoveType_t
}

public static class CScriptNavBlocker {
    public const nint m_vExtent = 0x768; // Vector
}

public static class CScriptTriggerHurt {
    public const nint m_vExtent = 0x9A0; // Vector
}

public static class CScriptTriggerMultiple {
    public const nint m_vExtent = 0x928; // Vector
}

public static class CScriptTriggerOnce {
    public const nint m_vExtent = 0x928; // Vector
}

public static class CScriptTriggerPush {
    public const nint m_vExtent = 0x928; // Vector
}

public static class CScriptUniformRandomStream {
    public const nint m_hScriptScope = 0x8; // HSCRIPT
    public const nint m_nInitialSeed = 0x9C; // int32
}

public static class CScriptedSequence {
    public const nint m_iszEntry = 0x4A8; // CUtlSymbolLarge
    public const nint m_iszPreIdle = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszPlay = 0x4B8; // CUtlSymbolLarge
    public const nint m_iszPostIdle = 0x4C0; // CUtlSymbolLarge
    public const nint m_iszModifierToAddOnPlay = 0x4C8; // CUtlSymbolLarge
    public const nint m_iszNextScript = 0x4D0; // CUtlSymbolLarge
    public const nint m_iszEntity = 0x4D8; // CUtlSymbolLarge
    public const nint m_iszSyncGroup = 0x4E0; // CUtlSymbolLarge
    public const nint m_nMoveTo = 0x4E8; // ScriptedMoveTo_t
    public const nint m_bIsPlayingPreIdle = 0x4EC; // bool
    public const nint m_bIsPlayingEntry = 0x4ED; // bool
    public const nint m_bIsPlayingAction = 0x4EE; // bool
    public const nint m_bIsPlayingPostIdle = 0x4EF; // bool
    public const nint m_bLoopPreIdleSequence = 0x4F0; // bool
    public const nint m_bLoopActionSequence = 0x4F1; // bool
    public const nint m_bLoopPostIdleSequence = 0x4F2; // bool
    public const nint m_bSynchPostIdles = 0x4F3; // bool
    public const nint m_bIgnoreGravity = 0x4F4; // bool
    public const nint m_bDisableNPCCollisions = 0x4F5; // bool
    public const nint m_bKeepAnimgraphLockedPost = 0x4F6; // bool
    public const nint m_bDontAddModifiers = 0x4F7; // bool
    public const nint m_flRadius = 0x4F8; // float32
    public const nint m_flRepeat = 0x4FC; // float32
    public const nint m_flPlayAnimFadeInTime = 0x500; // float32
    public const nint m_flMoveInterpTime = 0x504; // float32
    public const nint m_flAngRate = 0x508; // float32
    public const nint m_iDelay = 0x50C; // int32
    public const nint m_startTime = 0x510; // GameTime_t
    public const nint m_bWaitForBeginSequence = 0x514; // bool
    public const nint m_saved_effects = 0x518; // int32
    public const nint m_savedFlags = 0x51C; // int32
    public const nint m_savedCollisionGroup = 0x520; // int32
    public const nint m_interruptable = 0x524; // bool
    public const nint m_sequenceStarted = 0x525; // bool
    public const nint m_bPrevAnimatedEveryTick = 0x526; // bool
    public const nint m_bForcedAnimatedEveryTick = 0x527; // bool
    public const nint m_bPositionRelativeToOtherEntity = 0x528; // bool
    public const nint m_hTargetEnt = 0x52C; // CHandle< CBaseEntity >
    public const nint m_hNextCine = 0x530; // CHandle< CScriptedSequence >
    public const nint m_bThinking = 0x534; // bool
    public const nint m_bInitiatedSelfDelete = 0x535; // bool
    public const nint m_bIsTeleportingDueToMoveTo = 0x536; // bool
    public const nint m_bAllowCustomInterruptConditions = 0x537; // bool
    public const nint m_hLastFoundEntity = 0x538; // CHandle< CBaseEntity >
    public const nint m_hForcedTarget = 0x53C; // CHandle< CBaseAnimGraph >
    public const nint m_bDontCancelOtherSequences = 0x540; // bool
    public const nint m_bForceSynch = 0x541; // bool
    public const nint m_bTargetWasAsleep = 0x542; // bool
    public const nint m_bPreventUpdateYawOnFinish = 0x543; // bool
    public const nint m_bEnsureOnNavmeshOnFinish = 0x544; // bool
    public const nint m_onDeathBehavior = 0x548; // ScriptedOnDeath_t
    public const nint m_ConflictResponse = 0x54C; // ScriptedConflictResponse_t
    public const nint m_OnBeginSequence = 0x550; // CEntityIOOutput
    public const nint m_OnActionStartOrLoop = 0x578; // CEntityIOOutput
    public const nint m_OnEndSequence = 0x5A0; // CEntityIOOutput
    public const nint m_OnPostIdleEndSequence = 0x5C8; // CEntityIOOutput
    public const nint m_OnCancelSequence = 0x5F0; // CEntityIOOutput
    public const nint m_OnCancelFailedSequence = 0x618; // CEntityIOOutput
    public const nint m_OnScriptEvent = 0x640; // CEntityIOOutput[8]
    public const nint m_matOtherToMain = 0x780; // CTransform
    public const nint m_hInteractionMainEntity = 0x7A0; // CHandle< CBaseEntity >
    public const nint m_iPlayerDeathBehavior = 0x7A4; // int32
}

public static class CSequenceTransitioner2 {
    public const nint m_currentOp = 0x8; // CNetworkedSequenceOperation
    public const nint m_flCurrentPlaybackRate = 0x30; // float32
    public const nint m_flCurrentAnimTime = 0x34; // float32
    public const nint m_transitioningLayers = 0x38; // TransitioningLayer_t[4]
    public const nint m_pOwner = 0x158; // CBaseAnimatingController*
}

public static class CSimTimer {
    public const nint m_interval = 0x8; // float32
}

public static class CSimpleSimTimer {
    public const nint m_next = 0x0; // GameTime_t
    public const nint m_nWorldGroupId = 0x4; // WorldGroupId_t
}

public static class CSingleplayRules {
    public const nint m_bSinglePlayerGameEnding = 0x90; // bool
}

public static class CSkeletonAnimationController {
    public const nint m_pSkeletonInstance = 0x8; // CSkeletonInstance*
}

public static class CSkeletonInstance {
    public const nint m_modelState = 0x160; // CModelState
    public const nint m_bIsAnimationEnabled = 0x390; // bool
    public const nint m_bUseParentRenderBounds = 0x391; // bool
    public const nint m_bDisableSolidCollisionsForHierarchy = 0x392; // bool
    public const nint m_bDirtyMotionType = 0x0; // bitfield:1
    public const nint m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
    public const nint m_materialGroup = 0x394; // CUtlStringToken
    public const nint m_nHitboxSet = 0x398; // uint8
}

public static class CSkillDamage {
    public const nint m_flDamage = 0x0; // CSkillFloat
    public const nint m_flPhysicsForceDamage = 0x10; // float32
}

public static class CSkillFloat {
    public const nint m_pValue = 0x0; // float32[4]
}

public static class CSkillInt {
    public const nint m_pValue = 0x0; // int32[4]
}

public static class CSkyCamera {
    public const nint m_skyboxData = 0x4A8; // sky3dparams_t
    public const nint m_skyboxSlotToken = 0x538; // CUtlStringToken
    public const nint m_bUseAngles = 0x53C; // bool
    public const nint m_pNext = 0x540; // CSkyCamera*
}

public static class CSkyboxReference {
    public const nint m_worldGroupId = 0x4A8; // WorldGroupId_t
    public const nint m_hSkyCamera = 0x4AC; // CHandle< CSkyCamera >
}

public static class CSmoothFunc {
    public const nint m_flSmoothAmplitude = 0x8; // float32
    public const nint m_flSmoothBias = 0xC; // float32
    public const nint m_flSmoothDuration = 0x10; // float32
    public const nint m_flSmoothRemainingTime = 0x14; // float32
    public const nint m_nSmoothDir = 0x18; // int32
}

public static class CSound {
    public const nint m_hOwner = 0x0; // CHandle< CBaseEntity >
    public const nint m_hTarget = 0x4; // CHandle< CBaseEntity >
    public const nint m_iVolume = 0x8; // int32
    public const nint m_flOcclusionScale = 0xC; // float32
    public const nint m_iType = 0x10; // int32
    public const nint m_iNextAudible = 0x14; // int32
    public const nint m_flExpireTime = 0x18; // GameTime_t
    public const nint m_iNext = 0x1C; // int16
    public const nint m_bNoExpirationTime = 0x1E; // bool
    public const nint m_ownerChannelIndex = 0x20; // int32
    public const nint m_vecOrigin = 0x24; // Vector
    public const nint m_bHasOwner = 0x30; // bool
}

public static class CSoundAreaEntityBase {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_iszSoundAreaType = 0x4B0; // CUtlSymbolLarge
    public const nint m_vPos = 0x4B8; // Vector
}

public static class CSoundAreaEntityOrientedBox {
    public const nint m_vMin = 0x4C8; // Vector
    public const nint m_vMax = 0x4D4; // Vector
}

public static class CSoundAreaEntitySphere {
    public const nint m_flRadius = 0x4C8; // float32
}

public static class CSoundEnt {
    public const nint m_iFreeSound = 0x4A8; // int32
    public const nint m_iActiveSound = 0x4AC; // int32
    public const nint m_cLastActiveSounds = 0x4B0; // int32
    public const nint m_SoundPool = 0x4B4; // CSound[128]
}

public static class CSoundEnvelope {
    public const nint m_current = 0x0; // float32
    public const nint m_target = 0x4; // float32
    public const nint m_rate = 0x8; // float32
    public const nint m_forceupdate = 0xC; // bool
}

public static class CSoundEventAABBEntity {
    public const nint m_vMins = 0x550; // Vector
    public const nint m_vMaxs = 0x55C; // Vector
}

public static class CSoundEventEntity {
    public const nint m_bStartOnSpawn = 0x4A8; // bool
    public const nint m_bToLocalPlayer = 0x4A9; // bool
    public const nint m_bStopOnNew = 0x4AA; // bool
    public const nint m_bSaveRestore = 0x4AB; // bool
    public const nint m_bSavedIsPlaying = 0x4AC; // bool
    public const nint m_flSavedElapsedTime = 0x4B0; // float32
    public const nint m_iszSourceEntityName = 0x4B8; // CUtlSymbolLarge
    public const nint m_iszAttachmentName = 0x4C0; // CUtlSymbolLarge
    public const nint m_onGUIDChanged = 0x4C8; // CEntityOutputTemplate< uint64 >
    public const nint m_onSoundFinished = 0x4F0; // CEntityIOOutput
    public const nint m_iszSoundName = 0x538; // CUtlSymbolLarge
    public const nint m_hSource = 0x548; // CEntityHandle
}

public static class CSoundEventOBBEntity {
    public const nint m_vMins = 0x550; // Vector
    public const nint m_vMaxs = 0x55C; // Vector
}

public static class CSoundEventParameter {
    public const nint m_iszParamName = 0x4B0; // CUtlSymbolLarge
    public const nint m_flFloatValue = 0x4B8; // float32
}

public static class CSoundEventPathCornerEntity {
    public const nint m_iszPathCorner = 0x550; // CUtlSymbolLarge
    public const nint m_iCountMax = 0x558; // int32
    public const nint m_flDistanceMax = 0x55C; // float32
    public const nint m_flDistMaxSqr = 0x560; // float32
    public const nint m_flDotProductMax = 0x564; // float32
    public const nint bPlaying = 0x568; // bool
}

public static class CSoundOpvarSetAABBEntity {
    public const nint m_vDistanceInnerMins = 0x640; // Vector
    public const nint m_vDistanceInnerMaxs = 0x64C; // Vector
    public const nint m_vDistanceOuterMins = 0x658; // Vector
    public const nint m_vDistanceOuterMaxs = 0x664; // Vector
    public const nint m_nAABBDirection = 0x670; // int32
    public const nint m_vInnerMins = 0x674; // Vector
    public const nint m_vInnerMaxs = 0x680; // Vector
    public const nint m_vOuterMins = 0x68C; // Vector
    public const nint m_vOuterMaxs = 0x698; // Vector
}

public static class CSoundOpvarSetEntity {
    public const nint m_iszStackName = 0x4B0; // CUtlSymbolLarge
    public const nint m_iszOperatorName = 0x4B8; // CUtlSymbolLarge
    public const nint m_iszOpvarName = 0x4C0; // CUtlSymbolLarge
    public const nint m_nOpvarType = 0x4C8; // int32
    public const nint m_nOpvarIndex = 0x4CC; // int32
    public const nint m_flOpvarValue = 0x4D0; // float32
    public const nint m_OpvarValueString = 0x4D8; // CUtlSymbolLarge
    public const nint m_bSetOnSpawn = 0x4E0; // bool
}

public static class CSoundOpvarSetOBBWindEntity {
    public const nint m_vMins = 0x540; // Vector
    public const nint m_vMaxs = 0x54C; // Vector
    public const nint m_vDistanceMins = 0x558; // Vector
    public const nint m_vDistanceMaxs = 0x564; // Vector
    public const nint m_flWindMin = 0x570; // float32
    public const nint m_flWindMax = 0x574; // float32
    public const nint m_flWindMapMin = 0x578; // float32
    public const nint m_flWindMapMax = 0x57C; // float32
}

public static class CSoundOpvarSetPathCornerEntity {
    public const nint m_flDistMinSqr = 0x658; // float32
    public const nint m_flDistMaxSqr = 0x65C; // float32
    public const nint m_iszPathCornerEntityName = 0x660; // CUtlSymbolLarge
}

public static class CSoundOpvarSetPointBase {
    public const nint m_bDisabled = 0x4A8; // bool
    public const nint m_hSource = 0x4AC; // CEntityHandle
    public const nint m_iszSourceEntityName = 0x4B8; // CUtlSymbolLarge
    public const nint m_vLastPosition = 0x510; // Vector
    public const nint m_iszStackName = 0x520; // CUtlSymbolLarge
    public const nint m_iszOperatorName = 0x528; // CUtlSymbolLarge
    public const nint m_iszOpvarName = 0x530; // CUtlSymbolLarge
    public const nint m_iOpvarIndex = 0x538; // int32
    public const nint m_bUseAutoCompare = 0x53C; // bool
}

public static class CSoundOpvarSetPointEntity {
    public const nint m_OnEnter = 0x540; // CEntityIOOutput
    public const nint m_OnExit = 0x568; // CEntityIOOutput
    public const nint m_bAutoDisable = 0x590; // bool
    public const nint m_flDistanceMin = 0x5D4; // float32
    public const nint m_flDistanceMax = 0x5D8; // float32
    public const nint m_flDistanceMapMin = 0x5DC; // float32
    public const nint m_flDistanceMapMax = 0x5E0; // float32
    public const nint m_flOcclusionRadius = 0x5E4; // float32
    public const nint m_flOcclusionMin = 0x5E8; // float32
    public const nint m_flOcclusionMax = 0x5EC; // float32
    public const nint m_flValSetOnDisable = 0x5F0; // float32
    public const nint m_bSetValueOnDisable = 0x5F4; // bool
    public const nint m_nSimulationMode = 0x5F8; // int32
    public const nint m_nVisibilitySamples = 0x5FC; // int32
    public const nint m_vDynamicProxyPoint = 0x600; // Vector
    public const nint m_flDynamicMaximumOcclusion = 0x60C; // float32
    public const nint m_hDynamicEntity = 0x610; // CEntityHandle
    public const nint m_iszDynamicEntityName = 0x618; // CUtlSymbolLarge
    public const nint m_flPathingDistanceNormFactor = 0x620; // float32
    public const nint m_vPathingSourcePos = 0x624; // Vector
    public const nint m_vPathingListenerPos = 0x630; // Vector
    public const nint m_nPathingSourceIndex = 0x63C; // int32
}

public static class CSoundPatch {
    public const nint m_pitch = 0x8; // CSoundEnvelope
    public const nint m_volume = 0x18; // CSoundEnvelope
    public const nint m_shutdownTime = 0x30; // float32
    public const nint m_flLastTime = 0x34; // float32
    public const nint m_iszSoundScriptName = 0x38; // CUtlSymbolLarge
    public const nint m_hEnt = 0x40; // CHandle< CBaseEntity >
    public const nint m_soundEntityIndex = 0x44; // CEntityIndex
    public const nint m_soundOrigin = 0x48; // Vector
    public const nint m_isPlaying = 0x54; // int32
    public const nint m_Filter = 0x58; // CCopyRecipientFilter
    public const nint m_flCloseCaptionDuration = 0x80; // float32
    public const nint m_bUpdatedSoundOrigin = 0x84; // bool
    public const nint m_iszClassName = 0x88; // CUtlSymbolLarge
}

public static class CSoundStackSave {
    public const nint m_iszStackName = 0x4A8; // CUtlSymbolLarge
}

public static class CSpeechBubbleInfo {
    public const nint m_LocalizationStr = 0x30; // char[256]
    public const nint m_hNPC = 0x130; // CHandle< CBaseEntity >
    public const nint m_flStartTime = 0x134; // GameTime_t
    public const nint m_flDuration = 0x138; // float32
    public const nint m_unOffsetX = 0x13C; // uint32
    public const nint m_unOffsetY = 0x140; // uint32
    public const nint m_unCount = 0x144; // uint16
}

public static class CSpeechBubbleManager {
    public const nint m_SpeechBubbles = 0x4A8; // CUtlVectorEmbeddedNetworkVar< CSpeechBubbleInfo >
    public const nint m_unBubbleCount = 0xA08; // uint16
}

public static class CSpotlightEnd {
    public const nint m_flLightScale = 0x758; // float32
    public const nint m_Radius = 0x75C; // float32
    public const nint m_vSpotlightDir = 0x760; // Vector
    public const nint m_vSpotlightOrg = 0x76C; // Vector
}

public static class CSprite {
    public const nint m_hSpriteMaterial = 0x758; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    public const nint m_hAttachedToEntity = 0x760; // CHandle< CBaseEntity >
    public const nint m_nAttachment = 0x764; // AttachmentHandle_t
    public const nint m_flSpriteFramerate = 0x768; // float32
    public const nint m_flFrame = 0x76C; // float32
    public const nint m_flDieTime = 0x770; // GameTime_t
    public const nint m_nBrightness = 0x780; // uint32
    public const nint m_flBrightnessDuration = 0x784; // float32
    public const nint m_flSpriteScale = 0x788; // float32
    public const nint m_flScaleDuration = 0x78C; // float32
    public const nint m_bWorldSpaceScale = 0x790; // bool
    public const nint m_flGlowProxySize = 0x794; // float32
    public const nint m_flHDRColorScale = 0x798; // float32
    public const nint m_flLastTime = 0x79C; // GameTime_t
    public const nint m_flMaxFrame = 0x7A0; // float32
    public const nint m_flStartScale = 0x7A4; // float32
    public const nint m_flDestScale = 0x7A8; // float32
    public const nint m_flScaleTimeStart = 0x7AC; // GameTime_t
    public const nint m_nStartBrightness = 0x7B0; // int32
    public const nint m_nDestBrightness = 0x7B4; // int32
    public const nint m_flBrightnessTimeStart = 0x7B8; // GameTime_t
    public const nint m_nSpriteWidth = 0x7BC; // int32
    public const nint m_nSpriteHeight = 0x7C0; // int32
}

public static class CStopwatch {
    public const nint m_interval = 0xC; // float32
}

public static class CStopwatchBase {
    public const nint m_fIsRunning = 0x8; // bool
}

public static class CTakeDamageInfo {
    public const nint m_vecDamageForce = 0x8; // Vector
    public const nint m_vecDamagePosition = 0x14; // Vector
    public const nint m_vecReportedPosition = 0x20; // Vector
    public const nint m_vecDamageDirection = 0x2C; // Vector
    public const nint m_hInflictor = 0x38; // CHandle< CBaseEntity >
    public const nint m_hAttacker = 0x3C; // CHandle< CBaseEntity >
    public const nint m_hAbility = 0x40; // CHandle< CBaseEntity >
    public const nint m_flDamage = 0x44; // float32
    public const nint m_bitsDamageType = 0x48; // int32
    public const nint m_iDamageCustom = 0x4C; // int32
    public const nint m_iAmmoType = 0x50; // AmmoIndex_t
    public const nint m_flOriginalDamage = 0x60; // float32
    public const nint m_bShouldBleed = 0x64; // bool
    public const nint m_bShouldSpark = 0x65; // bool
    public const nint m_nDamageFlags = 0x70; // TakeDamageFlags_t
    public const nint m_bitsDotaDamageType = 0x74; // int32
    public const nint m_nDotaDamageCategory = 0x78; // int32
    public const nint m_flCombatLogCreditFactor = 0x7C; // float32
    public const nint m_iRecord = 0x80; // int16
    public const nint m_hScriptInstance = 0x88; // HSCRIPT
    public const nint m_bInTakeDamageFlow = 0xA4; // bool
}

public static class CTakeDamageResult {
    public const nint m_nHealthLost = 0x0; // int32
    public const nint m_nDamageTaken = 0x4; // int32
}

public static class CTakeDamageSummaryScopeGuard {
    public const nint m_vecSummaries = 0x8; // CUtlVector< SummaryTakeDamageInfo_t* >
}

public static class CTeam {
    public const nint m_aPlayerControllers = 0x4A8; // CNetworkUtlVectorBase< CHandle< CBasePlayerController > >
    public const nint m_aPlayers = 0x4C0; // CNetworkUtlVectorBase< CHandle< CBasePlayerPawn > >
    public const nint m_iScore = 0x4D8; // int32
    public const nint m_szTeamname = 0x4DC; // char[129]
}

public static class CTeamTrackedStatDefinition {
    public const nint m_unStatID = 0x8; // TrackedStatID_t
    public const nint m_eStatImpl = 0xC; // ETeamTrackedStatImpl
    public const nint m_expressionData = 0x10; // TrackedStatExpressionData_t
    public const nint m_aggregateData = 0x20; // TrackedStatAggregateData_t
}

public static class CTextureBasedAnimatable {
    public const nint m_bLoop = 0x758; // bool
    public const nint m_flFPS = 0x75C; // float32
    public const nint m_hPositionKeys = 0x760; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_hRotationKeys = 0x768; // CStrongHandle< InfoForResourceTypeCTextureBase >
    public const nint m_vAnimationBoundsMin = 0x770; // Vector
    public const nint m_vAnimationBoundsMax = 0x77C; // Vector
    public const nint m_flStartTime = 0x788; // float32
    public const nint m_flStartFrame = 0x78C; // float32
}

public static class CTimeline {
    public const nint m_flValues = 0x10; // float32[64]
    public const nint m_nValueCounts = 0x110; // int32[64]
    public const nint m_nBucketCount = 0x210; // int32
    public const nint m_flInterval = 0x214; // float32
    public const nint m_flFinalValue = 0x218; // float32
    public const nint m_nCompressionType = 0x21C; // TimelineCompression_t
    public const nint m_bStopped = 0x220; // bool
}

public static class CTimerEntity {
    public const nint m_OnTimer = 0x4A8; // CEntityIOOutput
    public const nint m_OnTimerHigh = 0x4D0; // CEntityIOOutput
    public const nint m_OnTimerLow = 0x4F8; // CEntityIOOutput
    public const nint m_iDisabled = 0x520; // int32
    public const nint m_flInitialDelay = 0x524; // float32
    public const nint m_flRefireTime = 0x528; // float32
    public const nint m_bUpDownState = 0x52C; // bool
    public const nint m_iUseRandomTime = 0x530; // int32
    public const nint m_bPauseAfterFiring = 0x534; // bool
    public const nint m_flLowerRandomBound = 0x538; // float32
    public const nint m_flUpperRandomBound = 0x53C; // float32
    public const nint m_flRemainingTime = 0x540; // float32
    public const nint m_bPaused = 0x544; // bool
}

public static class CTonemapController2 {
    public const nint m_flAutoExposureMin = 0x4A8; // float32
    public const nint m_flAutoExposureMax = 0x4AC; // float32
    public const nint m_flTonemapPercentTarget = 0x4B0; // float32
    public const nint m_flTonemapPercentBrightPixels = 0x4B4; // float32
    public const nint m_flTonemapMinAvgLum = 0x4B8; // float32
    public const nint m_flExposureAdaptationSpeedUp = 0x4BC; // float32
    public const nint m_flExposureAdaptationSpeedDown = 0x4C0; // float32
    public const nint m_flTonemapEVSmoothingRange = 0x4C4; // float32
}

public static class CTonemapTrigger {
    public const nint m_tonemapControllerName = 0x900; // CUtlSymbolLarge
    public const nint m_hTonemapController = 0x908; // CEntityHandle
}

public static class CTriggerActiveWeaponDetect {
    public const nint m_OnTouchedActiveWeapon = 0x900; // CEntityIOOutput
    public const nint m_iszWeaponClassName = 0x928; // CUtlSymbolLarge
}

public static class CTriggerBrush {
    public const nint m_OnStartTouch = 0x758; // CEntityIOOutput
    public const nint m_OnEndTouch = 0x780; // CEntityIOOutput
    public const nint m_OnUse = 0x7A8; // CEntityIOOutput
    public const nint m_iInputFilter = 0x7D0; // int32
    public const nint m_iDontMessageParent = 0x7D4; // int32
}

public static class CTriggerDetectBulletFire {
    public const nint m_bPlayerFireOnly = 0x900; // bool
    public const nint m_OnDetectedBulletFire = 0x908; // CEntityIOOutput
}

public static class CTriggerDetectExplosion {
    public const nint m_OnDetectedExplosion = 0x938; // CEntityIOOutput
}

public static class CTriggerDota {
    public const nint m_FilterFlags = 0x928; // CDotaEntityFilterFlags
}

public static class CTriggerFan {
    public const nint m_vFanOrigin = 0x900; // Vector
    public const nint m_vFanEnd = 0x90C; // Vector
    public const nint m_vNoise = 0x918; // Vector
    public const nint m_flForce = 0x924; // float32
    public const nint m_flPlayerForce = 0x928; // float32
    public const nint m_flRampTime = 0x92C; // float32
    public const nint m_bFalloff = 0x930; // bool
    public const nint m_bPushPlayer = 0x931; // bool
    public const nint m_bRampDown = 0x932; // bool
    public const nint m_bAddNoise = 0x933; // bool
    public const nint m_RampTimer = 0x938; // CountdownTimer
}

public static class CTriggerGameEvent {
    public const nint m_strStartTouchEventName = 0x900; // CUtlString
    public const nint m_strEndTouchEventName = 0x908; // CUtlString
    public const nint m_strTriggerID = 0x910; // CUtlString
}

public static class CTriggerHurt {
    public const nint m_flOriginalDamage = 0x900; // float32
    public const nint m_flDamage = 0x904; // float32
    public const nint m_flDamageCap = 0x908; // float32
    public const nint m_flLastDmgTime = 0x90C; // GameTime_t
    public const nint m_flForgivenessDelay = 0x910; // float32
    public const nint m_bitsDamageInflict = 0x914; // int32
    public const nint m_damageModel = 0x918; // int32
    public const nint m_bNoDmgForce = 0x91C; // bool
    public const nint m_vDamageForce = 0x920; // Vector
    public const nint m_thinkAlways = 0x92C; // bool
    public const nint m_hurtThinkPeriod = 0x930; // float32
    public const nint m_OnHurt = 0x938; // CEntityIOOutput
    public const nint m_OnHurtPlayer = 0x960; // CEntityIOOutput
    public const nint m_hurtEntities = 0x988; // CUtlVector< CHandle< CBaseEntity > >
}

public static class CTriggerImpact {
    public const nint m_flMagnitude = 0x928; // float32
    public const nint m_flNoise = 0x92C; // float32
    public const nint m_flViewkick = 0x930; // float32
    public const nint m_pOutputForce = 0x938; // CEntityOutputTemplate< Vector >
}

public static class CTriggerLerpObject {
    public const nint m_iszLerpTarget = 0x900; // CUtlSymbolLarge
    public const nint m_hLerpTarget = 0x908; // CHandle< CBaseEntity >
    public const nint m_iszLerpTargetAttachment = 0x910; // CUtlSymbolLarge
    public const nint m_hLerpTargetAttachment = 0x918; // AttachmentHandle_t
    public const nint m_flLerpDuration = 0x91C; // float32
    public const nint m_bLerpRestoreMoveType = 0x920; // bool
    public const nint m_bSingleLerpObject = 0x921; // bool
    public const nint m_vecLerpingObjects = 0x928; // CUtlVector< lerpdata_t >
    public const nint m_iszLerpEffect = 0x940; // CUtlSymbolLarge
    public const nint m_iszLerpSound = 0x948; // CUtlSymbolLarge
    public const nint m_OnLerpStarted = 0x950; // CEntityIOOutput
    public const nint m_OnLerpFinished = 0x978; // CEntityIOOutput
}

public static class CTriggerLook {
    public const nint m_hLookTarget = 0x928; // CHandle< CBaseEntity >
    public const nint m_flFieldOfView = 0x92C; // float32
    public const nint m_flLookTime = 0x930; // float32
    public const nint m_flLookTimeTotal = 0x934; // float32
    public const nint m_flLookTimeLast = 0x938; // GameTime_t
    public const nint m_flTimeoutDuration = 0x93C; // float32
    public const nint m_bTimeoutFired = 0x940; // bool
    public const nint m_bIsLooking = 0x941; // bool
    public const nint m_b2DFOV = 0x942; // bool
    public const nint m_bUseVelocity = 0x943; // bool
    public const nint m_hActivator = 0x944; // CHandle< CBaseEntity >
    public const nint m_bTestOcclusion = 0x948; // bool
    public const nint m_OnTimeout = 0x950; // CEntityIOOutput
    public const nint m_OnStartLook = 0x978; // CEntityIOOutput
    public const nint m_OnEndLook = 0x9A0; // CEntityIOOutput
}

public static class CTriggerMultiple {
    public const nint m_OnTrigger = 0x900; // CEntityIOOutput
}

public static class CTriggerPhysics {
    public const nint m_gravityScale = 0x910; // float32
    public const nint m_linearLimit = 0x914; // float32
    public const nint m_linearDamping = 0x918; // float32
    public const nint m_angularLimit = 0x91C; // float32
    public const nint m_angularDamping = 0x920; // float32
    public const nint m_linearForce = 0x924; // float32
    public const nint m_flFrequency = 0x928; // float32
    public const nint m_flDampingRatio = 0x92C; // float32
    public const nint m_vecLinearForcePointAt = 0x930; // Vector
    public const nint m_bCollapseToForcePoint = 0x93C; // bool
    public const nint m_vecLinearForcePointAtWorld = 0x940; // Vector
    public const nint m_vecLinearForceDirection = 0x94C; // Vector
    public const nint m_bConvertToDebrisWhenPossible = 0x958; // bool
}

public static class CTriggerProximity {
    public const nint m_hMeasureTarget = 0x900; // CHandle< CBaseEntity >
    public const nint m_iszMeasureTarget = 0x908; // CUtlSymbolLarge
    public const nint m_fRadius = 0x910; // float32
    public const nint m_nTouchers = 0x914; // int32
    public const nint m_NearestEntityDistance = 0x918; // CEntityOutputTemplate< float32 >
}

public static class CTriggerPush {
    public const nint m_angPushEntitySpace = 0x900; // QAngle
    public const nint m_vecPushDirEntitySpace = 0x90C; // Vector
    public const nint m_bTriggerOnStartTouch = 0x918; // bool
    public const nint m_flAlternateTicksFix = 0x91C; // float32
    public const nint m_flPushSpeed = 0x920; // float32
}

public static class CTriggerRemove {
    public const nint m_OnRemove = 0x900; // CEntityIOOutput
}

public static class CTriggerSave {
    public const nint m_bForceNewLevelUnit = 0x900; // bool
    public const nint m_fDangerousTimer = 0x904; // float32
    public const nint m_minHitPoints = 0x908; // int32
}

public static class CTriggerSndSosOpvar {
    public const nint m_hTouchingPlayers = 0x900; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_flPosition = 0x918; // Vector
    public const nint m_flCenterSize = 0x924; // float32
    public const nint m_flMinVal = 0x928; // float32
    public const nint m_flMaxVal = 0x92C; // float32
    public const nint m_flWait = 0x930; // float32
    public const nint m_opvarName = 0x938; // CUtlSymbolLarge
    public const nint m_stackName = 0x940; // CUtlSymbolLarge
    public const nint m_operatorName = 0x948; // CUtlSymbolLarge
    public const nint m_bVolIs2D = 0x950; // bool
    public const nint m_opvarNameChar = 0x951; // char[256]
    public const nint m_stackNameChar = 0xA51; // char[256]
    public const nint m_operatorNameChar = 0xB51; // char[256]
    public const nint m_VecNormPos = 0xC54; // Vector
    public const nint m_flNormCenterSize = 0xC60; // float32
}

public static class CTriggerSoundscape {
    public const nint m_hSoundscape = 0x900; // CHandle< CEnvSoundscapeTriggerable >
    public const nint m_SoundscapeName = 0x908; // CUtlSymbolLarge
    public const nint m_spectators = 0x910; // CUtlVector< CHandle< CBasePlayerPawn > >
}

public static class CTriggerTeleport {
    public const nint m_iLandmark = 0x900; // CUtlSymbolLarge
    public const nint m_bUseLandmarkAngles = 0x908; // bool
    public const nint m_bMirrorPlayer = 0x909; // bool
}

public static class CTriggerToggleSave {
    public const nint m_bDisabled = 0x900; // bool
}

public static class CTriggerVolume {
    public const nint m_iFilterName = 0x758; // CUtlSymbolLarge
    public const nint m_hFilter = 0x760; // CHandle< CBaseFilter >
}

public static class CUnitOrders {
    public const nint m_nUnits = 0x0; // CUtlVector< CEntityIndex >
    public const nint m_vPosition = 0x18; // Vector
    public const nint m_nIssuerPlayerIndex = 0x24; // PlayerID_t
    public const nint m_nOrderSequenceNumber = 0x28; // int32
    public const nint m_nOrderType = 0x2C; // int32
    public const nint m_nTargetIndex = 0x30; // CEntityIndex
    public const nint m_nAbilityIndex = 0x34; // CEntityIndex
    public const nint m_nFlags = 0x38; // uint32
}

public static class CavernCrawlMapVariant_t {
    public const nint m_Value = 0x0; // uint8
}

public static class CavernCrawlPathID_t {
    public const nint m_Value = 0x0; // uint8
}

public static class CavernCrawlPath_t {
    public const nint m_nStartingRoomID = 0x0; // CavernCrawlRoomID_t
    public const nint m_nEndingRoomID = 0x1; // CavernCrawlRoomID_t
    public const nint m_pCSSClass = 0x8; // char*
    public const nint m_bCannotBeSwapped = 0x10; // bool
}

public static class CavernCrawlRewardType_t {
    public const nint m_Value = 0x0; // uint8
}

public static class CavernCrawlReward_t {
    public const nint m_nActionID = 0x0; // uint32
    public const nint m_rewardName = 0x8; // CUtlString
    public const nint m_nItemType = 0x10; // CavernCrawlItemType_t
    public const nint m_locString = 0x18; // CUtlString
    public const nint m_tooltipString = 0x20; // CUtlString
    public const nint m_image = 0x28; // CUtlString
    public const nint m_nStyleUnlockRewardType = 0x30; // CavernCrawlRewardType_t
    public const nint m_nPriority = 0x31; // uint8
    public const nint m_nBundleItemDefStyle = 0x32; // style_index_t
    public const nint m_bImageIsBundleItemDef = 0x33; // bool
    public const nint m_bCannotBeReplacedWithUltraRareReward = 0x34; // bool
    public const nint m_bIsUltraRareReward = 0x35; // bool
}

public static class CavernCrawlRoomID_t {
    public const nint m_Value = 0x0; // uint8
}

public static class CavernCrawlRoom_t {
    public const nint m_vecPosition = 0x0; // Vector2D
    public const nint m_pCSSClass = 0x8; // char*
    public const nint m_flRoomRadius = 0x10; // float32
    public const nint m_bAlwaysVisible = 0x14; // bool
    public const nint m_bStartingRoom = 0x15; // bool
    public const nint m_bFinalTreasure = 0x16; // bool
}

public static class ChatWheelMessageID_t {
    public const nint m_Value = 0x0; // uint32
}

public static class CommandToolCommand_t {
    public const nint m_bEnabled = 0x0; // bool
    public const nint m_bOpened = 0x1; // bool
    public const nint m_InternalId = 0x4; // uint32
    public const nint m_ShortName = 0x8; // CUtlString
    public const nint m_ExecMode = 0x10; // CommandExecMode_t
    public const nint m_SpawnGroup = 0x18; // CUtlString
    public const nint m_PeriodicExecDelay = 0x20; // float32
    public const nint m_SpecType = 0x24; // CommandEntitySpecType_t
    public const nint m_EntitySpec = 0x28; // CUtlString
    public const nint m_Commands = 0x30; // CUtlString
    public const nint m_SetDebugBits = 0x38; // DebugOverlayBits_t
    public const nint m_ClearDebugBits = 0x40; // DebugOverlayBits_t
}

public static class ConceptHistory_t {
    public const nint timeSpoken = 0x0; // float32
    public const nint m_response = 0x8; // CRR_Response
}

public static class ConstraintSoundInfo {
    public const nint m_vSampler = 0x8; // VelocitySampler
    public const nint m_soundProfile = 0x20; // SimpleConstraintSoundProfile
    public const nint m_forwardAxis = 0x40; // Vector
    public const nint m_iszTravelSoundFwd = 0x50; // CUtlSymbolLarge
    public const nint m_iszTravelSoundBack = 0x58; // CUtlSymbolLarge
    public const nint m_iszReversalSounds = 0x68; // CUtlSymbolLarge[3]
    public const nint m_bPlayTravelSound = 0x80; // bool
    public const nint m_bPlayReversalSound = 0x81; // bool
}

public static class CountdownTimer {
    public const nint m_duration = 0x8; // float32
    public const nint m_timestamp = 0xC; // GameTime_t
    public const nint m_timescale = 0x10; // float32
    public const nint m_nWorldGroupId = 0x14; // WorldGroupId_t
}

public static class CreatureAbilityData_t {
    public const nint hAbility = 0x0; // CHandle< CBaseEntity >
    public const nint bIsDamage = 0x4; // bool
    public const nint bIsDebuff = 0x5; // bool
    public const nint bIsStun = 0x6; // bool
    public const nint bIsAOE = 0x7; // bool
    public const nint bIsLinear = 0x8; // bool
    public const nint bUseOnCreeps = 0x9; // bool
    public const nint bIsHeal = 0xA; // bool
    public const nint bIsBuff = 0xB; // bool
    public const nint bUseSelfishly = 0xC; // bool
    public const nint bCanHelpOthersEscape = 0xD; // bool
    public const nint bUseOnTrees = 0xE; // bool
    public const nint bUseOnStrongestAlly = 0xF; // bool
    public const nint nUseAtHealthPercent = 0x10; // int32
    public const nint nRadius = 0x14; // int32
    public const nint nMinimumTargets = 0x18; // int32
    public const nint nMaximumTargets = 0x1C; // int32
    public const nint nMinimumHP = 0x20; // int32
    public const nint nMinimumRange = 0x24; // int32
    public const nint nAbilityType = 0x28; // CreatureAbilityType
}

public static class CreatureStateData_t {
    public const nint pszName = 0x0; // char*
    public const nint flAggression = 0x8; // float32
    public const nint flAvoidance = 0xC; // float32
    public const nint flSupport = 0x10; // float32
    public const nint flRoamDistance = 0x14; // float32
}

public static class DOTAAbilityDefinition_t {
    public const nint m_pszAbilityName = 0x0; // char*
    public const nint m_pszTextureName = 0x8; // char*
    public const nint m_pszSharedCooldownName = 0x10; // char*
    public const nint m_pszKeyOverride = 0x18; // char*
    public const nint m_pszItemRecipeName = 0x20; // char*
    public const nint m_pszLinkedAbility = 0x28; // char*
    public const nint m_castActivity = 0x30; // int32
    public const nint m_castActivityGestureSlot = 0x34; // DotaGestureSlot_t
    public const nint m_pKVData = 0x38; // KeyValues*
    public const nint m_iAbilityID = 0x40; // AbilityID_t
    public const nint m_iAbilityType = 0x44; // int32
    public const nint m_iAbilityBehavior = 0x48; // uint64
    public const nint m_iAbilityTargetTeam = 0x50; // int32
    public const nint m_iAbilityTargetType = 0x54; // int32
    public const nint m_iAbilityTargetFlags = 0x58; // int32
    public const nint m_iAbilityDamageType = 0x5C; // int32
    public const nint m_iAbilityImmunityType = 0x60; // int32
    public const nint m_iAbilityDispellableType = 0x64; // int32
    public const nint m_iFightRecapLevel = 0x68; // int32
    public const nint m_iTokenTier = 0x6C; // int32
    public const nint m_iAssociatedConsumableItemDef = 0x70; // item_definition_index_t
    public const nint m_nRequiredEffectsMask = 0x74; // uint32
    public const nint m_iAssociatedEventID = 0x78; // int32
    public const nint m_iMaxLevel = 0x7C; // int32
    public const nint m_iItemBaseLevel = 0x80; // int32
    public const nint m_flItemLevelByGameTime = 0x84; // float32
    public const nint m_iItemCost = 0x88; // int32
    public const nint m_iItemInitialCharges = 0x8C; // int32
    public const nint m_iItemNeutralTierIndex = 0x90; // int32
    public const nint m_iItemStockMax = 0x94; // int32
    public const nint m_fItemStockTime = 0x98; // float32
    public const nint m_pItemShopTagKeys = 0xA0; // int32*
    public const nint m_nRecipeResultAbilityID = 0xA8; // AbilityID_t
    public const nint m_vecItemCombinesInto = 0xB0; // CUtlVector< AbilityID_t >
    public const nint m_vecItemRecipes = 0xC8; // CUtlVector< ItemRecipe_t >
    public const nint m_nUpgradeGoal = 0xE0; // int32
    public const nint m_ItemQuality = 0xE4; // ItemQuality_t
    public const nint m_flModifierValue = 0xE8; // float32
    public const nint m_flModifierValueBonus = 0xEC; // float32
    public const nint m_InvalidHeroes = 0xF0; // CUtlVector< CUtlString >
    public const nint m_bHasScepterUpgrade = 0x1D4; // bool
    public const nint m_bHasShardUpgrade = 0x1D5; // bool
    public const nint m_bSharedWithTeammates = 0x1D6; // bool
    public const nint m_nCastRangeBuffer = 0x1D8; // int32
    public const nint m_nSpecialAbilities = 0x1DC; // int32
    public const nint m_pSpecialAbilities = 0x1E0; // DOTASpecialAbility_t*
    public const nint m_OutgoingBonuses = 0x1E8; // CUtlVector< DOTAOutgoingBonus_t >
    public const nint m_pModelName = 0x200; // char*
    public const nint m_pModelAlternateName = 0x208; // char*
    public const nint m_pEffectName = 0x210; // char*
    public const nint m_pPingOverrideText = 0x218; // char*
    public const nint m_pszRequiredCustomShopName = 0x220; // char*
    public const nint m_pszLinkedScepterAbility = 0x228; // char*
    public const nint m_pszLinkedShardAbility = 0x230; // char*
    public const nint m_nKillToastOverride = 0x238; // int32
    public const nint m_iLevelsBetweenUpgrades = 0x23C; // int32
    public const nint m_iRequiredLevel = 0x240; // int32
    public const nint m_bIsItem = 0x0; // bitfield:1
    public const nint m_bItemIsRecipe = 0x0; // bitfield:1
    public const nint m_bItemIsRecipeGenerated = 0x0; // bitfield:1
    public const nint m_bItemRecipeConsumesCharges = 0x0; // bitfield:1
    public const nint m_bItemAvailableAtSecretShop = 0x0; // bitfield:1
    public const nint m_bItemAvailableAtGlobalShop = 0x0; // bitfield:1
    public const nint m_bItemAvailableAtSideShop = 0x0; // bitfield:1
    public const nint m_bItemAvailableAtCustomShop = 0x0; // bitfield:1
    public const nint m_bItemIsPureSupport = 0x0; // bitfield:1
    public const nint m_bItemIsPurchasable = 0x0; // bitfield:1
    public const nint m_bItemIsUpgradeable = 0x0; // bitfield:1
    public const nint m_bItemStackable = 0x0; // bitfield:1
    public const nint m_bDisplayAdditionalHeroes = 0x0; // bitfield:1
    public const nint m_bItemContributesToNetWorthWhenDropped = 0x0; // bitfield:1
    public const nint m_bOnCastbar = 0x0; // bitfield:1
    public const nint m_bOnLearnbar = 0x0; // bitfield:1
    public const nint m_bIsGrantedByScepter = 0x0; // bitfield:1
    public const nint m_bIsGrantedByShard = 0x0; // bitfield:1
    public const nint m_bIsCastableWhileHidden = 0x0; // bitfield:1
    public const nint m_bAnimationIgnoresModelScale = 0x0; // bitfield:1
    public const nint m_bIsPlayerSpecificCooldown = 0x0; // bitfield:1
    public const nint m_bIsAllowedInBackpack = 0x0; // bitfield:1
    public const nint m_bIsObsolete = 0x0; // bitfield:1
    public const nint m_bItemRequiresCustomShop = 0x0; // bitfield:1
    public const nint m_bShouldBeSuggested = 0x0; // bitfield:1
    public const nint m_bShouldBeInitiallySuggested = 0x0; // bitfield:1
    public const nint m_bIsAffectedByAoEIncrease = 0x0; // bitfield:1
    public const nint m_bHasCastAnimation = 0x0; // bitfield:1
    public const nint m_bItemHasPassive = 0x0; // bitfield:1
    public const nint m_bDisplayOverheadAlertOnReceived = 0x0; // bitfield:1
}

public static class DOTACavernCrawlMapResult_t {
    public const nint m_nCompletedPathID = 0x0; // CavernCrawlPathID_t
    public const nint m_nClaimedRoomID = 0x1; // CavernCrawlRoomID_t
}

public static class DOTALevelingAbilityBonus_t {
    public const nint m_pszName = 0x0; // char*
    public const nint m_vecValues = 0x8; // CUtlVector< float32 >
    public const nint m_eOperation = 0x20; // EDOTASpecialBonusOperation
}

public static class DOTAOutgoingBonus_t {
    public const nint m_pszAbilityName = 0x0; // char*
    public const nint m_pszSpecialName = 0x8; // char*
    public const nint m_fValue = 0x10; // float32
    public const nint m_eOperation = 0x14; // EDOTASpecialBonusOperation
}

public static class DOTASpecialAbilityBonus_t {
    public const nint m_pszName = 0x0; // char*
    public const nint m_fValue = 0x8; // float32
    public const nint m_eOperation = 0xC; // EDOTASpecialBonusOperation
}

public static class DOTASpecialAbility_t {
    public const nint m_pszName = 0x0; // char*
    public const nint m_pszValue = 0x8; // char*
    public const nint m_pszLevelKey = 0x10; // char*
    public const nint m_pszSpecialBonusAbility = 0x18; // char*
    public const nint m_pszSpecialBonusField = 0x20; // char*
    public const nint m_pszSpecialBonusADLinkedAbilities = 0x28; // char*
    public const nint m_nCount = 0x30; // int32
    public const nint m_Values = 0x34; // float32[20]
    public const nint m_nBonusesCount = 0x84; // int32
    public const nint m_Bonuses = 0x88; // DOTASpecialAbilityBonus_t[4]
    public const nint m_ScepterBonus = 0xC8; // DOTALevelingAbilityBonus_t
    public const nint m_ShardBonus = 0xF0; // DOTALevelingAbilityBonus_t
    public const nint m_nDamageTypeField = 0x118; // int32
    public const nint m_bSpellDamageField = 0x11C; // bool
    public const nint m_bScepterField = 0x11D; // bool
    public const nint m_bShardField = 0x11E; // bool
    public const nint m_bAffectedByAoEIncrease = 0x11F; // bool
    public const nint m_eSpecialBonusOperation = 0x120; // EDOTASpecialBonusOperation
}

public static class DOTATeleportInfo_t {
    public const nint m_flTime = 0x30; // GameTime_t
    public const nint m_vPosition = 0x34; // Vector2D
    public const nint m_bIsOutpost = 0x3C; // bool
}

public static class DOTAThreatLevelInfo_t {
    public const nint m_flKillability = 0x30; // float32
    public const nint m_nEntIndex = 0x34; // int32
}

public static class DOTA_AssassinMinigameNetworkState {
    public const nint nAssassinState = 0x8; // uint16
    public const nint nVictimHeroID = 0xA; // uint16
}

public static class DamageShareEvent_t {
    public const nint m_flOriginalDamage = 0x0; // float32
    public const nint m_flTakenDamage = 0x4; // float32
    public const nint m_nPlayerID = 0x8; // PlayerID_t
}

public static class DataTeamPlayer_t {
    public const nint m_iReliableGold = 0x30; // int32
    public const nint m_iUnreliableGold = 0x34; // int32
    public const nint m_iStartingPosition = 0x38; // int32
    public const nint m_iTotalEarnedGold = 0x3C; // int32
    public const nint m_iTotalEarnedXP = 0x40; // int32
    public const nint m_iSharedGold = 0x44; // int32
    public const nint m_iHeroKillGold = 0x48; // int32
    public const nint m_iCreepKillGold = 0x4C; // int32
    public const nint m_iNeutralKillGold = 0x50; // int32
    public const nint m_iCourierGold = 0x54; // int32
    public const nint m_iBountyGold = 0x58; // int32
    public const nint m_iRoshanGold = 0x5C; // int32
    public const nint m_iBuildingGold = 0x60; // int32
    public const nint m_iOtherGold = 0x64; // int32
    public const nint m_iComebackGold = 0x68; // int32
    public const nint m_iExperimentalGold = 0x6C; // int32
    public const nint m_iExperimental2Gold = 0x70; // int32
    public const nint m_iCreepDenyGold = 0x74; // int32
    public const nint m_iTPScrollsPurchased = 0x78; // int32
    public const nint m_flCustomStats = 0x7C; // float32
    public const nint m_iIncomeGold = 0x80; // int32
    public const nint m_iWardKillGold = 0x84; // int32
    public const nint m_iAbilityGold = 0x88; // int32
    public const nint m_iNetWorth = 0x8C; // int32
    public const nint m_iDenyCount = 0x90; // int32
    public const nint m_iLastHitCount = 0x94; // int32
    public const nint m_iLastHitStreak = 0x98; // int32
    public const nint m_iLastHitMultikill = 0x9C; // int32
    public const nint m_iNearbyCreepDeathCount = 0xA0; // int32
    public const nint m_iClaimedDenyCount = 0xA4; // int32
    public const nint m_iClaimedMissCount = 0xA8; // int32
    public const nint m_iMissCount = 0xAC; // int32
    public const nint m_nPossibleHeroSelection = 0xB0; // int32
    public const nint m_iMetaLevel = 0xB4; // uint16
    public const nint m_iMetaExperience = 0xB6; // uint16
    public const nint m_iMetaExperienceAwarded = 0xB8; // uint16
    public const nint m_flBuybackCooldownTime = 0xBC; // GameTime_t
    public const nint m_flBuybackGoldLimitTime = 0xC0; // GameTime_t
    public const nint m_flBuybackCostTime = 0xC4; // float32
    public const nint m_flCustomBuybackCooldown = 0xC8; // float32
    public const nint m_fStuns = 0xCC; // float32
    public const nint m_fHealing = 0xD0; // float32
    public const nint m_fRegeneratedHealth = 0xD4; // float32
    public const nint m_iTowerKills = 0xD8; // int32
    public const nint m_iRoshanKills = 0xDC; // int32
    public const nint m_hCameraTarget = 0xE0; // CHandle< CBaseEntity >
    public const nint m_hOverrideSelectionEntity = 0xE4; // CHandle< CBaseEntity >
    public const nint m_iObserverWardsPlaced = 0xE8; // int32
    public const nint m_iSentryWardsPlaced = 0xEC; // int32
    public const nint m_iCreepsStacked = 0xF0; // int32
    public const nint m_iCampsStacked = 0xF4; // int32
    public const nint m_iRunePickups = 0xF8; // int32
    public const nint m_iGoldSpentOnSupport = 0xFC; // int32
    public const nint m_iHeroDamage = 0x100; // int32
    public const nint m_iTowerDamage = 0x104; // int32
    public const nint m_iWardsPurchased = 0x108; // int32
    public const nint m_iWardsDestroyed = 0x10C; // int32
    public const nint m_PreGameInventory = 0x110; // CDOTA_UnitInventory
    public const nint m_nKillsPerOpposingTeamMember = 0x1E8; // int32[24]
    public const nint m_iSuggestedAbilities = 0x248; // AbilityID_t[5]
    public const nint m_fSuggestedAbilityWeights = 0x25C; // float32[5]
    public const nint m_iSuggestedPregameItems = 0x270; // AbilityID_t[15]
    public const nint m_iSuggestedItemSequences = 0x2AC; // AbilityID_t[30]
    public const nint m_iSuggestedWeightedItems = 0x324; // WeightedAbilitySuggestion_t[15]
    public const nint m_iSuggestedTopNItems = 0x39C; // WeightedAbilitySuggestion_t[3]
    public const nint m_iSuggestedNeutralItems = 0x3B4; // WeightedAbilitySuggestion_t[25]
    public const nint m_iSuggestedHeroes = 0x47C; // uint32[10]
    public const nint m_flSuggestedHeroesWeights = 0x4A4; // float32[10]
    public const nint m_iDamageByTypeReceivedPreReduction = 0x4CC; // int32[3]
    public const nint m_iDamageByTypeReceivedPostReduction = 0x4D8; // int32[3]
    public const nint m_iOutgoingDamageByTypePreReduction = 0x4E4; // int32[3]
    public const nint m_iOutgoingDamageByTypePostReduction = 0x4F0; // int32[3]
    public const nint m_iCommandsIssued = 0x4FC; // int32
    public const nint m_iGoldSpentOnConsumables = 0x500; // int32
    public const nint m_iGoldSpentOnItems = 0x504; // int32
    public const nint m_iGoldSpentOnBuybacks = 0x508; // int32
    public const nint m_iGoldLostToDeath = 0x50C; // int32
    public const nint m_bIsNewPlayer = 0x510; // bool
    public const nint m_bIsGuidePlayer = 0x511; // bool
    public const nint m_iPlayerSteamID = 0x518; // uint64
    public const nint m_iSmokesUsed = 0x520; // int32
    public const nint m_iNeutralTokensFound = 0x524; // int32
    public const nint m_iWatchersTaken = 0x528; // int32
    public const nint m_iLotusesTaken = 0x52C; // int32
    public const nint m_iTormentorKills = 0x530; // int32
    public const nint m_iCourierKills = 0x534; // int32
}

public static class EngineCountdownTimer {
    public const nint m_duration = 0x8; // float32
    public const nint m_timestamp = 0xC; // float32
    public const nint m_timescale = 0x10; // float32
}

public static class EntityRenderAttribute_t {
    public const nint m_ID = 0x30; // CUtlStringToken
    public const nint m_Values = 0x34; // Vector4D
}

public static class Extent {
    public const nint lo = 0x0; // Vector
    public const nint hi = 0xC; // Vector
}

public static class FantasyCraftDataID_t {
    public const nint m_Value = 0x0; // uint16
}

public static class FantasyCraftOperationBucket_t {
    public const nint m_unOperationCount = 0x0; // uint16
    public const nint m_vecOperations = 0x8; // CUtlVector< FantasyCraftOperation_t >
}

public static class FantasyCraftOperation_t {
    public const nint m_unOperationID = 0x0; // FantasyOperationID_t
    public const nint m_nRollWeight = 0x4; // int32
    public const nint m_eTarget = 0x8; // EFantasyOperationTarget
    public const nint m_sLocDescription = 0x10; // CUtlString
    public const nint m_vecOperations = 0x18; // CUtlVector< FantasyCraftingGemMutation_t >
}

public static class FantasyCraftSetupData_t {
    public const nint m_unID = 0x0; // FantasyCraftDataID_t
    public const nint m_vecPrefixes = 0x8; // CUtlVector< FantasyCraftingTitleData_t >
    public const nint m_vecSuffixes = 0x20; // CUtlVector< FantasyCraftingTitleData_t >
    public const nint m_vecGems = 0x38; // CUtlVector< FantasyCraftingGemData_t >
    public const nint m_vecShapes = 0x50; // CUtlVector< FantasyCraftingShapeData_t >
    public const nint m_vecQualities = 0x68; // CUtlVector< FantasyCraftingQualityData_t >
    public const nint m_vecTablets = 0x80; // CUtlVector< FantasyCraftingTabletData_t >
    public const nint m_vecOperations = 0x98; // CUtlVector< FantasyCraftOperationBucket_t >
}

public static class FantasyCraftingGemData_t {
    public const nint m_eType = 0x0; // Fantasy_Gem_Type
    public const nint m_sLocName = 0x8; // CUtlString
    public const nint m_eStats = 0x10; // CUtlVector< Fantasy_Scoring >
}

public static class FantasyCraftingGemMutation_t {
    public const nint m_eTarget = 0x0; // EFantasyMutationTarget
    public const nint m_eOperation = 0x4; // EFantasyMutationOperation
}

public static class FantasyCraftingGemSlotData_t {
    public const nint m_unGemSlot = 0x0; // FantasyGemSlot_t
    public const nint m_eGemType = 0x4; // Fantasy_Gem_Type
    public const nint m_nRequiredTabletLevel = 0x8; // int32
}

public static class FantasyCraftingQualityData_t {
    public const nint m_unQualityID = 0x0; // FantasyGemQuality_t
    public const nint m_sLocName = 0x8; // CUtlString
    public const nint m_nBonus = 0x10; // int32
    public const nint m_nRollWeight = 0x14; // int32
}

public static class FantasyCraftingShapeData_t {
    public const nint m_unShapeID = 0x0; // FantasyGemShape_t
    public const nint m_eShapeBehavior = 0x4; // EFantasyShapeBehavior
    public const nint m_sLocName = 0x8; // CUtlString
    public const nint m_sLocExplanation = 0x10; // CUtlString
}

public static class FantasyCraftingTabletData_t {
    public const nint m_unID = 0x0; // FantasyTabletID_t
    public const nint m_eRole = 0x4; // Fantasy_Roles
    public const nint m_vecGemSlots = 0x8; // CUtlVector< FantasyCraftingGemSlotData_t >
}

public static class FantasyCraftingTitleData_t {
    public const nint m_unTitle = 0x0; // FantasyTitle_t
    public const nint m_sLocName = 0x8; // CUtlString
    public const nint m_sLocNameIndividual = 0x10; // CUtlString
    public const nint m_sLocExplanation = 0x18; // CUtlString
    public const nint m_sLocExplanationMouseOver = 0x20; // CUtlString
    public const nint m_eMode = 0x28; // EFantasyStatMatchMode
    public const nint m_vecStats = 0x30; // CUtlVector< FantasyCraftingTrackedStat_t >
    public const nint m_nBonus = 0x48; // int32
}

public static class FantasyCraftingTrackedStat_t {
    public const nint m_sStatName = 0x0; // CUtlString
    public const nint m_eStatType = 0x8; // EFantasyStatType
    public const nint m_unThresholdValue = 0xC; // uint32
    public const nint m_bThresholdIsMin = 0x10; // bool
}

public static class FantasyGemQuality_t {
    public const nint m_Value = 0x0; // uint8
}

public static class FantasyGemShape_t {
    public const nint m_Value = 0x0; // uint8
}

public static class FantasyGemSlot_t {
    public const nint m_Value = 0x0; // uint8
}

public static class FantasyLeagueData_t {
    public const nint m_nFantasyLeagueID = 0x0; // FantasyLeagueID_t
    public const nint m_eEvent = 0x4; // EEvent
    public const nint m_nCraftingID = 0x8; // FantasyCraftDataID_t
    public const nint m_nLeagues = 0x10; // CUtlVector< LeagueID_t >
    public const nint m_vecPlayers = 0x28; // CUtlVector< FantasyRoleData_t >
    public const nint m_vecPeriods = 0x40; // CUtlVector< FantasyPeriodData_t >
}

public static class FantasyLeagueID_t {
    public const nint m_Value = 0x0; // uint16
}

public static class FantasyOperationID_t {
    public const nint m_Value = 0x0; // uint16
}

public static class FantasyPeriodData_t {
    public const nint m_unPeriod = 0x0; // FantasyPeriod_t
    public const nint m_nTabletLevel = 0x4; // int32
}

public static class FantasyPeriod_t {
    public const nint m_Value = 0x0; // uint32
}

public static class FantasyPlayerData_t {
    public const nint m_unAccountID = 0x0; // uint32
    public const nint m_unTeamID = 0x4; // uint32
    public const nint m_eRegion = 0x8; // ELeagueRegion
    public const nint m_strPlayerName = 0x10; // CUtlString
    public const nint m_bIsValid = 0x18; // bool
}

public static class FantasyRoleData_t {
    public const nint m_eRole = 0x0; // Fantasy_Roles
    public const nint m_vecPlayers = 0x8; // CUtlVector< FantasyPlayerData_t >
}

public static class FantasyTabletID_t {
    public const nint m_Value = 0x0; // uint8
}

public static class FantasyTitle_t {
    public const nint m_Value = 0x0; // uint8
}

public static class FilterDamageType {
    public const nint m_iDamageType = 0x500; // int32
}

public static class FilterHealth {
    public const nint m_bAdrenalineActive = 0x500; // bool
    public const nint m_iHealthMin = 0x504; // int32
    public const nint m_iHealthMax = 0x508; // int32
}

public static class FilterTeam {
    public const nint m_iFilterTeam = 0x500; // int32
}

public static class FowBlocker_t {
    public const nint m_flMinX = 0x30; // float32
    public const nint m_flMaxX = 0x34; // float32
    public const nint m_flMinY = 0x38; // float32
    public const nint m_flMaxY = 0x3C; // float32
    public const nint m_fowBlockerShape = 0x40; // FowBlockerShape_t
    public const nint m_bClearRegion = 0x44; // bool
}

public static class GCPlayerSlot_t {
    public const nint m_Value = 0x0; // uint8
}

public static class GameChatLogEntry_t {
    public const nint m_nTeam = 0x0; // int32
    public const nint m_nPlayerID = 0x4; // PlayerID_t
    public const nint m_sText = 0x8; // CUtlString
    public const nint m_flGameTime = 0x10; // GameTime_t
}

public static class GameTick_t {
    public const nint m_Value = 0x0; // int32
}

public static class GameTime_t {
    public const nint m_Value = 0x0; // float32
}

public static class GuildID_t {
    public const nint m_Value = 0x0; // uint32
}

public static class HeroDeathRecord_t {
    public const nint nKillerPlayerID = 0x0; // PlayerID_t
    public const nint nVictimPlayerID = 0x4; // PlayerID_t
    public const nint fTime = 0x8; // float32
    public const nint fTimeRespawn = 0xC; // float32
}

public static class HeroPersona_t {
    public const nint m_Value = 0x0; // int8
}

public static class HeroPickRecord_t {
    public const nint eType = 0x0; // HeroPickType
    public const nint nHeroID = 0x4; // int32
    public const nint nTeam = 0x8; // int32
}

public static class HullFlags_t {
    public const nint m_bHull_Human = 0x0; // bool
    public const nint m_bHull_SmallCentered = 0x1; // bool
    public const nint m_bHull_WideHuman = 0x2; // bool
    public const nint m_bHull_Tiny = 0x3; // bool
    public const nint m_bHull_Medium = 0x4; // bool
    public const nint m_bHull_TinyCentered = 0x5; // bool
    public const nint m_bHull_Large = 0x6; // bool
    public const nint m_bHull_LargeCentered = 0x7; // bool
    public const nint m_bHull_MediumTall = 0x8; // bool
    public const nint m_bHull_Small = 0x9; // bool
}

public static class INextBotComponent {
    public const nint m_lastUpdateTime = 0x8; // GameTime_t
    public const nint m_curInterval = 0xC; // float32
}

public static class InGamePredictionData_t {
    public const nint m_nID = 0x28; // uint32
    public const nint m_nValue = 0x2C; // uint32
    public const nint m_nRawValue = 0x30; // uint32
    public const nint m_nValueState = 0x34; // uint8
    public const nint m_bValueIsMask = 0x35; // bool
}

public static class IntervalTimer {
    public const nint m_timestamp = 0x8; // GameTime_t
    public const nint m_nWorldGroupId = 0xC; // WorldGroupId_t
}

public static class ItemDropData_t {
    public const nint sItemNames = 0x0; // CUtlVector< CUtlString >
    public const nint flChance = 0x18; // float32
    public const nint nReqLevel = 0x1C; // int32
    public const nint bMustBeChampion = 0x20; // bool
}

public static class ItemRecipe_t {
    public const nint m_vecRecipeComponents = 0x0; // CUtlVector< AbilityID_t >
    public const nint m_nPrimaryComponentIndex = 0x18; // int32
}

public static class LeagueID_t {
    public const nint m_Value = 0x0; // uint32
}

public static class LeagueNodeGroupID_t {
    public const nint m_Value = 0x0; // uint16
}

public static class LeagueNodeID_t {
    public const nint m_Value = 0x0; // uint16
}

public static class MatchID_t {
    public const nint m_Value = 0x0; // uint64
}

public static class ModelConfigHandle_t {
    public const nint m_Value = 0x0; // uint32
}

public static class Modifier_Pluck_Famango_Channel {
    public const nint famango_rate = 0x1318; // float32
    public const nint m_hMangoTree = 0x131C; // CHandle< CBaseEntity >
}

public static class NagaSiren_SongOfTheSiren_Healing {
    public const nint heal_pct = 0x1318; // int32
}

public static class NeutralSpawnBoxes_t {
    public const nint neutralSpawnBoxes = 0x0; // AABB_t
    public const nint vSpawnBoxOrigin = 0x18; // Vector
    public const nint strCampName = 0x28; // CUtlString
    public const nint iSpawnerEntIndex = 0x30; // CEntityIndex
    public const nint nCampType = 0x34; // int32
}

public static class NextBotCombatCharacter {
    public const nint m_nLod = 0x930; // uint8
    public const nint m_didModelChange = 0x931; // bool
}

public static class NianDamageTaken_t {
    public const nint nDamage = 0x0; // int32
    public const nint nPlayerID = 0x4; // PlayerID_t
    public const nint vPos = 0x8; // Vector
}

public static class ParticleIndex_t {
    public const nint m_Value = 0x0; // int32
}

public static class PeriodicResourceID_t {
    public const nint m_Value = 0x0; // uint32
}

public static class PhysicsRagdollPose_t {
    public const nint __m_pChainEntity = 0x8; // CNetworkVarChainer
    public const nint m_Transforms = 0x30; // CNetworkUtlVectorBase< CTransform >
    public const nint m_hOwner = 0x48; // CHandle< CBaseEntity >
}

public static class PingConfirmationState_t {
    public const nint m_nInitiatingPlayerID = 0x30; // int32
    public const nint m_PingWheelMessageID = 0x34; // int32
    public const nint m_flActiveUntilTime = 0x38; // float32
    public const nint m_vLocation = 0x3C; // Vector2D
    public const nint m_nPingedEntityEntIndex = 0x44; // int32
    public const nint m_nID = 0x48; // int32
    public const nint m_IconType = 0x4C; // PingConfirmationIconType
    public const nint m_nAgreeState = 0x50; // int32[24]
}

public static class PingWheelMessageID_t {
    public const nint m_Value = 0x0; // uint32
}

public static class PlayerID_t {
    public const nint m_Value = 0x0; // int32
}

public static class PlayerResourceBroadcasterData_t {
    public const nint m_iszBroadcasterChannelDescription = 0x30; // CUtlSymbolLarge
    public const nint m_iszBroadcasterChannelCountryCode = 0x38; // CUtlSymbolLarge
    public const nint m_iszBroadcasterChannelLanguageCode = 0x40; // CUtlSymbolLarge
}

public static class PlayerResourcePlayerData_t {
    public const nint m_bIsValid = 0x30; // bool
    public const nint m_iszPlayerName = 0x38; // CUtlSymbolLarge
    public const nint m_iPlayerTeam = 0x40; // int32
    public const nint m_bFullyJoinedServer = 0x44; // bool
    public const nint m_bFakeClient = 0x45; // bool
    public const nint m_bIsBroadcaster = 0x46; // bool
    public const nint m_iBroadcasterChannel = 0x48; // uint32
    public const nint m_iBroadcasterChannelSlot = 0x4C; // uint32
    public const nint m_bIsBroadcasterChannelCameraman = 0x50; // bool
    public const nint m_iConnectionState = 0x54; // int32
    public const nint m_iPlayerSteamID = 0x58; // uint64
    public const nint m_eCoachTeam = 0x60; // DOTATeam_t
    public const nint m_vecPrivateCoachPlayerIDs = 0x68; // CNetworkUtlVectorBase< PlayerID_t >
    public const nint m_unCoachRating = 0x80; // uint32
    public const nint m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
    public const nint m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
    public const nint m_bIsPlusSubscriber = 0x8C; // bool
    public const nint m_bWasMVPLastGame = 0x8D; // bool
    public const nint m_nCavernCrawlMapVariant = 0x8E; // CavernCrawlMapVariant_t
    public const nint m_eAccoladeType = 0x90; // int32[3]
    public const nint m_unAccoladeData = 0xA0; // uint64[3]
    public const nint m_iRankTier = 0xB8; // int32
    public const nint m_iTitle = 0xBC; // int32
    public const nint m_unFavTeamPacked = 0xC0; // uint64
    public const nint m_nPlayerSlot = 0xC8; // CPlayerSlot
    public const nint m_bIsBot = 0xCC; // bool
    public const nint m_bHasNeutralTier = 0xCD; // bool[5]
    public const nint m_bHasRedeemedNeutralTier = 0xD2; // bool[5]
    public const nint m_nCommLevel = 0xD8; // int32
    public const nint m_nBehaviorLevel = 0xDC; // int32
    public const nint m_flLastCommsTime = 0xE0; // float32
}

public static class PlayerResourcePlayerEventData_t {
    public const nint m_iEventID = 0x30; // uint32
    public const nint m_iEventPoints = 0x34; // uint32
    public const nint m_iEventPremiumPoints = 0x38; // uint32
    public const nint m_iEventEffectsMask = 0x3C; // uint32
    public const nint m_iEventRanks = 0x40; // uint16
    public const nint m_bIsEventOwned = 0x42; // bool
    public const nint m_iFavoriteTeam = 0x44; // uint32
    public const nint m_iFavoriteTeamQuality = 0x48; // uint16
    public const nint m_iAvailableSalutes = 0x4A; // uint8
    public const nint m_iSaluteAmountIndex = 0x4B; // uint8
    public const nint m_iEventWagerStreak = 0x4C; // uint32
    public const nint m_iEventTeleportFXLevel = 0x50; // uint8
    public const nint m_nCandyPointsReason = 0x54; // int32[5]
    public const nint m_vecPeriodicResources = 0x68; // CUtlVectorEmbeddedNetworkVar< PlayerResourcePlayerPeriodicResourceData_t >
    public const nint m_iObsoleteSaluteAmounts = 0xD8; // uint8
    public const nint m_iObsoleteEventArcanaPeriodicResourceRemaining = 0xDC; // uint32
    public const nint m_iObsoleteEventArcanaPeriodicResourceMax = 0xE0; // uint32
    public const nint m_iObsoleteEventWagerTokensRemaining = 0xE4; // uint32
    public const nint m_iObsoleteEventWagerTokensMax = 0xE8; // uint32
    public const nint m_iObsoleteEventBountiesRemaining = 0xEC; // uint32
    public const nint m_iObsoleteRankWagersAvailable = 0xF0; // uint32
    public const nint m_iObsoleteRankWagersMax = 0xF4; // uint32
    public const nint m_iObsoleteEventPointAdjustmentsRemaining = 0xF8; // uint32
}

public static class PlayerResourcePlayerPeriodicResourceData_t {
    public const nint m_unPeriodicResourceID = 0x30; // PeriodicResourceID_t
    public const nint m_unPeriodicResourceMax = 0x34; // uint32
    public const nint m_unPeriodicResourceRemaining = 0x38; // uint32
}

public static class PlayerResourcePlayerTeamData_t {
    public const nint m_ThreatLevelInfos = 0x30; // CUtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
    public const nint m_nSelectedHeroID = 0xA0; // int32
    public const nint m_iKills = 0xA4; // int32
    public const nint m_iAssists = 0xA8; // int32
    public const nint m_iDeaths = 0xAC; // int32
    public const nint m_iStreak = 0xB0; // int32
    public const nint m_iLevel = 0xB4; // int32
    public const nint m_iCustomIntParam = 0xB8; // int32
    public const nint m_iRespawnSeconds = 0xBC; // int32
    public const nint m_flLastBuybackTime = 0xC0; // GameTime_t
    public const nint m_hSelectedHero = 0xC4; // CHandle< CBaseEntity >
    public const nint m_bAFK = 0xC8; // bool
    public const nint m_nSuggestedHeroes = 0xCC; // int32[4]
    public const nint m_bBanSuggestedHeroes = 0xDC; // bool[4]
    public const nint m_iTimedRewardDrops = 0xE0; // item_definition_index_t
    public const nint m_iTimedRewardDropOrigins = 0xE4; // int32
    public const nint m_iTimedRewardCrates = 0xE8; // item_definition_index_t
    public const nint m_iTimedRewardEvents = 0xEC; // item_definition_index_t
    public const nint m_unCompendiumLevel = 0xF0; // uint16
    public const nint m_bCanRepick = 0xF2; // bool
    public const nint m_bCanEarnRewards = 0xF3; // bool
    public const nint m_bHasRandomed = 0xF4; // bool
    public const nint m_nRandomedHeroID = 0xF8; // int32
    public const nint m_bBattleBonusActive = 0xFC; // bool
    public const nint m_iBattleBonusRate = 0xFE; // uint16
    public const nint m_iCustomBuybackCost = 0x100; // int32
    public const nint m_CustomPlayerColor = 0x104; // Color
    public const nint m_bQualifiesForPAContractReward = 0x108; // bool
    public const nint m_bHasPredictedVictory = 0x109; // bool
    public const nint m_UnitShareMasks = 0x10C; // int32
    public const nint m_iTeamSlot = 0x110; // int32
    public const nint m_iBattleCupWinStreak = 0x114; // uint8
    public const nint m_iBattleCupWinDate = 0x118; // uint64
    public const nint m_iBattleCupSkillLevel = 0x120; // uint16
    public const nint m_iBattleCupTeamID = 0x124; // uint32
    public const nint m_iBattleCupTournamentID = 0x128; // uint32
    public const nint m_iBattleCupDivision = 0x12C; // uint8
    public const nint m_flTeamFightParticipation = 0x130; // float32
    public const nint m_iFirstBloodClaimed = 0x134; // int32
    public const nint m_iFirstBloodGiven = 0x138; // int32
    public const nint m_unPickOrder = 0x13C; // uint32
    public const nint m_flTimeOfLastSaluteSent = 0x140; // GameTime_t
    public const nint m_vecPlayerEventData = 0x148; // CUtlVectorEmbeddedNetworkVar< PlayerResourcePlayerEventData_t >
    public const nint m_unSelectedHeroBadgeXP = 0x1B8; // uint32
    public const nint m_iBountyRunes = 0x1BC; // uint8
    public const nint m_iPowerRunes = 0x1BD; // uint8
    public const nint m_iWaterRunes = 0x1BE; // uint8
    public const nint m_iOutpostsCaptured = 0x1BF; // uint8
    public const nint m_unGuildTier = 0x1C0; // uint8
    public const nint m_unGuildLevel = 0x1C2; // uint16
    public const nint m_unGuildPrimaryColor = 0x1C4; // uint8
    public const nint m_unGuildSecondaryColor = 0x1C5; // uint8
    public const nint m_unGuildPattern = 0x1C6; // uint8
    public const nint m_unGuildLogo = 0x1C8; // uint64
    public const nint m_unGuildFlags = 0x1D0; // uint32
    public const nint m_bIsPartyGuild = 0x1D4; // bool
    public const nint m_unGuildID = 0x1D8; // GuildID_t
    public const nint m_unHeroStickerDefIndex = 0x1DC; // item_definition_index_t
    public const nint m_eHeroStickerQuality = 0x1E0; // uint8
    public const nint m_eLaneSelectionFlags = 0x1E1; // uint8
    public const nint m_nPlayerDraftPreferredRoles = 0x1E2; // uint8
    public const nint m_nPlayerDraftPreferredTeam = 0x1E3; // int8
}

public static class PurchasedItem_t {
    public const nint nItemID = 0x0; // int32
    public const nint flPurchaseTime = 0x4; // float32
}

public static class RagdollCreationParams_t {
    public const nint m_vForce = 0x0; // Vector
    public const nint m_nForceBone = 0xC; // int32
}

public static class RegionTriggerBoxes_t {
    public const nint regionBox = 0x0; // AABB_t
    public const nint vRegionBoxOrigin = 0x18; // Vector
    public const nint strRegionName = 0x28; // CUtlString
}

public static class RelationshipOverride_t {
    public const nint entity = 0x8; // CHandle< CBaseEntity >
    public const nint classType = 0xC; // Class_T
}

public static class Relationship_t {
    public const nint disposition = 0x0; // Disposition_t
    public const nint priority = 0x4; // int32
}

public static class RemnantData_t {
    public const nint m_hRemnant = 0x0; // CHandle< CBaseEntity >
    public const nint m_nProjectileHandle = 0x4; // int32
}

public static class ResponseContext_t {
    public const nint m_iszName = 0x0; // CUtlSymbolLarge
    public const nint m_iszValue = 0x8; // CUtlSymbolLarge
    public const nint m_fExpirationTime = 0x10; // GameTime_t
}

public static class ResponseFollowup {
    public const nint followup_concept = 0x0; // char*
    public const nint followup_contexts = 0x8; // char*
    public const nint followup_delay = 0x10; // float32
    public const nint followup_target = 0x14; // char*
    public const nint followup_entityiotarget = 0x1C; // char*
    public const nint followup_entityioinput = 0x24; // char*
    public const nint followup_entityiodelay = 0x2C; // float32
    public const nint bFired = 0x30; // bool
}

public static class ResponseParams {
    public const nint odds = 0x10; // int16
    public const nint flags = 0x12; // int16
    public const nint m_pFollowup = 0x18; // ResponseFollowup*
}

public static class SPingWheelMessageDefinition {
    public const nint nID = 0xC; // PingWheelMessageID_t
    public const nint sLocName = 0x10; // CUtlString
    public const nint sParticle = 0x18; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint sParticleTarget = 0xF8; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
    public const nint color = 0x1D8; // Color
    public const nint sImage = 0x1E0; // CPanoramaImageName
    public const nint sSound = 0x1F0; // CUtlString
    public const nint sChat = 0x1F8; // CUtlString
    public const nint fDurationMultiplier = 0x200; // float32
    public const nint eUnlockEvent = 0x204; // EEvent
    public const nint nUnlockEventActionID = 0x208; // uint32
    public const nint nMinimapIcon = 0x20C; // int32
}

public static class SimpleConstraintSoundProfile {
    public const nint eKeypoints = 0x8; // SimpleConstraintSoundProfile::SimpleConstraintsSoundProfileKeypoints_t
    public const nint m_keyPoints = 0xC; // float32[2]
    public const nint m_reversalSoundThresholds = 0x14; // float32[3]
}

public static class SummaryTakeDamageInfo_t {
    public const nint nSummarisedCount = 0x0; // int32
    public const nint info = 0x8; // CTakeDamageInfo
    public const nint result = 0xB0; // CTakeDamageResult
    public const nint hTarget = 0xB8; // CHandle< CBaseEntity >
}

public static class TempViewerInfo_t {
    public const nint m_nGridX = 0x30; // int32
    public const nint m_nGridY = 0x34; // int32
    public const nint m_nRadius = 0x38; // int32
    public const nint m_nViewerType = 0x3C; // int8
    public const nint m_bObstructedVision = 0x3D; // bool
    public const nint m_bValid = 0x3E; // bool
    public const nint m_bDirty = 0x3F; // bool
    public const nint flEndTime = 0x40; // GameTime_t
    public const nint nFoWID = 0x44; // int32
    public const nint hOwner = 0x48; // CHandle< CBaseEntity >
}

public static class TierNeutralInfo_t {
    public const nint m_nTier = 0x30; // int32
    public const nint m_nAbilityID = 0x38; // CNetworkUtlVectorBase< AbilityID_t >
}

public static class TimedKillEvent_t {
    public const nint m_nKillTime = 0x0; // int32
    public const nint m_flKillValue = 0x4; // float32
    public const nint m_nPlayerID = 0x8; // PlayerID_t
}

public static class TimedTeamStats_t {
    public const nint m_nTime = 0x0; // uint32
    public const nint m_nEnemyTowerStatus = 0x4; // uint16
    public const nint m_nEnemyBarracksStatus = 0x6; // uint16
    public const nint m_nEnemyTowersKilled = 0x8; // uint8
    public const nint m_nEnemyBarracksKilled = 0x9; // uint8
}

public static class TrackedStatAggregateData_t {
    public const nint m_strIndividualStat = 0x0; // CUtlString
    public const nint m_eAggregate = 0x8; // ETrackedStatAggregate
}

public static class TrackedStatCombatQueryData_t {
    public const nint strCombatQueryPath = 0x0; // CUtlString
}

public static class TrackedStatExpressionData_t {
    public const nint strExpression = 0x0; // CUtlString
}

public static class TrackedStatHeroAdjectiveData_t {
    public const nint m_strAdjective = 0x0; // CUtlString
}

public static class TrackedStatKillEaterData_t {
    public const nint unKillEaterEvent = 0x0; // uint32
}

public static class TransitioningLayer_t {
    public const nint m_op = 0x8; // CNetworkedSequenceOperation
    public const nint m_flStartAnimTime = 0x30; // float32
    public const nint m_flStartWeight = 0x34; // float32
    public const nint m_flAnimTime = 0x38; // float32
    public const nint m_nOrder = 0x3C; // int32
    public const nint m_flPlaybackRate = 0x40; // float32
    public const nint m_flFadeOutDuration = 0x44; // float32
}

public static class TreeModelReplacement_t {
    public const nint m_nBinaryObjectID = 0x30; // int32
    public const nint m_szModel = 0x34; // char[512]
    public const nint m_nChangeToken = 0x234; // int32
}

public static class TrophyLevel_t {
    public const nint m_nScore = 0x0; // uint32
    public const nint m_nBadgePoints = 0x4; // int32
    public const nint m_sImage = 0x8; // CPanoramaImageName
}

public static class VPhysicsCollisionAttribute_t {
    public const nint m_nInteractsAs = 0x8; // uint64
    public const nint m_nInteractsWith = 0x10; // uint64
    public const nint m_nInteractsExclude = 0x18; // uint64
    public const nint m_nEntityId = 0x20; // uint32
    public const nint m_nOwnerId = 0x24; // uint32
    public const nint m_nHierarchyId = 0x28; // uint16
    public const nint m_nCollisionGroup = 0x2A; // uint8
    public const nint m_nCollisionFunctionMask = 0x2B; // uint8
}

public static class VelocitySampler {
    public const nint m_prevSample = 0x0; // Vector
    public const nint m_fPrevSampleTime = 0xC; // GameTime_t
    public const nint m_fIdealSampleRate = 0x10; // float32
}

public static class WaveData_t {
    public const nint m_vStart = 0x0; // Vector
    public const nint m_hAlreadyHitList = 0x10; // CUtlVector< CHandle< CBaseEntity > >
    public const nint m_hProjectileHandle = 0x28; // int32
}

public static class WearableData_t {
    public const nint nItemDef = 0x0; // item_definition_index_t
    public const nint nSkin = 0x4; // int32
}

public static class WeightedAbilitySuggestion_t {
    public const nint nSuggestion = 0x0; // AbilityID_t
    public const nint fWeight = 0x4; // float32
}

public static class WeightedSuggestion_t {
    public const nint nSuggestion = 0x0; // int32
    public const nint fWeight = 0x4; // float32
}

public static class attrib_definition_index_db32_t {
    public const nint m_Value = 0x0; // uint32
}

public static class attrib_definition_index_t {
    public const nint m_Value = 0x0; // uint16
}

public static class audioparams_t {
    public const nint localSound = 0x8; // Vector[8]
    public const nint soundscapeIndex = 0x68; // int32
    public const nint localBits = 0x6C; // uint8
    public const nint soundscapeEntityListIndex = 0x70; // int32
    public const nint soundEventHash = 0x74; // uint32
}

public static class dynpitchvol_base_t {
    public const nint preset = 0x0; // int32
    public const nint pitchrun = 0x4; // int32
    public const nint pitchstart = 0x8; // int32
    public const nint spinup = 0xC; // int32
    public const nint spindown = 0x10; // int32
    public const nint volrun = 0x14; // int32
    public const nint volstart = 0x18; // int32
    public const nint fadein = 0x1C; // int32
    public const nint fadeout = 0x20; // int32
    public const nint lfotype = 0x24; // int32
    public const nint lforate = 0x28; // int32
    public const nint lfomodpitch = 0x2C; // int32
    public const nint lfomodvol = 0x30; // int32
    public const nint cspinup = 0x34; // int32
    public const nint cspincount = 0x38; // int32
    public const nint pitch = 0x3C; // int32
    public const nint spinupsav = 0x40; // int32
    public const nint spindownsav = 0x44; // int32
    public const nint pitchfrac = 0x48; // int32
    public const nint vol = 0x4C; // int32
    public const nint fadeinsav = 0x50; // int32
    public const nint fadeoutsav = 0x54; // int32
    public const nint volfrac = 0x58; // int32
    public const nint lfofrac = 0x5C; // int32
    public const nint lfomult = 0x60; // int32
}

public static class fogparams_t {
    public const nint dirPrimary = 0x8; // Vector
    public const nint colorPrimary = 0x14; // Color
    public const nint colorSecondary = 0x18; // Color
    public const nint colorPrimaryLerpTo = 0x1C; // Color
    public const nint colorSecondaryLerpTo = 0x20; // Color
    public const nint start = 0x24; // float32
    public const nint end = 0x28; // float32
    public const nint farz = 0x2C; // float32
    public const nint maxdensity = 0x30; // float32
    public const nint exponent = 0x34; // float32
    public const nint HDRColorScale = 0x38; // float32
    public const nint skyboxFogFactor = 0x3C; // float32
    public const nint skyboxFogFactorLerpTo = 0x40; // float32
    public const nint startLerpTo = 0x44; // float32
    public const nint endLerpTo = 0x48; // float32
    public const nint maxdensityLerpTo = 0x4C; // float32
    public const nint lerptime = 0x50; // GameTime_t
    public const nint duration = 0x54; // float32
    public const nint blendtobackground = 0x58; // float32
    public const nint scattering = 0x5C; // float32
    public const nint locallightscale = 0x60; // float32
    public const nint enable = 0x64; // bool
    public const nint blend = 0x65; // bool
    public const nint m_bNoReflectionFog = 0x66; // bool
    public const nint m_bPadding = 0x67; // bool
}

public static class fogplayerparams_t {
    public const nint m_hCtrl = 0x8; // CHandle< CFogController >
    public const nint m_flTransitionTime = 0xC; // float32
    public const nint m_OldColor = 0x10; // Color
    public const nint m_flOldStart = 0x14; // float32
    public const nint m_flOldEnd = 0x18; // float32
    public const nint m_flOldMaxDensity = 0x1C; // float32
    public const nint m_flOldHDRColorScale = 0x20; // float32
    public const nint m_flOldFarZ = 0x24; // float32
    public const nint m_NewColor = 0x28; // Color
    public const nint m_flNewStart = 0x2C; // float32
    public const nint m_flNewEnd = 0x30; // float32
    public const nint m_flNewMaxDensity = 0x34; // float32
    public const nint m_flNewHDRColorScale = 0x38; // float32
    public const nint m_flNewFarZ = 0x3C; // float32
}

public static class hudtextparms_t {
    public const nint color1 = 0x0; // Color
    public const nint color2 = 0x4; // Color
    public const nint effect = 0x8; // uint8
    public const nint channel = 0x9; // uint8
    public const nint x = 0xC; // float32
    public const nint y = 0x10; // float32
}

public static class item_definition_index_t {
    public const nint m_Value = 0x0; // uint32
}

public static class item_steam_cache_version_t {
    public const nint m_Value = 0x0; // uint8
}

public static class itemid_t {
    public const nint m_Value = 0x0; // uint64
}

public static class lerpdata_t {
    public const nint m_hEnt = 0x0; // CHandle< CBaseEntity >
    public const nint m_MoveType = 0x4; // MoveType_t
    public const nint m_flStartTime = 0x8; // GameTime_t
    public const nint m_vecStartOrigin = 0xC; // Vector
    public const nint m_qStartRot = 0x20; // Quaternion
    public const nint m_nFXIndex = 0x30; // ParticleIndex_t
}

public static class locksound_t {
    public const nint sLockedSound = 0x8; // CUtlSymbolLarge
    public const nint sUnlockedSound = 0x10; // CUtlSymbolLarge
    public const nint flwaitSound = 0x18; // GameTime_t
}

public static class magnetted_objects_t {
    public const nint hEntity = 0x8; // CHandle< CBaseEntity >
}

public static class ragdoll_t {
    public const nint list = 0x0; // CUtlVector< ragdollelement_t >
    public const nint boneIndex = 0x18; // CUtlVector< int32 >
    public const nint allowStretch = 0x30; // bool
    public const nint unused = 0x31; // bool
}

public static class ragdollelement_t {
    public const nint originParentSpace = 0x0; // Vector
    public const nint parentIndex = 0x20; // int32
    public const nint m_flRadius = 0x24; // float32
}

public static class sAbilityHistory {
    public const nint flAppliedTime = 0x0; // GameTime_t
    public const nint pAbility = 0x8; // CDOTABaseAbility*
}

public static class sAcquireHistory {
    public const nint m_nAbilityID = 0x0; // AbilityID_t
    public const nint m_nLevel = 0x4; // int32
    public const nint m_nGold = 0x8; // int32
    public const nint m_nNetWorth = 0xC; // int32
    public const nint m_bCombinedItem = 0x10; // int32
    public const nint m_fGameTime = 0x14; // float32
    public const nint m_vecItemList = 0x18; // CUtlVector< AbilityID_t >
    public const nint m_vecTalentSkilledList = 0x30; // CUtlVector< AbilityID_t >
    public const nint m_vecAvailableNeutralItemList = 0x48; // CUtlVector< AbilityID_t >
}

public static class sAghsFortGlaiveInfo {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sAghsfortWardBounceInfo {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sBounceInfo {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sGlaiveDef {
    public const nint pGlaive = 0x0; // CDOTA_BaseNPC*
    public const nint nGlaiveFXIndex = 0x8; // ParticleIndex_t
    public const nint nGlaiveState = 0xC; // int32
}

public static class sGlaiveInfo {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sGlaiveInfoSilencer {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sGlaiveInfoStorm {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sLilShredderBounceInfo {
    public const nint iAttackIndex = 0x0; // int32
    public const nint iBounceCount = 0x4; // int32
    public const nint hAlreadyHitList = 0x8; // CUtlVector< CHandle< CBaseEntity > >
}

public static class sLoadoutItem {
    public const nint name = 0x0; // CUtlSymbolLarge
    public const nint iFlags = 0x8; // int32
    public const nint iAbilityID = 0xC; // AbilityID_t
    public const nint bPurchased = 0x10; // bool
}

public static class sMuertaPartingShotSoulDef {
    public const nint hHeroOwner = 0x0; // CHandle< CBaseEntity >
    public const nint hSoulClone = 0x4; // CHandle< CBaseEntity >
}

public static class sPendingTreeModelChange {
    public const nint nTeam = 0x0; // int32
    public const nint nIndex = 0x4; // int32
    public const nint strModel = 0x8; // CUtlString
    public const nint nChangeToken = 0x10; // int32
}

public static class sPendingTreeRemoval {
    public const nint nTeam = 0x0; // int32
    public const nint nIndex = 0x4; // int32
    public const nint fTimestamp = 0x8; // GameTime_t
}

public static class sPlayerSnapshot {
    public const nint m_nItemAbilityID = 0x0; // AbilityID_t[10]
    public const nint m_fGameTime = 0x28; // float32
    public const nint unKills = 0x2C; // uint8
    public const nint unDeaths = 0x2D; // uint8
    public const nint unAssists = 0x2E; // uint8
    public const nint unLevel = 0x2F; // uint8
}

public static class sRevenantDef {
    public const nint pRevenant = 0x0; // CDOTA_BaseNPC*
    public const nint nRevenantFXIndex = 0x8; // ParticleIndex_t
}

public static class sSharedCooldownInfo {
    public const nint cooldownName = 0x0; // CUtlString
    public const nint cooldownLength = 0x8; // float32
    public const nint cooldownTime = 0xC; // GameTime_t
}

public static class sSpiritDef {
    public const nint pSpirit = 0x0; // CDOTA_BaseNPC*
    public const nint nSpiritFXIndex = 0x8; // ParticleIndex_t
    public const nint nSpiritState = 0xC; // int32
}

public static class sSpiritInfo {
    public const nint vTargetLoc = 0x4; // Vector
    public const nint hTarget = 0x10; // CHandle< CBaseEntity >
    public const nint bHit = 0x14; // bool
    public const nint iHealAmount = 0x18; // int32
    public const nint nFXAmbientIndex = 0x1C; // ParticleIndex_t
}

public static class sky3dparams_t {
    public const nint scale = 0x8; // int16
    public const nint origin = 0xC; // Vector
    public const nint bClip3DSkyBoxNearToWorldFar = 0x18; // bool
    public const nint flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
    public const nint fog = 0x20; // fogparams_t
    public const nint m_nWorldGroupID = 0x88; // WorldGroupId_t
}

public static class style_index_t {
    public const nint m_Value = 0x0; // uint8
}

public static class thinkfunc_t {
    public const nint m_hFn = 0x8; // HSCRIPT
    public const nint m_nContext = 0x10; // CUtlStringToken
    public const nint m_nNextThinkTick = 0x14; // GameTick_t
    public const nint m_nLastThinkTick = 0x18; // GameTick_t
}