// printed at 2023-12-18 22:05:43.685509400 +07:00
#pragma once
#include <cstdint>

namespace Offsets {
    namespace ActiveModelConfig_t {
        constexpr uint32_t m_Handle = 0x28; // ModelConfigHandle_t
        constexpr uint32_t m_Name = 0x30; // CUtlSymbolLarge
        constexpr uint32_t m_AssociatedEntities = 0x38; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
        constexpr uint32_t m_AssociatedEntityNames = 0x50; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
    }

    namespace CAmbientCreatures {
        constexpr uint32_t m_szAnimationName = 0x800; // CUtlString
    }

    namespace CAnimGraphNetworkedVariables {
        constexpr uint32_t m_PredNetBoolVariables = 0x8; // C_NetworkUtlVectorBase< uint32 >
        constexpr uint32_t m_PredNetByteVariables = 0x20; // C_NetworkUtlVectorBase< uint8 >
        constexpr uint32_t m_PredNetUInt16Variables = 0x38; // C_NetworkUtlVectorBase< uint16 >
        constexpr uint32_t m_PredNetIntVariables = 0x50; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_PredNetUInt32Variables = 0x68; // C_NetworkUtlVectorBase< uint32 >
        constexpr uint32_t m_PredNetUInt64Variables = 0x80; // C_NetworkUtlVectorBase< uint64 >
        constexpr uint32_t m_PredNetFloatVariables = 0x98; // C_NetworkUtlVectorBase< float32 >
        constexpr uint32_t m_PredNetVectorVariables = 0xB0; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_PredNetQuaternionVariables = 0xC8; // C_NetworkUtlVectorBase< Quaternion >
        constexpr uint32_t m_OwnerOnlyPredNetBoolVariables = 0xE0; // C_NetworkUtlVectorBase< uint32 >
        constexpr uint32_t m_OwnerOnlyPredNetByteVariables = 0xF8; // C_NetworkUtlVectorBase< uint8 >
        constexpr uint32_t m_OwnerOnlyPredNetUInt16Variables = 0x110; // C_NetworkUtlVectorBase< uint16 >
        constexpr uint32_t m_OwnerOnlyPredNetIntVariables = 0x128; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_OwnerOnlyPredNetUInt32Variables = 0x140; // C_NetworkUtlVectorBase< uint32 >
        constexpr uint32_t m_OwnerOnlyPredNetUInt64Variables = 0x158; // C_NetworkUtlVectorBase< uint64 >
        constexpr uint32_t m_OwnerOnlyPredNetFloatVariables = 0x170; // C_NetworkUtlVectorBase< float32 >
        constexpr uint32_t m_OwnerOnlyPredNetVectorVariables = 0x188; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_OwnerOnlyPredNetQuaternionVariables = 0x1A0; // C_NetworkUtlVectorBase< Quaternion >
        constexpr uint32_t m_nBoolVariablesCount = 0x1B8; // int32
        constexpr uint32_t m_nOwnerOnlyBoolVariablesCount = 0x1BC; // int32
        constexpr uint32_t m_nRandomSeedOffset = 0x1C0; // int32
        constexpr uint32_t m_flLastTeleportTime = 0x1C4; // float32
    }

    namespace CAnimationLayer {
        constexpr uint32_t m_op = 0x30; // CNetworkedSequenceOperation
        constexpr uint32_t m_nOrder = 0x58; // int32
        constexpr uint32_t m_flPlaybackRate = 0x5C; // CNetworkedQuantizedFloat
        constexpr uint32_t m_bLooping = 0x64; // bool
        constexpr uint32_t m_nNewSequenceParity = 0x68; // int32
        constexpr uint32_t m_nFlags = 0x6C; // int32
        constexpr uint32_t m_bSequenceFinished = 0x70; // bool
        constexpr uint32_t m_flKillRate = 0x74; // float32
        constexpr uint32_t m_flKillDelay = 0x78; // float32
        constexpr uint32_t m_flLayerAnimtime = 0x7C; // float32
        constexpr uint32_t m_flLayerFadeOuttime = 0x80; // float32
        constexpr uint32_t m_nActivity = 0x84; // int32
        constexpr uint32_t m_nPriority = 0x88; // int32
        constexpr uint32_t m_flLastEventCycle = 0x8C; // float32
        constexpr uint32_t m_flLastAccess = 0x90; // float32
    }

    namespace CAnnouncerDescriptor {
        constexpr uint32_t m_strAnnouncerName = 0x8; // CUtlString
        constexpr uint32_t m_strAnnouncerVoiceFile = 0x10; // CUtlString
        constexpr uint32_t m_nAnnouncerItemId = 0x18; // itemid_t
        constexpr uint32_t m_bItemOwnedByLocalPlayer = 0x20; // bool
    }

    namespace CAttributeContainer {
        constexpr uint32_t m_Item = 0x68; // C_EconItemView
    }

    namespace CAttributeList {
        constexpr uint32_t m_Attributes = 0x8; // C_UtlVectorEmbeddedNetworkVar< C_EconItemAttribute >
        constexpr uint32_t m_pManager = 0x58; // CAttributeManager*
    }

    namespace CAttributeManager {
        constexpr uint32_t m_Providers = 0x8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_Receivers = 0x20; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_iReapplyProvisionParity = 0x38; // int32
        constexpr uint32_t m_hOuter = 0x3C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bPreventLoopback = 0x40; // bool
        constexpr uint32_t m_ProviderType = 0x44; // attributeprovidertypes_t
        constexpr uint32_t m_CachedResults = 0x48; // CUtlVector< CAttributeManager::cached_attribute_float_t >
    }

    namespace CAttributeManager_cached_attribute_float_t {
        constexpr uint32_t flIn = 0x0; // float32
        constexpr uint32_t iAttribHook = 0x8; // CUtlSymbolLarge
        constexpr uint32_t flOut = 0x10; // float32
    }

    namespace CBaseAnimGraph {
        constexpr uint32_t m_bInitiallyPopulateInterpHistory = 0x7B8; // bool
        constexpr uint32_t m_bShouldAnimateDuringGameplayPause = 0x7B9; // bool
        constexpr uint32_t m_bSuppressAnimEventSounds = 0x7BB; // bool
        constexpr uint32_t m_bAnimGraphUpdateEnabled = 0x7C8; // bool
        constexpr uint32_t m_flMaxSlopeDistance = 0x7CC; // float32
        constexpr uint32_t m_vLastSlopeCheckPos = 0x7D0; // Vector
        constexpr uint32_t m_vecForce = 0x7E0; // Vector
        constexpr uint32_t m_nForceBone = 0x7EC; // int32
        constexpr uint32_t m_pClientsideRagdoll = 0x7F0; // CBaseAnimGraph*
        constexpr uint32_t m_bBuiltRagdoll = 0x7F8; // bool
        constexpr uint32_t m_pRagdollPose = 0x810; // PhysicsRagdollPose_t*
        constexpr uint32_t m_bClientRagdoll = 0x818; // bool
        constexpr uint32_t m_bHasAnimatedMaterialAttributes = 0x828; // bool
    }

    namespace CBaseAnimGraphController {
        constexpr uint32_t m_baseLayer = 0x18; // CNetworkedSequenceOperation
        constexpr uint32_t m_bSequenceFinished = 0x40; // bool
        constexpr uint32_t m_flLastEventCycle = 0x44; // float32
        constexpr uint32_t m_flLastEventAnimTime = 0x48; // float32
        constexpr uint32_t m_flPlaybackRate = 0x4C; // CNetworkedQuantizedFloat
        constexpr uint32_t m_flPrevAnimTime = 0x54; // float32
        constexpr uint32_t m_bClientSideAnimation = 0x58; // bool
        constexpr uint32_t m_bNetworkedAnimationInputsChanged = 0x59; // bool
        constexpr uint32_t m_nPrevNewSequenceParity = 0x5A; // uint8
        constexpr uint32_t m_nPrevResetEventsParity = 0x5B; // uint8
        constexpr uint32_t m_nNewSequenceParity = 0x5C; // int32
        constexpr uint32_t m_nResetEventsParity = 0x60; // int32
        constexpr uint32_t m_nAnimLoopMode = 0x64; // AnimLoopMode_t
        constexpr uint32_t m_hAnimationUpdate = 0x104; // AnimationUpdateListHandle_t
        constexpr uint32_t m_hLastAnimEventSequence = 0x108; // HSequence
    }

    namespace CBaseAnimatingActivity {
        constexpr uint32_t m_bShouldAnimateDuringGameplayPause = 0x7B8; // bool
        constexpr uint32_t m_bInitiallyPopulateInterpHistory = 0x7B9; // bool
        constexpr uint32_t m_pSuppressedAnimEventTags = 0x7C0; // CUtlVector< CUtlString >*
        constexpr uint32_t m_bHasAnimatedMaterialAttributes = 0x7C8; // bool
        constexpr uint32_t m_bSuppressAnimEventSounds = 0x7D8; // bool
    }

    namespace CBasePlayerController {
        constexpr uint32_t m_nFinalPredictedTick = 0x540; // int32
        constexpr uint32_t m_CommandContext = 0x548; // C_CommandContext
        constexpr uint32_t m_nInButtonsWhichAreToggles = 0x5C0; // uint64
        constexpr uint32_t m_nTickBase = 0x5C8; // uint32
        constexpr uint32_t m_hPawn = 0x5CC; // CHandle< C_BasePlayerPawn >
        constexpr uint32_t m_hPredictedPawn = 0x5D0; // CHandle< C_BasePlayerPawn >
        constexpr uint32_t m_nSplitScreenSlot = 0x5D4; // CSplitScreenSlot
        constexpr uint32_t m_hSplitOwner = 0x5D8; // CHandle< CBasePlayerController >
        constexpr uint32_t m_hSplitScreenPlayers = 0x5E0; // CUtlVector< CHandle< CBasePlayerController > >
        constexpr uint32_t m_bIsHLTV = 0x5F8; // bool
        constexpr uint32_t m_iConnected = 0x5FC; // PlayerConnectedState
        constexpr uint32_t m_iszPlayerName = 0x600; // char[128]
        constexpr uint32_t m_steamID = 0x688; // uint64
        constexpr uint32_t m_bIsLocalPlayerController = 0x690; // bool
        constexpr uint32_t m_iDesiredFOV = 0x694; // uint32
    }

    namespace CBasePlayerVData {
        constexpr uint32_t m_sModelName = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
        constexpr uint32_t m_flHeadDamageMultiplier = 0x108; // CSkillFloat
        constexpr uint32_t m_flChestDamageMultiplier = 0x118; // CSkillFloat
        constexpr uint32_t m_flStomachDamageMultiplier = 0x128; // CSkillFloat
        constexpr uint32_t m_flArmDamageMultiplier = 0x138; // CSkillFloat
        constexpr uint32_t m_flLegDamageMultiplier = 0x148; // CSkillFloat
        constexpr uint32_t m_flHoldBreathTime = 0x158; // float32
        constexpr uint32_t m_flDrowningDamageInterval = 0x15C; // float32
        constexpr uint32_t m_nDrowningDamageInitial = 0x160; // int32
        constexpr uint32_t m_nDrowningDamageMax = 0x164; // int32
        constexpr uint32_t m_nWaterSpeed = 0x168; // int32
        constexpr uint32_t m_flUseRange = 0x16C; // float32
        constexpr uint32_t m_flUseAngleTolerance = 0x170; // float32
        constexpr uint32_t m_flCrouchTime = 0x174; // float32
    }

    namespace CBasePlayerWeaponVData {
        constexpr uint32_t m_szClassName = 0x10; // CUtlString
        constexpr uint32_t m_szWorldModel = 0x18; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeCModel > >
        constexpr uint32_t m_bBuiltRightHanded = 0xF8; // bool
        constexpr uint32_t m_bAllowFlipping = 0xF9; // bool
        constexpr uint32_t m_bIsFullAuto = 0xFA; // bool
        constexpr uint32_t m_nNumBullets = 0xFC; // int32
        constexpr uint32_t m_sMuzzleAttachment = 0x100; // CUtlString
        constexpr uint32_t m_szMuzzleFlashParticle = 0x108; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
        constexpr uint32_t m_iFlags = 0x1E8; // ItemFlagTypes_t
        constexpr uint32_t m_nPrimaryAmmoType = 0x1E9; // AmmoIndex_t
        constexpr uint32_t m_nSecondaryAmmoType = 0x1EA; // AmmoIndex_t
        constexpr uint32_t m_iMaxClip1 = 0x1EC; // int32
        constexpr uint32_t m_iMaxClip2 = 0x1F0; // int32
        constexpr uint32_t m_iDefaultClip1 = 0x1F4; // int32
        constexpr uint32_t m_iDefaultClip2 = 0x1F8; // int32
        constexpr uint32_t m_iWeight = 0x1FC; // int32
        constexpr uint32_t m_bAutoSwitchTo = 0x200; // bool
        constexpr uint32_t m_bAutoSwitchFrom = 0x201; // bool
        constexpr uint32_t m_iRumbleEffect = 0x204; // RumbleEffect_t
        constexpr uint32_t m_aShootSounds = 0x208; // CUtlMap< WeaponSound_t, CSoundEventName >
        constexpr uint32_t m_iSlot = 0x228; // int32
        constexpr uint32_t m_iPosition = 0x22C; // int32
    }

    namespace CBasePortraitData {
        constexpr uint32_t m_iModelIndex = 0x410; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_skin = 0x418; // CUtlStringToken
        constexpr uint32_t m_bHasSetupView = 0xDBC; // bool
        constexpr uint32_t m_flRotation = 0xDD8; // float32
    }

    namespace CBaseProp {
        constexpr uint32_t m_bModelOverrodeBlockLOS = 0x7E0; // bool
        constexpr uint32_t m_iShapeType = 0x7E4; // int32
        constexpr uint32_t m_bConformToCollisionBounds = 0x7E8; // bool
        constexpr uint32_t m_mPreferredCatchTransform = 0x7EC; // matrix3x4_t
    }

    namespace CBodyComponent {
        constexpr uint32_t m_pSceneNode = 0x8; // CGameSceneNode*
        constexpr uint32_t __m_pChainEntity = 0x20; // CNetworkVarChainer
    }

    namespace CBodyComponentBaseAnimGraph {
        constexpr uint32_t m_animationController = 0x470; // CBaseAnimGraphController
        constexpr uint32_t __m_pChainEntity = 0x5D0; // CNetworkVarChainer
    }

    namespace CBodyComponentBaseModelEntity {
        constexpr uint32_t __m_pChainEntity = 0x470; // CNetworkVarChainer
    }

    namespace CBodyComponentPoint {
        constexpr uint32_t m_sceneNode = 0x50; // CGameSceneNode
        constexpr uint32_t __m_pChainEntity = 0x1A0; // CNetworkVarChainer
    }

    namespace CBodyComponentSkeletonInstance {
        constexpr uint32_t m_skeletonInstance = 0x50; // CSkeletonInstance
        constexpr uint32_t __m_pChainEntity = 0x440; // CNetworkVarChainer
    }

    namespace CBuoyancyHelper {
        constexpr uint32_t m_flFluidDensity = 0x18; // float32
    }

    namespace CClientAlphaProperty {
        constexpr uint32_t m_nRenderFX = 0x10; // uint8
        constexpr uint32_t m_nRenderMode = 0x11; // uint8
        constexpr uint32_t m_bAlphaOverride = 0x0; // bitfield:1
        constexpr uint32_t m_bShadowAlphaOverride = 0x0; // bitfield:1
        constexpr uint32_t m_nReserved = 0x0; // bitfield:6
        constexpr uint32_t m_nAlpha = 0x13; // uint8
        constexpr uint32_t m_nDesyncOffset = 0x14; // uint16
        constexpr uint32_t m_nReserved2 = 0x16; // uint16
        constexpr uint32_t m_nDistFadeStart = 0x18; // uint16
        constexpr uint32_t m_nDistFadeEnd = 0x1A; // uint16
        constexpr uint32_t m_flFadeScale = 0x1C; // float32
        constexpr uint32_t m_flRenderFxStartTime = 0x20; // GameTime_t
        constexpr uint32_t m_flRenderFxDuration = 0x24; // float32
    }

    namespace CCollisionProperty {
        constexpr uint32_t m_collisionAttribute = 0x10; // VPhysicsCollisionAttribute_t
        constexpr uint32_t m_vecMins = 0x40; // Vector
        constexpr uint32_t m_vecMaxs = 0x4C; // Vector
        constexpr uint32_t m_usSolidFlags = 0x5A; // uint8
        constexpr uint32_t m_nSolidType = 0x5B; // SolidType_t
        constexpr uint32_t m_triggerBloat = 0x5C; // uint8
        constexpr uint32_t m_nSurroundType = 0x5D; // SurroundingBoundsType_t
        constexpr uint32_t m_CollisionGroup = 0x5E; // uint8
        constexpr uint32_t m_nEnablePhysics = 0x5F; // uint8
        constexpr uint32_t m_flBoundingRadius = 0x60; // float32
        constexpr uint32_t m_vecSpecifiedSurroundingMins = 0x64; // Vector
        constexpr uint32_t m_vecSpecifiedSurroundingMaxs = 0x70; // Vector
        constexpr uint32_t m_vecSurroundingMaxs = 0x7C; // Vector
        constexpr uint32_t m_vecSurroundingMins = 0x88; // Vector
        constexpr uint32_t m_vCapsuleCenter1 = 0x94; // Vector
        constexpr uint32_t m_vCapsuleCenter2 = 0xA0; // Vector
        constexpr uint32_t m_flCapsuleRadius = 0xAC; // float32
    }

    namespace CComicBook {
        constexpr uint32_t m_CoverImage = 0x8; // CPanoramaImageName
        constexpr uint32_t m_XmlFile = 0x18; // CUtlString
    }

    namespace CDOTABattleReportHighlight {
        constexpr uint32_t m_nID = 0x8; // uint16
        constexpr uint32_t m_bEnabled = 0xA; // bool
        constexpr uint32_t m_eHighlightType = 0xC; // CMsgBattleReport_HighlightType
        constexpr uint32_t m_eHighlightCategory = 0x10; // CMsgBattleReport_HighlightCategory
        constexpr uint32_t m_eHighlightRarity = 0x14; // CMsgBattleReport_HighlightRarity
        constexpr uint32_t m_sNameToken = 0x18; // CUtlString
        constexpr uint32_t m_sFlavorToken = 0x20; // CUtlString
        constexpr uint32_t m_bTooltip = 0x28; // bool
        constexpr uint32_t m_sTooltipLocString = 0x30; // CUtlString
        constexpr uint32_t m_eFormat = 0x38; // EHighlightNumberFormat
        constexpr uint32_t m_vecRoles = 0x40; // CUtlVector< CMsgBattleReport_Role >
        constexpr uint32_t m_vecTiers = 0x58; // CUtlVector< CDOTABattleReportHighlightTier_t >
    }

    namespace CDOTABattleReportHighlightCompareContext_t {
        constexpr uint32_t m_eCompareContext = 0x0; // CMsgBattleReport_CompareContext
        constexpr uint32_t m_eComparisonType = 0x4; // EHighlightScoreComparison
        constexpr uint32_t m_flCompareValue = 0x8; // float32
    }

    namespace CDOTABattleReportHighlightTier_t {
        constexpr uint32_t m_eTier = 0x0; // CMsgBattleReport_HighlightTier
        constexpr uint32_t m_vecCompareContexts = 0x8; // CUtlVector< CDOTABattleReportHighlightCompareContext_t >
    }

    namespace CDOTACandyShopDefinition {
        constexpr uint32_t m_unCandyShopID = 0x8; // CandyShopID_t
        constexpr uint32_t m_sLocName = 0x10; // CUtlString
        constexpr uint32_t m_unDefaultInventorySize = 0x18; // uint32
        constexpr uint32_t m_sInventorySizeUpgradeImage = 0x20; // CPanoramaImageName
        constexpr uint32_t m_unDefaultRerollCharges = 0x30; // uint32
        constexpr uint32_t m_unCandyBagItemDef = 0x34; // item_definition_index_t
        constexpr uint32_t m_unFixedExchangeRecipeMaxCandies = 0x38; // uint8
        constexpr uint32_t m_unFixedExchangeRecipeStartDate = 0x3C; // uint32
        constexpr uint32_t m_unFixedExchangeRecipeUpdateRateInSeconds = 0x40; // uint32
        constexpr uint32_t m_unFixedExchangeRecipeCount = 0x44; // uint8
        constexpr uint32_t m_unVariableExchangeInputCandyCount = 0x45; // uint8
        constexpr uint32_t m_unVariableExchangeOutputCandyCount = 0x46; // uint8
        constexpr uint32_t m_eExpireEvent = 0x48; // EEvent
        constexpr uint32_t m_vecCandyTypes = 0x50; // CUtlVector< CandyShopCandyType_t >
        constexpr uint32_t m_vecRewardSlots = 0x68; // CUtlVector< CandyShopRewardSlot_t >
        constexpr uint32_t m_vecDefaultRewardOptions = 0x80; // CUtlVector< CandyShopRewardOption_t >
    }

    namespace CDOTACustomShopInfo {
        constexpr uint32_t m_CustomShopName = 0x30; // char[256]
        constexpr uint32_t m_CustomShopItems = 0x130; // C_UtlVectorEmbeddedNetworkVar< CDOTACustomShopItemInfo >
    }

    namespace CDOTACustomShopItemInfo {
        constexpr uint32_t m_nAbilityID = 0x30; // AbilityID_t
        constexpr uint32_t m_nStockCount = 0x34; // int32
        constexpr uint32_t m_Category = 0x38; // char[256]
    }

    namespace CDOTAInGamePredictionState {
        constexpr uint32_t m_bVotingClosed = 0x538; // bool
        constexpr uint32_t m_bAllPredictionsFinished = 0x539; // bool
        constexpr uint32_t m_vecPredictions = 0x540; // C_UtlVectorEmbeddedNetworkVar< InGamePredictionData_t >
        constexpr uint32_t m_nLeagueID = 0x590; // LeagueID_t
        constexpr uint32_t m_vecPrevPredictions = 0x598; // CUtlVector< InGamePredictionData_t >
    }

    namespace CDOTAPropAghsfortArenaOfBloodWarrior {
        constexpr uint32_t m_bDying = 0xA58; // bool
    }

    namespace CDOTAPropArenaOfBloodWarrior {
        constexpr uint32_t m_bDying = 0xA58; // bool
    }

    namespace CDOTAPropConsumableBanner {
        constexpr uint32_t m_nPlayerID = 0xAB0; // PlayerID_t
        constexpr uint32_t m_hAvatarTexture = 0xAB8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_bUseAvatar = 0xAC0; // bool
    }

    namespace CDOTAPropPlusPlayerGuildBanner {
        constexpr uint32_t m_nPlayerID = 0xAB0; // int32
    }

    namespace CDOTAPropTI10PlayerGuildBanner {
        constexpr uint32_t m_nPlayerID = 0xAB0; // int32
    }

    namespace CDOTARoadToTIChallengeDefinition {
        constexpr uint32_t m_eEvent = 0x0; // EEvent
        constexpr uint32_t m_unTotalQuestPeriods = 0x4; // uint32
        constexpr uint32_t m_unHeroesPerQuest = 0x8; // uint32
        constexpr uint32_t m_vecQuestPattern = 0x10; // CUtlVector< uint32 >
        constexpr uint32_t m_unCullingBladeItemDef = 0x28; // item_definition_index_t
        constexpr uint32_t m_unRerollItemDef = 0x2C; // item_definition_index_t
        constexpr uint32_t m_vecQuests = 0x30; // CUtlVector< RoadToTIQuestDefinition_t >
    }

    namespace CDOTASubChallengeInfo {
        constexpr uint32_t nType = 0x30; // int32
        constexpr uint32_t nTier = 0x34; // int32
        constexpr uint32_t nSlotID = 0x38; // int32
        constexpr uint32_t nProgress = 0x3C; // int32
        constexpr uint32_t nCompletionThreshold = 0x40; // int32
        constexpr uint32_t nPlayerID = 0x44; // PlayerID_t
        constexpr uint32_t nQueryIndex = 0x48; // int32
        constexpr uint32_t nEventID = 0x4C; // int32
        constexpr uint32_t nSequenceID = 0x50; // int32
        constexpr uint32_t nRequiredHero = 0x54; // int32
        constexpr uint32_t nCompleted = 0x58; // int32
    }

    namespace CDOTA_AbilityDraftAbilityState {
        constexpr uint32_t m_nAbilityID = 0x30; // AbilityID_t
        constexpr uint32_t m_unPlayerID = 0x34; // PlayerID_t
        constexpr uint32_t m_unAbilityPlayerSlot = 0x38; // int32
    }

    namespace CDOTA_Ability_AbyssalUnderlord_Firestorm {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_AbyssalUnderlord_PitOfMalice {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_AghsFort_Arcanist_Potion {
        constexpr uint32_t cooldown_reduction_pct = 0x648; // int32
        constexpr uint32_t manacost_reduction_pct = 0x64C; // int32
    }

    namespace CDOTA_Ability_AghsFort_Ascension_Invis {
        constexpr uint32_t warning_duration = 0x5B0; // float32
    }

    namespace CDOTA_Ability_AghsFort_Capture {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
    }

    namespace CDOTA_Ability_AghsFort_Clinkz_BurningArmy {
        constexpr uint32_t range = 0x5B0; // int32
    }

    namespace CDOTA_Ability_AghsFort_Clinkz_BurningBarrage {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_iArrowProjectile = 0x5BC; // int32
        constexpr uint32_t m_nFXIndex = 0x5C0; // int32
        constexpr uint32_t m_nTriSplitCount = 0x5E0; // int32
        constexpr uint32_t projectile_speed = 0x5E4; // int32
        constexpr uint32_t projectile_width = 0x5E8; // int32
    }

    namespace CDOTA_Ability_AghsFort_Creature_Impale {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t width = 0x5B4; // int32
        constexpr uint32_t duration = 0x5B8; // float32
        constexpr uint32_t length = 0x5BC; // int32
        constexpr uint32_t speed = 0x5C0; // int32
    }

    namespace CDOTA_Ability_AghsFort_Creature_Phoenix_LaunchFireSpirit {
        constexpr uint32_t spirit_speed = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
        constexpr uint32_t radius = 0x5B8; // int32
        constexpr uint32_t hp_cost_perc = 0x5BC; // int32
        constexpr uint32_t m_nFXIndex = 0x5C0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_AghsFort_Creature_Phoenix_Supernova {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_AghsFort_DragonKnight_BreatheFire {
        constexpr uint32_t start_radius = 0x5B0; // int32
        constexpr uint32_t end_radius = 0x5B4; // int32
        constexpr uint32_t m_vStartPos = 0x5B8; // Vector
        constexpr uint32_t m_fStartTime = 0x5C4; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5C8; // float32
    }

    namespace CDOTA_Ability_AghsFort_Dragon_Potion {
        constexpr uint32_t bonus_movement_speed = 0x648; // int32
        constexpr uint32_t bonus_attack_damage = 0x64C; // int32
        constexpr uint32_t bonus_attack_range = 0x650; // int32
        constexpr uint32_t magic_resistance = 0x654; // int32
        constexpr uint32_t model_scale = 0x658; // int32
        constexpr uint32_t skin_number = 0x65C; // int32
        constexpr uint32_t flying_movement = 0x660; // bool
    }

    namespace CDOTA_Ability_AghsFort_EarthSpiritBoss_BoulderSmash {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t rock_damage = 0x5B4; // int32
        constexpr uint32_t radius = 0x5B8; // int32
        constexpr uint32_t rock_search_aoe = 0x5BC; // int32
        constexpr uint32_t unit_distance = 0x5C0; // float32
        constexpr uint32_t rock_distance = 0x5C4; // float32
        constexpr uint32_t m_nProjectileID = 0x5C8; // int32
        constexpr uint32_t m_hCursorTarget = 0x5CC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bUsedStone = 0x5D0; // bool
        constexpr uint32_t m_hTarget = 0x5D4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bTargetStone = 0x5D8; // bool
        constexpr uint32_t m_vecBoulderSmashedEnts = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Ability_AghsFort_EarthSpiritBoss_GeomagneticGrip {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_AghsFort_EarthSpiritBoss_RollingBoulder {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t speed = 0x5B4; // int32
        constexpr uint32_t rock_speed = 0x5B8; // int32
        constexpr uint32_t damage = 0x5BC; // int32
        constexpr uint32_t distance = 0x5C0; // float32
        constexpr uint32_t rock_distance = 0x5C4; // float32
        constexpr uint32_t slow_duration = 0x5C8; // float32
        constexpr uint32_t m_nFXIndex = 0x5CC; // ParticleIndex_t
        constexpr uint32_t m_boulderSetposBool = 0x5D0; // bool
        constexpr uint32_t m_nProjectileID = 0x5D4; // int32
        constexpr uint32_t m_vStartingLocation = 0x5D8; // Vector
        constexpr uint32_t m_vProjectileLocation = 0x5E4; // Vector
        constexpr uint32_t m_vDir = 0x5F0; // Vector
        constexpr uint32_t m_vVel = 0x5FC; // Vector
        constexpr uint32_t m_bUsedStone = 0x608; // bool
    }

    namespace CDOTA_Ability_AghsFort_EchoSlamPotion {
        constexpr uint32_t echo_slam_damage_range = 0x648; // int32
        constexpr uint32_t echo_slam_echo_search_range = 0x64C; // int32
        constexpr uint32_t echo_slam_echo_range = 0x650; // int32
        constexpr uint32_t echo_slam_echo_damage = 0x654; // int32
        constexpr uint32_t echo_slam_initial_damage = 0x658; // int32
        constexpr uint32_t spend_charge_delay = 0x65C; // float32
    }

    namespace CDOTA_Ability_AghsFort_Luna_GlaiveShield {
        constexpr uint32_t m_GlaiveDefs = 0x5B0; // CUtlVector< sGlaiveDef >
    }

    namespace CDOTA_Ability_AghsFort_Phoenix_IcarusDive {
        constexpr uint32_t hp_cost_perc = 0x5B0; // int32
    }

    namespace CDOTA_Ability_AghsFort_Phoenix_LaunchFireSpirit {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_bUnitCarriedByArtillery = 0x5B4; // bool
        constexpr uint32_t m_nSpiritSpeed = 0x5B8; // int32
        constexpr uint32_t m_fDuration = 0x5BC; // float32
        constexpr uint32_t m_nRadius = 0x5C0; // int32
        constexpr uint32_t m_nSpiritCount = 0x5C4; // int32
    }

    namespace CDOTA_Ability_AghsFort_Ravage_Potion {
        constexpr uint32_t m_hEntsHit = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t damage = 0x660; // int32
        constexpr uint32_t duration = 0x664; // float32
        constexpr uint32_t spend_charge_delay = 0x668; // float32
    }

    namespace CDOTA_Ability_AghsFort_Sniper_Assassinate {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_bHasBuckshotAbility = 0x5B8; // bool
        constexpr uint32_t m_bInBuckshot = 0x5B9; // bool
        constexpr uint32_t m_nScatterRange = 0x5BC; // int32
        constexpr uint32_t m_nScatterWidth = 0x5C0; // int32
        constexpr uint32_t m_nBuckshotDamagePct = 0x5C4; // int32
        constexpr uint32_t m_nDamageType = 0x5C8; // int32
        constexpr uint32_t damage = 0x5CC; // int32
    }

    namespace CDOTA_Ability_AghsFort_Special_VoidSpirit_ResonantPulse_Suppression {
        constexpr uint32_t m_nBonusCharges = 0x5B0; // int32
    }

    namespace CDOTA_Ability_AghsFort_Spectre_ActiveDispersion {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_AghsFort_Tower_BlastWave {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpiritBoss_AetherRemnant {
        constexpr uint32_t m_nFXPreview = 0x5B0; // ParticleIndex_t
        constexpr uint32_t start_radius = 0x5B4; // int32
        constexpr uint32_t end_radius = 0x5B8; // int32
        constexpr uint32_t remnant_watch_distance = 0x5BC; // int32
        constexpr uint32_t projectile_speed = 0x5C0; // int32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpiritBoss_AstralStep {
        constexpr uint32_t m_nFXPreview = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXDestinationPreview = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_vStartPos = 0x5B8; // Vector
        constexpr uint32_t m_vDestination = 0x5C4; // Vector
        constexpr uint32_t m_vDirection = 0x5D0; // Vector
        constexpr uint32_t radius = 0x5DC; // int32
        constexpr uint32_t min_travel_distance = 0x5E0; // int32
        constexpr uint32_t max_travel_distance = 0x5E4; // int32
        constexpr uint32_t debuff_duration = 0x5E8; // float32
        constexpr uint32_t pop_damage_delay = 0x5EC; // float32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpiritBoss_Dissimilate {
        constexpr uint32_t m_nFXPreview = 0x5B0; // ParticleIndex_t
        constexpr uint32_t phase_duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpiritBoss_ResonantPulse {
        constexpr uint32_t m_nFXPreview = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_bGrantedScepterCharges = 0x5B4; // bool
        constexpr uint32_t buff_duration = 0x5B8; // float32
        constexpr uint32_t base_absorb_amount = 0x5BC; // int32
        constexpr uint32_t absorb_per_hero_hit = 0x5C0; // int32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpirit_AetherRemnant {
        constexpr uint32_t start_radius = 0x5B0; // int32
        constexpr uint32_t end_radius = 0x5B4; // int32
        constexpr uint32_t remnant_watch_distance = 0x5B8; // int32
        constexpr uint32_t projectile_speed = 0x5BC; // int32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpirit_AstralStep {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_vDestination = 0x5BC; // Vector
        constexpr uint32_t m_vDirection = 0x5C8; // Vector
        constexpr uint32_t radius = 0x5D4; // int32
        constexpr uint32_t min_travel_distance = 0x5D8; // int32
        constexpr uint32_t max_travel_distance = 0x5DC; // int32
        constexpr uint32_t debuff_duration = 0x5E0; // float32
        constexpr uint32_t pop_damage_delay = 0x5E4; // float32
        constexpr uint32_t pop_damage = 0x5E8; // int32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpirit_Dissimilate {
        constexpr uint32_t m_vecTranslocatingAllies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t phase_duration = 0x5C8; // float32
    }

    namespace CDOTA_Ability_AghsFort_VoidSpirit_ResonantPulse {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t base_absorb_amount = 0x5B4; // int32
        constexpr uint32_t absorb_per_unit_hit = 0x5B8; // int32
        constexpr uint32_t hero_absorb_multiplier = 0x5BC; // float32
        constexpr uint32_t boss_absorb_multiplier = 0x5C0; // float32
    }

    namespace CDOTA_Ability_Aghsfort_Aziyog_Underlord_Firestorm {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Aghsfort_Bonus_Pudge_MeatHook {
        constexpr uint32_t m_nConsecutiveHits = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Aghsfort_Dawnbreaker_Celestial_Hammer {
        constexpr uint32_t projectile_speed = 0x5B0; // int32
        constexpr uint32_t projectile_radius = 0x5B4; // int32
        constexpr uint32_t hammer_damage = 0x5B8; // int32
        constexpr uint32_t hammer_aoe_radius = 0x5BC; // int32
        constexpr uint32_t flare_radius = 0x5C0; // int32
        constexpr uint32_t bHasStartedBurning = 0x5C4; // bool
        constexpr uint32_t flare_debuff_duration = 0x5C8; // float32
        constexpr uint32_t return_anim_distance_threshold = 0x5CC; // int32
        constexpr uint32_t range = 0x5D0; // int32
    }

    namespace CDOTA_Ability_Aghsfort_Gyrocopter_Call_Down {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
        constexpr uint32_t range_scepter = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Aghsfort_Lina_FierySoul {
        constexpr uint32_t active_duration = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Aghsfort_Mars_Bulwark {
        constexpr uint32_t active_duration = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Aghsfort_Phoenix_Flame_Revenant_Attack {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Aghsfort_PrimalBeast_Boss_PrimalRoar {
        constexpr uint32_t path_width = 0x5B0; // int32
        constexpr uint32_t push_duration = 0x5B4; // float32
        constexpr uint32_t push_distance = 0x5B8; // int32
        constexpr uint32_t min_distance = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Aghsfort_PrimalBeast_Boss_ThrowAttack {
        constexpr uint32_t base_damage = 0x5B0; // int32
        constexpr uint32_t hp_damage_pct = 0x5B4; // int32
        constexpr uint32_t impact_radius = 0x5B8; // int32
        constexpr uint32_t fragment_impact_distance = 0x5BC; // int32
        constexpr uint32_t min_range = 0x5C0; // int32
        constexpr uint32_t m_nFXPreview = 0x5C4; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_FiresnapCookie {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t projectile_speed = 0x5BC; // int32
        constexpr uint32_t pre_hop_duration = 0x5C0; // float32
        constexpr uint32_t cast_on_ally_gesture_time = 0x5C4; // float32
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_GobbleUp {
        constexpr uint32_t max_time_in_belly = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_LilShredder {
        constexpr uint32_t m_iAttackIndex = 0x5B0; // int32
        constexpr uint32_t m_BounceInfo = 0x5B8; // CUtlVector< sLilShredderBounceInfo >
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_MortimerKisses {
        constexpr uint32_t m_nDamagePerProjectile = 0x5B0; // int32
        constexpr uint32_t damage_per_impact = 0x5B4; // int32
        constexpr uint32_t impact_radius = 0x5B8; // int32
        constexpr uint32_t projectile_vision = 0x5BC; // int32
        constexpr uint32_t m_nFragmentationImpactRadius = 0x5C0; // int32
        constexpr uint32_t firetrail_radius = 0x5C4; // int32
        constexpr uint32_t firetrail_damage = 0x5C8; // int32
        constexpr uint32_t firetrail_tick_interval = 0x5CC; // int32
        constexpr uint32_t m_vFirePoolLocations = 0x5D0; // CUtlVector< Vector >
        constexpr uint32_t m_fNextDamageTick = 0x5E8; // float32
        constexpr uint32_t m_vLastFirePoolLoc = 0x5EC; // Vector
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_Scatterblast {
        constexpr uint32_t damage = 0x5B0; // int32
        constexpr uint32_t debuff_duration = 0x5B4; // float32
        constexpr uint32_t point_blank_range = 0x5B8; // int32
        constexpr uint32_t point_blank_dmg_bonus_pct = 0x5BC; // float32
        constexpr uint32_t blast_width_end = 0x5C0; // int32
    }

    namespace CDOTA_Ability_Aghsfort_Snapfire_SpitCreep {
        constexpr uint32_t m_nDamagePerProjectile = 0x5B0; // int32
        constexpr uint32_t m_hGobbledUnit = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Aghsfort_Winter_Wyvern_Arctic_Burn {
        constexpr uint32_t m_BurnedTargets = 0x5B0; // CUtlVector< CEntityIndex >
    }

    namespace CDOTA_Ability_Aghsfort_Winter_Wyvern_Splinter_Blast {
        constexpr uint32_t splinter_damage = 0x5B8; // int32
        constexpr uint32_t m_hMainTarget = 0x5BC; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Alchemist_UnstableConcoctionThrow {
        constexpr uint32_t m_fCookTime = 0x5B0; // float32
        constexpr uint32_t m_vProjectileLoc = 0x5B4; // Vector
    }

    namespace CDOTA_Ability_AncientApparition_IceAge {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t health_degen = 0x5B4; // int32
        constexpr uint32_t duration = 0x5B8; // float32
        constexpr uint32_t damage = 0x5BC; // int32
    }

    namespace CDOTA_Ability_AncientApparition_IceBlast {
        constexpr uint32_t m_PathTimer = 0x5B0; // CountdownTimer
        constexpr uint32_t m_vTarget = 0x5C8; // Vector
        constexpr uint32_t m_vStartPos = 0x5D4; // Vector
        constexpr uint32_t m_vLastTempViewer = 0x5E0; // Vector
        constexpr uint32_t m_iTrackerProjectile = 0x5EC; // int32
        constexpr uint32_t path_radius = 0x5F0; // int32
        constexpr uint32_t radius_min = 0x5F4; // int32
        constexpr uint32_t radius_max = 0x5F8; // int32
        constexpr uint32_t radius_grow = 0x5FC; // float32
        constexpr uint32_t frostbite_duration = 0x600; // float32
        constexpr uint32_t target_sight_radius = 0x604; // int32
        constexpr uint32_t m_hFrostbittenEntities = 0x608; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Ability_AncientApparition_IceVortex {
        constexpr uint32_t vision_aoe = 0x5B0; // int32
        constexpr uint32_t vortex_duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_Beastmaster_PrimalRoar {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t slow_duration = 0x5B4; // float32
        constexpr uint32_t side_damage = 0x5B8; // int32
        constexpr uint32_t damage_radius = 0x5BC; // int32
        constexpr uint32_t path_width = 0x5C0; // int32
        constexpr uint32_t push_duration = 0x5C4; // float32
        constexpr uint32_t push_distance = 0x5C8; // int32
        constexpr uint32_t damage = 0x5CC; // int32
        constexpr uint32_t movement_speed_duration = 0x5D0; // float32
    }

    namespace CDOTA_Ability_Brewmaster_Void_Astral_Pull {
        constexpr uint32_t pull_speed = 0x5B0; // int32
        constexpr uint32_t pull_distance = 0x5B4; // int32
    }

    namespace CDOTA_Ability_Capture {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_pMyBuff = 0x5B8; // CDOTA_Buff*
    }

    namespace CDOTA_Ability_Centaur_DoubleEdge {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Centaur_Stampede {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t base_damage = 0x5B4; // int32
        constexpr uint32_t strength_damage = 0x5B8; // float32
        constexpr uint32_t slow_duration = 0x5BC; // float32
        constexpr uint32_t scepter_bonus_duration = 0x5C0; // float32
        constexpr uint32_t m_hHitEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Ability_Centaur_Work_Horse {
        constexpr uint32_t m_hCart = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_CrystalMaiden_IceRink {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Dawnbreaker_Celestial_Hammer {
        constexpr uint32_t m_nProjectileIndex = 0x5B0; // int32
        constexpr uint32_t m_nReturnProjectileID = 0x5B4; // int32
        constexpr uint32_t m_vEndLocation = 0x5B8; // Vector
        constexpr uint32_t m_fZCoord = 0x5C4; // float32
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x5C8; // Vector
        constexpr uint32_t m_bFlareDone = 0x5D4; // bool
        constexpr uint32_t m_bStartedCatchAnimation = 0x5D5; // bool
        constexpr uint32_t m_bIsReturning = 0x5D6; // bool
        constexpr uint32_t m_hReturnHits = 0x5D8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hAoEHits = 0x5F0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXIndex = 0x608; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexC = 0x60C; // ParticleIndex_t
        constexpr uint32_t m_nFXHammerReturnIndex = 0x610; // ParticleIndex_t
        constexpr uint32_t m_nFXHammerProjectileIndex = 0x614; // ParticleIndex_t
        constexpr uint32_t m_nFXHeroSolarGuardianTrailIndex = 0x618; // ParticleIndex_t
        constexpr uint32_t m_hThinker = 0x61C; // CHandle< C_BaseEntity >
        constexpr uint32_t projectile_speed = 0x620; // int32
        constexpr uint32_t projectile_radius = 0x624; // int32
        constexpr uint32_t hammer_damage = 0x628; // int32
        constexpr uint32_t hammer_aoe_radius = 0x62C; // int32
        constexpr uint32_t flare_radius = 0x630; // int32
        constexpr uint32_t bHasStartedBurning = 0x634; // bool
        constexpr uint32_t flare_debuff_duration = 0x638; // float32
        constexpr uint32_t return_anim_distance_threshold = 0x63C; // int32
        constexpr uint32_t range = 0x640; // int32
    }

    namespace CDOTA_Ability_Diretide_Portal_Channel {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_hInitialPortal = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vDestination = 0x5B8; // Vector
        constexpr uint32_t m_hTarget = 0x5C4; // CHandle< C_DOTA_BaseNPC >
    }

    namespace CDOTA_Ability_EarthSpirit_Petrify {
        constexpr uint32_t ally_cast_range = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Elder_Titan_EarthSplitter {
        constexpr uint32_t crack_width = 0x5B0; // int32
        constexpr uint32_t crack_distance = 0x5B4; // int32
        constexpr uint32_t speed = 0x5B8; // int32
        constexpr uint32_t vision_width = 0x5BC; // int32
        constexpr uint32_t crack_time = 0x5C0; // float32
    }

    namespace CDOTA_Ability_EnragedWildkin_Hurricane {
        constexpr uint32_t distance = 0x5B0; // float32
        constexpr uint32_t m_vEndpoint = 0x5B4; // Vector
    }

    namespace CDOTA_Ability_FelBeast_Haunt {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_Frostivus2018_Centaur_Stampede {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t base_damage = 0x5B4; // int32
        constexpr uint32_t strength_damage = 0x5B8; // float32
        constexpr uint32_t slow_duration = 0x5BC; // float32
        constexpr uint32_t m_hHitEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t armor_amount = 0x5D8; // int32
        constexpr uint32_t armor_duration = 0x5DC; // float32
        constexpr uint32_t max_armor_stacks = 0x5E0; // int32
    }

    namespace CDOTA_Ability_Frostivus2018_Clinkz_Burning_Army {
        constexpr uint32_t range = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Frostivus2018_FacelessVoid_TimeWalk {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t range = 0x5B4; // int32
        constexpr uint32_t radius = 0x5B8; // int32
        constexpr uint32_t damage = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Frostivus2018_Luna_LucentBeam {
        constexpr uint32_t radius = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Frostivus2018_Spectre_ActiveDispersion {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_Frostivus2018_Tusk_WalrusKick {
        constexpr uint32_t m_nFXKickIndex = 0x5B0; // ParticleIndex_t
    }

    namespace CDOTA_Ability_GiantWolf_Intimidate {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace CDOTA_Ability_Grimstroke_DarkArtistry {
        constexpr uint32_t m_vCastDir = 0x5B0; // Vector
        constexpr uint32_t m_fStartTime = 0x5BC; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5C0; // float32
        constexpr uint32_t m_nProjectileID = 0x5C4; // int32
        constexpr uint32_t m_vProjectileDir = 0x5C8; // Vector
        constexpr uint32_t m_nFXIndex = 0x5D4; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x5D8; // ParticleIndex_t
        constexpr uint32_t m_nTargetsHit = 0x5DC; // int32
        constexpr uint32_t m_nHeroesHit = 0x5E0; // int32
        constexpr uint32_t m_nVisibleHeroesHit = 0x5E4; // int32
        constexpr uint32_t m_fDmgMultiplierTalent = 0x5E8; // float32
        constexpr uint32_t slow_duration = 0x5EC; // float32
        constexpr uint32_t start_radius = 0x5F0; // int32
        constexpr uint32_t end_radius = 0x5F4; // int32
        constexpr uint32_t damage = 0x5F8; // int32
        constexpr uint32_t bonus_damage_per_target = 0x5FC; // int32
        constexpr uint32_t vision_duration = 0x600; // float32
    }

    namespace CDOTA_Ability_Grimstroke_InkCreature {
        constexpr uint32_t spawn_time = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Grimstroke_SoulChain {
        constexpr uint32_t chain_duration = 0x5B0; // float32
        constexpr uint32_t chain_latch_radius = 0x5B4; // int32
        constexpr uint32_t creep_duration_pct = 0x5B8; // float32
    }

    namespace CDOTA_Ability_Grimstroke_SpiritWalk {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t m_hTarget = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Gyrocopter_Call_Down {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
        constexpr uint32_t range_scepter = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Hoodwink_Decoy {
        constexpr uint32_t hIllusion = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t decoy_stun_duration = 0x5C8; // float32
        constexpr uint32_t decoy_detonate_radius = 0x5CC; // int32
        constexpr uint32_t projectile_speed = 0x5D0; // int32
        constexpr uint32_t m_nFXIndex = 0x5D4; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Invoker_InvokedBase {
        constexpr uint32_t m_nQuasLevel = 0x5B0; // int32
        constexpr uint32_t m_nWexLevel = 0x5B4; // int32
        constexpr uint32_t m_nExortLevel = 0x5B8; // int32
    }

    namespace CDOTA_Ability_Lamp_Use {
        constexpr uint32_t m_flLastCaptureTime = 0x5B0; // GameTime_t
        constexpr uint32_t m_nChannelFXIndex = 0x5B4; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Life_Stealer_Assimilate {
        constexpr uint32_t m_hLastAssimilation = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Marci_Companion_Run {
        constexpr uint32_t m_nTrackingProjectileID = 0x5B0; // int32
        constexpr uint32_t m_nFXIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_nMaxJumpDistance = 0x5B8; // int32
        constexpr uint32_t landing_radius = 0x5BC; // int32
        constexpr uint32_t move_speed = 0x5C0; // int32
        constexpr uint32_t ally_buff_duration = 0x5C4; // float32
        constexpr uint32_t min_jump_distance = 0x5C8; // int32
        constexpr uint32_t max_jump_distance = 0x5CC; // int32
        constexpr uint32_t impact_position_offset = 0x5D0; // int32
        constexpr uint32_t vector_preview_radius = 0x5D4; // int32
        constexpr uint32_t m_vEndpoint = 0x5D8; // Vector
        constexpr uint32_t m_nToBounceFXIndex = 0x5E4; // ParticleIndex_t
        constexpr uint32_t m_nToTargetFXIndex = 0x5E8; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Marci_Guardian {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t nearest_ally_search_range = 0x5B4; // int32
    }

    namespace CDOTA_Ability_Marci_Unleash {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t pulse_radius = 0x5B4; // int32
        constexpr uint32_t pulse_debuff_duration = 0x5B8; // float32
        constexpr uint32_t pulse_damage = 0x5BC; // int32
        constexpr uint32_t pulse_silence_duration = 0x5C0; // float32
    }

    namespace CDOTA_Ability_Mars_Bulwark {
        constexpr uint32_t m_flNextAttack = 0x5B0; // GameTime_t
        constexpr uint32_t m_flLastActive = 0x5B4; // GameTime_t
    }

    namespace CDOTA_Ability_Meepo_Poof {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t radius = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Nevermore_Necromastery {
        constexpr uint32_t attack_range_bonus = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Nyx_Assassin_Burrow {
        constexpr uint32_t m_nSpellStartFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nPhaseStartFXIndex = 0x5B4; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Nyx_Assassin_Jolt {
        constexpr uint32_t aoe = 0x5B0; // int32
        constexpr uint32_t damage = 0x5B4; // int32
    }

    namespace CDOTA_Ability_Nyx_Assassin_ManaBurn {
        constexpr uint32_t aoe = 0x5B0; // int32
    }

    namespace CDOTA_Ability_PluckFamango {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_pMyBuff = 0x5B8; // CDOTA_Buff*
        constexpr uint32_t famango_rate = 0x5C0; // float32
    }

    namespace CDOTA_Ability_PrimalBeast_Rock_Throw {
        constexpr uint32_t base_damage = 0x5B0; // int32
        constexpr uint32_t impact_radius = 0x5B4; // int32
        constexpr uint32_t fragment_impact_radius = 0x5B8; // int32
        constexpr uint32_t fragment_impact_distance = 0x5BC; // int32
        constexpr uint32_t min_range = 0x5C0; // int32
        constexpr uint32_t stun_duration = 0x5C4; // float32
        constexpr uint32_t m_nFXPreview = 0x5C8; // ParticleIndex_t
    }

    namespace CDOTA_Ability_Puck_WaningRift {
        constexpr uint32_t max_distance = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Pudge_Dismember {
        constexpr uint32_t m_hVictim = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t shard_cast_range = 0x5B4; // int32
    }

    namespace CDOTA_Ability_Pudge_MeatHook {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
        constexpr uint32_t m_nConsecutiveHits = 0x5BC; // int32
        constexpr uint32_t m_bIsVectorTargeted = 0x5C0; // bool
        constexpr uint32_t m_vTurnLocation = 0x5C4; // Vector
        constexpr uint32_t m_vDirectionAfterTurn = 0x5D0; // Vector
        constexpr uint32_t m_bHasTurned = 0x5DC; // bool
        constexpr uint32_t m_flDistanceAfterTurn = 0x5E0; // float32
        constexpr uint32_t m_vFinalPosition = 0x5E4; // Vector
        constexpr uint32_t reveal_duration = 0x5F0; // float32
    }

    namespace CDOTA_Ability_Seasonal_Summon_Dragon_Thinker {
        constexpr uint32_t grace_period = 0x1318; // float32
        constexpr uint32_t search_distance = 0x131C; // int32
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Ability_Seasonal_Summon_Penguin {
        constexpr uint32_t spawn_offset = 0x5B0; // int32
    }

    namespace CDOTA_Ability_Seasonal_TI10_HotPotato {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t projectile_speed = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Seasonal_TI10_SoccerBall {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
    }

    namespace CDOTA_Ability_Seasonal_TI11_Balloon {
        constexpr uint32_t charge_use_interval = 0x5B0; // float32
        constexpr uint32_t max_usable_charges = 0x5B4; // float32
        constexpr uint32_t m_flLastChargeUseTime = 0x5B8; // GameTime_t
        constexpr uint32_t m_hBalloon = 0x5BC; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Seasonal_TI11_CongaLine {
        constexpr uint32_t max_duration = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Seasonal_TI11_Duel {
        constexpr uint32_t model_scale = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Snapfire_FiresnapCookie {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t projectile_speed = 0x5BC; // int32
        constexpr uint32_t pre_hop_duration = 0x5C0; // float32
        constexpr uint32_t cast_on_ally_gesture_time = 0x5C4; // float32
    }

    namespace CDOTA_Ability_Snapfire_GobbleUp {
        constexpr uint32_t max_time_in_belly = 0x5B0; // float32
    }

    namespace CDOTA_Ability_Snapfire_MortimerKisses {
        constexpr uint32_t m_nDamagePerProjectile = 0x5B0; // int32
        constexpr uint32_t damage_per_impact = 0x5B4; // int32
        constexpr uint32_t impact_radius = 0x5B8; // int32
        constexpr uint32_t projectile_vision = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Snapfire_Scatterblast {
        constexpr uint32_t damage = 0x5B0; // int32
        constexpr uint32_t debuff_duration = 0x5B4; // float32
        constexpr uint32_t point_blank_range = 0x5B8; // int32
        constexpr uint32_t point_blank_dmg_bonus_pct = 0x5BC; // float32
        constexpr uint32_t blast_width_end = 0x5C0; // int32
    }

    namespace CDOTA_Ability_Snapfire_SpitCreep {
        constexpr uint32_t m_nDamagePerProjectile = 0x5B0; // int32
        constexpr uint32_t m_hGobbledUnit = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Spring2021_DefusalBomb_Defuse {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
    }

    namespace CDOTA_Ability_TI10_DiscoBall_Channel {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_flChannelTime = 0x5B4; // float32
    }

    namespace CDOTA_Ability_Techies_Minefield_Sign {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXHammerIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t aura_radius = 0x5B8; // int32
        constexpr uint32_t m_hSign = 0x5BC; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Techies_ReactiveTazer {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Techies_RemoteMines {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_hRMine = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Techies_StasisTrap {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_hTrap = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Tinker_WarpGrenade {
        constexpr uint32_t debuff_duration = 0x5B0; // float32
        constexpr uint32_t knockback_distance = 0x5B4; // float32
        constexpr uint32_t damage = 0x5B8; // float32
    }

    namespace CDOTA_Ability_Treant_LifeBomb {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_hRMine = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Ability_Tusk_SnowballMeteor {
        constexpr uint32_t area_of_effect = 0x5B0; // int32
        constexpr uint32_t damage_interval = 0x5B4; // float32
        constexpr uint32_t vision_distance = 0x5B8; // int32
        constexpr uint32_t end_vision_duration = 0x5BC; // float32
        constexpr uint32_t main_damage = 0x5C0; // float32
        constexpr uint32_t burn_duration = 0x5C4; // float32
        constexpr uint32_t burn_dps = 0x5C8; // float32
    }

    namespace CDOTA_Ability_Tusk_WalrusKick {
        constexpr uint32_t m_nTargetFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vEndpoint = 0x5B4; // Vector
        constexpr uint32_t landing_radius = 0x5C0; // int32
        constexpr uint32_t push_length = 0x5C4; // int32
    }

    namespace CDOTA_Ability_VoidSpirit_AetherRemnant {
        constexpr uint32_t start_radius = 0x5B0; // int32
        constexpr uint32_t end_radius = 0x5B4; // int32
        constexpr uint32_t remnant_watch_distance = 0x5B8; // int32
        constexpr uint32_t projectile_speed = 0x5BC; // int32
    }

    namespace CDOTA_Ability_VoidSpirit_AstralStep {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_vDestination = 0x5BC; // Vector
        constexpr uint32_t m_vDirection = 0x5C8; // Vector
        constexpr uint32_t radius = 0x5D4; // int32
        constexpr uint32_t min_travel_distance = 0x5D8; // int32
        constexpr uint32_t max_travel_distance = 0x5DC; // int32
        constexpr uint32_t debuff_duration = 0x5E0; // float32
        constexpr uint32_t pop_damage_delay = 0x5E4; // float32
    }

    namespace CDOTA_Ability_VoidSpirit_Dissimilate {
        constexpr uint32_t phase_duration = 0x5B0; // float32
    }

    namespace CDOTA_Ability_VoidSpirit_ResonantPulse {
        constexpr uint32_t m_bGrantedScepterCharges = 0x5B0; // bool
        constexpr uint32_t buff_duration = 0x5B4; // float32
        constexpr uint32_t base_absorb_amount = 0x5B8; // int32
        constexpr uint32_t absorb_per_hero_hit = 0x5BC; // int32
    }

    namespace CDOTA_Ability_Winter_Wyvern_Arctic_Burn {
        constexpr uint32_t m_BurnedTargets = 0x5B0; // CUtlVector< CEntityIndex >
    }

    namespace CDOTA_AghsFort_BossPreview {
        constexpr uint32_t m_strBossUnit = 0x538; // CUtlSymbolLarge
        constexpr uint32_t m_strModelName = 0x540; // CUtlSymbolLarge
        constexpr uint32_t m_flBossModelScale = 0x548; // float32
        constexpr uint32_t m_flExtraModelScale = 0x54C; // float32
        constexpr uint32_t m_nEncounterType = 0x550; // int32
    }

    namespace CDOTA_AghsFort_Modifier_Lich_Frost_Giant {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t model_scale = 0x131C; // int32
        constexpr uint32_t damage_radius = 0x1320; // int32
        constexpr uint32_t pct_int_damage_per_second = 0x1324; // int32
        constexpr uint32_t tick_rate = 0x1328; // float32
    }

    namespace CDOTA_AghsFort_Unit_ArcWarden_Boss {
        constexpr uint32_t m_nTalkFXIndex = 0x1AC8; // ParticleIndex_t
        constexpr uint32_t m_nFXDeath = 0x1ACC; // ParticleIndex_t
        constexpr uint32_t m_nTempestFX = 0x1AD0; // ParticleIndex_t
    }

    namespace CDOTA_Aghsfort_Modifier_Magnus_Push_Skewer_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
    }

    namespace CDOTA_ArcanaDataEntity_DrowRanger {
        constexpr uint32_t m_vecDrowRangerArcanaTargetPlayerID = 0x30; // int8[24]
        constexpr uint32_t m_vecDrowRangerArcanaDeathTime = 0x48; // GameTime_t[24]
        constexpr uint32_t m_vecDrowRangerArcanaKillTime = 0xA8; // GameTime_t[24]
    }

    namespace CDOTA_ArcanaDataEntity_FacelessVoid {
        constexpr uint32_t m_nNumPoints = 0x30; // int32
        constexpr uint32_t m_flShowPopupTime = 0x34; // GameTime_t
    }

    namespace CDOTA_ArcanaDataEntity_Razor {
        constexpr uint32_t m_nEmpoweredKills = 0x30; // int32
    }

    namespace CDOTA_BaseNPC_AghsFort_Watch_Tower {
        constexpr uint32_t m_nOptionNumber = 0x17D0; // int32
        constexpr uint32_t m_flMovePlayersRadius = 0x17D4; // float32
        constexpr uint32_t m_nExitDirection = 0x17D8; // CDOTA_BaseNPC_AghsFort_Watch_Tower::ExitDirection_t
        constexpr uint32_t m_vExitLocation = 0x17DC; // Vector
        constexpr uint32_t m_nPathSelectedID = 0x17E8; // int32
        constexpr uint32_t m_nEncounterType = 0x17EC; // int32
        constexpr uint32_t m_bIsEliteEncounter = 0x17F0; // bool
        constexpr uint32_t m_bIsAscensionLevelPicker = 0x17F1; // bool
        constexpr uint32_t m_strEncounterName = 0x17F8; // CUtlSymbolLarge
        constexpr uint32_t m_strAscensionAbilities = 0x1800; // CUtlSymbolLarge
        constexpr uint32_t m_hEffigy = 0x1808; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flYaw = 0x180C; // float32
        constexpr uint32_t m_flStartTime = 0x1810; // float32
        constexpr uint32_t m_flCursorEnterTime = 0x1814; // GameTime_t
        constexpr uint32_t m_bShowingTooltip = 0x1818; // bool
        constexpr uint32_t m_flLastUpdateTime = 0x1834; // float32
        constexpr uint32_t m_nChannellingParticle = 0x1838; // ParticleIndex_t
        constexpr uint32_t m_hRoomGate = 0x183C; // CHandle< CBaseAnimatingActivity >
        constexpr uint32_t m_bIsBeingChanneled = 0x1840; // bool
        constexpr uint32_t m_flGoalCaptureProgress = 0x1844; // float32
    }

    namespace CDOTA_BaseNPC_CustomEffigy {
        constexpr uint32_t m_unStatusEffectIndex = 0x17D0; // uint32
        constexpr uint32_t m_hPedestal = 0x17D4; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_BaseNPC_Effigy_AghsFort {
        constexpr uint32_t m_unStatusEffectIndex = 0x17D0; // uint32
    }

    namespace CDOTA_BaseNPC_Phantom_Assassin_GroundDagger {
        constexpr uint32_t m_nFXIndex = 0x1768; // ParticleIndex_t
    }

    namespace CDOTA_Creature_Jungle_Spirit {
        constexpr uint32_t m_iCurrentXP = 0x1778; // int32
        constexpr uint32_t m_fInitialScaleGain = 0x177C; // float32
        constexpr uint32_t m_fScaleGainMultiplierPerLevel = 0x1780; // float32
        constexpr uint32_t m_fLastModelScaleGained = 0x1784; // float32
        constexpr uint32_t m_bGainedSecondPlatemail = 0x1788; // bool
        constexpr uint32_t m_bGainedBonusHealth = 0x1789; // bool
        constexpr uint32_t m_nAmbientFXIndex = 0x178C; // ParticleIndex_t
    }

    namespace CDOTA_DB_Page_StickerEntity {
        constexpr uint32_t m_bIsPlaced = 0x538; // bool
        constexpr uint32_t m_ItemDefinitionIndex = 0x53C; // item_definition_index_t
        constexpr uint32_t m_flStickerScale = 0x54C; // float32
        constexpr uint32_t m_unDepthBias = 0x550; // uint16
        constexpr uint32_t m_nStickerNumber = 0x554; // int32
        constexpr uint32_t m_nDbPageNumber = 0x558; // int32
        constexpr uint32_t m_bVisible = 0x55C; // bool
        constexpr uint32_t m_hDecalSpawnGroupHandle = 0x580; // uint32
        constexpr uint32_t m_hDynamicPropSpawnGroupHandle = 0x584; // uint32
    }

    namespace CDOTA_ItemStockInfo {
        constexpr uint32_t iTeamNumber = 0x30; // int32
        constexpr uint32_t nItemAbilityID = 0x34; // AbilityID_t
        constexpr uint32_t fStockDuration = 0x38; // float32
        constexpr uint32_t fStockTime = 0x3C; // GameTime_t
        constexpr uint32_t iStockCount = 0x40; // int32
        constexpr uint32_t iMaxCount = 0x44; // int32
        constexpr uint32_t fInitialStockDuration = 0x48; // float32
        constexpr uint32_t iPlayerID = 0x4C; // PlayerID_t
        constexpr uint32_t iBonusDelayedStockCount = 0x50; // int32
    }

    namespace CDOTA_Item_Demonicon {
        constexpr uint32_t m_hDemonSummons = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Item_Pirate_Hat {
        constexpr uint32_t m_vChannelPos = 0x648; // Vector
        constexpr uint32_t m_bIsUnderwater = 0x654; // bool
        constexpr uint32_t m_nPhaseStartFXIndex = 0x658; // ParticleIndex_t
    }

    namespace CDOTA_Item_Tombstone_Drop {
        constexpr uint32_t m_iTempViewer = 0x8A0; // int32
        constexpr uint32_t m_iTeam = 0x8A4; // int32
    }

    namespace CDOTA_Item_Trusty_Shovel {
        constexpr uint32_t m_vChannelPos = 0x648; // Vector
        constexpr uint32_t m_bIsUnderwater = 0x654; // bool
        constexpr uint32_t m_nPhaseStartFXIndex = 0x658; // ParticleIndex_t
    }

    namespace CDOTA_Item_Ward_Maker {
        constexpr uint32_t sentry_refresh = 0x648; // float32
        constexpr uint32_t max_sentry_charges = 0x64C; // int32
        constexpr uint32_t m_flLastThinkTime = 0x650; // GameTime_t
        constexpr uint32_t m_flTimeAccumulator = 0x654; // float32
    }

    namespace CDOTA_Modifer_Furbolg_Enrage_AttackSpeed {
        constexpr uint32_t bonus_aspd = 0x1318; // int32
    }

    namespace CDOTA_Modifer_Furbolg_Enrage_Damage {
        constexpr uint32_t bonus_dmg_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifer_Item_BlightedSpirit {
        constexpr uint32_t magic_resist = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifer_Item_Blitz_Knuckles {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifer_Item_DandelionAmulet {
        constexpr uint32_t move_speed = 0x1318; // int32
        constexpr uint32_t mana = 0x131C; // int32
        constexpr uint32_t magic_block = 0x1320; // int32
        constexpr uint32_t min_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifer_Item_GlovesOfHaste {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifer_Item_TurtleShell {
        constexpr uint32_t armor = 0x1318; // int32
    }

    namespace CDOTA_Modifer_Item_TurtleShell_Shell {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t m_vecPosition = 0x131C; // Vector
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_ModifierManager {
        constexpr uint32_t m_bCompactBuffListPending = 0x28; // bool
        constexpr uint32_t m_nHasTruesightForTeam = 0x290; // uint16
        constexpr uint32_t m_nHasTruesightForTeamValid = 0x292; // uint16
        constexpr uint32_t m_nProvidesFOWPositionForTeam = 0x294; // uint16
        constexpr uint32_t m_nProvidesFOWPositionForTeamValid = 0x296; // uint16
        constexpr uint32_t m_iBuffIndex = 0x298; // int32
        constexpr uint32_t m_iLockRefCount = 0x29C; // int32
    }

    namespace CDOTA_Modifier_ARDM_NewHero {
        constexpr uint32_t m_hOldHero = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Abaddon_AphoticShield {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_absorb = 0x131C; // float32
        constexpr uint32_t regen = 0x1320; // int32
        constexpr uint32_t m_nDamageAbsorbed = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Abaddon_BorrowedTime {
        constexpr uint32_t redirect_range_scepter = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationAura {
        constexpr uint32_t immolate_aoe = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Abaddon_BorrowedTime_ImmolationDamage {
        constexpr uint32_t immolate_damage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Abaddon_BorrowedTime_Passive {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Abaddon_Borrowed_Time_Damage_Redirect {
        constexpr uint32_t m_fDamageTaken = 0x1318; // float32
        constexpr uint32_t ally_threshold_scepter = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Abaddon_DeathCoil_Effect {
        constexpr uint32_t armor_bonus = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t m_bFriendly = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Abaddon_Frostmourne {
        constexpr uint32_t slow_duration = 0x1318; // float32
        constexpr uint32_t curse_duration = 0x131C; // float32
        constexpr uint32_t hit_count = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Abaddon_Frostmourne_Buff {
        constexpr uint32_t curse_attack_speed = 0x1318; // int32
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Abaddon_Frostmourne_Debuff {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t m_nFXStackIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Abaddon_Frostmourne_Debuff_Bonus {
        constexpr uint32_t m_flDamage = 0x1318; // float32
        constexpr uint32_t curse_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_AtrophyAura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_CreepDmgBuff {
        constexpr uint32_t bonus_damage_from_creep = 0x1318; // int32
        constexpr uint32_t bonus_shared_by_allies_pct = 0x131C; // float32
        constexpr uint32_t m_flModifier = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Effect {
        constexpr uint32_t damage_reduction_pct = 0x1318; // int32
        constexpr uint32_t bonus_damage_duration = 0x131C; // float32
        constexpr uint32_t bonus_damage_from_creep = 0x1320; // int32
        constexpr uint32_t bonus_damage_from_hero = 0x1324; // int32
        constexpr uint32_t m_bWasHidden = 0x1328; // bool
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_HeroDmgBuff {
        constexpr uint32_t bonus_damage_from_hero = 0x1318; // int32
        constexpr uint32_t bonus_shared_by_allies_pct = 0x131C; // float32
        constexpr uint32_t m_flModifier = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_AtrophyAura_Scepter {
        constexpr uint32_t bonus_damage_from_creep = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_DarkRift {
        constexpr uint32_t m_nfxTargetTp = 0x1318; // ParticleIndex_t
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // int32
        constexpr uint32_t m_nfxAmbientFx = 0x1324; // ParticleIndex_t
        constexpr uint32_t bPointTarget = 0x1328; // bool
        constexpr uint32_t vDestination = 0x132C; // Vector
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_DarkRift_Bonus_Health {
        constexpr uint32_t scepter_health_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_Firestorm_Burn {
        constexpr uint32_t burn_damage = 0x1318; // float32
        constexpr uint32_t burn_interval = 0x131C; // float32
        constexpr uint32_t building_damage = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_Firestorm_Thinker {
        constexpr uint32_t wave_damage = 0x1318; // int32
        constexpr uint32_t wave_count = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t wave_interval = 0x1324; // float32
        constexpr uint32_t burn_duration = 0x1328; // float32
        constexpr uint32_t burn_interval = 0x132C; // float32
        constexpr uint32_t first_wave_delay = 0x1330; // float32
        constexpr uint32_t building_damage = 0x1334; // float32
        constexpr uint32_t m_hTarget = 0x1338; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Slow {
        constexpr uint32_t speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AbyssalUnderlord_PitOfMalice_Thinker {
        constexpr uint32_t pit_damage = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t pit_interval = 0x1320; // float32
        constexpr uint32_t ensnare_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Activity_Modifier {
        constexpr uint32_t m_activityModifier = 0x1318; // CUtlSymbolLarge
    }

    namespace CDOTA_Modifier_Aether_Lens {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t cast_range_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_FrostArrows_Chill {
        constexpr uint32_t interval = 0x1318; // float32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t damage_percent = 0x1320; // int32
        constexpr uint32_t movement_damage_percent = 0x1324; // int32
        constexpr uint32_t m_nDamage = 0x1328; // int32
        constexpr uint32_t m_nFXStackIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t m_vLastPosition = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_Active {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_range = 0x131C; // int32
        constexpr uint32_t attack_speed_reduction = 0x1320; // int32
        constexpr uint32_t duration = 0x1324; // float32
        constexpr uint32_t charges = 0x1328; // int32
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_Marksmanship_WaveOfSilence_Primed {
        constexpr uint32_t aura_disable_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence {
        constexpr uint32_t blind_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Agility {
        constexpr uint32_t m_AgilityTimers = 0x1318; // CUtlVector< GameTime_t >
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Echo_Thinker {
        constexpr uint32_t m_vTarget = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Frost {
        constexpr uint32_t m_fDamagePerSecond = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort2_DrowRanger_WaveOfSilence_Movement {
        constexpr uint32_t movespeed_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_Flux {
        constexpr uint32_t m_nCasterTeam = 0x1318; // int32
        constexpr uint32_t damage_per_tick_min = 0x131C; // int32
        constexpr uint32_t damage_per_tick_max = 0x1320; // int32
        constexpr uint32_t search_radius = 0x1324; // int32
        constexpr uint32_t move_speed_slow_pct = 0x1328; // int32
        constexpr uint32_t think_interval = 0x132C; // float32
        constexpr uint32_t m_fCurrentDamage = 0x1330; // float32
        constexpr uint32_t m_fDamageIncreasePerTick = 0x1334; // float32
        constexpr uint32_t m_nCurrentSlow = 0x1338; // int32
        constexpr uint32_t m_bAlone = 0x133C; // bool
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Attack_Speed {
        constexpr uint32_t attack_speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Evasion {
        constexpr uint32_t evasion_chance = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t aura_origin_x = 0x1320; // float32
        constexpr uint32_t aura_origin_y = 0x1324; // float32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Attack_Speed {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Evasion {
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t explosion_delay_time = 0x1324; // float32
        constexpr uint32_t explosion_stun_duration = 0x1328; // float32
        constexpr uint32_t explosion_damage = 0x132C; // int32
        constexpr uint32_t caster_team = 0x1330; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MagneticField_Thinker_Explosion {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t explosion_damage = 0x131C; // int32
        constexpr uint32_t explosion_stun_duration = 0x1320; // float32
        constexpr uint32_t explosion_delay_time = 0x1324; // float32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_MeteorShockwave_Thinker {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_bWindingUp = 0x1324; // bool
        constexpr uint32_t m_ViewerTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1360; // int32
        constexpr uint32_t radius = 0x1364; // int32
        constexpr uint32_t knockback_distance = 0x1368; // float32
        constexpr uint32_t knockback_duration = 0x136C; // float32
        constexpr uint32_t windup_time = 0x1370; // float32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Purge {
        constexpr uint32_t move_speed_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_SparkWraith_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t wraith_vision_radius = 0x131C; // int32
        constexpr uint32_t wraith_speed = 0x1320; // int32
        constexpr uint32_t activation_delay = 0x132C; // float32
        constexpr uint32_t scepter_activation_delay = 0x1330; // float32
        constexpr uint32_t think_interval = 0x1334; // float32
        constexpr uint32_t search_timer_min = 0x1338; // float32
        constexpr uint32_t search_timer_max = 0x133C; // float32
        constexpr uint32_t mini_stun_duration = 0x1340; // float32
        constexpr uint32_t move_speed_slow_pct = 0x1344; // int32
        constexpr uint32_t m_nSparkDamage = 0x1348; // int32
        constexpr uint32_t m_bActive = 0x134C; // bool
        constexpr uint32_t m_bOriginal = 0x134D; // bool
        constexpr uint32_t m_fSearchTimer = 0x1350; // float32
        constexpr uint32_t m_fRotationSpeed = 0x1354; // float32
        constexpr uint32_t m_nRotationDirection = 0x1358; // int32
        constexpr uint32_t m_vRotationCenter = 0x135C; // Vector
        constexpr uint32_t m_nFXIndex = 0x1368; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble {
        constexpr uint32_t damage_increase = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ArcWardenBoss_TempestDouble_Phase {
        constexpr uint32_t num_doubles = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Arcanist_Potion {
        constexpr uint32_t m_nCooldownReductionPct = 0x1318; // int32
        constexpr uint32_t m_nManaCostReductionPct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ascension_MagneticField_Evasion {
        constexpr uint32_t evasion_chance = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ascension_MagneticField_Thinker_Evasion {
        constexpr uint32_t radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Slow {
        constexpr uint32_t slow_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ascension_PlasmaField_Thinker {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_bWindingUp = 0x1324; // bool
        constexpr uint32_t m_ViewerTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1360; // int32
        constexpr uint32_t radius = 0x1364; // int32
        constexpr uint32_t damage_min = 0x1368; // int32
        constexpr uint32_t damage_max = 0x136C; // int32
        constexpr uint32_t slow_min = 0x1370; // int32
        constexpr uint32_t slow_max = 0x1374; // int32
        constexpr uint32_t slow_duration = 0x1378; // float32
        constexpr uint32_t windup_time = 0x137C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_AssaultCaptain_SunRay {
        constexpr uint32_t hp_cost_perc_per_second = 0x1318; // int32
        constexpr uint32_t beam_range = 0x131C; // int32
        constexpr uint32_t base_damage = 0x1320; // int32
        constexpr uint32_t base_heal = 0x1324; // int32
        constexpr uint32_t tick_interval = 0x1328; // float32
        constexpr uint32_t forward_move_speed = 0x132C; // float32
        constexpr uint32_t turn_rate_initial = 0x1330; // float32
        constexpr uint32_t turn_rate = 0x1334; // float32
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t self_turn_rate_percent = 0x133C; // int32
        constexpr uint32_t m_flCurrentTime = 0x1340; // float32
        constexpr uint32_t m_flLastDamageTime = 0x1344; // GameTime_t
        constexpr uint32_t m_flAccumulatedSelfDamage = 0x1348; // float32
        constexpr uint32_t m_bMovingForward = 0x134C; // bool
        constexpr uint32_t m_bTurningFast = 0x134D; // bool
        constexpr uint32_t m_flFacingTarget = 0x1350; // float32
        constexpr uint32_t hp_perc_damage = 0x1354; // float32
        constexpr uint32_t hp_perc_heal = 0x1358; // float32
        constexpr uint32_t m_nBeamFXIndex = 0x135C; // ParticleIndex_t
        constexpr uint32_t m_hVisionThinkers = 0x1360; // CHandle< C_BaseEntity >[8]
        constexpr uint32_t m_hBeamEnd = 0x1380; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bCreatedVisionThinkers = 0x1384; // bool
        constexpr uint32_t m_hBeamEndSound = 0x1388; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Bane_BrainSap_Invis {
        constexpr uint32_t invis_movement_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Bane_BrainSap_Knockback {
        constexpr uint32_t radius = 0x1348; // int32
        constexpr uint32_t heal_pct = 0x134C; // int32
        constexpr uint32_t slow_duration = 0x1350; // float32
        constexpr uint32_t m_nBrainSapDamage = 0x1354; // int32
        constexpr uint32_t m_vecHitTargets = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AghsFort_Bane_BrainSap_KnockbackSlow {
        constexpr uint32_t movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Bane_BrainSap_NightmareMirror {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Bane_FiendsGripThinker {
        constexpr uint32_t latch_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Bane_Invis_Crit {
        constexpr uint32_t invis_brain_sap_crit_pct = 0x1318; // int32
        constexpr uint32_t m_nCritPct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_BossDarkWillow_CursedCrown {
        constexpr uint32_t delay = 0x1318; // float32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t stun_radius = 0x1320; // int32
        constexpr uint32_t damage = 0x1324; // int32
        constexpr uint32_t m_fStartTime = 0x1328; // GameTime_t
    }

    namespace CDOTA_Modifier_AghsFort_BossDarkWillow_ShadowRealm_Buff {
        constexpr uint32_t m_fAddInterval = 0x1318; // float32
        constexpr uint32_t m_fNextAddTime = 0x131C; // GameTime_t
        constexpr uint32_t m_flStartTime = 0x1320; // GameTime_t
        constexpr uint32_t m_flDamageScale = 0x1324; // float32
        constexpr uint32_t duration = 0x1328; // float32
        constexpr uint32_t attack_logic_duration = 0x132C; // float32
        constexpr uint32_t speed_boost = 0x1330; // int32
        constexpr uint32_t num_adds = 0x1334; // int32
        constexpr uint32_t projectile_range = 0x1338; // int32
        constexpr uint32_t projectile_speed = 0x133C; // int32
        constexpr uint32_t projectile_width = 0x1340; // int32
    }

    namespace CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t totem_damage_percentage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_BossEarthshaker_EnchantTotem_LandDebuff {
        constexpr uint32_t landing_move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_BossEarthshaker_Fissure_Shard {
        constexpr uint32_t m_vStartPos = 0x1318; // Vector
        constexpr uint32_t m_vEndPos = 0x1324; // Vector
        constexpr uint32_t m_flEndTime = 0x1330; // GameTime_t
    }

    namespace CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Debuff {
        constexpr uint32_t linger_movement_slow = 0x1318; // int32
        constexpr uint32_t linger_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_BossWinterWyvern_Cold_Embrace_Thinker {
        constexpr uint32_t freeze_radius = 0x1318; // int32
        constexpr uint32_t freeze_damage = 0x131C; // int32
        constexpr uint32_t freeze_debuff_duration = 0x1320; // float32
        constexpr uint32_t freeze_delay = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy {
        constexpr uint32_t attack_rate = 0x1318; // float32
        constexpr uint32_t damage_percent = 0x131C; // int32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_bHasAttacked = 0x1324; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons {
        constexpr uint32_t model_scale = 0x1350; // int32
        constexpr uint32_t radius = 0x1354; // float32
        constexpr uint32_t splitshot_count = 0x1358; // int32
        constexpr uint32_t debuff_duration = 0x135C; // float32
        constexpr uint32_t pct_for_moveslow = 0x1360; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_BigSkeletons_Debuff {
        constexpr uint32_t m_fMovementSlow = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Buff {
        constexpr uint32_t m_fLifestealPct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Entrenchment_Debuff {
        constexpr uint32_t m_fSlowPct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningArmy_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
        constexpr uint32_t m_vFacePosition = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage {
        constexpr uint32_t m_vOriginalTarget = 0x1318; // Vector
        constexpr uint32_t wave_count = 0x1324; // int32
        constexpr uint32_t projectile_speed = 0x1328; // int32
        constexpr uint32_t projectile_width = 0x132C; // int32
        constexpr uint32_t m_flInterval = 0x1330; // float32
        constexpr uint32_t m_nArrowsFired = 0x1334; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_DamageReduction {
        constexpr uint32_t damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_BurningBarrage_Singe_Slow {
        constexpr uint32_t move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SearingArrows {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t m_bBonusAttack = 0x1330; // bool
        constexpr uint32_t damage_bonus = 0x1334; // int32
        constexpr uint32_t debuff_duration = 0x1338; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Debuff {
        constexpr uint32_t attack_slow = 0x1318; // int32
        constexpr uint32_t m_fIgniteThinkInterval = 0x131C; // float32
        constexpr uint32_t m_fIgniteDmgPerSec = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SearingArrows_Melter {
        constexpr uint32_t armor_reduction_per_arrow = 0x1318; // float32
        constexpr uint32_t m_nMaxStacks = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_BigSkeletons {
        constexpr uint32_t m_nInitialHealthBarOffset = 0x1318; // int32
        constexpr uint32_t colossus_model_scale = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletalColossus_Thinker {
        constexpr uint32_t lifetime = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletonColossus {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t cleave_damage_pct = 0x131C; // float32
        constexpr uint32_t cleave_starting_width = 0x1320; // int32
        constexpr uint32_t cleave_ending_width = 0x1324; // int32
        constexpr uint32_t cleave_distance = 0x1328; // int32
        constexpr uint32_t block_damage_ranged_active = 0x132C; // int32
        constexpr uint32_t block_damage_melee_active = 0x1330; // int32
        constexpr uint32_t hp_gain_per_caster_level = 0x1334; // int32
        constexpr uint32_t hp_regen_per_caster_level = 0x1338; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk {
        constexpr uint32_t m_vecWraithTouchedEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t move_speed_bonus_pct = 0x1340; // int32
        constexpr uint32_t bonus_magic_resist = 0x1344; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_Strafe {
        constexpr uint32_t m_fAttackSpeed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Caster {
        constexpr uint32_t max_stacks = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Clinkz_SkeletonWalk_WraithTouch_Enemy {
        constexpr uint32_t m_fAttackLoss = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Creature_Phoenix_FireSpiritCount {
        constexpr uint32_t spirit_count = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Creature_Phoenix_Sun {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t max_hero_attacks = 0x1320; // int32
        constexpr uint32_t max_hero_attacks_scepter = 0x1324; // int32
        constexpr uint32_t max_hero_attacks_required = 0x1328; // int32
        constexpr uint32_t caster_life_pct = 0x132C; // float32
        constexpr uint32_t m_hSecondaryTarget = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttackCount = 0x1334; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Creature_SpikedCarapace {
        constexpr uint32_t stun_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonNova {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Creature_Venomancer_PoisonSting_Applier {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Dawnbreaker_Starbreaker_CounterOrbital {
        constexpr uint32_t trigger_chance = 0x1318; // int32
        constexpr uint32_t cooldown = 0x131C; // float32
        constexpr uint32_t m_fLastProc = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_AghsFort_DragonPotion {
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x1318; // int32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1320; // CUtlSymbolLarge
        constexpr uint32_t bonus_movement_speed = 0x1328; // int32
        constexpr uint32_t bonus_attack_damage = 0x132C; // int32
        constexpr uint32_t bonus_attack_range = 0x1330; // int32
        constexpr uint32_t attack_projectile_speed = 0x1334; // int32
        constexpr uint32_t magic_resistance = 0x1338; // int32
        constexpr uint32_t model_scale = 0x133C; // int32
        constexpr uint32_t skin_number = 0x1340; // int32
        constexpr uint32_t flying_movement = 0x1344; // bool
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash {
        constexpr uint32_t m_bInterrupted = 0x1318; // bool
        constexpr uint32_t m_nProjectileID = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_BoulderSmash_Debuff {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_GeomagneticGrip {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t rock_damage = 0x131C; // int32
        constexpr uint32_t pull_units_per_second = 0x1320; // float32
        constexpr uint32_t pull_units_per_second_heroes = 0x1324; // float32
        constexpr uint32_t total_pull_distance = 0x1328; // float32
        constexpr uint32_t duration = 0x132C; // float32
        constexpr uint32_t m_bUsedStone = 0x1330; // bool
        constexpr uint32_t m_vDestination = 0x1334; // Vector
        constexpr uint32_t m_vLocation = 0x1340; // Vector
        constexpr uint32_t m_hHitEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_Magnetize {
        constexpr uint32_t rock_search_radius = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t damage_interval = 0x1320; // float32
        constexpr uint32_t rock_explosion_delay = 0x1324; // float32
        constexpr uint32_t damage_duration = 0x1328; // float32
        constexpr uint32_t cast_radius = 0x132C; // int32
        constexpr uint32_t rock_explosion_radius = 0x1330; // int32
        constexpr uint32_t m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t duration = 0x1350; // float32
        constexpr uint32_t m_bShowOverhead = 0x1354; // bool
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_Petrify {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_bHasBeenMagnetized = 0x131C; // bool
    }

    namespace CDOTA_Modifier_AghsFort_EarthSpiritBoss_StoneThinker {
        constexpr uint32_t m_bHasBeenMagnetized = 0x1318; // bool
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_ExplosiveBarrel {
        constexpr uint32_t m_nPreviewFX = 0x1318; // ParticleIndex_t
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t vision_radius = 0x1324; // int32
        constexpr uint32_t vision_duration = 0x1328; // float32
        constexpr uint32_t model_scale = 0x132C; // int32
        constexpr uint32_t bExploding = 0x1330; // bool
        constexpr uint32_t stun_duration = 0x1334; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Firefly {
        constexpr uint32_t pool_duration = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_ifirefly_Active = 0x1320; // int32
        constexpr uint32_t tree_radius = 0x1324; // int32
        constexpr uint32_t damage_pct_per_second = 0x1328; // int32
        constexpr uint32_t movement_speed = 0x132C; // int32
        constexpr uint32_t trail_placement_duration = 0x1330; // float32
        constexpr uint32_t burn_linger_duration = 0x1334; // float32
        constexpr uint32_t m_bActive = 0x1338; // bool
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_flStartTime = 0x1344; // GameTime_t
        constexpr uint32_t m_vLastFirePoolLoc = 0x1348; // Vector
        constexpr uint32_t m_vFirePoolLocations = 0x1358; // CUtlVector< Vector >
    }

    namespace CDOTA_Modifier_AghsFort_Firefly_Burn {
        constexpr uint32_t damage_pct_per_second = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t m_fNextDamageTick = 0x1324; // GameTime_t
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_BladeDance {
        constexpr uint32_t blade_dance_crit_mult = 0x1318; // int32
        constexpr uint32_t blade_dance_crit_chance = 0x131C; // int32
        constexpr uint32_t m_bDidBladeDanceCrit = 0x1320; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_BladeDance_Buff {
        constexpr uint32_t evasion_per_stack = 0x1318; // int32
        constexpr uint32_t movespeed_per_stack = 0x131C; // int32
        constexpr uint32_t evasion_bonus = 0x1320; // int32
        constexpr uint32_t movespeed_bonus = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_BladeFury {
        constexpr uint32_t blade_fury_radius = 0x1318; // int32
        constexpr uint32_t blade_fury_damage = 0x131C; // int32
        constexpr uint32_t blade_fury_damage_tick = 0x1320; // float32
        constexpr uint32_t movement_bonus = 0x1324; // int32
        constexpr uint32_t spark_radius = 0x1328; // int32
        constexpr uint32_t spark_damage_percent = 0x132C; // int32
        constexpr uint32_t m_bDestroyParentThinkerOnDeath = 0x1330; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_BladeFury_Force_Pull {
        constexpr uint32_t blade_fury_radius = 0x1318; // int32
        constexpr uint32_t pull_speed = 0x131C; // int32
        constexpr uint32_t pull_stop = 0x1320; // int32
        constexpr uint32_t pull_origin = 0x1324; // Vector
        constexpr uint32_t m_flLastThinkTime = 0x1330; // GameTime_t
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Double_Attack {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t bonus_attack_duration = 0x131C; // float32
        constexpr uint32_t bonus_attack_count = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
        constexpr uint32_t m_fBonusRange = 0x1328; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward {
        constexpr uint32_t healing_ward_aura_radius = 0x1318; // int32
        constexpr uint32_t healing_ward_heal_amount = 0x131C; // float32
        constexpr uint32_t healing_ward_interval = 0x1320; // float32
        constexpr uint32_t m_nTotalHealing = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Healing_Ward_Primed {
        constexpr uint32_t healing_ward_aura_radius = 0x1318; // int32
        constexpr uint32_t trigger_radius = 0x131C; // int32
        constexpr uint32_t search_radius = 0x1320; // int32
        constexpr uint32_t damage_percent = 0x1324; // int32
        constexpr uint32_t movement_bonus = 0x1328; // int32
        constexpr uint32_t power = 0x132C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Omnislash_Ignite {
        constexpr uint32_t slow_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t tick_damage = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward {
        constexpr uint32_t healing_ward_aura_radius = 0x1318; // int32
        constexpr uint32_t healing_ward_heal_amount = 0x131C; // float32
        constexpr uint32_t healing_ward_interval = 0x1320; // float32
        constexpr uint32_t m_nTotalRegen = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Juggernaut_Zen_Ward_Armor {
        constexpr uint32_t armor_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Fire_Cannons_Slow {
        constexpr uint32_t movespeed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageAbsorb {
        constexpr uint32_t m_iAccumulatedDamage = 0x1318; // int32
        constexpr uint32_t movespeed_bonus = 0x131C; // int32
        constexpr uint32_t ghostship_absorb = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_GhostShip_DamageDelay {
        constexpr uint32_t m_iAccumulatedDamage = 0x1318; // int32
        constexpr uint32_t m_flDuration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fire_Cannons {
        constexpr uint32_t m_flDistance = 0x1318; // float32
        constexpr uint32_t m_flSpeed = 0x131C; // float32
        constexpr uint32_t m_nNumCannons = 0x1320; // int32
        constexpr uint32_t m_flProjectileRadius = 0x1324; // float32
        constexpr uint32_t m_bGhostShipIsEntity = 0x1328; // bool
        constexpr uint32_t m_hGhostShipProjectile = 0x132C; // int32
        constexpr uint32_t m_hGhostShip = 0x1330; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Ghost_Ship_Fleet {
        constexpr uint32_t vCasterOrigin = 0x1318; // Vector
        constexpr uint32_t vEnd = 0x1324; // Vector
        constexpr uint32_t m_nHitCount = 0x1330; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_SeaSickness {
        constexpr uint32_t m_iAccumulatedDamage = 0x1318; // int32
        constexpr uint32_t m_flDuration = 0x131C; // float32
        constexpr uint32_t m_flMovespeedBonus = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Tidebringer {
        constexpr uint32_t m_bTidebringerAttack = 0x1318; // bool
        constexpr uint32_t cleave_starting_width = 0x131C; // int32
        constexpr uint32_t cleave_ending_width = 0x1320; // int32
        constexpr uint32_t cleave_distance = 0x1324; // int32
        constexpr uint32_t damage_bonus = 0x1328; // int32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t cleave_damage = 0x1330; // int32
        constexpr uint32_t m_bIgnoreCooldown = 0x1334; // bool
        constexpr uint32_t m_bDreadPirate = 0x1335; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Torrent {
        constexpr uint32_t flIntervalThinkTime = 0x1318; // float32
        constexpr uint32_t torrent_damage = 0x131C; // int32
        constexpr uint32_t m_flDamageScale = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Torrent_Slow {
        constexpr uint32_t movespeed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Torrent_Storm {
        constexpr uint32_t torrent_min_distance = 0x1318; // int32
        constexpr uint32_t torrent_max_distance = 0x131C; // int32
        constexpr uint32_t m_iExplosionQuadrant = 0x1320; // int32
        constexpr uint32_t m_vPosition = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_Torrent_Thinker {
        constexpr uint32_t m_bIsSquall = 0x1318; // bool
        constexpr uint32_t m_bIsSeaLegs = 0x1319; // bool
        constexpr uint32_t m_flRadius = 0x131C; // float32
        constexpr uint32_t m_bShowEnemies = 0x1320; // bool
        constexpr uint32_t m_bTorrentStorm = 0x1321; // bool
        constexpr uint32_t m_flDelay = 0x1324; // float32
        constexpr uint32_t m_flFireTime = 0x1328; // float32
        constexpr uint32_t m_bForcePosition = 0x132C; // bool
        constexpr uint32_t m_vStartPosition = 0x1330; // Vector
        constexpr uint32_t m_vEndPosition = 0x133C; // Vector
        constexpr uint32_t m_nPercentChanceOfGhostShip = 0x1348; // int32
        constexpr uint32_t m_hTarget = 0x134C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot {
        constexpr uint32_t armour_increase = 0x1318; // float32
        constexpr uint32_t speed_increase_pct = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_SeaLegs_Thinker {
        constexpr uint32_t m_vLastPosition = 0x1318; // Vector
        constexpr uint32_t m_hEntity = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Kunkka_XMarksTheSpot_Thinker {
        constexpr uint32_t m_vStartLoc = 0x1318; // Vector
        constexpr uint32_t m_bIsReflection = 0x1324; // bool
        constexpr uint32_t m_hEntity = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Lich_ChainFrost_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t slow_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Chain_Frost_Thinker {
        constexpr uint32_t m_nDamageToHeroes = 0x1318; // int32
        constexpr uint32_t m_nHeroesKilled = 0x131C; // int32
        constexpr uint32_t m_nJumps = 0x1320; // int32
        constexpr uint32_t m_hTarget = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAvoidTarget = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Lich_FrostNova_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t slow_attack_speed = 0x131C; // int32
        constexpr uint32_t is_primary_target = 0x1320; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Lich_FrostShield {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t bonus_health_regen = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Lich_FrostShield_Magic_Resistance_Debuff {
        constexpr uint32_t magic_resist_reduction = 0x1318; // int32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Lich_FrostShield_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Ice_Spire {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_Timer = 0x1320; // CountdownTimer
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Ice_Spire_Debuff {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t mana_drain = 0x131C; // int32
        constexpr uint32_t m_flIntervalRate = 0x1320; // float32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Self {
        constexpr uint32_t mana_drain = 0x1318; // int32
        constexpr uint32_t m_flIntervalRate = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Lich_Sinister_Gaze_Summon {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t base_damage_outgoing_percentage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Lifestealer_Enraged_Pulse {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_Eclipse {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t beams = 0x1320; // int32
        constexpr uint32_t hit_count = 0x1324; // int32
        constexpr uint32_t m_iBeamDamage = 0x1328; // int32
        constexpr uint32_t m_flBeamStun = 0x132C; // float32
        constexpr uint32_t vPosition = 0x1330; // Vector
        constexpr uint32_t m_bAreaTarget = 0x133C; // bool
        constexpr uint32_t m_bMoonWell = 0x133D; // bool
        constexpr uint32_t m_iTickCount = 0x1340; // int32
        constexpr uint32_t m_nMoonlightFXIndex = 0x1344; // ParticleIndex_t
        constexpr uint32_t m_HitTargets = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_HitAllies = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t beam_interval = 0x1378; // float32
        constexpr uint32_t m_flInterval = 0x137C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_Eclipse_IntoTheNight_Aura {
        constexpr uint32_t m_nMoveSpeed = 0x1318; // int32
        constexpr uint32_t m_nEvasion = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_GlaiveShield {
        constexpr uint32_t m_bSpiritsExplode = 0x1318; // bool
        constexpr uint32_t hit_radius = 0x131C; // int32
        constexpr uint32_t rotate_range = 0x1320; // int32
        constexpr uint32_t glaive_movement_rate = 0x1324; // int32
        constexpr uint32_t replenish_time = 0x1328; // float32
        constexpr uint32_t m_flRotation = 0x132C; // float32
        constexpr uint32_t m_flGlaiveRadius = 0x1330; // float32
        constexpr uint32_t m_flNextSpawn = 0x1334; // GameTime_t
        constexpr uint32_t m_bPaused = 0x1338; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LucentBeam_Moonglow {
        constexpr uint32_t bonus_aspd = 0x1318; // int32
        constexpr uint32_t lifesteal = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t night_bonus_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessingAura_MoonShield {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Active_Buff {
        constexpr uint32_t attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Leap {
        constexpr uint32_t leap_distance = 0x1318; // int32
        constexpr uint32_t leap_speed = 0x131C; // float32
        constexpr uint32_t leap_acceleration = 0x1320; // float32
        constexpr uint32_t leap_radius = 0x1324; // int32
        constexpr uint32_t search_range = 0x1328; // int32
        constexpr uint32_t damage_multiplier = 0x132C; // float32
        constexpr uint32_t m_flPowerLevelPct = 0x1330; // float32
        constexpr uint32_t m_bLaunched = 0x1334; // bool
        constexpr uint32_t m_vecHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_LunarRemnant {
        constexpr uint32_t m_nBonusDamage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonMark {
        constexpr uint32_t spell_resist_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_MoonShield_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_LunarBlessing_Moonfright {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_Luna_Lunar_Grace {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t night_multiplier = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Luna_MoonGlaive {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t bounces = 0x131C; // int32
        constexpr uint32_t damage_reduction_percent = 0x1320; // int32
        constexpr uint32_t bounce_pct = 0x1324; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_AghsFort_Luna_MoonGlaive_FX {
        constexpr uint32_t m_nMoonGlaiveFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Luna_MoonGlaive_Knockback {
        constexpr uint32_t attack_speed_slow = 0x1318; // int32
        constexpr uint32_t move_speed_slow_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Magnataur_Skewer_Bonus_Strength {
        constexpr uint32_t strength_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Mars_Gods_Rebuke_Strength_Buff {
        constexpr uint32_t strength_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Omniknight_Repel_Damage_Instance_Refraction {
        constexpr uint32_t damage_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_FireSpiritBurn {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
        constexpr uint32_t damage_per_second = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_FireSpiritCount {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t spirit_count = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack {
        constexpr uint32_t radius_pct_as_length = 0x1318; // float32
        constexpr uint32_t width = 0x131C; // int32
        constexpr uint32_t linger_duration = 0x1320; // float32
        constexpr uint32_t m_fLength = 0x1324; // float32
        constexpr uint32_t m_nBeamFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_hBeamEnd = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flLastHit = 0x1330; // GameTime_t
        constexpr uint32_t m_vecBurningTrees = 0x1338; // CUtlVector< C_BaseEntity* >
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_FlameRevenant_Attack_TreeFire_Thinker {
        constexpr uint32_t m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< C_BaseEntity >, GameTime_t > >
        constexpr uint32_t m_bCleanupWhenEmpty = 0x1330; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_IcarusDive {
        constexpr uint32_t m_vSource = 0x1318; // Vector
        constexpr uint32_t m_vTarget = 0x1324; // Vector
        constexpr uint32_t m_vDirection = 0x1330; // Vector
        constexpr uint32_t m_angDirection = 0x133C; // QAngle
        constexpr uint32_t m_flCurrentTime = 0x1348; // float32
        constexpr uint32_t dash_length = 0x134C; // int32
        constexpr uint32_t dash_width = 0x1350; // int32
        constexpr uint32_t hit_radius = 0x1354; // int32
        constexpr uint32_t burn_duration = 0x1358; // float32
        constexpr uint32_t dive_duration = 0x135C; // float32
        constexpr uint32_t damage_per_second = 0x1360; // int32
        constexpr uint32_t m_vecHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bSavedAlly = 0x1380; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_IcarusDiveBurn {
        constexpr uint32_t burn_tick_interval = 0x1318; // float32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t slow_movement_speed_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_SecondSun {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t attacks_to_kill = 0x1320; // int32
        constexpr uint32_t captain_attack_value = 0x1324; // int32
        constexpr uint32_t boss_attack_value = 0x1328; // int32
        constexpr uint32_t m_nAttackCount = 0x132C; // int32
        constexpr uint32_t m_nRadius = 0x1330; // int32
        constexpr uint32_t m_fSecondSunRadiusPct = 0x1334; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_Sun {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t attacks_to_kill = 0x1320; // int32
        constexpr uint32_t captain_attack_value = 0x1324; // int32
        constexpr uint32_t boss_attack_value = 0x1328; // int32
        constexpr uint32_t m_hSecondaryTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bHasExpelCoreShard = 0x1330; // bool
        constexpr uint32_t m_nAttackCount = 0x1334; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_SunRay {
        constexpr uint32_t hp_cost_pct = 0x1318; // float32
        constexpr uint32_t beam_range = 0x131C; // int32
        constexpr uint32_t base_damage = 0x1320; // int32
        constexpr uint32_t base_heal = 0x1324; // int32
        constexpr uint32_t tick_interval = 0x1328; // float32
        constexpr uint32_t forward_move_speed = 0x132C; // float32
        constexpr uint32_t turn_rate_initial = 0x1330; // float32
        constexpr uint32_t turn_rate = 0x1334; // float32
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t m_flCurrentTime = 0x133C; // float32
        constexpr uint32_t m_flAccumulatedSelfDamage = 0x1340; // float32
        constexpr uint32_t m_bMovingForward = 0x1344; // bool
        constexpr uint32_t m_bTurningFast = 0x1345; // bool
        constexpr uint32_t m_flFacingTarget = 0x1348; // float32
        constexpr uint32_t hp_perc_heal = 0x134C; // float32
        constexpr uint32_t m_nBeamFXIndex = 0x1350; // ParticleIndex_t
        constexpr uint32_t m_hVisionThinkers = 0x1354; // CHandle< C_BaseEntity >[8]
        constexpr uint32_t m_hBeamEnd = 0x1374; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bCreatedVisionThinkers = 0x1378; // bool
        constexpr uint32_t m_hBeamEndSound = 0x137C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vecDispelledAllies = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AghsFort_Phoenix_Sun_Debuff {
        constexpr uint32_t damage_per_sec = 0x1318; // int32
        constexpr uint32_t damage_interval = 0x131C; // float32
        constexpr uint32_t aura_radius = 0x1320; // int32
        constexpr uint32_t m_fRadius = 0x1324; // float32
        constexpr uint32_t m_fSecondSunRadiusPct = 0x1328; // float32
        constexpr uint32_t m_fNextDamageTime = 0x132C; // GameTime_t
        constexpr uint32_t m_fLastThinkTime = 0x1330; // GameTime_t
        constexpr uint32_t m_bHasHorizonAbility = 0x1334; // bool
        constexpr uint32_t m_nHorizonPushDistance = 0x1338; // int32
        constexpr uint32_t m_fHorizonPushInterval = 0x133C; // float32
        constexpr uint32_t m_fNextHorizonPushTime = 0x1340; // GameTime_t
        constexpr uint32_t m_nHorizonFX = 0x1344; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_PlayerTransform {
        constexpr uint32_t m_nCourierItemId = 0x1318; // itemid_t
        constexpr uint32_t m_ModelNameOfDisguise = 0x1320; // CUtlString
        constexpr uint32_t m_nMoveSpeed = 0x1330; // int32
        constexpr uint32_t m_nDisguisedSpeed = 0x1334; // int32
        constexpr uint32_t m_nDisguiseEffectIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_hCourier = 0x133C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsFlyingCourier = 0x1340; // bool
        constexpr uint32_t s_pszDonkeyDisguise = 0x1348; // char*
        constexpr uint32_t invul_duration = 0x1350; // float32
        constexpr uint32_t m_bParticlesSpawned = 0x1354; // bool
    }

    namespace CDOTA_Modifier_AghsFort_PoisonNova_Creature_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1338; // int32
        constexpr uint32_t radius = 0x133C; // int32
        constexpr uint32_t start_radius = 0x1340; // int32
        constexpr uint32_t duration = 0x1344; // float32
    }

    namespace CDOTA_Modifier_AghsFort_QueenOfPain_ShadowStrike {
        constexpr uint32_t duration_damage = 0x1318; // int32
        constexpr uint32_t duration_heal = 0x131C; // int32
        constexpr uint32_t movement_slow = 0x1320; // int32
        constexpr uint32_t m_SlowInterval = 0x1328; // CountdownTimer
        constexpr uint32_t m_flSlowStep = 0x1340; // float32
        constexpr uint32_t m_flSlowStepStep = 0x1344; // float32
    }

    namespace CDOTA_Modifier_AghsFort_RestorativeFlower {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t heal = 0x131C; // int32
        constexpr uint32_t vision_radius = 0x1320; // int32
        constexpr uint32_t vision_duration = 0x1324; // float32
        constexpr uint32_t model_scale = 0x1328; // int32
        constexpr uint32_t bExploding = 0x132C; // bool
        constexpr uint32_t stun_duration = 0x1330; // float32
        constexpr uint32_t m_nFXAmbient = 0x1334; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_RockGolem_Avalanche {
        constexpr uint32_t m_pHeroesHit = 0x1318; // CUtlVector< C_DOTA_BaseNPC* >
        constexpr uint32_t radius = 0x1330; // int32
        constexpr uint32_t total_duration = 0x1334; // float32
        constexpr uint32_t stun_duration = 0x1338; // float32
        constexpr uint32_t tick_count = 0x133C; // int32
        constexpr uint32_t m_damage = 0x1340; // int32
        constexpr uint32_t m_nTicks = 0x1344; // int32
    }

    namespace CDOTA_Modifier_AghsFort_ShadowShaman_Shackles {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t total_damage = 0x131C; // float32
        constexpr uint32_t channel_time = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_ShadowWaveEffectPotion {
        constexpr uint32_t m_iCurJumpCount = 0x1318; // int32
        constexpr uint32_t m_vCurTargetLoc = 0x131C; // Vector
        constexpr uint32_t m_hHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_fProcChance = 0x1340; // float32
        constexpr uint32_t m_nCastRange = 0x1344; // int32
        constexpr uint32_t m_nBounceRadius = 0x1348; // int32
        constexpr uint32_t m_nDamageRadius = 0x134C; // int32
        constexpr uint32_t m_nDamage = 0x1350; // int32
        constexpr uint32_t m_nMaxTargets = 0x1354; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Shadow_Demon_Shadow_Poison {
        constexpr uint32_t stack_damage = 0x1318; // float32
        constexpr uint32_t bonus_stack_damage = 0x131C; // float32
        constexpr uint32_t max_multiply_stacks = 0x1320; // int32
        constexpr uint32_t release_at_max_stacks = 0x1324; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Headshot {
        constexpr uint32_t proc_chance = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t knockback_distance = 0x1324; // int32
        constexpr uint32_t m_fLastStunProcTime = 0x1328; // GameTime_t
        constexpr uint32_t m_vHeadshotRecords = 0x1330; // CUtlVector< int16 >
        constexpr uint32_t m_vHeadshotAssassinateRecords = 0x1348; // CUtlVector< int16 >
        constexpr uint32_t m_nCritPct = 0x1360; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Headshot_ArmorReduction {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Headshot_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t slow_vs_considered_hero = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Shrapnel_AttackSpeed {
        constexpr uint32_t value = 0x1318; // int32
        constexpr uint32_t value2 = 0x131C; // float32
        constexpr uint32_t m_nAttackSpeedBonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Slow {
        constexpr uint32_t m_fAccumulatedDamage = 0x1318; // float32
        constexpr uint32_t shrapnel_damage = 0x131C; // int32
        constexpr uint32_t slow_movement_speed = 0x1320; // int32
        constexpr uint32_t miss_chance = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_Shrapnel_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t damage_delay = 0x1320; // float32
        constexpr uint32_t m_nShrapnelPct = 0x1324; // int32
        constexpr uint32_t m_bExploded = 0x1328; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_TakeAim {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t active_attack_range_multiplier = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_TakeAim_ArmorReduction {
        constexpr uint32_t value2 = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_TakeAim_Bonus {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t m_nAttackSpeedPerAttack = 0x131C; // int32
        constexpr uint32_t m_nShrapnelPct = 0x1320; // int32
        constexpr uint32_t m_bNoCollision = 0x1324; // bool
        constexpr uint32_t m_vecArtilleryEnemies = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AghsFort_Sniper_TakeAim_RapidFire {
        constexpr uint32_t value2 = 0x1318; // int32
        constexpr uint32_t value3 = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Dawnbreaker_Solar_Guardian_DeathOfAStar_Active {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bPassive = 0x131C; // bool
        constexpr uint32_t m_flCooldown = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride {
        constexpr uint32_t grab_radius = 0x1318; // int32
        constexpr uint32_t m_hLoadedUnit = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Special_Gyrocopter_Homing_Missile_Ride_LoadedUnit {
        constexpr uint32_t hit_radius = 0x1318; // int32
        constexpr uint32_t timeout_duration = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Magnataur_Shockwave_Damage_Reduction {
        constexpr uint32_t damage_reduction_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Omniknight_Purification_Cooldown_Reduction {
        constexpr uint32_t cooldown_reduction_per_hit = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Special_PhantomAssassin_CoupDeGrace_BloodyDebuff {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Phoenix_FireSpirits_Artillery_Carry {
        constexpr uint32_t unit_position_offset = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Ally {
        constexpr uint32_t m_hSaviorEnt = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t ally_position_offset = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Phoenix_IcarusDive_Savior_Invis {
        constexpr uint32_t duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Phoenix_SunRay_GammaRay_Slow {
        constexpr uint32_t move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_QueenOfPain_Blink_AttackSpeed {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Autoattack {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Snapfire_MortimerKisses_Incoming_Damage_Reduction {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Templar_Assassin_PsiBlades_AutoAttack {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Undying_ConsumeZombies_Buff {
        constexpr uint32_t bonus_move_speed_per_stack = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed_per_stack = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_Armor {
        constexpr uint32_t value2 = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Ursa_Enrage_AttackSpeed {
        constexpr uint32_t value2 = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDidSetAttackTarget = 0x131C; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Special_Ursa_Overpower_Taunt_Armor {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_ImpactSlow {
        constexpr uint32_t move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_VoidSpirit_AetherRemnant_Bowling_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Special_WitchDoctor_DeathWard_Damage_Resist {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion {
        constexpr uint32_t damage_reflection_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Spectre_ActiveDispersion_Thinker {
        constexpr uint32_t m_fDamage = 0x1318; // float32
        constexpr uint32_t m_fLastRadius = 0x131C; // float32
        constexpr uint32_t m_fCurRadius = 0x1320; // float32
        constexpr uint32_t m_fLastThink = 0x1324; // GameTime_t
        constexpr uint32_t m_bContracting = 0x1328; // bool
        constexpr uint32_t m_ViewerTimer = 0x1330; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1348; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1368; // int32
        constexpr uint32_t radius = 0x136C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_StonehallGeneral_OverwhelmingOdds_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t max_steps = 0x131C; // int32
        constexpr uint32_t damage_interval = 0x1320; // float32
        constexpr uint32_t m_nNumSteps = 0x1324; // int32
        constexpr uint32_t m_nRadiusStep = 0x1328; // int32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t m_vDir = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_SwampSickness {
        constexpr uint32_t slow_percent = 0x1318; // int32
        constexpr uint32_t m_bInRiver = 0x131C; // bool
    }

    namespace CDOTA_Modifier_AghsFort_TorrentEffectPotion_Thinker {
        constexpr uint32_t m_fProcChance = 0x1318; // float32
        constexpr uint32_t m_nRadius = 0x131C; // int32
        constexpr uint32_t m_nMovespeedBonus = 0x1320; // int32
        constexpr uint32_t m_fStunDuration = 0x1324; // float32
        constexpr uint32_t m_fSlowDuration = 0x1328; // float32
        constexpr uint32_t m_fDelay = 0x132C; // float32
        constexpr uint32_t m_nTorrentDamage = 0x1330; // int32
    }

    namespace CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent {
        constexpr uint32_t m_nTorrentDamage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_TorrentEffectPotion_Torrent_Slow {
        constexpr uint32_t m_nMovespeedBonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Tower_BlastWave_Thinker {
        constexpr uint32_t damage_pct = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_ViewerTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1360; // int32
        constexpr uint32_t radius = 0x1364; // int32
    }

    namespace CDOTA_Modifier_AghsFort_TrapRoom_Hookshot {
        constexpr uint32_t speed = 0x1320; // int32
        constexpr uint32_t duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise {
        constexpr uint32_t m_RevealTimer = 0x1318; // CountdownTimer
        constexpr uint32_t m_InvisAttackTimer = 0x1330; // CountdownTimer
        constexpr uint32_t m_CooldownTimer = 0x1348; // CountdownTimer
    }

    namespace CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Root {
        constexpr uint32_t m_iEntangleDamage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_TreantMiniboss_NaturesGuise_Tree_Walking {
        constexpr uint32_t movement_bonus = 0x1318; // int32
        constexpr uint32_t regen_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Decay_Buff {
        constexpr uint32_t str_stolen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Decay_BuffCounter {
        constexpr uint32_t m_fStrengthStolen = 0x1318; // float32
        constexpr uint32_t model_scale_per_strength = 0x131C; // float32
        constexpr uint32_t model_scale_max = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Decay_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
        constexpr uint32_t extra_decays = 0x1320; // int32
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t decay_strength_percent = 0x1328; // int32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Undying_FleshGolem {
        constexpr uint32_t str_percentage = 0x1318; // int32
        constexpr uint32_t movement_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_FleshGolem_PlagueAura {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t tick_rate = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_FleshGolem_Slow {
        constexpr uint32_t damage_amp = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_SoulRipWard {
        constexpr uint32_t ward_radius = 0x1318; // int32
        constexpr uint32_t explosion_damage = 0x131C; // int32
        constexpr uint32_t taunt_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_SoulRip_Share_Strength {
        constexpr uint32_t str_gain = 0x1318; // float32
        constexpr uint32_t model_scale = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Bunker {
        constexpr uint32_t m_hLoadedUnit = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t heal_percent_per_tick = 0x131C; // float32
        constexpr uint32_t tombstone_grab_radius = 0x1320; // int32
        constexpr uint32_t m_nBunkerEnterFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_HP {
        constexpr uint32_t tombstone_health = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t zombie_interval = 0x131C; // float32
        constexpr uint32_t spawn_at_parent = 0x1320; // int32
        constexpr uint32_t remove_on_death = 0x1324; // int32
        constexpr uint32_t knockback_duration = 0x1328; // float32
        constexpr uint32_t knockback_distance = 0x132C; // int32
        constexpr uint32_t knockback_height = 0x1330; // int32
        constexpr uint32_t spawn_distance = 0x1334; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathlust {
        constexpr uint32_t bonus_move_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t health_threshold_pct = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t m_hTombstoneSourceAbility = 0x1324; // CHandle< C_DOTABaseAbility >
        constexpr uint32_t m_hChaseUnit = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t m_flDecrementTime = 0x131C; // float32
    }

    namespace CDOTA_Modifier_AghsFort_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Earthshock {
        constexpr uint32_t m_nMissChance = 0x1318; // int32
        constexpr uint32_t m_bAddOverpower = 0x131C; // bool
        constexpr uint32_t m_flOverpowerDuration = 0x1320; // float32
        constexpr uint32_t m_nNumOverpowerAttacks = 0x1324; // int32
        constexpr uint32_t movement_slow = 0x1328; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Earthshock_DeepInvis {
        constexpr uint32_t m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Enrage {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Enrage_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Enrage_Magic_Immunity {
        constexpr uint32_t m_nModelScale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes {
        constexpr uint32_t damage_per_stack = 0x1318; // int32
        constexpr uint32_t bonus_reset_time = 0x131C; // float32
        constexpr uint32_t bonus_reset_time_roshan = 0x1320; // float32
        constexpr uint32_t max_swipe_stack = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Fury_Swipes_Damage_Increase {
        constexpr uint32_t damage_per_stack = 0x1318; // int32
        constexpr uint32_t m_nArmorReductionPerStack = 0x131C; // int32
        constexpr uint32_t m_nLifestealPerStack = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Overpower {
        constexpr uint32_t attack_speed_bonus_pct = 0x1318; // int32
        constexpr uint32_t m_nEarthshockAttacks = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Ursa_Overpower_Evasion {
        constexpr uint32_t value2 = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Venomancer_PoisonSting {
        constexpr uint32_t m_iDamage = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t m_nTicksRemaining = 0x1320; // int32
        constexpr uint32_t m_flAttackDamage = 0x1324; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_vFacingDir = 0x131C; // Vector
        constexpr uint32_t m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bTriggered = 0x132C; // bool
        constexpr uint32_t m_flCurThink = 0x1330; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnantUnit_Truesight {
        constexpr uint32_t m_nRadius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Pull {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nPlayerID = 0x131C; // PlayerID_t
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_Unit {
        constexpr uint32_t m_vFacingDir = 0x1318; // Vector
        constexpr uint32_t m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nBeamFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_nViewerIDs = 0x1348; // CUtlVector< int32 >
        constexpr uint32_t remnant_watch_distance = 0x1360; // int32
        constexpr uint32_t remnant_watch_radius = 0x1364; // int32
        constexpr uint32_t duration = 0x1368; // float32
        constexpr uint32_t watch_path_vision_radius = 0x136C; // int32
        constexpr uint32_t impact_damage = 0x1370; // int32
        constexpr uint32_t pull_duration = 0x1374; // float32
        constexpr uint32_t activation_delay = 0x1378; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AetherRemnant_WatchThinker {
        constexpr uint32_t remnant_watch_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Caster {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_AstralStep_Debuff {
        constexpr uint32_t m_nFXStackIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t movement_slow_pct = 0x131C; // int32
        constexpr uint32_t pop_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_Dissimilate_Phase {
        constexpr uint32_t m_vFirstPortalPos = 0x1318; // Vector
        constexpr uint32_t m_vecDestinations = 0x1328; // CUtlVector< Vector >
        constexpr uint32_t m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_nCurrentDestinationIndex = 0x1370; // int32
        constexpr uint32_t m_nClosestIndexPosToClick = 0x1374; // int32
        constexpr uint32_t m_nPortalHeightOffset = 0x1378; // int32
        constexpr uint32_t m_szAlliesPortalFX = 0x1380; // char*
        constexpr uint32_t m_szEnemiesPortalFX = 0x1388; // char*
        constexpr uint32_t m_nPortalRadius = 0x1390; // int32
        constexpr uint32_t m_nPortalPadding = 0x1394; // int32
        constexpr uint32_t m_nFinalImpactDamageRadius = 0x1398; // int32
        constexpr uint32_t m_nFinalImpactFXRadius = 0x139C; // int32
        constexpr uint32_t destination_fx_radius = 0x13A0; // int32
        constexpr uint32_t damage_radius = 0x13A4; // int32
        constexpr uint32_t portals_per_ring = 0x13A8; // int32
        constexpr uint32_t angle_per_ring_portal = 0x13AC; // int32
        constexpr uint32_t first_ring_distance_offset = 0x13B0; // int32
        constexpr uint32_t debuff_duration = 0x13B4; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_PhysicalBuff {
        constexpr uint32_t base_absorb_amount = 0x1318; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpiritBoss_ResonantPulse_Ring {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1340; // int32
        constexpr uint32_t radius = 0x1344; // int32
        constexpr uint32_t damage = 0x1348; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_vFacingDir = 0x131C; // Vector
        constexpr uint32_t m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bTriggered = 0x132C; // bool
        constexpr uint32_t m_flCurThink = 0x1330; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnantUnit_Truesight {
        constexpr uint32_t m_nRadius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_PhantomAttack_Crit {
        constexpr uint32_t m_nCritPercent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Pull {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nPlayerID = 0x131C; // PlayerID_t
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AetherRemnant_Unit {
        constexpr uint32_t m_bActivated = 0x1318; // bool
        constexpr uint32_t m_vFacingDir = 0x131C; // Vector
        constexpr uint32_t m_vecWatchPositions = 0x1328; // CUtlVector< Vector >
        constexpr uint32_t m_nBeamFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_nViewerIDs = 0x1348; // CUtlVector< int32 >
        constexpr uint32_t remnant_watch_distance = 0x1360; // int32
        constexpr uint32_t remnant_watch_radius = 0x1364; // int32
        constexpr uint32_t duration = 0x1368; // float32
        constexpr uint32_t watch_path_vision_radius = 0x136C; // int32
        constexpr uint32_t impact_damage = 0x1370; // int32
        constexpr uint32_t pull_duration = 0x1374; // float32
        constexpr uint32_t activation_delay = 0x1378; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Caster {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Debuff {
        constexpr uint32_t m_nFXStackIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_fVoidMarkPct = 0x131C; // float32
        constexpr uint32_t movement_slow_pct = 0x1320; // int32
        constexpr uint32_t pop_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_AstralStep_Vacuum_Motion {
        constexpr uint32_t m_fVacuumSpeed = 0x1318; // float32
        constexpr uint32_t m_fStunDuration = 0x131C; // float32
        constexpr uint32_t m_vPullLoc = 0x1320; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase {
        constexpr uint32_t m_vFirstPortalPos = 0x1318; // Vector
        constexpr uint32_t m_vecDestinations = 0x1328; // CUtlVector< Vector >
        constexpr uint32_t m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_nCurrentDestinationIndex = 0x1370; // int32
        constexpr uint32_t m_nClosestIndexPosToClick = 0x1374; // int32
        constexpr uint32_t m_nPortalHeightOffset = 0x1378; // int32
        constexpr uint32_t m_szAlliesPortalFX = 0x1380; // char*
        constexpr uint32_t m_szEnemiesPortalFX = 0x1388; // char*
        constexpr uint32_t m_nPortalRadius = 0x1390; // int32
        constexpr uint32_t m_nPortalPadding = 0x1394; // int32
        constexpr uint32_t m_nFinalImpactDamageRadius = 0x1398; // int32
        constexpr uint32_t m_nFinalImpactFXRadius = 0x139C; // int32
        constexpr uint32_t destination_fx_radius = 0x13A0; // int32
        constexpr uint32_t damage_radius = 0x13A4; // int32
        constexpr uint32_t portals_per_ring = 0x13A8; // int32
        constexpr uint32_t angle_per_ring_portal = 0x13AC; // int32
        constexpr uint32_t first_ring_distance_offset = 0x13B0; // int32
        constexpr uint32_t debuff_duration = 0x13B4; // float32
        constexpr uint32_t damage = 0x13B8; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_Dissimilate_Phase_Ally {
        constexpr uint32_t damage_radius = 0x1318; // int32
        constexpr uint32_t debuff_duration = 0x131C; // float32
        constexpr uint32_t destination_fx_radius = 0x1320; // int32
        constexpr uint32_t damage = 0x1324; // int32
        constexpr uint32_t m_vExitPos = 0x1328; // Vector
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Cadence {
        constexpr uint32_t m_fSpellAmp = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_PhysicalBuff {
        constexpr uint32_t base_absorb_amount = 0x1318; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_Ring {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_EnemiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_AlliesHit = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1358; // int32
        constexpr uint32_t radius = 0x135C; // int32
        constexpr uint32_t damage = 0x1360; // int32
    }

    namespace CDOTA_Modifier_AghsFort_VoidSpirit_ResonantPulse_SpellAmped {
        constexpr uint32_t m_nSpellAmp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AghsFort_Watch_Tower {
        constexpr uint32_t m_nState = 0x1318; // TowerState_t
        constexpr uint32_t m_flYaw = 0x131C; // float32
        constexpr uint32_t m_nCaptureDuration = 0x1320; // int32
        constexpr uint32_t m_flEffectiveCaptureStartTime = 0x1324; // GameTime_t
        constexpr uint32_t m_nCapturingPlayerCount = 0x1328; // int32
        constexpr uint32_t m_flCaptureProgress = 0x132C; // float32
        constexpr uint32_t m_iCapturingTeam = 0x1330; // int32
        constexpr uint32_t m_nFxOutpostAmbient = 0x1334; // ParticleIndex_t
        constexpr uint32_t m_flDestroyTime = 0x1338; // GameTime_t
        constexpr uint32_t m_flAutoChannelCompleteTime = 0x133C; // GameTime_t
        constexpr uint32_t m_bAscensionLevelPicker = 0x1340; // bool
        constexpr uint32_t m_nEliteChallengeLevel = 0x1344; // int32
        constexpr uint32_t m_strNextRoomName = 0x1348; // CUtlString
        constexpr uint32_t m_strNextEncounterName = 0x1350; // CUtlString
        constexpr uint32_t m_bStartedBeamFacing = 0x1358; // bool
    }

    namespace CDOTA_Modifier_AghsFort_Waveblaster_Leap {
        constexpr uint32_t leap_speed = 0x1318; // float32
        constexpr uint32_t leap_acceleration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura {
        constexpr uint32_t aura_disable_range = 0x1318; // int32
        constexpr uint32_t aura_range = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t m_nBonusFactor = 0x1324; // int32
        constexpr uint32_t m_fLastEnableTime = 0x1328; // GameTime_t
        constexpr uint32_t m_nFxIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort2_DrowRanger_Marksmanship_Aura_Bonus {
        constexpr uint32_t aura_agility_multiplier = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot {
        constexpr uint32_t arrow_width = 0x1318; // int32
        constexpr uint32_t arrow_speed = 0x131C; // float32
        constexpr uint32_t range = 0x1320; // int32
        constexpr uint32_t wave_count = 0x1324; // int32
        constexpr uint32_t wave_delay = 0x1328; // float32
        constexpr uint32_t arrow_count_per_wave = 0x132C; // int32
        constexpr uint32_t arrow_delay = 0x1330; // float32
        constexpr uint32_t per_arrow_angle = 0x1334; // float32
        constexpr uint32_t m_fYawOffset = 0x1338; // float32
        constexpr uint32_t m_iWaveIndex = 0x133C; // int32
        constexpr uint32_t m_iArrowIndex = 0x1340; // int32
        constexpr uint32_t m_vTarget = 0x1344; // Vector
        constexpr uint32_t m_vWaveAngle = 0x1350; // QAngle
        constexpr uint32_t m_flInterval = 0x135C; // float32
        constexpr uint32_t m_flNextThink = 0x1360; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_Buff {
        constexpr uint32_t damage_percent = 0x1318; // int32
        constexpr uint32_t knockback_distance = 0x131C; // int32
        constexpr uint32_t knockback_duration = 0x1320; // float32
        constexpr uint32_t move_speed_percent = 0x1324; // int32
        constexpr uint32_t max_move_speed_percent = 0x1328; // int32
        constexpr uint32_t model_scale = 0x132C; // int32
        constexpr uint32_t max_model_scale = 0x1330; // int32
        constexpr uint32_t m_bActive = 0x1334; // bool
    }

    namespace CDOTA_Modifier_Aghsfort2_DrowRanger_Multishot_SideLine {
        constexpr uint32_t m_iWaveIndex = 0x1318; // int32
        constexpr uint32_t m_fYawOffset = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_ArcWardenBoss_SparkWraith_Missile {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t hero_damage = 0x1320; // int32
        constexpr uint32_t acceleration = 0x1324; // int32
        constexpr uint32_t min_damage = 0x1328; // int32
        constexpr uint32_t max_distance = 0x132C; // int32
        constexpr uint32_t pre_flight_time = 0x1330; // float32
        constexpr uint32_t stun_duration = 0x1334; // float32
        constexpr uint32_t m_nMissileDamage = 0x1338; // int32
        constexpr uint32_t m_nTeamNumber = 0x133C; // int32
        constexpr uint32_t speed = 0x1348; // float32
        constexpr uint32_t m_hAttachTarget = 0x134C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vStartPosition = 0x1350; // Vector
        constexpr uint32_t m_EnemyVision = 0x1360; // CountdownTimer
        constexpr uint32_t m_MoveTime = 0x1378; // CountdownTimer
    }

    namespace CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Burn {
        constexpr uint32_t burn_damage = 0x1318; // float32
        constexpr uint32_t burn_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Firestorm_Thinker {
        constexpr uint32_t wave_damage = 0x1318; // int32
        constexpr uint32_t wave_count = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t summon_count = 0x1324; // int32
        constexpr uint32_t wave_interval = 0x1328; // float32
        constexpr uint32_t burn_duration = 0x132C; // float32
        constexpr uint32_t first_wave_delay = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_FX {
        constexpr uint32_t m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Aziyog_Underlord_Portal_Warp_Channel {
        constexpr uint32_t m_nfxTargetTp = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nfxAmbientFx = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal1 = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal2 = 0x1328; // ParticleIndex_t
        constexpr uint32_t animation_rate = 0x132C; // float32
        constexpr uint32_t stop_distance = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_Enfeeble_DamageStealBuff {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_Enfeeble_Effect {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t heal_reduction = 0x131C; // int32
        constexpr uint32_t cast_reduction = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_FiendsGrip {
        constexpr uint32_t fiend_grip_mana_drain = 0x1318; // int32
        constexpr uint32_t fiend_grip_boost_lifesteal_multiplier = 0x131C; // int32
        constexpr uint32_t fiend_grip_damage = 0x1320; // int32
        constexpr uint32_t fiend_grip_spread_radius = 0x1324; // int32
        constexpr uint32_t fiend_grip_tick_interval = 0x1328; // float32
        constexpr uint32_t m_flLastSpreadTime = 0x132C; // GameTime_t
        constexpr uint32_t m_bThinkerSource = 0x1330; // bool
        constexpr uint32_t m_bRequiresChanneling = 0x1331; // bool
        constexpr uint32_t m_bPrimaryGrip = 0x1332; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_FiendsGrip_Cast_Illusion {
        constexpr uint32_t fiend_grip_mana_drain = 0x1318; // int32
        constexpr uint32_t fiend_grip_tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_Nightmare {
        constexpr uint32_t m_bSweetDreams = 0x1318; // bool
        constexpr uint32_t m_bConfusion = 0x1319; // bool
        constexpr uint32_t m_bSelfBreakAvailable = 0x131A; // bool
        constexpr uint32_t m_bNoStatusEffect = 0x131B; // bool
        constexpr uint32_t m_nSource = 0x131C; // int32
        constexpr uint32_t animation_rate = 0x1320; // float32
        constexpr uint32_t m_flNextNightmareDamageTime = 0x1324; // GameTime_t
        constexpr uint32_t m_flAccumNightmareDamage = 0x1328; // float32
        constexpr uint32_t movespeed_pct = 0x132C; // int32
        constexpr uint32_t attack_speed = 0x1330; // int32
        constexpr uint32_t model_scale = 0x1334; // int32
        constexpr uint32_t m_hConfusionAttackTarget = 0x1338; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Bane_Nightmare_Invulnerable {
        constexpr uint32_t m_nMoveSpeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Clinkz_BurningArmy_Entrenchment {
        constexpr uint32_t m_fSlowPct = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // float32
        constexpr uint32_t think_interval = 0x1320; // float32
        constexpr uint32_t linger_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
        constexpr uint32_t projectile_speed = 0x131C; // int32
        constexpr uint32_t travel_speed_pct = 0x1320; // int32
        constexpr uint32_t m_nMaxRange = 0x1324; // int32
        constexpr uint32_t m_vStartPoint = 0x1328; // Vector
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x1334; // Vector
        constexpr uint32_t m_vEndPointShard = 0x1340; // Vector
        constexpr uint32_t m_nStatusFXIndex = 0x134C; // ParticleIndex_t
        constexpr uint32_t flare_radius = 0x1350; // int32
        constexpr uint32_t bHasStartedBurning = 0x1354; // bool
        constexpr uint32_t flare_debuff_duration = 0x1358; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Celestial_Hammer_Thinker {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t trail_duration = 0x131C; // float32
        constexpr uint32_t flare_radius = 0x1320; // int32
        constexpr uint32_t m_nProjectileHandle = 0x1324; // int32
        constexpr uint32_t m_hHavenThinker = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge {
        constexpr uint32_t move_slow = 0x1318; // int32
        constexpr uint32_t burn_damage = 0x131C; // int32
        constexpr uint32_t burn_interval = 0x1320; // float32
        constexpr uint32_t m_hInflictor = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Converge_Thinker {
        constexpr uint32_t flare_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_hInflictor = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Attack_Bonus {
        constexpr uint32_t attack_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Caster {
        constexpr uint32_t swipe_radius = 0x1318; // int32
        constexpr uint32_t swipe_damage = 0x131C; // int32
        constexpr uint32_t smash_radius = 0x1320; // int32
        constexpr uint32_t smash_damage = 0x1324; // int32
        constexpr uint32_t m_nCurrentSpeed = 0x1328; // int32
        constexpr uint32_t flSwipeInterval = 0x132C; // float32
        constexpr uint32_t m_flNextHit = 0x1330; // GameTime_t
        constexpr uint32_t iCurrentAttack = 0x1334; // int32
        constexpr uint32_t total_attacks = 0x1338; // int32
        constexpr uint32_t smash_stun_duration = 0x133C; // float32
        constexpr uint32_t sweep_stun_duration = 0x1340; // float32
        constexpr uint32_t m_bHasCompletedMove = 0x1344; // bool
        constexpr uint32_t duration = 0x1348; // float32
        constexpr uint32_t m_vTargetHorizontalDirection = 0x134C; // Vector
        constexpr uint32_t smash_distance_from_hero = 0x1358; // int32
        constexpr uint32_t animation_rate = 0x135C; // float32
        constexpr uint32_t turn_rate = 0x1360; // float32
        constexpr uint32_t m_flFacingTarget = 0x1364; // float32
        constexpr uint32_t m_bSuncrusher = 0x1368; // bool
        constexpr uint32_t m_flDistanceSinceStandAblazeThinker = 0x136C; // float32
        constexpr uint32_t m_flDistancePerStandAblazeThinker = 0x1370; // float32
        constexpr uint32_t m_hCelestialHammerForFire = 0x1374; // CHandle< C_DOTABaseAbility >
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Slow {
        constexpr uint32_t swipe_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Fire_Wreath_Smash_Stun {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t attack_count = 0x131C; // int32
        constexpr uint32_t m_bShouldIncrement = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_Attack_Buff {
        constexpr uint32_t m_bIsBuffedAttack = 0x1318; // bool
        constexpr uint32_t m_bSunSentinel = 0x1319; // bool
        constexpr uint32_t heal_pct = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t heal_radius = 0x1324; // int32
        constexpr uint32_t heal_from_creeps = 0x1328; // int32
        constexpr uint32_t allied_healing_pct = 0x132C; // int32
        constexpr uint32_t m_nSmashDamage = 0x1330; // int32
        constexpr uint32_t m_nCounterOrbitalChance = 0x1334; // int32
        constexpr uint32_t m_vecHeroesToHeal = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flTotalToHeal = 0x1350; // float32
        constexpr uint32_t m_bCounterOrbitalProcessed = 0x1354; // bool
        constexpr uint32_t m_bIsCounterOrbitalSmash = 0x1355; // bool
        constexpr uint32_t m_bBrightFoundryProcessed = 0x1356; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Luminosity_SolarBattery {
        constexpr uint32_t move_speed_pct = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t m_nBonusMovementSpeedPct = 0x1320; // int32
        constexpr uint32_t m_nBonusAttackSpeed = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Disable {
        constexpr uint32_t m_nCasterFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nStatusFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Evasion {
        constexpr uint32_t miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Dawnbreaker_Solar_Guardian_Thinker {
        constexpr uint32_t pulse_interval = 0x1318; // float32
        constexpr uint32_t iEffectRadius = 0x131C; // int32
        constexpr uint32_t base_damage = 0x1320; // int32
        constexpr uint32_t base_heal = 0x1324; // int32
        constexpr uint32_t scepter_heal = 0x1328; // int32
        constexpr uint32_t m_hFollowTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hInflictor = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flNextPulseTime = 0x1334; // GameTime_t
        constexpr uint32_t m_nThinkerFXIndex = 0x1338; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Glimpse {
        constexpr uint32_t m_PositionIndex = 0x1318; // Vector[9]
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Attack_Buff {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Thinker {
        constexpr uint32_t m_vStartLoc = 0x1318; // Vector
        constexpr uint32_t m_hEntity = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Glimpse_Travel_Damage {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t max_ticks = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_KineticField {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_vOriginLoc = 0x131C; // Vector
        constexpr uint32_t m_bCanBeAffected = 0x1328; // bool
        constexpr uint32_t m_bTruesight = 0x1329; // bool
        constexpr uint32_t intellect_bonus = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_KineticFieldThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t formation_time = 0x131C; // float32
        constexpr uint32_t m_bActive = 0x1320; // bool
        constexpr uint32_t m_nFXIndex = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm {
        constexpr uint32_t miss_rate = 0x1318; // int32
        constexpr uint32_t movement_speed_reduction = 0x131C; // int32
        constexpr uint32_t attack_speed_reduction = 0x1320; // int32
        constexpr uint32_t m_bHasScepter = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_StaticStormThinker {
        constexpr uint32_t m_nCurrentPulse = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage_max = 0x1320; // int32
        constexpr uint32_t pulses = 0x1324; // int32
        constexpr uint32_t duration = 0x1328; // float32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_StaticStorm_Damage_Reduction {
        constexpr uint32_t damage_reduction_pct = 0x1318; // int32
        constexpr uint32_t move_slow_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike {
        constexpr uint32_t strike_interval = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t strike_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Disruptor_Thunder_Strike_Slow {
        constexpr uint32_t slow_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether {
        constexpr uint32_t m_bInManaGained = 0x1318; // bool
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t hStunnedEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t slow_duration = 0x1338; // float32
        constexpr uint32_t movespeed = 0x133C; // int32
        constexpr uint32_t self_bonus = 0x1340; // int32
        constexpr uint32_t m_bIsInRange = 0x1344; // bool
        constexpr uint32_t radius = 0x1348; // int32
        constexpr uint32_t latch_distance = 0x134C; // int32
        constexpr uint32_t m_flHealthHealed = 0x1350; // float32
        constexpr uint32_t m_flManaHealed = 0x1354; // float32
        constexpr uint32_t tether_heal_amp = 0x1358; // float32
        constexpr uint32_t m_flHealMessageTime = 0x135C; // GameTime_t
        constexpr uint32_t m_flManaMessageTime = 0x1360; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Haste {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t health_regen = 0x1320; // int32
        constexpr uint32_t status_resist = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Elemental_Wisp_Tether_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down {
        constexpr uint32_t slow_duration_first = 0x1318; // int32
        constexpr uint32_t slow_duration_second = 0x131C; // int32
        constexpr uint32_t damage_first = 0x1320; // int32
        constexpr uint32_t damage_second = 0x1324; // int32
        constexpr uint32_t power = 0x1328; // float32
        constexpr uint32_t radius = 0x132C; // int32
        constexpr uint32_t slow_first = 0x1330; // float32
        constexpr uint32_t slow_second = 0x1334; // float32
        constexpr uint32_t m_bDelayed = 0x1338; // bool
        constexpr uint32_t m_bHalfDamage = 0x1339; // bool
        constexpr uint32_t m_bFirstStrike = 0x133A; // bool
        constexpr uint32_t m_hInflictorAbility = 0x133C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Call_Down_Slow {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon {
        constexpr uint32_t max_attacks = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t m_iNumAttacks = 0x1320; // int32
        constexpr uint32_t projectile_speed = 0x1324; // int32
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t max_targets = 0x132C; // int32
        constexpr uint32_t m_bFirstStrike = 0x1330; // bool
        constexpr uint32_t m_bShouldFireMissiles = 0x1331; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Flak_Cannon_Scepter {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t scepter_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Homing_Missile {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t acceleration = 0x1320; // int32
        constexpr uint32_t pre_flight_time = 0x1324; // float32
        constexpr uint32_t stun_duration = 0x1328; // float32
        constexpr uint32_t m_nMissileDamage = 0x132C; // int32
        constexpr uint32_t damage = 0x1330; // int32
        constexpr uint32_t m_nTeamNumber = 0x1334; // int32
        constexpr uint32_t speed = 0x1340; // float32
        constexpr uint32_t m_flFacingTarget = 0x1344; // float32
        constexpr uint32_t movement_turn_rate = 0x1348; // int32
        constexpr uint32_t m_nPower = 0x134C; // int32
        constexpr uint32_t m_hAttachTarget = 0x1350; // CHandle< C_BaseEntity >
        constexpr uint32_t m_MoveTime = 0x1358; // CountdownTimer
    }

    namespace CDOTA_Modifier_Aghsfort_Gyrocopter_Rocket_Barrage {
        constexpr uint32_t rocket_damage = 0x1318; // int32
        constexpr uint32_t m_nPower = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Kunkka_NoQuarter {
        constexpr uint32_t m_nSpeedBonusPercentage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Ignite {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t burn_damage = 0x131C; // float32
        constexpr uint32_t mana_restore = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_DragonSlave_Movement {
        constexpr uint32_t m_flPushDistance = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_FierySoul {
        constexpr uint32_t fiery_soul_attack_speed_bonus = 0x1318; // int32
        constexpr uint32_t fiery_soul_move_speed_bonus = 0x131C; // float32
        constexpr uint32_t fiery_soul_max_stacks = 0x1320; // int32
        constexpr uint32_t fiery_soul_stack_duration = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_flFierySoulDieTime = 0x132C; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_FierySoul_Active {
        constexpr uint32_t attack_range_per_stack = 0x1318; // int32
        constexpr uint32_t m_bShouldReset = 0x131C; // bool
        constexpr uint32_t m_bIsActive = 0x131D; // bool
        constexpr uint32_t fiery_soul_attack_speed_bonus = 0x1320; // int32
        constexpr uint32_t fiery_soul_move_speed_bonus = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_LagunaBlade_Line {
        constexpr uint32_t vStart = 0x1318; // Vector
        constexpr uint32_t vEnd = 0x1324; // Vector
        constexpr uint32_t damage_delay = 0x1330; // float32
        constexpr uint32_t m_hMainTarget = 0x1334; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Lina_LightStrikeArray_Thinker {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t m_iDamage = 0x1330; // int32
        constexpr uint32_t m_flStunDuration = 0x1334; // float32
        constexpr uint32_t light_strike_array_damage = 0x1338; // int32
        constexpr uint32_t light_strike_array_stun_duration = 0x133C; // float32
        constexpr uint32_t light_strike_array_delay = 0x1340; // float32
        constexpr uint32_t m_nLSARadius = 0x1344; // int32
        constexpr uint32_t m_nCount = 0x1348; // int32
        constexpr uint32_t max_count = 0x134C; // int32
        constexpr uint32_t iPower = 0x1350; // int32
        constexpr uint32_t pulse_interval = 0x1354; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Empower {
        constexpr uint32_t bonus_damage_pct = 0x1318; // int32
        constexpr uint32_t cleave_damage_pct = 0x131C; // float32
        constexpr uint32_t cleave_starting_width = 0x1320; // int32
        constexpr uint32_t cleave_ending_width = 0x1324; // int32
        constexpr uint32_t cleave_distance = 0x1328; // int32
        constexpr uint32_t splash_damage_pct = 0x132C; // float32
        constexpr uint32_t splash_radius = 0x1330; // int32
        constexpr uint32_t self_multiplier = 0x1334; // float32
        constexpr uint32_t lifesteal_pct = 0x1338; // int32
        constexpr uint32_t m_fLastShockwaveProcTime = 0x133C; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_ReversePolarity_Steroid {
        constexpr uint32_t move_speed_percent = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Shockwave {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Shockwave_Pull {
        constexpr uint32_t m_vDirection = 0x1318; // Vector
        constexpr uint32_t m_flEndTime = 0x1324; // float32
        constexpr uint32_t m_flCurTime = 0x1328; // float32
        constexpr uint32_t pull_duration = 0x132C; // float32
        constexpr uint32_t effective_distance = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Impact {
        constexpr uint32_t slow_duration = 0x1318; // float32
        constexpr uint32_t skewer_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Magnataur_Skewer_Slow {
        constexpr uint32_t slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // int32
        constexpr uint32_t spear_damage = 0x1320; // int32
        constexpr uint32_t spear_distance_from_wall = 0x1324; // int32
        constexpr uint32_t spear_attack_interval = 0x1328; // float32
        constexpr uint32_t warrior_fade_min_dist = 0x1348; // float32
        constexpr uint32_t warrior_fade_max_dist = 0x134C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_AnimationAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Buff {
        constexpr uint32_t health_regen = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_BuffAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Leash {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // float32
        constexpr uint32_t m_vOriginLoc = 0x1320; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_ArenaOfBlood_Thinker {
        constexpr uint32_t radius = 0x1318; // float32
        constexpr uint32_t formation_time = 0x131C; // float32
        constexpr uint32_t m_flInitialZ = 0x1320; // float32
        constexpr uint32_t m_flFinalZ = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_Bulwark {
        constexpr uint32_t physical_damage_reduction = 0x1318; // float32
        constexpr uint32_t physical_damage_reduction_side = 0x131C; // float32
        constexpr uint32_t forward_angle = 0x1320; // float32
        constexpr uint32_t side_angle = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_Bulwark_Active {
        constexpr uint32_t redirect_chance = 0x1318; // int32
        constexpr uint32_t redirect_range = 0x131C; // int32
        constexpr uint32_t forward_angle = 0x1320; // float32
        constexpr uint32_t side_angle = 0x1324; // float32
        constexpr uint32_t redirect_speed_penatly = 0x1328; // int32
        constexpr uint32_t m_nPoseParameterWE = 0x132C; // int32
        constexpr uint32_t m_nPoseParameterNS = 0x1330; // int32
        constexpr uint32_t m_flLastPoseX = 0x1334; // float32
        constexpr uint32_t m_flLastPoseY = 0x1338; // float32
        constexpr uint32_t m_nLastMaxDirection = 0x133C; // int32
        constexpr uint32_t m_vLastOrigin = 0x1340; // Vector
        constexpr uint32_t m_flLastGameTime = 0x134C; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_Bulwark_Soldier_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_GodsRebuke_Crit {
        constexpr uint32_t crit_mult = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Mars_Gods_Rebuke {
        constexpr uint32_t knockback_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Minor_Stats_Upgrade {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t bonus_primary_stat = 0x131C; // int32
        constexpr uint32_t bonus_movespeed = 0x1320; // int32
        constexpr uint32_t bonus_hp_regen = 0x1324; // int32
        constexpr uint32_t bonus_armor = 0x1328; // int32
        constexpr uint32_t bonus_attack_damage = 0x132C; // int32
        constexpr uint32_t bonus_cast_range = 0x1330; // int32
        constexpr uint32_t bonus_spell_amp = 0x1334; // int32
        constexpr uint32_t bonus_health = 0x1338; // int32
        constexpr uint32_t bonus_mana = 0x133C; // int32
        constexpr uint32_t bonus_attack_speed = 0x1340; // int32
        constexpr uint32_t bonus_heal_amp = 0x1344; // int32
        constexpr uint32_t bonus_mana_regen = 0x1348; // int32
        constexpr uint32_t bonus_evasion = 0x134C; // int32
        constexpr uint32_t bonus_magic_resist = 0x1350; // int32
        constexpr uint32_t bonus_lifesteal = 0x1354; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Omniknight_Degen_Aura_Effect {
        constexpr uint32_t move_speed_bonus = 0x1318; // int32
        constexpr uint32_t attack_speed_bonus = 0x131C; // int32
        constexpr uint32_t damage_interval = 0x1320; // float32
        constexpr uint32_t attack_damage_pct = 0x1324; // int32
        constexpr uint32_t death_heal = 0x1328; // int32
        constexpr uint32_t bIsAllied = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Omniknight_GuardianAngel {
        constexpr uint32_t hp_regen = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t purification_trigger_chance = 0x1320; // int32
        constexpr uint32_t purification_trigger_cooldown = 0x1324; // float32
        constexpr uint32_t m_fLastProc = 0x1328; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Omniknight_Repel {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // float32
        constexpr uint32_t bonus_str = 0x1320; // int32
        constexpr uint32_t damage_increase_outgoing_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_Blur {
        constexpr uint32_t bonus_evasion = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_BlurActive {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t fade_duration = 0x132C; // float32
        constexpr uint32_t m_bDestroyNext = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_CoupdeGrace {
        constexpr uint32_t crit_bonus = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t crit_active = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_PhantomStrike {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_evasion = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PhantomAssassin_StiflingDagger_Caster {
        constexpr uint32_t base_damage = 0x1318; // int32
        constexpr uint32_t attack_factor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Phoenix_FlameRevenant_Attack_Damage {
        constexpr uint32_t m_fDamagePerSecond = 0x1318; // float32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nActiveFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nActiveStatusFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t flame_revenant_damage_pct = 0x1328; // float32
        constexpr uint32_t think_interval = 0x132C; // float32
        constexpr uint32_t move_slow_pct = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition {
        constexpr uint32_t debuff_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Inhibition_Debuff {
        constexpr uint32_t heal_suppression_pct = 0x1318; // int32
        constexpr uint32_t armor_reduction_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_NoCC {
        constexpr uint32_t bCanbeMotionControlled = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Movement {
        constexpr uint32_t charge_speed = 0x1318; // float32
        constexpr uint32_t knockback_radius = 0x131C; // int32
        constexpr uint32_t knockback_distance = 0x1320; // int32
        constexpr uint32_t knockback_damage = 0x1324; // int32
        constexpr uint32_t forward_offset = 0x1328; // int32
        constexpr uint32_t m_hTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flFacingTarget = 0x1330; // float32
        constexpr uint32_t m_nFXIndex = 0x1334; // ParticleIndex_t
        constexpr uint32_t m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Onslaught_Windup {
        constexpr uint32_t charge_duration = 0x1318; // float32
        constexpr uint32_t max_charge_time = 0x131C; // float32
        constexpr uint32_t turn_rate = 0x1320; // float32
        constexpr uint32_t base_power = 0x1324; // float32
        constexpr uint32_t charge_speed = 0x1328; // int32
        constexpr uint32_t animation_rate = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Push {
        constexpr uint32_t m_vVelocity = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_PrimalRoar_Slow {
        constexpr uint32_t slow_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t slow_attack_speed_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_flOffset = 0x131C; // float32
        constexpr uint32_t m_vStartAngles = 0x1320; // QAngle
        constexpr uint32_t animation_rate = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Damage_Tracking {
        constexpr uint32_t damage_limit = 0x1318; // int32
        constexpr uint32_t m_nFxIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_fTotalDamage = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Ripple_Thinker {
        constexpr uint32_t ripple_effect_width = 0x1318; // int32
        constexpr uint32_t ripple_damage = 0x131C; // int32
        constexpr uint32_t health_damage = 0x1320; // int32
        constexpr uint32_t ripple_count = 0x1324; // int32
        constexpr uint32_t total_ripple_circles = 0x1328; // int32
        constexpr uint32_t radius = 0x132C; // float32
        constexpr uint32_t ripple_slow_duration = 0x1330; // float32
        constexpr uint32_t ripple_knockback_duration = 0x1334; // float32
        constexpr uint32_t m_hGrabbedEnemy = 0x1338; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nPreviewFXIndex = 0x133C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Pummel_Self {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_vPos = 0x131C; // Vector
        constexpr uint32_t splash_radius = 0x1328; // int32
        constexpr uint32_t interval = 0x132C; // float32
        constexpr uint32_t ministun = 0x1330; // float32
        constexpr uint32_t m_nCurrentHitCount = 0x1334; // int32
        constexpr uint32_t total_ripple_circles = 0x1338; // int32
        constexpr uint32_t ripple_step_distance = 0x133C; // int32
        constexpr uint32_t ripple_step_distance_offset = 0x1340; // int32
        constexpr uint32_t health_damage = 0x1344; // float32
        constexpr uint32_t ripple_duration = 0x1348; // float32
        constexpr uint32_t ripple_damage = 0x134C; // int32
        constexpr uint32_t m_vLastRippleOffsets = 0x1350; // CUtlVector< int32 >
        constexpr uint32_t self_animation_rate = 0x1368; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Crush {
        constexpr uint32_t m_hRock = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_qRotation = 0x131C; // QAngle
        constexpr uint32_t m_flOldPitch = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_HP {
        constexpr uint32_t rock_health = 0x1318; // int32
        constexpr uint32_t rock_visualzdelta = 0x131C; // int32
        constexpr uint32_t m_bIsCrushing = 0x1320; // bool
        constexpr uint32_t summon_count = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Rock_Thinker {
        constexpr uint32_t effect_radius = 0x1318; // int32
        constexpr uint32_t rock_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift {
        constexpr uint32_t projectile_speed = 0x1318; // int32
        constexpr uint32_t projectile_speed_increment = 0x131C; // int32
        constexpr uint32_t projectile_distance = 0x1320; // int32
        constexpr uint32_t projectile_width = 0x1324; // int32
        constexpr uint32_t projectiles_per_interval = 0x1328; // int32
        constexpr uint32_t projectiles_per_interval_increment = 0x132C; // int32
        constexpr uint32_t initial_spread_angle = 0x1330; // int32
        constexpr uint32_t angle_offset = 0x1334; // int32
        constexpr uint32_t iCurrentInterval = 0x1338; // int32
        constexpr uint32_t splinter_angle = 0x133C; // int32
        constexpr uint32_t m_LeftHandSmashTimer = 0x1340; // CountdownTimer
        constexpr uint32_t m_RightHandSmashTimer = 0x1358; // CountdownTimer
        constexpr uint32_t m_AttackIntervalTimer = 0x1370; // CountdownTimer
        constexpr uint32_t initial_interval = 0x1388; // float32
        constexpr uint32_t interval_reduction = 0x138C; // float32
        constexpr uint32_t min_interval = 0x1390; // float32
        constexpr uint32_t arm_distance_forward = 0x1394; // int32
        constexpr uint32_t arm_distance_side = 0x1398; // int32
        constexpr uint32_t splash_radius = 0x139C; // int32
        constexpr uint32_t max_split_amount = 0x13A0; // int32
        constexpr uint32_t m_nCurrentCastCount = 0x13A4; // int32
        constexpr uint32_t max_projectiles = 0x13A8; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_TectonicShift_Damage {
        constexpr uint32_t tick_damage = 0x1318; // float32
        constexpr uint32_t damage_ticks = 0x131C; // int32
        constexpr uint32_t m_nTickAmount = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Boss_Vault {
        constexpr uint32_t vault_speed = 0x1318; // float32
        constexpr uint32_t vault_acceleration = 0x131C; // float32
        constexpr uint32_t vault_radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_PrimalBeast_Pummel_DroppedItem {
        constexpr uint32_t m_nPreviewFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Primalbeast_Boss_HeavySteps {
        constexpr uint32_t vLastPos = 0x1318; // Vector
        constexpr uint32_t flCurrentDistance = 0x1324; // float32
        constexpr uint32_t step_distance = 0x1328; // int32
        constexpr uint32_t effect_radius = 0x132C; // int32
        constexpr uint32_t base_damage = 0x1330; // int32
        constexpr uint32_t m_hTarget = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t ctLastCommandTimer = 0x1338; // CountdownTimer
        constexpr uint32_t m_bMoveCommandIssued = 0x1350; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Primalbeast_Boss_RoarAttack_Start {
        constexpr uint32_t rock_drop_intervals = 0x1318; // int32
        constexpr uint32_t rock_drop_per_interval = 0x131C; // int32
        constexpr uint32_t rock_drop_distance = 0x1320; // int32
        constexpr uint32_t m_nCurrentInterval = 0x1324; // int32
        constexpr uint32_t rock_drop_rotation_angle = 0x1328; // int32
        constexpr uint32_t m_hTarget = 0x132C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Pugna_Grandmaster_NetherWard {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t mana_multiplier = 0x131C; // float32
        constexpr uint32_t mana_drained_per_attack = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_ArmorAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_ArmorAura_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_CritAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_CritAura_Bonus {
        constexpr uint32_t crit_chance = 0x1318; // int32
        constexpr uint32_t crit_multiplier = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_HPAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_HPAura_Bonus {
        constexpr uint32_t bonus_hp = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_MagicResistAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Reward_MagicResistAura_Bonus {
        constexpr uint32_t bonus_magical_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike {
        constexpr uint32_t m_vPopupLocation = 0x1318; // Vector
        constexpr uint32_t m_bTeleported = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Channel {
        constexpr uint32_t m_vTargetPos = 0x1318; // Vector
        constexpr uint32_t m_nCrosshairFX = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_BurrowStrike_Reverse_Tracking {
        constexpr uint32_t m_vStartLocation = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_Burrowstrike_Transport {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_CausticFinale {
        constexpr uint32_t caustic_finale_duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_CausticFinaleOrb {
        constexpr uint32_t caustic_finale_radius = 0x1318; // int32
        constexpr uint32_t caustic_finale_damage_death = 0x131C; // int32
        constexpr uint32_t caustic_finale_damage_dot = 0x1320; // int32
        constexpr uint32_t caustic_finale_slow = 0x1324; // int32
        constexpr uint32_t caustic_finale_dot_tick = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_Epicenter {
        constexpr uint32_t epicenter_pulses = 0x1318; // int32
        constexpr uint32_t epicenter_radius = 0x131C; // int32[16]
        constexpr uint32_t epicenter_damage = 0x135C; // int32
        constexpr uint32_t m_iMaxPulses = 0x1360; // int32
        constexpr uint32_t m_iPulseCount = 0x1364; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_Epicenter_Slow {
        constexpr uint32_t epicenter_slow = 0x1318; // int32
        constexpr uint32_t epicenter_slow_as = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_SandStorm {
        constexpr uint32_t sand_storm_radius = 0x1318; // float32
        constexpr uint32_t sand_storm_damage = 0x131C; // int32
        constexpr uint32_t damage_tick_rate = 0x1320; // float32
        constexpr uint32_t m_flLastDamageTime = 0x1324; // GameTime_t
        constexpr uint32_t m_nSandStormParticleIndex1 = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_nSandStormParticleIndex2 = 0x132C; // ParticleIndex_t
        constexpr uint32_t m_hThinker = 0x1338; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBurrowstrikeFieldThinker = 0x133C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsPrimarySandstorm = 0x1340; // bool
        constexpr uint32_t vecSpawnPos = 0x1344; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow {
        constexpr uint32_t blind_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_SandStorm_Slow_Aura_Thinker {
        constexpr uint32_t sand_storm_radius = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Sand_King_Sandstorm_Burrowstrike_Field_Thinker {
        constexpr uint32_t radius = 0x1318; // float32
        constexpr uint32_t explosion_interval = 0x131C; // float32
        constexpr uint32_t explosion_radius = 0x1320; // int32
        constexpr uint32_t explosion_min_dist = 0x1324; // int32
        constexpr uint32_t m_fLastTick = 0x1328; // float32
        constexpr uint32_t m_fTimeAccumulator = 0x132C; // float32
        constexpr uint32_t m_iExplosionCount = 0x1330; // int32
        constexpr uint32_t m_iExplosionTotalCount = 0x1334; // int32
        constexpr uint32_t m_iExplosionQuadrant = 0x1338; // int32
        constexpr uint32_t m_iExplosionDistance = 0x133C; // int32
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_DarkPact_Pulses {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t total_damage = 0x131C; // float32
        constexpr uint32_t total_pulses = 0x1320; // int32
        constexpr uint32_t heal_pct = 0x1324; // int32
        constexpr uint32_t pulse_interval = 0x1328; // float32
        constexpr uint32_t bIsBaseAbility = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Active {
        constexpr uint32_t agi_gain = 0x1318; // int32
        constexpr uint32_t iPrimaryAttribute = 0x131C; // int32
        constexpr uint32_t model_scale = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_EssenceShift_Counter {
        constexpr uint32_t max_stacks = 0x1318; // int32
        constexpr uint32_t passive_agility = 0x131C; // int32
        constexpr uint32_t flLastProcTime = 0x1320; // GameTime_t
        constexpr uint32_t debuff_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_Essence_Shift_Debuff {
        constexpr uint32_t reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_Pounce {
        constexpr uint32_t hitEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t pounce_distance = 0x1330; // int32
        constexpr uint32_t pounce_distance_default = 0x1334; // int32
        constexpr uint32_t pounce_speed = 0x1338; // float32
        constexpr uint32_t pounce_acceleration = 0x133C; // float32
        constexpr uint32_t pounce_radius = 0x1340; // int32
        constexpr uint32_t pounce_damage = 0x1344; // int32
        constexpr uint32_t leash_duration = 0x1348; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_Pounce_Leash {
        constexpr uint32_t leash_radius = 0x1318; // int32
        constexpr uint32_t vLeashLocation = 0x131C; // Vector
        constexpr uint32_t m_bEscaped = 0x1328; // bool
        constexpr uint32_t pounce_damage_multiplier = 0x132C; // float32
        constexpr uint32_t pounce_damage = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_ShadowDance {
        constexpr uint32_t m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t flLastPulseTime = 0x1330; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Aura {
        constexpr uint32_t scepter_aoe = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_ShadowDance_PassiveRegen {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_regen_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Slark_ShadowDance_Visual {
        constexpr uint32_t m_bScepter = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_FiresnapCookie_PreHop {
        constexpr uint32_t jump_duration = 0x1318; // float32
        constexpr uint32_t m_bMovesHorizontal = 0x131C; // bool
        constexpr uint32_t m_bSecondaryCookie = 0x131D; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_GobbleUp_BellyHasUnit {
        constexpr uint32_t m_hGobbledUnit = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t max_time_in_belly = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Attack {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Buff {
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_nIsActive = 0x1338; // int32
        constexpr uint32_t m_bHasAttackTalent = 0x133C; // bool
        constexpr uint32_t attack_range_bonus = 0x1340; // int32
        constexpr uint32_t buffed_attacks = 0x1344; // int32
        constexpr uint32_t base_attack_time = 0x1348; // float32
        constexpr uint32_t attack_speed_bonus = 0x134C; // int32
        constexpr uint32_t armor_duration = 0x1350; // float32
        constexpr uint32_t damage = 0x1354; // int32
        constexpr uint32_t bounce_range = 0x1358; // int32
        constexpr uint32_t bounces = 0x135C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_LilShredder_Debuff {
        constexpr uint32_t armor_reduction_per_attack = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_Magma_Burn_Slow {
        constexpr uint32_t m_nMoveSlowPct = 0x1318; // int32
        constexpr uint32_t m_fBurnDamagePerTick = 0x131C; // float32
        constexpr uint32_t move_slow_pct = 0x1320; // int32
        constexpr uint32_t burn_interval = 0x1324; // float32
        constexpr uint32_t burn_damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_Magma_Thinker {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t impact_radius = 0x131C; // int32
        constexpr uint32_t move_slow_pct = 0x1320; // int32
        constexpr uint32_t burn_linger_duration = 0x1324; // float32
        constexpr uint32_t m_nPathEffectIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_MortimerKisses {
        constexpr uint32_t m_fIntervalPerRocket = 0x1318; // float32
        constexpr uint32_t m_flFacingTarget = 0x131C; // float32
        constexpr uint32_t m_nBeamFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_hBeamEnd = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flCurDistance = 0x1328; // float32
        constexpr uint32_t m_vAimTarget = 0x132C; // Vector
        constexpr uint32_t m_fLastTurnAmount = 0x1338; // float32
        constexpr uint32_t m_nProjectilesLaunched = 0x133C; // int32
        constexpr uint32_t m_bDestroyOnNextThink = 0x1340; // bool
        constexpr uint32_t m_nProjectilesToLaunch = 0x1344; // int32
        constexpr uint32_t m_bHasProjectileTalent = 0x1348; // bool
        constexpr uint32_t projectile_count = 0x134C; // int32
        constexpr uint32_t projectile_vision = 0x1350; // int32
        constexpr uint32_t turn_rate = 0x1354; // float32
        constexpr uint32_t min_range = 0x1358; // int32
        constexpr uint32_t delay_after_last_projectile = 0x135C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_Scatterblast_Slow {
        constexpr uint32_t m_bIsPointBlank = 0x1318; // bool
        constexpr uint32_t movement_slow_pct = 0x131C; // int32
        constexpr uint32_t attack_slow_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Snapfire_SpitCreep_ArcingUnit {
        constexpr uint32_t min_range = 0x1318; // int32
        constexpr uint32_t min_lob_travel_time = 0x131C; // float32
        constexpr uint32_t max_lob_travel_time = 0x1320; // float32
        constexpr uint32_t impact_radius = 0x1324; // int32
        constexpr uint32_t projectile_vision = 0x1328; // int32
        constexpr uint32_t stun_duration = 0x132C; // float32
        constexpr uint32_t impact_damage = 0x1330; // int32
        constexpr uint32_t min_height_above_lowest = 0x1334; // float32
        constexpr uint32_t min_height_above_highest = 0x1338; // float32
        constexpr uint32_t min_acceleration = 0x133C; // float32
        constexpr uint32_t max_acceleration = 0x1340; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Sniper_Concussive_Grenade {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Disruptor_ThunderStrike_Int_Increase {
        constexpr uint32_t int_increase_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Disruptor_Thunder_Strike_On_Attack {
        constexpr uint32_t strike_chance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Call_Down_Attack_Buff {
        constexpr uint32_t movespeed = 0x1318; // int32
        constexpr uint32_t attackspeed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Burn {
        constexpr uint32_t flDamage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Gyrocopter_Flak_Cannon_Fire_Trail_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t path_radius = 0x1324; // int32
        constexpr uint32_t linger_duration = 0x1328; // float32
        constexpr uint32_t flDamage = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Gyrocopter_RocketBarrage_On_Attack {
        constexpr uint32_t strike_chance = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Lina_Fiery_Soul_Splitshot {
        constexpr uint32_t damage_modifier = 0x1318; // int32
        constexpr uint32_t split_shot_bonus_range = 0x131C; // int32
        constexpr uint32_t arrow_count = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Bounce {
        constexpr uint32_t bounces_remaining = 0x1318; // int32
        constexpr uint32_t m_hHitEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Lina_Laguna_Blade_Channel {
        constexpr uint32_t stack_limit = 0x1318; // int32
        constexpr uint32_t stack_interval = 0x131C; // float32
        constexpr uint32_t m_hEntitiesToHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFxIndexB = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_nFXIndices = 0x1340; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t bounces_remaining = 0x1358; // int32
        constexpr uint32_t iCur_stack = 0x135C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Attacks_Bonus {
        constexpr uint32_t attack_damage = 0x1318; // float32
        constexpr uint32_t damage_penalty = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Lina_Light_Strike_Array_Vacuum {
        constexpr uint32_t pull_speed = 0x1318; // float32
        constexpr uint32_t vPullLocation = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Mars_Bulwark_Spears {
        constexpr uint32_t stack_limit = 0x1318; // int32
        constexpr uint32_t stack_interval = 0x131C; // float32
        constexpr uint32_t m_nFxIndexB = 0x1320; // ParticleIndex_t
        constexpr uint32_t iCur_stack = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Burn {
        constexpr uint32_t flDamage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Mars_Spear_Burning_Trail_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t path_radius = 0x1324; // int32
        constexpr uint32_t linger_duration = 0x1328; // float32
        constexpr uint32_t flDamage = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_PhantomStrike_Damage_Reduction {
        constexpr uint32_t damage_reduction_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_AutoDagger {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_PhantomAssassin_Stifling_Dagger_On_Attack {
        constexpr uint32_t strike_chance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_QueenOfPain_SonicWave_AttackBuff {
        constexpr uint32_t spell_amp = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Burn {
        constexpr uint32_t flDamage = 0x1318; // float32
        constexpr uint32_t burn_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_QueenOfPain_Sonic_Wave_Trail_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t m_nRadius = 0x1324; // int32
        constexpr uint32_t m_nTrailFX = 0x1328; // ParticleIndex_t
        constexpr uint32_t linger_duration = 0x132C; // float32
        constexpr uint32_t flDamage = 0x1330; // float32
        constexpr uint32_t damage_pct = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Sand_King_Caustic_Finale_StrengthBuff {
        constexpr uint32_t str_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_DamageResist {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Sand_King_Epicenter_Movement {
        constexpr uint32_t vLastPos = 0x1318; // Vector
        constexpr uint32_t m_fAccumulatedDistance = 0x1324; // float32
        constexpr uint32_t movement_distance = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Sand_King_Sandstorm_Vacuum {
        constexpr uint32_t pull_speed = 0x1318; // float32
        constexpr uint32_t vPullLocation = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Slark_Pounce_Leashed_Bonus {
        constexpr uint32_t attack_speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Slark_Shadow_Dance_Leash {
        constexpr uint32_t m_vPullLocation = 0x1318; // Vector
        constexpr uint32_t pull_speed = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Snapfire_FiresnapCookie_AlliedBuff {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t bonus_attack_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Ursa_Earthshock_Knockback {
        constexpr uint32_t value3 = 0x1348; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Viper_Periodic_Strike {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_nTargetTeam = 0x1320; // int32
        constexpr uint32_t m_hAlreadyHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Breach_Burn {
        constexpr uint32_t m_fDamagePerInterval = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Burn {
        constexpr uint32_t m_fDamagePerInterval = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_VoidSpirit_AstralStep_Trail_Thinker {
        constexpr uint32_t m_fThinkInterval = 0x1318; // float32
        constexpr uint32_t m_fPopDamagePctPerInterval = 0x131C; // float32
        constexpr uint32_t m_fLingerDuration = 0x1320; // float32
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t pop_damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Burn {
        constexpr uint32_t m_fDamagePerInterval = 0x1318; // float32
        constexpr uint32_t m_nBonusIncomingMagicDamage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_VoidSpirit_Dissimilate_Lure_Thinker {
        constexpr uint32_t m_nDamageRadius = 0x1318; // int32
        constexpr uint32_t m_fDissimilateDamage = 0x131C; // float32
        constexpr uint32_t m_fThinkInterval = 0x1320; // float32
        constexpr uint32_t m_fDissimilateDamagePctPerInterval = 0x1324; // float32
        constexpr uint32_t m_fLingerDuration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Burn {
        constexpr uint32_t flDamage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Weaver_Shukuchi_Trail_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t path_radius = 0x1324; // int32
        constexpr uint32_t linger_duration = 0x1328; // float32
        constexpr uint32_t flDamage = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_DoubleAttack {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttacksRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Arctic_Burn_Splitshot {
        constexpr uint32_t damage_modifier = 0x1318; // int32
        constexpr uint32_t split_shot_bonus_range = 0x131C; // int32
        constexpr uint32_t arrow_count = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Cold_Embrace_Magic_Damage_Block {
        constexpr uint32_t barrier_amount = 0x1318; // int32
        constexpr uint32_t barrier_block = 0x131C; // int32
        constexpr uint32_t m_nMaxMovementSpeed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Winter_Wyvern_Splinter_Blast_Vacuum {
        constexpr uint32_t pull_speed = 0x1318; // float32
        constexpr uint32_t vPullLocation = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Special_WitchDoctor_ParalyzingCask_Attack_Procs {
        constexpr uint32_t cask_chance = 0x1318; // int32
        constexpr uint32_t cask_cooldown = 0x131C; // int32
        constexpr uint32_t flLastProcTime = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Special_Witch_Doctor_Death_Ward_Splitshot {
        constexpr uint32_t damage_modifier = 0x1318; // int32
        constexpr uint32_t split_shot_bonus_range = 0x131C; // int32
        constexpr uint32_t split_shot_count = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TempBuff_CorpseExplosion_Debuff {
        constexpr uint32_t corpse_explosion_radius = 0x1318; // int32
        constexpr uint32_t corpse_explosion_damage_pct = 0x131C; // int32
        constexpr uint32_t corpse_explosion_chance_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t launched_attack = 0x131C; // bool
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_MeldArmor {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_Meld_Animation {
        constexpr uint32_t launched_attack = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t attack_spill_range = 0x131C; // float32
        constexpr uint32_t attack_spill_width = 0x1320; // int32
        constexpr uint32_t attack_spill_pct = 0x1324; // int32
        constexpr uint32_t attack_spill_penalty = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_PsiBlades_Slow {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_Psionic_Trap_Thinker {
        constexpr uint32_t trap_radius = 0x1318; // int32
        constexpr uint32_t trap_delay_time = 0x131C; // float32
        constexpr uint32_t slow_duration = 0x1320; // float32
        constexpr uint32_t max_pulses = 0x1324; // int32
        constexpr uint32_t iCurrentPulse = 0x1328; // int32
        constexpr uint32_t m_hImage = 0x132C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionAbsorb {
        constexpr uint32_t damage_threshold = 0x1318; // int32
        constexpr uint32_t max_damage_absorb = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_RefractionDamage {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_Refraction_Holdout {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t damage_absorb = 0x131C; // int32
        constexpr uint32_t m_flDamageAbsorbed = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_TemplarAssassin_Trap_Slow {
        constexpr uint32_t movement_speed_slow = 0x1318; // int32
        constexpr uint32_t trap_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_IceShard {
        constexpr uint32_t m_vPos = 0x1318; // Vector
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t damage = 0x1328; // float32
        constexpr uint32_t explosion_interval = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_Tag_Team_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch {
        constexpr uint32_t crit_multiplier = 0x1318; // int32
        constexpr uint32_t air_time = 0x131C; // float32
        constexpr uint32_t slow_duration = 0x1320; // float32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
        constexpr uint32_t m_hTarget = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bWalrusPunch = 0x1334; // bool
        constexpr uint32_t m_bPunchKill = 0x1335; // bool
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t m_nFXIndex = 0x1350; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_AirTime {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_TuskBoss_WalrusPunch_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_IceShard {
        constexpr uint32_t m_vPos = 0x1318; // Vector
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t damage = 0x1328; // float32
        constexpr uint32_t explosion_interval = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_Snowball_SpellLifesteal {
        constexpr uint32_t spell_lifesteal_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_Tag_Team {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_Tag_Team_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch {
        constexpr uint32_t crit_multiplier = 0x1318; // int32
        constexpr uint32_t air_time = 0x131C; // float32
        constexpr uint32_t slow_duration = 0x1320; // float32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
        constexpr uint32_t m_hTarget = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bWalrusPunch = 0x1334; // bool
        constexpr uint32_t m_bPunchKill = 0x1335; // bool
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t m_nFXIndex = 0x1350; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_AirTime {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Tusk_WalrusPunch_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin {
        constexpr uint32_t bonus_magic_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Flying {
        constexpr uint32_t m_nRadius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Slow {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_CorrosiveSkin_Speed_Steal {
        constexpr uint32_t m_flFactor = 0x1318; // float32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_Nethertoxin {
        constexpr uint32_t min_damage = 0x1318; // int32
        constexpr uint32_t max_damage = 0x131C; // int32
        constexpr uint32_t max_duration = 0x1320; // float32
        constexpr uint32_t m_flDamageInterval = 0x1324; // float32
        constexpr uint32_t m_flTimeIncrement = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_Nethertoxin_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_PoisonAttack {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_PoisonAttack_Slow {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t magic_resistance = 0x1320; // int32
        constexpr uint32_t m_flAccumDamage = 0x1324; // float32
        constexpr uint32_t m_flPoisonSnapCounter = 0x1328; // float32
        constexpr uint32_t m_nPoisonSnapThreshold = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Viper_ViperStrike_Slow {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t m_bTargetedAlly = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttacksRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_GeminateAttack_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_Shukuchi {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t damage = 0x132C; // int32
        constexpr uint32_t speed = 0x1330; // int32
        constexpr uint32_t m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t bHasStartedBurning = 0x1350; // bool
        constexpr uint32_t m_nBurningTrailRadius = 0x1354; // int32
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x1358; // Vector
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_Swarm {
        constexpr uint32_t m_iMaxDist = 0x1318; // int32
        constexpr uint32_t m_iAttackCount = 0x131C; // int32
        constexpr uint32_t destroy_attacks = 0x1320; // int32
        constexpr uint32_t m_vDirection = 0x1324; // Vector
        constexpr uint32_t m_vStartLoc = 0x1330; // Vector
        constexpr uint32_t m_hAttachTarget = 0x133C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_Swarm_Debuff {
        constexpr uint32_t armor_reduction = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t damage_share_percentage = 0x1320; // int32
        constexpr uint32_t m_flCurrentArmorReduction = 0x1324; // float32
        constexpr uint32_t flTotalDamage = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Weaver_TimeLapse {
        constexpr uint32_t m_PositionIndex = 0x1318; // Vector[11]
        constexpr uint32_t m_flLife = 0x139C; // float32[11]
        constexpr uint32_t m_flMana = 0x13C8; // float32[11]
        constexpr uint32_t m_bHasValidHistory = 0x13F4; // bool
    }

    namespace CDOTA_Modifier_Aghsfort_Wildwing_Tornado_Blast_Debuff {
        constexpr uint32_t m_flStartTime = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Flight {
        constexpr uint32_t attack_point = 0x1318; // float32
        constexpr uint32_t attack_range_bonus = 0x131C; // int32
        constexpr uint32_t projectile_speed_bonus = 0x1320; // int32
        constexpr uint32_t night_vision_bonus = 0x1324; // int32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Frost_Attack {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Arctic_Burn_Slow {
        constexpr uint32_t damage_per_second = 0x1318; // float32
        constexpr uint32_t move_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Cold_Embrace {
        constexpr uint32_t m_nOriginalAttackCapability = 0x1318; // int32
        constexpr uint32_t m_bDidBlast = 0x1324; // bool
        constexpr uint32_t heal_additive = 0x1328; // int32
        constexpr uint32_t heal_percentage = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Splinter_Blast_Slow {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Aura {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nAlliesTaunted = 0x131C; // int32
        constexpr uint32_t m_bRelicTriggered = 0x1320; // bool
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t damage_amplification = 0x1328; // int32
        constexpr uint32_t damage_reduction = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_Winter_Wyvern_Winters_Curse_Kill_Credit {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Aghsfort_WitchDoctor_Cask_Thinker {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t remaining_bounces = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_WitchDoctor_DeathWard {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t m_iBounceRadius = 0x131C; // int32
        constexpr uint32_t m_bFirstAttack = 0x1320; // bool
        constexpr uint32_t m_iBounces = 0x1324; // int32
        constexpr uint32_t m_nStaffParticle = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Aghsfort_WitchDoctor_Maledict {
        constexpr uint32_t m_iStartHealth = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_damage_threshold = 0x1320; // int32
        constexpr uint32_t max_bonus_damage = 0x1324; // int32
        constexpr uint32_t ticks = 0x1328; // int32
        constexpr uint32_t iCurrentTick = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Aghsfort_WitchDoctor_Voodoo_Restoration_Heal {
        constexpr uint32_t heal = 0x1318; // int32
        constexpr uint32_t mana_per_second = 0x131C; // float32
        constexpr uint32_t heal_interval = 0x1320; // float32
        constexpr uint32_t lifesteal_percent = 0x1324; // int32
        constexpr uint32_t spell_lifesteal_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Alchemist_AcidSpray {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Alchemist_AcidSpray_Thinker {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t armor_allies = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Alchemist_Berserk_Potion {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
        constexpr uint32_t move_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Alchemist_ChemicalRage {
        constexpr uint32_t base_attack_time = 0x1318; // float32
        constexpr uint32_t bonus_health = 0x131C; // int32
        constexpr uint32_t bonus_health_regen = 0x1320; // int32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
        constexpr uint32_t bonus_movespeed = 0x1328; // int32
        constexpr uint32_t m_nFXAlchemistCRIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Alchemist_Corrosive_Weaponry_Debuff {
        constexpr uint32_t slow_per_stack = 0x1318; // int32
        constexpr uint32_t status_resist_per_stack = 0x131C; // float32
        constexpr uint32_t chemical_rage_bonus = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Alchemist_GoblinsGreed {
        constexpr uint32_t m_DeathList = 0x1318; // CUtlVector< GameTime_t >
        constexpr uint32_t damage = 0x1330; // float32
        constexpr uint32_t duration = 0x1334; // float32
        constexpr uint32_t bonus_gold = 0x1338; // int32
        constexpr uint32_t bonus_bonus_gold = 0x133C; // int32
        constexpr uint32_t bonus_gold_cap = 0x1340; // int32
    }

    namespace CDOTA_Modifier_Alchemist_Scepter_Bonus_Damage {
        constexpr uint32_t scepter_bonus_damage = 0x1318; // int32
        constexpr uint32_t scepter_spell_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Alchemist_UnstableConcoction {
        constexpr uint32_t brew_time = 0x1318; // float32
        constexpr uint32_t brew_explosion = 0x131C; // float32
        constexpr uint32_t m_fStartTime = 0x1320; // GameTime_t
        constexpr uint32_t m_fLastAlertTime = 0x1324; // GameTime_t
        constexpr uint32_t m_nConcoctionFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_bHasStunned = 0x132C; // bool
        constexpr uint32_t damage_resistance = 0x1330; // int32
        constexpr uint32_t move_speed = 0x1334; // int32
    }

    namespace CDOTA_Modifier_AlphaWolf_CommandAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AlphaWolf_CommandAura_Bonus {
        constexpr uint32_t bonus_damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AlphaWolf_CriticalStrike {
        constexpr uint32_t crit_mult = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_AncientApparition_ChillingTouch {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t attack_range_bonus = 0x1320; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_AncientApparition_ChillingTouch_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AncientApparition_ColdFeet {
        constexpr uint32_t m_vecStartPosition = 0x1318; // Vector
        constexpr uint32_t m_nCurrentTick = 0x1324; // int32
        constexpr uint32_t damage = 0x1328; // float32
        constexpr uint32_t break_distance = 0x132C; // int32
        constexpr uint32_t stun_duration = 0x1330; // float32
    }

    namespace CDOTA_Modifier_AncientApparition_IceAge {
        constexpr uint32_t damage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_AncientApparition_IceBlast {
        constexpr uint32_t dot_damage = 0x1318; // float32
        constexpr uint32_t kill_pct = 0x131C; // float32
        constexpr uint32_t m_hFracturingEntity = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_AncientApparition_IceVortex {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
        constexpr uint32_t spell_resist_pct = 0x131C; // int32
        constexpr uint32_t drag_speed = 0x1320; // int32
        constexpr uint32_t aura_origin_x = 0x1324; // float32
        constexpr uint32_t aura_origin_y = 0x1328; // float32
        constexpr uint32_t shard_dps = 0x132C; // int32
        constexpr uint32_t shard_attack_speed_reduction = 0x1330; // int32
        constexpr uint32_t m_vCenter = 0x1334; // Vector
    }

    namespace CDOTA_Modifier_AncientApparition_IceVortexThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t movement_speed_pct = 0x131C; // int32
        constexpr uint32_t spell_resist_pct = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_hChilledEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AncientRockGolem_Weakening {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AncientRockGolem_Weakening_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Animation_LeftClawSwipe {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_radius = 0x131C; // int32
        constexpr uint32_t m_flScalar = 0x1320; // float32
        constexpr uint32_t m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Animation_RightClawSwipe {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_radius = 0x131C; // int32
        constexpr uint32_t m_flScalar = 0x1320; // float32
        constexpr uint32_t m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Animation_TailSpin {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_radius = 0x131C; // int32
        constexpr uint32_t m_flPlaybackRate = 0x1320; // float32
        constexpr uint32_t m_vHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_AntiMage_Counterspell {
        constexpr uint32_t m_LastParams = 0x1318; // CModifierParams
        constexpr uint32_t magic_resistance = 0x14F8; // int32
    }

    namespace CDOTA_Modifier_AntiMage_Counterspell_Passive {
        constexpr uint32_t magic_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_AntiMage_ManaBreak {
        constexpr uint32_t percent_damage_per_burn = 0x1318; // int32
        constexpr uint32_t mana_per_hit = 0x131C; // int32
        constexpr uint32_t mana_per_hit_pct = 0x1320; // float32
        constexpr uint32_t slow_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_AntiMage_ManaBreak_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Antimage_DampenMagic {
        constexpr uint32_t shard_spell_damage_reduction_pct = 0x1318; // int32
        constexpr uint32_t shard_bonus_spell_damage_reduction_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Antimage_DampenMagic_Aura {
        constexpr uint32_t shard_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Antimage_DampenMagic_Aura_Strong {
        constexpr uint32_t shard_bonus_aura_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ArcWarden_Flux {
        constexpr uint32_t m_nCasterTeam = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t tempest_damage_per_second = 0x1320; // int32
        constexpr uint32_t search_radius = 0x1324; // int32
        constexpr uint32_t move_speed_slow_pct = 0x1328; // int32
        constexpr uint32_t tempest_move_speed_slow_pct = 0x132C; // int32
        constexpr uint32_t status_resist = 0x1330; // int32
        constexpr uint32_t think_interval = 0x1334; // float32
        constexpr uint32_t m_nCurrentMovementSlow = 0x1338; // int32
        constexpr uint32_t m_nCurrentStatusResistance = 0x133C; // int32
        constexpr uint32_t m_bAlone = 0x1340; // bool
        constexpr uint32_t m_nFXIndex = 0x1344; // ParticleIndex_t
        constexpr uint32_t m_bIsTempestVersion = 0x1348; // bool
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_AttackRange {
        constexpr uint32_t attack_range_bonus = 0x1318; // int32
        constexpr uint32_t attack_magic_damage = 0x131C; // int32
        constexpr uint32_t attack_damage_bonus = 0x1320; // int32
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t shard_magic_resist = 0x1328; // int32
        constexpr uint32_t shard_slow_pct = 0x132C; // int32
        constexpr uint32_t aura_origin_x = 0x1330; // float32
        constexpr uint32_t aura_origin_y = 0x1334; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_Attack_Speed {
        constexpr uint32_t attack_speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_Evasion {
        constexpr uint32_t evasion_chance = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t shard_magic_resist = 0x1320; // int32
        constexpr uint32_t shard_slow_pct = 0x1324; // int32
        constexpr uint32_t aura_origin_x = 0x1328; // float32
        constexpr uint32_t aura_origin_y = 0x132C; // float32
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_Thinker_AttackRange {
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t m_vPos = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Attack_Speed {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ArcWarden_MagneticField_Thinker_Evasion {
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t m_vPos = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_ArcWarden_SparkWraith_Purge {
        constexpr uint32_t move_speed_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ArcWarden_SparkWraith_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t scepter_radius = 0x131C; // int32
        constexpr uint32_t wraith_vision_radius = 0x1320; // int32
        constexpr uint32_t wraith_speed = 0x1324; // int32
        constexpr uint32_t activation_delay = 0x1330; // float32
        constexpr uint32_t scepter_activation_delay = 0x1334; // float32
        constexpr uint32_t think_interval = 0x1338; // float32
        constexpr uint32_t m_flSparkDamage = 0x133C; // float32
        constexpr uint32_t m_nViewerID = 0x1340; // int32
        constexpr uint32_t m_bActive = 0x1344; // bool
        constexpr uint32_t m_bOriginal = 0x1345; // bool
    }

    namespace CDOTA_Modifier_ArcWarden_TempestDouble {
        constexpr uint32_t penalty_distance = 0x1318; // int32
        constexpr uint32_t attack_damage_penalty = 0x131C; // int32
    }

    namespace CDOTA_Modifier_ArcWarden_TempestDouble_DistancePenalty {
        constexpr uint32_t attack_damage_penalty = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Arc_Warden_Scepter {
        constexpr uint32_t m_hRune = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_ArcaneBoots_ManaRegen {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Armlet_UnholyStrength {
        constexpr uint32_t unholy_bonus_damage = 0x1318; // int32
        constexpr uint32_t unholy_bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t unholy_bonus_strength = 0x1320; // int32
        constexpr uint32_t unholy_bonus_armor = 0x1324; // int32
        constexpr uint32_t unholy_health_drain_per_second = 0x1328; // int32
        constexpr uint32_t str_tick_count = 0x132C; // int32
        constexpr uint32_t unholy_bonus_slow_resistance = 0x1330; // int32
        constexpr uint32_t tick_interval = 0x1334; // float32
        constexpr uint32_t m_flDamageRemainder = 0x1338; // float32
    }

    namespace CDOTA_Modifier_Ascension_AcidBlood {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ascension_AcidBlood_Thinker {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Ascension_Bulwark {
        constexpr uint32_t physical_damage_reduction = 0x1318; // float32
        constexpr uint32_t physical_damage_reduction_side = 0x131C; // float32
        constexpr uint32_t forward_angle = 0x1320; // float32
        constexpr uint32_t side_angle = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Ascension_Meteoric_Land {
        constexpr uint32_t impact_radius = 0x1318; // int32
        constexpr uint32_t land_time = 0x131C; // float32
        constexpr uint32_t burn_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Assassins_Dagger_Debuff {
        constexpr uint32_t armor_debuff = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Attached_Unit {
        constexpr uint32_t m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bPhysicalImmune = 0x131C; // bool
        constexpr uint32_t m_bMagicImmune = 0x131D; // bool
    }

    namespace CDOTA_Modifier_Avianas_Feather {
        constexpr uint32_t evasion = 0x1318; // int32
        constexpr uint32_t move_speed = 0x131C; // int32
        constexpr uint32_t flight_threshold = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Axe_BatleHunger_Self {
        constexpr uint32_t scepter_armor_change = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Axe_BatleHunger_Self_Movespeed {
        constexpr uint32_t speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Axe_BattleHunger {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
        constexpr uint32_t scepter_armor_change = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Axe_BerserkersCall {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDidSetAttackTarget = 0x131C; // bool
        constexpr uint32_t bonus_attack_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Axe_BerserkersCallArmor {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Axe_CounterHelix {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t trigger_attacks = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Axe_CounterHelix_DamageReduction {
        constexpr uint32_t shard_damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Axe_CullingBlade_Boost {
        constexpr uint32_t speed_bonus = 0x1318; // int32
        constexpr uint32_t armor_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Axe_CullingBlade_Permanent {
        constexpr uint32_t armor_per_stack = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Banana {
        constexpr uint32_t slide_distance = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t slide_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Banana_Knockback {
        constexpr uint32_t m_vCenter = 0x1318; // Vector
        constexpr uint32_t knockback_distance = 0x1324; // int32
        constexpr uint32_t knockback_height = 0x1328; // int32
        constexpr uint32_t knockback_duration = 0x132C; // float32
        constexpr uint32_t m_vHorizOffset = 0x1330; // Vector
        constexpr uint32_t m_vStartPosition = 0x133C; // Vector
        constexpr uint32_t m_vDir = 0x1348; // Vector
        constexpr uint32_t m_fCurrentTimeHoriz = 0x1354; // float32
        constexpr uint32_t m_fCurrentTimeVert = 0x1358; // float32
        constexpr uint32_t m_bShouldStun = 0x135C; // bool
        constexpr uint32_t flTimeSinceChange = 0x1360; // float32
    }

    namespace CDOTA_Modifier_Bane_Enfeeble_Effect {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t heal_reduction = 0x131C; // int32
        constexpr uint32_t cast_reduction = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Bane_FiendsGrip {
        constexpr uint32_t fiend_grip_mana_drain = 0x1318; // int32
        constexpr uint32_t fiend_grip_tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Bane_FiendsGrip_Cast_Illusion {
        constexpr uint32_t fiend_grip_mana_drain = 0x1318; // int32
        constexpr uint32_t fiend_grip_tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Bane_Nightmare {
        constexpr uint32_t m_nSource = 0x1318; // int32
        constexpr uint32_t animation_rate = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Bane_Nightmare_AttackSpeed_Bonus {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_BaseBlocker {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Batrider_Firefly {
        constexpr uint32_t m_bActive = 0x1318; // bool
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_ifirefly_Active = 0x1320; // int32
        constexpr uint32_t tree_radius = 0x1324; // int32
        constexpr uint32_t damage_per_second = 0x1328; // int32
        constexpr uint32_t movement_speed = 0x132C; // int32
        constexpr uint32_t bonus_slow_resistance = 0x1330; // int32
        constexpr uint32_t tick_interval = 0x1334; // float32
        constexpr uint32_t m_nFXIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_fNextDamageTick = 0x1340; // GameTime_t
        constexpr uint32_t m_vLastFirePoolLoc = 0x1344; // Vector
        constexpr uint32_t bonus_vision = 0x1350; // int32
    }

    namespace CDOTA_Modifier_Batrider_Flamebreak_Damage {
        constexpr uint32_t damage_impact = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t slow = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Batrider_FlamingLasso {
        constexpr uint32_t tick_rate = 0x1318; // float32
        constexpr uint32_t drag_distance = 0x131C; // int32
        constexpr uint32_t break_distance = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t vPreviousLocation = 0x1328; // Vector
    }

    namespace CDOTA_Modifier_Batrider_FlamingLasso_Damage {
        constexpr uint32_t max_ticks = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t tick_rate = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Batrider_StickyNapalm {
        constexpr uint32_t movement_speed_pct = 0x1318; // float32
        constexpr uint32_t turn_rate_pct = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t application_damage = 0x1324; // int32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_nFXStackIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Batrider_StickyNapalm_Application {
        constexpr uint32_t m_bShouldApply = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Beastmaster_Axe_Stack_Counter {
        constexpr uint32_t damage_amp = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Beastmaster_CallOfTheWild_Hawk {
        constexpr uint32_t m_hOwner = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t attack_radius = 0x131C; // int32
        constexpr uint32_t m_flLastAttack = 0x1320; // GameTime_t
        constexpr uint32_t roaming_seconds_per_rotation = 0x1324; // float32
        constexpr uint32_t roaming_radius = 0x1328; // int32
        constexpr uint32_t attack_interval = 0x132C; // float32
        constexpr uint32_t min_move_speed = 0x1330; // int32
        constexpr uint32_t max_move_speed = 0x1334; // int32
        constexpr uint32_t m_iPreviousHawkCount = 0x1338; // int32
        constexpr uint32_t m_flRotation = 0x133C; // float32
    }

    namespace CDOTA_Modifier_Beastmaster_DrumsOfSlom {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t max_stacks = 0x1320; // int32
        constexpr uint32_t base_damage = 0x1324; // float32
        constexpr uint32_t heal_pct = 0x1328; // int32
        constexpr uint32_t creep_heal_pct = 0x132C; // int32
        constexpr uint32_t iCurrentAttacksAtMinInterval = 0x1330; // int32
        constexpr uint32_t stack_decay_time = 0x1334; // float32
        constexpr uint32_t max_drum_hit_interval = 0x1338; // float32
        constexpr uint32_t min_drum_hit_interval = 0x133C; // float32
        constexpr uint32_t m_flLastStackChangeTime = 0x1340; // GameTime_t
        constexpr uint32_t m_flLastDrumHitTime = 0x1344; // GameTime_t
    }

    namespace CDOTA_Modifier_Beastmaster_Hawk_Dive {
        constexpr uint32_t dive_damage = 0x1318; // int32
        constexpr uint32_t dive_root_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Beastmaster_Hawk_Perch_Flight {
        constexpr uint32_t perch_flight_height = 0x1318; // int32
        constexpr uint32_t perch_tree_height = 0x131C; // int32
        constexpr uint32_t flight_speed = 0x1320; // int32
        constexpr uint32_t m_flZDelta = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Beastmaster_Hawk_Perch_Perching {
        constexpr uint32_t perching_tree_height = 0x1318; // int32
        constexpr uint32_t m_hTree = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Beastmaster_InnerBeast_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Beastmaster_PrimalRoar_Push {
        constexpr uint32_t m_vVelocity = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Beastmaster_PrimalRoar_Slow {
        constexpr uint32_t slow_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t slow_attack_speed_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Beastmaster_PrimalRoar_Speed {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Beastmaster_WildAxes {
        constexpr uint32_t m_vLeftControl = 0x1318; // Vector
        constexpr uint32_t m_vRightControl = 0x1324; // Vector
        constexpr uint32_t m_vTargetLoc = 0x1330; // Vector
        constexpr uint32_t m_vSourceLoc = 0x133C; // Vector
        constexpr uint32_t m_flDuration = 0x1348; // float32
        constexpr uint32_t m_flDieTime = 0x134C; // GameTime_t
        constexpr uint32_t m_bReturning = 0x1350; // bool
        constexpr uint32_t m_bCatchingAxes = 0x1351; // bool
        constexpr uint32_t m_hAxes = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nAxeFXIndex = 0x1370; // ParticleIndex_t[2]
        constexpr uint32_t m_hHitList = 0x1378; // CUtlVector< CHandle< C_BaseEntity > >[2]
        constexpr uint32_t radius = 0x13A8; // int32
        constexpr uint32_t spread = 0x13AC; // int32
        constexpr uint32_t axe_damage = 0x13B0; // int32
        constexpr uint32_t duration = 0x13B4; // float32
        constexpr uint32_t min_throw_duration = 0x13B8; // float32
        constexpr uint32_t max_throw_duration = 0x13BC; // float32
    }

    namespace CDOTA_Modifier_BerserkerTroll_Break {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_BigThunderLizard_Frenzy {
        constexpr uint32_t attackspeed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BigThunderLizard_Slam {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BigThunderLizard_Wardrums {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BigThunderLizard_Wardrums_Aura {
        constexpr uint32_t speed_bonus = 0x1318; // int32
        constexpr uint32_t accuracy = 0x131C; // int32
    }

    namespace CDOTA_Modifier_BlackDragon_DragonhideAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlackDragon_DragonhideAura_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlackDragon_Fireball_Thinker {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_BlackDragon_SplashAttack {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t damage_percent = 0x131C; // float32
    }

    namespace CDOTA_Modifier_BlackDrake_MagicAmplification {
        constexpr uint32_t spell_amp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlackDrake_MagicAmplification_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Black_King_Bar_Immune {
        constexpr uint32_t model_scale = 0x1318; // int32
        constexpr uint32_t magic_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Blight_Stone_Corruption {
        constexpr uint32_t corruption_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Bloodseeker_BloodMist {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Bloodseeker_BloodMist_Barrier {
        constexpr uint32_t flLastGameTime = 0x1318; // GameTime_t
        constexpr uint32_t m_flCurrentShield = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Bloodseeker_BloodMist_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Bloodseeker_Bloodbath_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Bloodseeker_Bloodrage {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
        constexpr uint32_t shard_max_health_dmg = 0x1320; // float32
        constexpr uint32_t damage_pct = 0x1324; // float32
        constexpr uint32_t flTickRate = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Bloodseeker_Rupture {
        constexpr uint32_t movement_damage_pct = 0x1318; // int32
        constexpr uint32_t hp_pct = 0x131C; // float32
        constexpr uint32_t vLastPos = 0x1320; // Vector
        constexpr uint32_t bResetPosition = 0x132C; // bool
        constexpr uint32_t m_fAccumulatedDamage = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Bloodseeker_Thirst {
        constexpr uint32_t hero_kill_heal = 0x1318; // int32
        constexpr uint32_t creep_kill_heal = 0x131C; // int32
        constexpr uint32_t half_bonus_aoe = 0x1320; // int32
        constexpr uint32_t visibility_threshold_pct = 0x1324; // int32
        constexpr uint32_t invis_threshold_pct = 0x1328; // int32
        constexpr uint32_t min_bonus_pct = 0x132C; // int32
        constexpr uint32_t max_bonus_pct = 0x1330; // int32
        constexpr uint32_t bonus_movement_speed = 0x1334; // int32
        constexpr uint32_t linger_duration = 0x1338; // float32
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Bloodseeker_Thirst_Speed {
        constexpr uint32_t m_iszModifierString = 0x1318; // CUtlSymbolLarge
    }

    namespace CDOTA_Modifier_Bloodseeker_Thirst_Vision {
        constexpr uint32_t invis_threshold_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Bloodthorn_Debuff {
        constexpr uint32_t target_crit_multiplier = 0x1318; // float32
        constexpr uint32_t silence_damage_percent = 0x131C; // float32
        constexpr uint32_t proc_damage = 0x1320; // int32
        constexpr uint32_t m_flDamageTaken = 0x1324; // float32
        constexpr uint32_t m_vRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlueDragonspawnOverseer_DevotionAura_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlueDragonspawnOverseer_Evasion {
        constexpr uint32_t evasion_chance_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BlueDragonspawnSorcerer_Evasion {
        constexpr uint32_t evasion_chance_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Boss_DarkWillow_Bedlam {
        constexpr uint32_t m_flRotation = 0x1318; // float32
        constexpr uint32_t m_hWisp = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flLastAttack = 0x1320; // GameTime_t
        constexpr uint32_t reversed = 0x1324; // bool
        constexpr uint32_t roaming_radius = 0x1328; // int32
        constexpr uint32_t attack_radius = 0x132C; // int32
        constexpr uint32_t roaming_seconds_per_rotation = 0x1330; // float32
        constexpr uint32_t attack_interval = 0x1334; // float32
        constexpr uint32_t m_bSetupWarning = 0x1338; // bool
        constexpr uint32_t m_nPreviewFX = 0x133C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_BottleRegeneration {
        constexpr uint32_t health_restore = 0x1318; // int32
        constexpr uint32_t mana_restore = 0x131C; // int32
        constexpr uint32_t health_restore_pct = 0x1320; // int32
        constexpr uint32_t mana_restore_pct = 0x1324; // int32
        constexpr uint32_t break_on_hero_damage = 0x1328; // int32
        constexpr uint32_t m_fHealingDone = 0x132C; // float32
    }

    namespace CDOTA_Modifier_BountyHunter_Jinada {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t gold_steal = 0x131C; // int32
        constexpr uint32_t m_nFXIndexA = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_BountyHunter_Lookout {
        constexpr uint32_t radius = 0x1328; // int32
    }

    namespace CDOTA_Modifier_BountyHunter_Track {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t m_nParentGold = 0x131C; // int32
        constexpr uint32_t target_crit_multiplier = 0x1320; // int32
    }

    namespace CDOTA_Modifier_BountyHunter_TrackEffect {
        constexpr uint32_t bonus_move_speed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_BountyHunter_Track_Bear_Trap {
        constexpr uint32_t m_bActivated = 0x1328; // bool
    }

    namespace CDOTA_Modifier_BountyHunter_WindWalk {
        constexpr uint32_t damage_reduction_pct = 0x1328; // int32
        constexpr uint32_t shard_stun_duration = 0x132C; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_BountyHunter_WindWalk_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t attack_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_BrewUp {
        constexpr uint32_t m_bBuffExtended = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Brewmaster_CinderBrew {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t m_bIgniteActive = 0x131C; // bool
        constexpr uint32_t m_flDamagePerTick = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Brewmaster_DrunkenBrawler {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x131C; // ParticleIndex_t
        constexpr uint32_t min_movement = 0x1320; // int32
        constexpr uint32_t max_movement = 0x1324; // int32
        constexpr uint32_t m_iMovementBonus = 0x1328; // int32
        constexpr uint32_t m_flNextUpdateTime = 0x132C; // GameTime_t
    }

    namespace CDOTA_Modifier_Brewmaster_DrunkenBrawler_Passive {
        constexpr uint32_t dodge_chance = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t crit_multiplier = 0x1320; // int32
        constexpr uint32_t attack_speed = 0x1324; // int32
        constexpr uint32_t active_multiplier = 0x1328; // float32
        constexpr uint32_t stun_chance = 0x132C; // int32
        constexpr uint32_t bash_cooldown = 0x1330; // float32
        constexpr uint32_t stun_duration = 0x1334; // float32
        constexpr uint32_t slow_duration = 0x1338; // float32
        constexpr uint32_t bonus_move_speed = 0x133C; // int32
        constexpr uint32_t bonus_status_resist = 0x1340; // int32
        constexpr uint32_t armor = 0x1344; // int32
        constexpr uint32_t magic_resist = 0x1348; // int32
        constexpr uint32_t m_flLastBash = 0x134C; // float32
    }

    namespace CDOTA_Modifier_Brewmaster_DrunkenBrawler_Slow {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_DrunkenHaze {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t miss_chance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_Fire_Phase {
        constexpr uint32_t status_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_PermanentImmolation {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_PermanentImmolation_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_PrimalSplit {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hSecondaryTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTertiaryTarget = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hFourthTarget = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hReturnBrewling = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_PrimalSplitDelay {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Brewmaster_PrimalSplitDuration {
        constexpr uint32_t bonus_brewling_hp = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_Primal_Companion {
        constexpr uint32_t cooldown_on_death = 0x1318; // float32
        constexpr uint32_t cooldown_on_take_damage = 0x131C; // float32
        constexpr uint32_t disable_distance = 0x1320; // int32
        constexpr uint32_t movement_slow_when_out_of_range = 0x1324; // int32
        constexpr uint32_t m_bCanAttack = 0x1328; // bool
        constexpr uint32_t m_nFxIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t cooldown_penalty_pct = 0x1330; // int32
        constexpr uint32_t bonus_brewling_hp = 0x1334; // int32
        constexpr uint32_t bonus_damage = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_Pulverize {
        constexpr uint32_t bonus_building_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_ThunderClap {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t attack_speed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_Void_AstralPulse {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Brewmaster_Void_Astral_Pull_Movement {
        constexpr uint32_t pull_distance = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t pull_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Brewmaster_Void_Brawler_Slow {
        constexpr uint32_t movespeed = 0x1318; // int32
        constexpr uint32_t active_multiplier = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Brewmaster_WindWalk {
        constexpr uint32_t bonus_movement_speeed = 0x1328; // int32
        constexpr uint32_t bonus_damage = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Bristleback_Active_ConicalQuillSpray {
        constexpr uint32_t activation_num_quill_sprays = 0x1318; // int32
        constexpr uint32_t activation_spray_interval = 0x131C; // float32
        constexpr uint32_t activation_angle = 0x1320; // int32
        constexpr uint32_t cast_range_bonus = 0x1324; // int32
        constexpr uint32_t activation_movement_speed_pct = 0x1328; // int32
        constexpr uint32_t activation_turn_rate_pct = 0x132C; // int32
        constexpr uint32_t activation_disable_turning = 0x1330; // int32
        constexpr uint32_t activation_ignore_cast_angle = 0x1334; // int32
        constexpr uint32_t activation_turn_rate = 0x1338; // int32
        constexpr uint32_t activation_delay = 0x133C; // float32
        constexpr uint32_t m_fStartTime = 0x1340; // GameTime_t
        constexpr uint32_t bDelayFinished = 0x1344; // bool
        constexpr uint32_t m_flFacingTarget = 0x1348; // float32
        constexpr uint32_t m_vFacing = 0x134C; // Vector
        constexpr uint32_t m_nNumSprays = 0x1358; // int32
        constexpr uint32_t m_nPoseParameterWE = 0x135C; // int32
        constexpr uint32_t m_nPoseParameterNS = 0x1360; // int32
        constexpr uint32_t m_flLastPoseX = 0x1364; // float32
        constexpr uint32_t m_flLastPoseY = 0x1368; // float32
        constexpr uint32_t m_nLastMaxDirection = 0x136C; // int32
        constexpr uint32_t m_vLastOrigin = 0x1370; // Vector
        constexpr uint32_t m_flLastGameTime = 0x137C; // GameTime_t
    }

    namespace CDOTA_Modifier_Bristleback_Bristleback {
        constexpr uint32_t side_damage_reduction = 0x1318; // int32
        constexpr uint32_t back_damage_reduction = 0x131C; // int32
        constexpr uint32_t side_angle = 0x1320; // int32
        constexpr uint32_t back_angle = 0x1324; // int32
        constexpr uint32_t quill_release_threshold = 0x1328; // float32
        constexpr uint32_t quill_release_interval = 0x132C; // float32
        constexpr uint32_t m_bRearHit = 0x1330; // bool
        constexpr uint32_t m_bSideHit = 0x1331; // bool
        constexpr uint32_t m_flDamageAccumulated = 0x1334; // float32
        constexpr uint32_t m_nAccumulatedHits = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Bristleback_QuillSpray {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Bristleback_QuillSpray_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_ViewerTimer = 0x1338; // CountdownTimer
        constexpr uint32_t projectile_speed = 0x1350; // int32
        constexpr uint32_t radius = 0x1354; // float32
    }

    namespace CDOTA_Modifier_Bristleback_ViscousNasalGoo {
        constexpr uint32_t base_armor = 0x1318; // float32
        constexpr uint32_t armor_per_stack = 0x131C; // float32
        constexpr uint32_t base_move_slow = 0x1320; // int32
        constexpr uint32_t move_slow_per_stack = 0x1324; // int32
        constexpr uint32_t stack_limit = 0x1328; // int32
        constexpr uint32_t m_nFXStackIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Bristleback_Warpath {
        constexpr uint32_t damage_per_stack = 0x1318; // int32
        constexpr uint32_t move_speed_per_stack = 0x131C; // int32
        constexpr uint32_t max_stacks = 0x1320; // int32
        constexpr uint32_t stack_duration = 0x1324; // float32
        constexpr uint32_t m_flDuration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Broodmother_IncapacitatingBite {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Broodmother_IncapacitatingBiteOrb {
        constexpr uint32_t miss_chance = 0x1318; // int32
        constexpr uint32_t bonus_movespeed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Broodmother_InsatiableHunger {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t lifesteal_pct = 0x131C; // int32
        constexpr uint32_t slow_duration = 0x1320; // float32
        constexpr uint32_t bat_bonus = 0x1324; // float32
        constexpr uint32_t shard_damage_tick_interval = 0x1328; // float32
        constexpr uint32_t damage_tick_count = 0x132C; // int32
        constexpr uint32_t shard_damage_per_tick = 0x1330; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Broodmother_PoisonSting {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t duration_hero = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Broodmother_PoisonStingDebuff {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Broodmother_Silken_Bola {
        constexpr uint32_t attack_damage = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t miss_chance = 0x1320; // int32
        constexpr uint32_t shard_miss_chance = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Broodmother_SpawnSpiderite {
        constexpr uint32_t buff_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Broodmother_SpawnSpideriteDebuff {
        constexpr uint32_t m_hParentSpider = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Broodmother_SpawnSpiderlings {
        constexpr uint32_t spiderling_duration = 0x1318; // float32
        constexpr uint32_t count = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Broodmother_SpawnSpiderlingsShard {
        constexpr uint32_t shard_spiderling_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Broodmother_Spider_HP {
        constexpr uint32_t hp_bonus = 0x1318; // int32
        constexpr uint32_t damage_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Broodmother_SpinWeb {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
        constexpr uint32_t bonus_movespeed_scepter = 0x131C; // int32
        constexpr uint32_t bonus_turn_rate = 0x1320; // float32
        constexpr uint32_t flLastDamageTime = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Broodmother_SpinWeb_Slowed {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Broodmother_SpinWeb_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Broodmother_StickySnare {
        constexpr uint32_t m_vOrigin = 0x1318; // Vector
        constexpr uint32_t m_vWallDirection = 0x1324; // Vector
        constexpr uint32_t m_vWallRight = 0x1330; // Vector
        constexpr uint32_t width = 0x133C; // int32
        constexpr uint32_t root_duration = 0x1340; // float32
        constexpr uint32_t formation_delay = 0x1344; // float32
        constexpr uint32_t m_bTouching = 0x1348; // bool
        constexpr uint32_t m_hRight = 0x134C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bParticle = 0x1350; // bool
        constexpr uint32_t m_flStartingTime = 0x1354; // GameTime_t
        constexpr uint32_t m_nFoWID = 0x1358; // int32
        constexpr uint32_t m_nTeamID = 0x135C; // int32
        constexpr uint32_t m_vecAffectedHeroes = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nWarmupFXIndex = 0x1378; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Broodmother_StickySnare_Root {
        constexpr uint32_t damage_per_second = 0x1318; // float32
        constexpr uint32_t m_bFirstSecond = 0x131C; // bool
    }

    namespace CDOTA_Modifier_CallOfTheWild_Boar_BonusDamage {
        constexpr uint32_t boar_bonus_damage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_CallOfTheWild_Boar_PoisonBase {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_CallOfTheWild_Boar_PoisonEffect {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_CentaurKhan_EnduranceAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_CentaurKhan_EnduranceAura_Bonus {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Centaur_Cart {
        constexpr uint32_t m_hUnit = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bWasMoving = 0x131C; // bool
        constexpr uint32_t m_bSpawnDone = 0x131D; // bool
        constexpr uint32_t m_vecOldForward = 0x1320; // Vector
        constexpr uint32_t break_distance = 0x132C; // int32
        constexpr uint32_t m_vecPreviousLocation = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_Centaur_DoubleEdge_Buff {
        constexpr uint32_t shard_str_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Centaur_DoubleEdge_Slow {
        constexpr uint32_t shard_movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Centaur_HoofStomp_Windup {
        constexpr uint32_t bInterrupted = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Centaur_Mounted {
        constexpr uint32_t melee_attack_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Centaur_Return {
        constexpr uint32_t return_damage = 0x1318; // int32
        constexpr uint32_t return_damage_str = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Centaur_Return_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Centaur_Return_Bonus_Damage {
        constexpr uint32_t damage_gain_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Centaur_Stampede {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_reduction = 0x131C; // int32
        constexpr uint32_t has_flying_movement = 0x1320; // int32
        constexpr uint32_t m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Centaur_Stampede_Slow {
        constexpr uint32_t cast_time_increase = 0x1318; // int32
        constexpr uint32_t slow_movement_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Ceremonial_Robe_Aura {
        constexpr uint32_t status_resistance = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_ChaosKnight_Chaos_Strike {
        constexpr uint32_t creep_multiplier = 0x1318; // float32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x131C; // float32
        constexpr uint32_t crit_min = 0x1320; // int32
        constexpr uint32_t crit_max = 0x1324; // int32
        constexpr uint32_t lifesteal = 0x1328; // int32
        constexpr uint32_t chance = 0x132C; // float32
        constexpr uint32_t m_nNextCrit = 0x1330; // int32
    }

    namespace CDOTA_Modifier_ChaosKnight_Chaos_Strike_Debuff {
        constexpr uint32_t maim_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ChaosKnight_Reality_Rift_Debuff {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Chen_DivineFavor {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t heal_rate = 0x131C; // float32
        constexpr uint32_t creep_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Chen_DivineFavor_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Chen_Divine_Favor_Armor {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t heal_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Chen_Divine_Favor_Teleport {
        constexpr uint32_t bToChen = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Chen_HandOfGod_Hot {
        constexpr uint32_t heal_per_second = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Chen_HolyPersuasion {
        constexpr uint32_t health_min = 0x1318; // int32
        constexpr uint32_t new_max = 0x131C; // int32
        constexpr uint32_t health_bonus = 0x1320; // int32
        constexpr uint32_t damage_bonus = 0x1324; // int32
        constexpr uint32_t movement_speed_bonus = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Chen_Penitence {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage_taken = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Chen_Penitence_Attack_Speed_Buff {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Chen_Penitence_Self_Attack_Range {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t self_attack_range_bonus = 0x131C; // int32
        constexpr uint32_t m_bActive = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Chen_TestOfFaith_Teleport {
        constexpr uint32_t bToChen = 0x1318; // bool
    }

    namespace CDOTA_Modifier_ClarityPotion {
        constexpr uint32_t mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Clinkz_BurningBarrage {
        constexpr uint32_t m_iArrowCount = 0x1318; // int32
        constexpr uint32_t m_vOriginalTarget = 0x131C; // Vector
        constexpr uint32_t arrow_width = 0x1328; // int32
        constexpr uint32_t arrow_speed = 0x132C; // float32
        constexpr uint32_t arrow_range_multiplier = 0x1330; // float32
        constexpr uint32_t wave_count = 0x1334; // int32
        constexpr uint32_t arrow_count_per_wave = 0x1338; // int32
        constexpr uint32_t arrow_angle = 0x133C; // int32
        constexpr uint32_t m_iLoopCount = 0x1340; // int32
        constexpr uint32_t m_flInterval = 0x1344; // float32
        constexpr uint32_t m_flCycleDelay = 0x1348; // float32
        constexpr uint32_t m_flTimeWaste = 0x134C; // float32
        constexpr uint32_t m_flExpectedTime = 0x1350; // GameTime_t
    }

    namespace CDOTA_Modifier_Clinkz_Burning_Army {
        constexpr uint32_t attack_rate = 0x1318; // float32
        constexpr uint32_t damage_percent = 0x131C; // int32
        constexpr uint32_t skeleton_health = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t skeleton_building_damage_reduction = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Clinkz_Burning_Army_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
        constexpr uint32_t count = 0x131C; // int32
        constexpr uint32_t range = 0x1320; // int32
        constexpr uint32_t m_vFacePosition = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_Clinkz_DeathPact {
        constexpr uint32_t health_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Clinkz_SearingArrows {
        constexpr uint32_t damage_bonus = 0x1318; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_bBonusAttack = 0x1338; // bool
    }

    namespace CDOTA_Modifier_Clinkz_Strafe {
        constexpr uint32_t attack_speed_bonus = 0x1318; // int32
        constexpr uint32_t attack_range_bonus = 0x131C; // int32
        constexpr uint32_t archer_attack_speed_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Clinkz_Tar_Bomb_SearingArrows {
        constexpr uint32_t damage_bonus = 0x1318; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_bBonusAttack = 0x1338; // bool
    }

    namespace CDOTA_Modifier_Clinkz_Tar_Bomb_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Clinkz_Tar_Bomb_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Clinkz_WindWalk {
        constexpr uint32_t move_speed_bonus_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Cloak_Of_Flames_Debuff {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_illusions = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Clockwerk_RocketFlare_Thinker {
        constexpr uint32_t radius = 0x1318; // float32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Corpselord_Revive {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t ticks_to_revive = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t m_pReviveTarget = 0x1324; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_nCurrentTicks = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Courier_Burst {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Courier_ReturnStashItems {
        constexpr uint32_t m_vLocation = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Courier_TakeStashItems {
        constexpr uint32_t m_hStashOwner = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vLocation = 0x131C; // Vector
        constexpr uint32_t m_bTransferAfterTake = 0x1328; // bool
        constexpr uint32_t stash_pickup_distance = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Courier_TransferItems {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Creature_Flamestrike {
        constexpr uint32_t impact_radius = 0x1318; // int32
        constexpr uint32_t ground_burn_duration = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // float32
        constexpr uint32_t vision_distance = 0x1324; // int32
        constexpr uint32_t vision_duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Creature_Flamestrike_Ground {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t burn_radius = 0x131C; // int32
        constexpr uint32_t burn_dps = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Creature_Full_Avoidance {
        constexpr uint32_t m_flOriginalAvoidance = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Creature_HybridFlyer {
        constexpr uint32_t m_ctTimer = 0x1318; // CountdownTimer
    }

    namespace CDOTA_Modifier_Creature_IceSlam_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nPathEffectIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Creep_Bonus_XP {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t hero_damage_penalty = 0x131C; // int32
        constexpr uint32_t bonus_gold = 0x1320; // int32
        constexpr uint32_t m_iGoldBounty = 0x1324; // int32
        constexpr uint32_t iBannerEffect = 0x1328; // ParticleIndex_t
        constexpr uint32_t iRingEffect = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Creep_Irresolute {
        constexpr uint32_t hero_damage_penalty = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Creep_Piercing {
        constexpr uint32_t creep_damage_bonus = 0x1318; // int32
        constexpr uint32_t hero_damage_penalty = 0x131C; // int32
        constexpr uint32_t heavy_damage_penalty = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Creep_Siege {
        constexpr uint32_t bonus_building_damage = 0x1318; // int32
        constexpr uint32_t incoming_hero_damage_penalty = 0x131C; // int32
        constexpr uint32_t incoming_basic_damage_penalty = 0x1320; // int32
        constexpr uint32_t incoming_controlled_unit_penalty = 0x1324; // int32
    }

    namespace CDOTA_Modifier_CrystalMaiden_BrillianceAuraEffect {
        constexpr uint32_t base_mana_regen = 0x1318; // float32
        constexpr uint32_t self_factor = 0x131C; // float32
        constexpr uint32_t proximity_bonus_factor = 0x1320; // float32
        constexpr uint32_t proximity_bonus_radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_CrystalMaiden_CrystalNova {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_CrystalMaiden_FreezingField {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t explosion_interval = 0x1324; // float32
        constexpr uint32_t shard_bonus_explosion = 0x1328; // float32
        constexpr uint32_t explosion_radius = 0x132C; // int32
        constexpr uint32_t slow_duration = 0x1330; // float32
        constexpr uint32_t explosion_min_dist = 0x1334; // int32
        constexpr uint32_t explosion_max_dist = 0x1338; // int32
        constexpr uint32_t frostbite_delay = 0x133C; // float32
        constexpr uint32_t m_fLastTick = 0x1340; // GameTime_t
        constexpr uint32_t m_fTimeAccumulator = 0x1344; // float32
        constexpr uint32_t m_iExplosionCount = 0x1348; // int32
        constexpr uint32_t m_iExplosionTotalCount = 0x134C; // int32
        constexpr uint32_t m_iExplosionQuadrant = 0x1350; // int32
        constexpr uint32_t m_iExplosionDistance = 0x1354; // int32
        constexpr uint32_t shard_self_movement_speed_slow_pct = 0x1358; // int32
        constexpr uint32_t m_nFXIndex = 0x135C; // ParticleIndex_t
        constexpr uint32_t m_hHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t can_move = 0x1380; // int32
    }

    namespace CDOTA_Modifier_CrystalMaiden_FreezingField_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attack_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_CrystalMaiden_Frostbite {
        constexpr uint32_t max_ticks = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t creep_damage_per_second = 0x1320; // int32
        constexpr uint32_t tick_interval = 0x1324; // float32
    }

    namespace CDOTA_Modifier_CrystalMaiden_IceRink_Movement {
        constexpr uint32_t m_bHitFirstUpdate = 0x1318; // bool
        constexpr uint32_t flMovementSpeed = 0x131C; // float32
        constexpr uint32_t m_flTurnBoostProgress = 0x1320; // float32
        constexpr uint32_t m_flFacingTarget = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_flHitEndTime = 0x132C; // GameTime_t
        constexpr uint32_t hit_recover_time = 0x1330; // float32
        constexpr uint32_t m_vDirection = 0x1334; // Vector
    }

    namespace CDOTA_Modifier_CrystalMaiden_IceRink_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t rink_formation_time = 0x131C; // float32
        constexpr uint32_t m_bActive = 0x1320; // bool
    }

    namespace CDOTA_Modifier_CrystalMaiden_Let_It_Go_Thinker {
        constexpr uint32_t m_vPathStart = 0x1318; // Vector
        constexpr uint32_t m_vPathEnd = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_Crystal_Maiden_Crystal_Clone_Statue {
        constexpr uint32_t frostbite_radius = 0x1318; // int32
        constexpr uint32_t anim_delay = 0x131C; // float32
        constexpr uint32_t m_bActivated = 0x1320; // bool
        constexpr uint32_t clone_health = 0x1324; // int32
        constexpr uint32_t m_flDamageTaken = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Cyclone {
        constexpr uint32_t m_flStartTime = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_DaggerOfRistul_Buff {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DarkSeer_IonShell_IllusionInvulnerability {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DarkSeer_Normal_Punch {
        constexpr uint32_t m_PositionIndex = 0x1318; // Vector[30]
        constexpr uint32_t m_nNormalPunchBuffIndex = 0x1480; // ParticleIndex_t
        constexpr uint32_t m_flDistanceTraveled = 0x1484; // float32
        constexpr uint32_t m_bIsValidTarget = 0x1488; // bool
    }

    namespace CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion {
        constexpr uint32_t replica_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DarkSeer_Normal_Punch_Illusion_Thinker {
        constexpr uint32_t m_vecIllusionSpawnPosition = 0x1318; // Vector
        constexpr uint32_t speed = 0x1324; // int32
        constexpr uint32_t m_hTarget = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_DarkSeer_Surge {
        constexpr uint32_t speed_boost = 0x1318; // int32
        constexpr uint32_t trail_radius = 0x131C; // int32
        constexpr uint32_t trail_duration = 0x1320; // float32
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x1324; // Vector
        constexpr uint32_t m_bTrailStarted = 0x1330; // bool
    }

    namespace CDOTA_Modifier_DarkSeer_Surge_Trail {
        constexpr uint32_t trail_move_slow = 0x1318; // int32
        constexpr uint32_t trail_damage = 0x131C; // int32
        constexpr uint32_t trail_damage_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_DarkSeer_Surge_Trail_Thinker {
        constexpr uint32_t trail_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_DarkSeer_Vacuum {
        constexpr uint32_t pull_speed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_DarkSeer_WallOfReplica {
        constexpr uint32_t m_vWallDirection = 0x1318; // Vector
        constexpr uint32_t m_vWallRight = 0x1324; // Vector
        constexpr uint32_t m_PreventReplicateTime = 0x1348; // CUtlMap< int32, GameTime_t >
        constexpr uint32_t width = 0x1368; // int32
        constexpr uint32_t wall_damage = 0x136C; // int32
        constexpr uint32_t slow_duration = 0x1370; // float32
        constexpr uint32_t replica_damage_incoming = 0x1374; // int32
        constexpr uint32_t replica_damage_outgoing = 0x1378; // int32
    }

    namespace CDOTA_Modifier_DarkSeer_WallOfReplica_Illusion {
        constexpr uint32_t replica_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DarkSeer_WallOfReplica_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DarkWillow_Bedlam {
        constexpr uint32_t m_flRotation = 0x1318; // float32
        constexpr uint32_t m_hWisp = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flLastAttack = 0x1320; // GameTime_t
        constexpr uint32_t roaming_radius = 0x1324; // int32
        constexpr uint32_t attack_radius = 0x1328; // int32
        constexpr uint32_t roaming_seconds_per_rotation = 0x132C; // float32
        constexpr uint32_t attack_interval = 0x1330; // float32
        constexpr uint32_t target_count = 0x1334; // int32
        constexpr uint32_t m_bTravelling = 0x1338; // bool
        constexpr uint32_t travel_speed = 0x133C; // int32
    }

    namespace CDOTA_Modifier_DarkWillow_BrambleMaze_Creation_Thinker {
        constexpr uint32_t latch_creation_interval = 0x1318; // float32
        constexpr uint32_t initial_creation_delay = 0x131C; // float32
        constexpr uint32_t placement_count = 0x1320; // int32
        constexpr uint32_t placement_duration = 0x1324; // float32
        constexpr uint32_t m_iBramblesIndex = 0x1328; // int32
    }

    namespace CDOTA_Modifier_DarkWillow_BrambleMaze_Thinker {
        constexpr uint32_t latch_range = 0x1318; // int32
        constexpr uint32_t latch_vision = 0x131C; // int32
        constexpr uint32_t latch_creation_delay = 0x1320; // float32
        constexpr uint32_t latch_duration = 0x1324; // float32
        constexpr uint32_t m_bActive = 0x1330; // bool
    }

    namespace CDOTA_Modifier_DarkWillow_CursedCrown {
        constexpr uint32_t delay = 0x1318; // float32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t stun_radius = 0x1320; // int32
        constexpr uint32_t m_fStartTime = 0x1324; // GameTime_t
    }

    namespace CDOTA_Modifier_DarkWillow_Debuff_Fear {
        constexpr uint32_t m_bDidGiveOrder = 0x1318; // bool
    }

    namespace CDOTA_Modifier_DarkWillow_ShadowRealm_Buff {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t max_damage_duration = 0x131C; // float32
        constexpr uint32_t attack_range_bonus = 0x1320; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
        constexpr uint32_t bAttackRange = 0x1340; // bool
        constexpr uint32_t m_flStartTime = 0x1344; // GameTime_t
        constexpr uint32_t m_flFadeTime = 0x1348; // GameTime_t
        constexpr uint32_t m_flDamageScale = 0x134C; // float32
        constexpr uint32_t duration = 0x1350; // float32
    }

    namespace CDOTA_Modifier_DarkWillow_ShadowRealm_Buff_Attack_Logic {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t m_iRecord = 0x131C; // int32
        constexpr uint32_t m_flDamageScale = 0x1320; // float32
    }

    namespace CDOTA_Modifier_DarkWillow_Terrorize_Thinker {
        constexpr uint32_t m_hWisp = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t destination_travel_speed = 0x131C; // int32
        constexpr uint32_t return_travel_speed = 0x1320; // int32
        constexpr uint32_t destination_radius = 0x1324; // int32
        constexpr uint32_t destination_status_duration = 0x1328; // float32
        constexpr uint32_t initial_delay = 0x132C; // float32
        constexpr uint32_t starting_height = 0x1330; // float32
        constexpr uint32_t m_vAttackLocation = 0x1334; // Vector
        constexpr uint32_t m_bAttacking = 0x1340; // bool
        constexpr uint32_t m_bReturning = 0x1341; // bool
        constexpr uint32_t m_fCurHeight = 0x1344; // float32
        constexpr uint32_t m_fEstimatedTravelTime = 0x1348; // float32
        constexpr uint32_t think_interval = 0x134C; // float32
        constexpr uint32_t m_bInFlight = 0x1350; // bool
    }

    namespace CDOTA_Modifier_DataDriven {
        constexpr uint32_t m_nAbilityID = 0x1318; // AbilityID_t
        constexpr uint32_t m_nIndexInAbility = 0x131C; // int32
        constexpr uint32_t m_bIsHidden = 0x1320; // bool
        constexpr uint32_t m_bIsDebuff = 0x1321; // bool
        constexpr uint32_t m_bIsPurgable = 0x1322; // bool
        constexpr uint32_t m_bIsStunDebuff = 0x1323; // bool
        constexpr uint32_t m_bAllowIllusionDuplicate = 0x1324; // bool
        constexpr uint32_t m_bRemoveOnDeath = 0x1325; // bool
        constexpr uint32_t m_pszAuraModifier = 0x1328; // char*
        constexpr uint32_t m_nAuraModifierIndex = 0x1330; // int32
        constexpr uint32_t m_nAuraRadius = 0x1334; // int32
        constexpr uint32_t m_nAuraSearchTeam = 0x1338; // int32
        constexpr uint32_t m_nAuraSearchType = 0x133C; // int32
        constexpr uint32_t m_nAuraSearchFlags = 0x1340; // int32
        constexpr uint32_t m_bAuraApplyToCaster = 0x1344; // bool
        constexpr uint32_t m_bAuraApplyToParent = 0x1345; // bool
        constexpr uint32_t m_nAttributes = 0x1348; // int32
        constexpr uint32_t m_pszEffectName = 0x1350; // char*
        constexpr uint32_t m_nEffectAttachType = 0x1358; // int32
        constexpr uint32_t m_nPriority = 0x135C; // int32
        constexpr uint32_t m_pszStatusEffectName = 0x1360; // char*
        constexpr uint32_t m_nStatusEffectPriority = 0x1368; // int32
        constexpr uint32_t m_nOverrideAnimation = 0x136C; // int32
        constexpr uint32_t m_nOrbPriority = 0x1370; // int32
        constexpr uint32_t m_nOrbLabel = 0x1374; // int32
        constexpr uint32_t m_bOrbIsCastAttack = 0x1378; // bool
        constexpr uint32_t m_flThinkInterval = 0x137C; // float32
        constexpr uint32_t m_bNeedsReParseIfRefreshed = 0x1380; // bool
        constexpr uint32_t m_pszModelName = 0x1388; // char*
        constexpr uint32_t m_pszOrbProjectileName = 0x1390; // char*
        constexpr uint32_t m_nModifierStatesEnabled = 0x3818; // uint64
        constexpr uint32_t m_nModifierStatesDisabled = 0x3820; // uint64
        constexpr uint32_t m_pOnCreated = 0x3828; // KeyValues*
        constexpr uint32_t m_pOnIntervalThink = 0x3830; // KeyValues*
        constexpr uint32_t m_pOnDestroy = 0x3838; // KeyValues*
        constexpr uint32_t m_pOnAttackStart = 0x3840; // KeyValues*
        constexpr uint32_t m_pOnAttack = 0x3848; // KeyValues*
        constexpr uint32_t m_pOnAttackLanded = 0x3850; // KeyValues*
        constexpr uint32_t m_pOnAttackFailed = 0x3858; // KeyValues*
        constexpr uint32_t m_pOnAttackAllied = 0x3860; // KeyValues*
        constexpr uint32_t m_pOnProjectileDodge = 0x3868; // KeyValues*
        constexpr uint32_t m_pOnOrder = 0x3870; // KeyValues*
        constexpr uint32_t m_pOnUnitMoved = 0x3878; // KeyValues*
        constexpr uint32_t m_pOnAbilityStart = 0x3880; // KeyValues*
        constexpr uint32_t m_pOnAbilityExecuted = 0x3888; // KeyValues*
        constexpr uint32_t m_pOnBreakInvisibility = 0x3890; // KeyValues*
        constexpr uint32_t m_pOnAbilityEndChannel = 0x3898; // KeyValues*
        constexpr uint32_t m_pOnTakeDamage = 0x38A0; // KeyValues*
        constexpr uint32_t m_pOnDealDamage = 0x38A8; // KeyValues*
        constexpr uint32_t m_pOnStateChanged = 0x38B0; // KeyValues*
        constexpr uint32_t m_pOnAttacked = 0x38B8; // KeyValues*
        constexpr uint32_t m_pOnDeath = 0x38C0; // KeyValues*
        constexpr uint32_t m_pOnKill = 0x38C8; // KeyValues*
        constexpr uint32_t m_pOnRespawn = 0x38D0; // KeyValues*
        constexpr uint32_t m_pOnSpentMana = 0x38D8; // KeyValues*
        constexpr uint32_t m_pOnTeleporting = 0x38E0; // KeyValues*
        constexpr uint32_t m_pOnTeleported = 0x38E8; // KeyValues*
        constexpr uint32_t m_pOnHealthGained = 0x38F0; // KeyValues*
        constexpr uint32_t m_pOnManaGained = 0x38F8; // KeyValues*
        constexpr uint32_t m_pOnHeroKilled = 0x3900; // KeyValues*
        constexpr uint32_t m_pOnHealReceived = 0x3908; // KeyValues*
        constexpr uint32_t m_pOnAttackFinished = 0x3910; // KeyValues*
        constexpr uint32_t m_pOnAttackCancelled = 0x3918; // KeyValues*
    }

    namespace CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
        constexpr uint32_t projectile_speed = 0x131C; // int32
        constexpr uint32_t travel_speed_pct = 0x1320; // int32
        constexpr uint32_t m_nMaxRange = 0x1324; // int32
        constexpr uint32_t m_vStartPoint = 0x1328; // Vector
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x1334; // Vector
        constexpr uint32_t m_vEndPointShard = 0x1340; // Vector
        constexpr uint32_t m_nStatusFXIndex = 0x134C; // ParticleIndex_t
        constexpr uint32_t flare_radius = 0x1350; // int32
        constexpr uint32_t bHasStartedBurning = 0x1354; // bool
        constexpr uint32_t flare_debuff_duration = 0x1358; // float32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Celestial_Hammer_Thinker {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Dawnbreaker_Converge {
        constexpr uint32_t move_slow = 0x1318; // int32
        constexpr uint32_t burn_damage = 0x131C; // int32
        constexpr uint32_t burn_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Converge_Thinker {
        constexpr uint32_t flare_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Attack_Bonus {
        constexpr uint32_t attack_damage = 0x1318; // int32
        constexpr uint32_t creep_damage_penalty = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Caster {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t shard_movement_penalty = 0x131C; // int32
        constexpr uint32_t swipe_radius = 0x1320; // int32
        constexpr uint32_t swipe_damage = 0x1324; // int32
        constexpr uint32_t smash_radius = 0x1328; // int32
        constexpr uint32_t smash_damage = 0x132C; // int32
        constexpr uint32_t m_nCurrentSpeed = 0x1330; // int32
        constexpr uint32_t flSwipeInterval = 0x1334; // float32
        constexpr uint32_t m_flNextHit = 0x1338; // GameTime_t
        constexpr uint32_t iCurrentAttack = 0x133C; // int32
        constexpr uint32_t total_attacks = 0x1340; // int32
        constexpr uint32_t smash_stun_duration = 0x1344; // float32
        constexpr uint32_t sweep_stun_duration = 0x1348; // float32
        constexpr uint32_t m_bHasCompletedMove = 0x134C; // bool
        constexpr uint32_t duration = 0x1350; // float32
        constexpr uint32_t m_vTargetHorizontalDirection = 0x1354; // Vector
        constexpr uint32_t smash_distance_from_hero = 0x1360; // int32
        constexpr uint32_t animation_rate = 0x1364; // float32
        constexpr uint32_t turn_rate = 0x1368; // float32
        constexpr uint32_t m_flFacingTarget = 0x136C; // float32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Slow {
        constexpr uint32_t swipe_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Fire_Wreath_Smash_Stun {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Luminosity {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t attack_count = 0x131C; // int32
        constexpr uint32_t m_bShouldIncrement = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Dawnbreaker_Luminosity_Attack_Buff {
        constexpr uint32_t m_bIsBuffedAttack = 0x1318; // bool
        constexpr uint32_t heal_pct = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t heal_radius = 0x1324; // int32
        constexpr uint32_t heal_from_creeps = 0x1328; // int32
        constexpr uint32_t allied_healing_pct = 0x132C; // int32
        constexpr uint32_t hTargets = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flTotalToHeal = 0x1348; // float32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Disable {
        constexpr uint32_t m_nCasterFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nStatusFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Evasion {
        constexpr uint32_t miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Dawnbreaker_Solar_Guardian_Thinker {
        constexpr uint32_t pulse_interval = 0x1318; // float32
        constexpr uint32_t iEffectRadius = 0x131C; // int32
        constexpr uint32_t base_damage = 0x1320; // int32
        constexpr uint32_t base_heal = 0x1324; // int32
        constexpr uint32_t m_nThinkerFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Dazzle_Bad_Juju_Armor {
        constexpr uint32_t armor_reduction = 0x1318; // float32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Dazzle_Bad_Juju_Armor_Counter {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t armor_reduction = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Dazzle_Bad_Juju_Manacost {
        constexpr uint32_t mana_cost_increase_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Dazzle_Good_Juju {
        constexpr uint32_t cooldown_reduction = 0x1318; // float32
        constexpr uint32_t item_cooldown_reduction = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Dazzle_Poison_Touch {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t bonus_slow = 0x131C; // float32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t flAccummulatedBonusSlow = 0x1324; // float32
        constexpr uint32_t iAccummulatedBonusDamage = 0x1328; // int32
        constexpr uint32_t attack_range_bonus = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Dazzle_Poison_Touch_Self {
        constexpr uint32_t attack_range_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Dazzle_Rain_Of_Vermin {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
        constexpr uint32_t hex_chance = 0x1320; // float32
        constexpr uint32_t hex_duration = 0x1324; // float32
        constexpr uint32_t damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Dazzle_Shallow_Grave {
        constexpr uint32_t heal_amplify = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Dazzle_Weave_Armor {
        constexpr uint32_t armor_per_second = 0x1318; // float32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_DeathProphet_CryptSwarm_Slow {
        constexpr uint32_t slow_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DeathProphet_Exorcism {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t spirit_speed = 0x131C; // int32
        constexpr uint32_t max_distance = 0x1320; // int32
        constexpr uint32_t give_up_distance = 0x1324; // int32
        constexpr uint32_t min_damage = 0x1328; // int32
        constexpr uint32_t max_damage = 0x132C; // int32
        constexpr uint32_t heal_percent = 0x1330; // int32
        constexpr uint32_t spirit_duration = 0x1334; // int32
        constexpr uint32_t ghost_spawn_rate = 0x1338; // float32
        constexpr uint32_t movement_bonus = 0x133C; // int32
        constexpr uint32_t m_iSpirits = 0x1340; // int32
        constexpr uint32_t m_fStartTime = 0x1344; // GameTime_t
        constexpr uint32_t m_fLastThinkTime = 0x1348; // GameTime_t
        constexpr uint32_t m_fSpawnTime = 0x134C; // GameTime_t
        constexpr uint32_t m_bFirstSpawn = 0x1350; // bool
        constexpr uint32_t m_bCommentedOnExpired = 0x1351; // bool
        constexpr uint32_t m_bForceExpired = 0x1352; // bool
        constexpr uint32_t m_vecSpirits = 0x1358; // CUtlVector< sSpiritInfo* >
    }

    namespace CDOTA_Modifier_DeathProphet_Scepter {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t spirit_speed = 0x131C; // int32
        constexpr uint32_t max_distance = 0x1320; // int32
        constexpr uint32_t give_up_distance = 0x1324; // int32
        constexpr uint32_t min_damage = 0x1328; // int32
        constexpr uint32_t max_damage = 0x132C; // int32
        constexpr uint32_t heal_percent = 0x1330; // int32
        constexpr uint32_t spirit_duration = 0x1334; // int32
        constexpr uint32_t m_fStartTime = 0x1338; // GameTime_t
        constexpr uint32_t m_fLastThinkTime = 0x133C; // GameTime_t
        constexpr uint32_t m_bExpired = 0x1340; // bool
        constexpr uint32_t m_SpiritInfo = 0x1348; // sSpiritInfo*
    }

    namespace CDOTA_Modifier_DeathProphet_Silence_Debuff {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DeathProphet_Slow {
        constexpr uint32_t speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DeathProphet_SpiritSiphon {
        constexpr uint32_t flSmoothness = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t damage_pct = 0x1320; // float32
        constexpr uint32_t drain_range = 0x1324; // int32
        constexpr uint32_t haunt_duration = 0x1328; // float32
        constexpr uint32_t siphon_buffer = 0x132C; // int32
        constexpr uint32_t movement_steal = 0x1330; // int32
        constexpr uint32_t m_hTarget = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iLinkIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_nSelfBuffSerialNumber = 0x133C; // int32
        constexpr uint32_t m_nTargetDebuffSerialNumber = 0x1340; // int32
        constexpr uint32_t m_bAppliedFear = 0x1344; // bool
        constexpr uint32_t shard_fear_duration = 0x1348; // float32
        constexpr uint32_t shard_consecutive_siphon_duration = 0x134C; // float32
    }

    namespace CDOTA_Modifier_DeathProphet_SpiritSiphon_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_DeathProphet_SpiritSiphon_Slow {
        constexpr uint32_t movement_steal = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DeathProphet_Witchcraft {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Demonicon_Bonus {
        constexpr uint32_t hp_bonus = 0x1318; // int32
        constexpr uint32_t damage_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Desolator_2_Corruption {
        constexpr uint32_t corruption_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Desolator_Corruption {
        constexpr uint32_t corruption_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Devastator_Debuff {
        constexpr uint32_t active_mres_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Diretide_Portal_Buff {
        constexpr uint32_t m_hInvader = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Disruptor_Glimpse {
        constexpr uint32_t m_PositionIndex = 0x1318; // Vector[18]
    }

    namespace CDOTA_Modifier_Disruptor_Glimpse_Thinker {
        constexpr uint32_t m_vStartLoc = 0x1318; // Vector
        constexpr uint32_t m_hEntity = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flDistance = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Disruptor_KineticField {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_vOriginLoc = 0x131C; // Vector
        constexpr uint32_t m_bTruesight = 0x1328; // bool
        constexpr uint32_t damage_per_second = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Disruptor_KineticFieldThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t formation_time = 0x131C; // float32
        constexpr uint32_t m_bActive = 0x1320; // bool
        constexpr uint32_t m_nFXIndex = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Disruptor_StaticStorm {
        constexpr uint32_t miss_rate = 0x1318; // int32
        constexpr uint32_t movement_speed_reduction = 0x131C; // int32
        constexpr uint32_t attack_speed_reduction = 0x1320; // int32
        constexpr uint32_t m_bHasScepter = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Disruptor_StaticStormThinker {
        constexpr uint32_t m_nCurrentPulse = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage_max = 0x1320; // int32
        constexpr uint32_t pulses = 0x1324; // int32
        constexpr uint32_t duration = 0x1328; // float32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Disruptor_Thunder_Strike {
        constexpr uint32_t strike_interval = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t strike_damage = 0x1320; // int32
        constexpr uint32_t strike_damage_bonus = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Disruptor_Thunder_Strike_Slow {
        constexpr uint32_t slow_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Disruptor_Thunder_Strike_Speed {
        constexpr uint32_t shard_movement_speed_bonus = 0x1318; // int32
        constexpr uint32_t shard_attack_speed_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_Devour {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t magic_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_Devour_Intrinsic {
        constexpr uint32_t cast_range_bonus = 0x1318; // int32
        constexpr uint32_t spell_amp_bonus = 0x131C; // int32
        constexpr uint32_t cooldown_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_Doom {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t deniable_pct = 0x1320; // int32
        constexpr uint32_t flElapsedTime = 0x1324; // float32
        constexpr uint32_t damage_amp = 0x1328; // int32
        constexpr uint32_t m_bDoesBreak = 0x132C; // bool
        constexpr uint32_t m_bDoesMute = 0x132D; // bool
    }

    namespace CDOTA_Modifier_DoomBringer_Doom_Aura_Enemy {
        constexpr uint32_t scepter_aura_radius = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_Doom_Aura_Self {
        constexpr uint32_t scepter_aura_radius = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_InfernalBlade {
        constexpr uint32_t m_bInfernalBladeAttack = 0x1318; // bool
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t burn_duration = 0x1320; // float32
        constexpr uint32_t ministun_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_DoomBringer_InfernalBlade_Burn {
        constexpr uint32_t burn_damage = 0x1318; // int32
        constexpr uint32_t burn_damage_pct = 0x131C; // float32
    }

    namespace CDOTA_Modifier_DoomBringer_ScorchedEarthEffect {
        constexpr uint32_t bonus_movement_speed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DoomBringer_ScorchedEarthEffectAura {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed_pct = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t heal_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_BreatheFire_Reduction {
        constexpr uint32_t reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_CorrosiveBreath {
        constexpr uint32_t corrosive_breath_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_DragonKnight_CorrosiveBreathDoT {
        constexpr uint32_t corrosive_breath_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_DragonBlood {
        constexpr uint32_t bonus_health_regen = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_DragonBlood_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_DragonForm {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_damage = 0x131C; // int32
        constexpr uint32_t bonus_attack_range = 0x1320; // int32
        constexpr uint32_t attack_projectile_speed_bonus = 0x1324; // int32
        constexpr uint32_t magic_resistance = 0x1328; // int32
        constexpr uint32_t model_scale = 0x132C; // int32
        constexpr uint32_t iLevel = 0x1330; // int32
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x1334; // int32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1338; // CUtlSymbolLarge
        constexpr uint32_t bonus_slow_resistance = 0x1340; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_Fireball_Burn {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_Fireball_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t linger_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_DragonKnight_FrostBreath {
        constexpr uint32_t frost_duration = 0x1318; // float32
        constexpr uint32_t frost_aoe = 0x131C; // float32
    }

    namespace CDOTA_Modifier_DragonKnight_FrostBreath_Slow {
        constexpr uint32_t frost_bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t frost_bonus_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DragonKnight_SplashAttack {
        constexpr uint32_t splash_radius = 0x1318; // int32
        constexpr uint32_t splash_damage_percent = 0x131C; // int32
        constexpr uint32_t corrosive_breath_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Dragon_Scale_Burn {
        constexpr uint32_t damage_per_sec = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DrowRanger_FrostArrows {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t shard_bonus_damage_per_stack = 0x1330; // int32
    }

    namespace CDOTA_Modifier_DrowRanger_FrostArrows_Hypothermia {
        constexpr uint32_t shard_regen_reduction_pct_per_stack = 0x1318; // int32
        constexpr uint32_t shard_burst_radius = 0x131C; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_DrowRanger_FrostArrows_Shard_Slow {
        constexpr uint32_t shard_burst_move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_DrowRanger_FrostArrows_Slow {
        constexpr uint32_t frost_arrows_movement_speed = 0x1318; // int32
        constexpr uint32_t shard_max_stacks = 0x131C; // int32
        constexpr uint32_t shard_stack_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_DrowRanger_Marksmanship {
        constexpr uint32_t chance = 0x1318; // int32
        constexpr uint32_t m_nFxIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_GlacialInFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t bonus_factor = 0x1350; // int32
        constexpr uint32_t disable_range = 0x1354; // int32
        constexpr uint32_t agility_range = 0x1358; // int32
        constexpr uint32_t bonus_damage = 0x135C; // int32
        constexpr uint32_t split_count = 0x1360; // int32
        constexpr uint32_t split_range = 0x1364; // int32
        constexpr uint32_t m_bGlacialAttack = 0x1368; // bool
    }

    namespace CDOTA_Modifier_DrowRanger_Marksmanship_Aura_Bonus {
        constexpr uint32_t agility_multiplier = 0x1318; // int32
        constexpr uint32_t agility_multiplier_ally = 0x131C; // float32
    }

    namespace CDOTA_Modifier_DrowRanger_Marksmanship_Reduction {
        constexpr uint32_t split_damage_reduction = 0x1318; // int32
        constexpr uint32_t m_vecRecords = 0x1320; // CUtlVectorFixedGrowable< int32 >
        constexpr uint32_t m_vecRecordTimes = 0x1358; // CUtlVectorFixedGrowable< GameTime_t >
    }

    namespace CDOTA_Modifier_DrowRanger_TrueshotAura {
        constexpr uint32_t trueshot_ranged_attack_speed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_DrowRanger_WaveOfSilence {
        constexpr uint32_t miss_chance = 0x1318; // int32
        constexpr uint32_t gust_reveals_invis = 0x131C; // int32
    }

    namespace CDOTA_Modifier_DrowRanger_WaveOfSilence_Buff {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop {
        constexpr uint32_t multishot_arrow_bonus = 0x1318; // int32
        constexpr uint32_t end_height = 0x131C; // int32
        constexpr uint32_t attack_range_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Aura {
        constexpr uint32_t shard_width = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Drow_Ranger_Glacier_Hilltop_Removal {
        constexpr uint32_t z_speed_override = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Drow_Ranger_Multishot {
        constexpr uint32_t m_iArrowCount = 0x1318; // int32
        constexpr uint32_t m_vOriginalTarget = 0x131C; // Vector
        constexpr uint32_t arrow_width = 0x1328; // int32
        constexpr uint32_t arrow_speed = 0x132C; // float32
        constexpr uint32_t arrow_range_multiplier = 0x1330; // float32
        constexpr uint32_t wave_count = 0x1334; // int32
        constexpr uint32_t arrow_count_per_wave = 0x1338; // int32
        constexpr uint32_t arrow_angle = 0x133C; // int32
        constexpr uint32_t m_iLoopCount = 0x1340; // int32
        constexpr uint32_t m_flInterval = 0x1344; // float32
        constexpr uint32_t m_flCycleDelay = 0x1348; // float32
        constexpr uint32_t m_flTimeWaste = 0x134C; // float32
        constexpr uint32_t m_flExpectedTime = 0x1350; // GameTime_t
    }

    namespace CDOTA_Modifier_Drow_Ranger_Multishot_Damage {
        constexpr uint32_t arrow_damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_EarthSpirit_BoulderSmash {
        constexpr uint32_t m_bInterrupted = 0x1318; // bool
        constexpr uint32_t m_nProjectileID = 0x131C; // int32
    }

    namespace CDOTA_Modifier_EarthSpirit_Boulder_Smash_Debuff {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_EarthSpirit_GeomagneticGrip {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t rock_damage = 0x131C; // int32
        constexpr uint32_t pull_units_per_second = 0x1320; // float32
        constexpr uint32_t pull_units_per_second_heroes = 0x1324; // float32
        constexpr uint32_t total_pull_distance = 0x1328; // float32
        constexpr uint32_t duration = 0x132C; // float32
        constexpr uint32_t m_bUsedStone = 0x1330; // bool
        constexpr uint32_t m_vDestination = 0x1334; // Vector
        constexpr uint32_t m_vLocation = 0x1340; // Vector
        constexpr uint32_t m_hHitEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_EarthSpirit_Magnetize {
        constexpr uint32_t rock_search_radius = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t damage_interval = 0x1320; // float32
        constexpr uint32_t rock_explosion_delay = 0x1324; // float32
        constexpr uint32_t damage_duration = 0x1328; // float32
        constexpr uint32_t cast_radius = 0x132C; // int32
        constexpr uint32_t rock_explosion_radius = 0x1330; // int32
        constexpr uint32_t m_hExplodedRocks = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t duration = 0x1350; // float32
        constexpr uint32_t m_bShowOverhead = 0x1354; // bool
    }

    namespace CDOTA_Modifier_EarthSpirit_Petrify {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_bHasBeenMagnetized = 0x131C; // bool
    }

    namespace CDOTA_Modifier_EarthSpirit_Polarization {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t damage_interval = 0x131C; // float32
        constexpr uint32_t damage_duration = 0x1320; // float32
        constexpr uint32_t rock_search_radius = 0x1324; // int32
        constexpr uint32_t m_hMagnetizeAbility = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_EarthSpirit_RollingBoulder_Caster {
        constexpr uint32_t m_vDir = 0x1318; // Vector
        constexpr uint32_t m_bBoulderCreated = 0x1324; // bool
    }

    namespace CDOTA_Modifier_EarthSpirit_StoneThinker {
        constexpr uint32_t m_pVisionRangeFX = 0x1318; // CNewParticleEffect*
        constexpr uint32_t vision_radius = 0x1320; // int32
        constexpr uint32_t m_bHasBeenMagnetized = 0x1324; // bool
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Earthshaker_Aftershock {
        constexpr uint32_t aftershock_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Earthshaker_Arcana {
        constexpr uint32_t m_nComboCount = 0x1318; // int32
        constexpr uint32_t m_flComboWindow = 0x131C; // float32
        constexpr uint32_t m_flComboDisplayInterval = 0x1320; // float32
        constexpr uint32_t m_flDamageDone = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Earthshaker_Arcana_Kill_Effect {
        constexpr uint32_t m_bFrozen = 0x1318; // bool
        constexpr uint32_t m_bFlail = 0x1319; // bool
    }

    namespace CDOTA_Modifier_Earthshaker_EnchantTotem {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t totem_damage_percentage = 0x131C; // int32
        constexpr uint32_t scepter_cleave_pct = 0x1320; // int32
        constexpr uint32_t scepter_cleave_starting_width = 0x1324; // float32
        constexpr uint32_t scepter_cleave_ending_width = 0x1328; // float32
        constexpr uint32_t scepter_cleave_distance = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Earthshaker_Fissure_Shard {
        constexpr uint32_t shard_aftershock_stun_duration_pct = 0x1318; // int32
        constexpr uint32_t shard_free_pathing_linger_duration = 0x131C; // float32
        constexpr uint32_t m_vStartPos = 0x1320; // Vector
        constexpr uint32_t m_vEndPos = 0x132C; // Vector
        constexpr uint32_t m_flEndTime = 0x1338; // GameTime_t
    }

    namespace CDOTA_Modifier_EchoSabre_Debuff {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t attack_speed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_AncestralSpirit {
        constexpr uint32_t pass_damage = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_nCreepsHit = 0x1320; // int32
        constexpr uint32_t m_nHeroesHit = 0x1324; // int32
        constexpr uint32_t m_flSpeed = 0x1328; // float32
        constexpr uint32_t m_hHitUnits = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nBonusMoveSpeed = 0x1348; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_AncestralSpirit_Buff {
        constexpr uint32_t move_pct_creeps = 0x1318; // float32
        constexpr uint32_t move_pct_heroes = 0x131C; // int32
        constexpr uint32_t damage_creeps = 0x1320; // int32
        constexpr uint32_t damage_heroes = 0x1324; // int32
        constexpr uint32_t armor_creeps = 0x1328; // float32
        constexpr uint32_t armor_heroes = 0x132C; // float32
        constexpr uint32_t move_pct_cap = 0x1330; // float32
        constexpr uint32_t m_nCreepsHit = 0x1334; // int32
        constexpr uint32_t m_nHeroesHit = 0x1338; // int32
        constexpr uint32_t m_fSpeedPercentage = 0x133C; // float32
        constexpr uint32_t m_nDamage = 0x1340; // int32
        constexpr uint32_t m_nArmor = 0x1344; // int32
        constexpr uint32_t m_bSpellImmunity = 0x1348; // bool
    }

    namespace CDOTA_Modifier_Elder_Titan_EarthSplitter {
        constexpr uint32_t slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_EarthSplitter_Caster {
        constexpr uint32_t m_hHitUnits = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t vision_width = 0x1330; // int32
        constexpr uint32_t vision_interval = 0x1334; // float32
        constexpr uint32_t vision_duration = 0x1338; // float32
        constexpr uint32_t vision_step = 0x133C; // int32
        constexpr uint32_t total_steps = 0x1340; // int32
        constexpr uint32_t m_nCompletedSteps = 0x1344; // int32
        constexpr uint32_t m_vStart = 0x1348; // Vector
        constexpr uint32_t m_vEnd = 0x1354; // Vector
        constexpr uint32_t m_vNextVisionLocation = 0x1360; // Vector
        constexpr uint32_t m_vCastDirection = 0x136C; // Vector
    }

    namespace CDOTA_Modifier_Elder_Titan_EarthSplitter_Thinker {
        constexpr uint32_t crack_width = 0x1318; // int32
        constexpr uint32_t damage_pct = 0x131C; // int32
        constexpr uint32_t slow_duration = 0x1320; // float32
        constexpr uint32_t slow_duration_scepter = 0x1324; // float32
        constexpr uint32_t m_pParentModifier = 0x1328; // CDOTA_Buff*
    }

    namespace CDOTA_Modifier_Elder_Titan_EchoStomp {
        constexpr uint32_t wake_damage_limit = 0x1318; // int32
        constexpr uint32_t animation_rate = 0x131C; // float32
        constexpr uint32_t initial_stun_duration = 0x1320; // float32
        constexpr uint32_t ctStunTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_flDamageTaken = 0x1340; // float32
    }

    namespace CDOTA_Modifier_Elder_Titan_EchoStomp_Magic_Immune {
        constexpr uint32_t model_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_NaturalOrder_Armor {
        constexpr uint32_t armor_reduction_pct = 0x1318; // int32
        constexpr uint32_t m_flArmorReduction = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_Armor {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_NaturalOrder_Aura_MagicResistance {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Elder_Titan_NaturalOrder_MagicResistance {
        constexpr uint32_t magic_resistance_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ElixerHealing {
        constexpr uint32_t health = 0x1318; // int32
        constexpr uint32_t mana = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_EmberSpirit_FireRemnantThinker {
        constexpr uint32_t m_nProjectileHandle = 0x1318; // int32
        constexpr uint32_t m_bIsShardRemnant = 0x131C; // bool
    }

    namespace CDOTA_Modifier_EmberSpirit_FireRemnant_RemnantTracker {
        constexpr uint32_t m_vActiveRemnants = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vTrackingDelayedRemnants = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t shard_charge_radius = 0x1348; // int32
    }

    namespace CDOTA_Modifier_EmberSpirit_FireRemnant_Shard {
        constexpr uint32_t shard_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_EmberSpirit_FireRemnant_Shard_Debuff {
        constexpr uint32_t shard_damage_per_second = 0x1318; // int32
    }

    namespace CDOTA_Modifier_EmberSpirit_FlameGuard {
        constexpr uint32_t absorb_amount = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t tick_interval = 0x1324; // float32
        constexpr uint32_t shield_pct_absorb = 0x1328; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x132C; // int32
        constexpr uint32_t m_flShowParticleInterval = 0x1330; // float32
        constexpr uint32_t m_bDestroy = 0x1334; // bool
        constexpr uint32_t linger_duration = 0x1338; // float32
    }

    namespace CDOTA_Modifier_EmberSpirit_FlameGuard_Debuff {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_EmberSpirit_SearingChains {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
        constexpr uint32_t tick_damage = 0x1320; // float32
        constexpr uint32_t duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_EmberSpirit_SleightOfFist_Caster {
        constexpr uint32_t bonus_hero_damage = 0x1318; // int32
        constexpr uint32_t creep_damage_penalty = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t attack_interval = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Enchantress_Enchant_Controlled {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t enchant_health = 0x131C; // int32
        constexpr uint32_t enchant_armor = 0x1320; // int32
        constexpr uint32_t enchant_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Enchantress_Enchant_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Enchantress_Impetus {
        constexpr uint32_t distance_damage_pct = 0x1318; // float32
        constexpr uint32_t distance_cap = 0x131C; // int32
        constexpr uint32_t creep_multiplier = 0x1320; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Enchantress_Little_Friends {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
        constexpr uint32_t bonus_move_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Enchantress_Little_Friends_Aura {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nAlliesTaunted = 0x131C; // int32
        constexpr uint32_t m_bRelicTriggered = 0x1320; // bool
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t damage_amplification = 0x1328; // int32
        constexpr uint32_t damage_reduction = 0x132C; // int32
        constexpr uint32_t root_base_duration = 0x1330; // float32
        constexpr uint32_t root_per_target = 0x1334; // float32
        constexpr uint32_t max_root = 0x1338; // float32
        constexpr uint32_t m_flLastSeen = 0x133C; // GameTime_t
    }

    namespace CDOTA_Modifier_Enchantress_Little_Friends_Kill_Credit {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Enchantress_NaturesAttendants {
        constexpr uint32_t heal_interval = 0x1318; // float32
        constexpr uint32_t heal = 0x131C; // float32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t wisp_count = 0x1324; // int32
        constexpr uint32_t movespeed = 0x1328; // int32
        constexpr uint32_t m_nWispFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enchantress_NaturesAttendants_Shard {
        constexpr uint32_t heal_interval = 0x1318; // float32
        constexpr uint32_t heal = 0x131C; // float32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t shard_permanent_wisp_count = 0x1324; // int32
        constexpr uint32_t m_bActive = 0x1328; // bool
        constexpr uint32_t m_nWispFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enchantress_Untouchable_Slow {
        constexpr uint32_t slow_attack_speed = 0x1318; // int32
        constexpr uint32_t m_nStatusFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enigma_BlackHoleThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t n_FXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enigma_BlackHole_Pull {
        constexpr uint32_t pull_speed = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t tick_rate = 0x1324; // float32
        constexpr uint32_t pull_rotate_speed = 0x1328; // float32
        constexpr uint32_t animation_rate = 0x132C; // float32
        constexpr uint32_t scepter_pct_damage = 0x1330; // float32
        constexpr uint32_t m_flDamageTick = 0x1334; // GameTime_t
    }

    namespace CDOTA_Modifier_Enigma_Black_Hole_Pull_Scepter {
        constexpr uint32_t scepter_drag_speed = 0x1318; // int32
        constexpr uint32_t scepter_pull_rotate_speed = 0x131C; // float32
        constexpr uint32_t aura_origin_x = 0x1320; // float32
        constexpr uint32_t aura_origin_y = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_vCenter = 0x132C; // Vector
        constexpr uint32_t m_flLastThinkTime = 0x1338; // GameTime_t
    }

    namespace CDOTA_Modifier_Enigma_Black_Hole_Thinker_Scepter {
        constexpr uint32_t scepter_radius = 0x1318; // int32
        constexpr uint32_t n_FXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enigma_DemonicConversion {
        constexpr uint32_t m_iAttackCount = 0x1320; // int32
        constexpr uint32_t split_attack_count = 0x1324; // int32
        constexpr uint32_t life_extension = 0x1328; // float32
        constexpr uint32_t eidolon_attack_range = 0x132C; // int32
        constexpr uint32_t eidolon_bonus_damage = 0x1330; // int32
        constexpr uint32_t eidolon_bonus_attack_speed = 0x1334; // int32
        constexpr uint32_t m_bAllowSplit = 0x1338; // bool
        constexpr uint32_t m_nSpawnNum = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Enigma_DemonicConversion_ModelScale {
        constexpr uint32_t self_modelscale = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Enigma_Malefice {
        constexpr uint32_t tick_rate = 0x1318; // float32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t duration = 0x1324; // float32
        constexpr uint32_t m_nEidolonSpawnNum = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Enigma_MidnightPulseThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t n_FXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Enigma_MidnightPulse_Damage {
        constexpr uint32_t damage_percent = 0x1318; // float32
        constexpr uint32_t tick_rate = 0x131C; // float32
        constexpr uint32_t base_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_EnragedWildkin_Hurricane {
        constexpr uint32_t m_FX = 0x1318; // ParticleIndex_t
        constexpr uint32_t distance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_EnragedWildkin_ToughnessAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_EnragedWildkin_ToughnessAura_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ethereal_Blade_Ethereal {
        constexpr uint32_t ethereal_damage_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Eul_Cyclone {
        constexpr uint32_t m_hBlocker = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bBlockerCreated = 0x1324; // bool
    }

    namespace CDOTA_Modifier_FacelessVoid_Arcana_Kill_Effect {
        constexpr uint32_t m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_FacelessVoid_Backtrack {
        constexpr uint32_t dodge_chance_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FacelessVoid_Chronosphere {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FacelessVoid_Chronosphere_SelfBuff {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FacelessVoid_Chronosphere_Speed {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeDilation_Distortion {
        constexpr uint32_t slow_distance_min = 0x1318; // float32
        constexpr uint32_t slow_distance_max = 0x131C; // float32
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeDilation_Slow {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nAffectedAbilities = 0x131C; // int32
        constexpr uint32_t m_flLastDamageTime = 0x1320; // GameTime_t
        constexpr uint32_t slow = 0x1324; // int32
        constexpr uint32_t cooldown_percentage = 0x1328; // int32
        constexpr uint32_t damage_per_stack = 0x132C; // int32
        constexpr uint32_t base_damage = 0x1330; // int32
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeLock {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t duration_creep = 0x131C; // float32
        constexpr uint32_t delay = 0x1320; // float32
        constexpr uint32_t chance_pct = 0x1324; // int32
        constexpr uint32_t bonus_damage = 0x1328; // int32
        constexpr uint32_t last_attack_time = 0x132C; // GameTime_t
        constexpr uint32_t m_ProcAttackRecords = 0x1330; // CUtlVector< int16 >
        constexpr uint32_t apply_activity_modifier_until = 0x1348; // GameTime_t
        constexpr uint32_t disable_activity_modifier_until = 0x134C; // GameTime_t
        constexpr uint32_t m_mapTargets = 0x1350; // CUtlOrderedMap< CHandle< C_DOTA_BaseNPC >, int32, F( size=1 ) >
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeLock_ForceProc {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t duration_creep = 0x131C; // float32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t delay = 0x1324; // float32
        constexpr uint32_t m_hTarget = 0x1328; // CHandle< C_DOTA_BaseNPC >
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeWalk_ShardBuff {
        constexpr uint32_t m_vStartLocation = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_FacelessVoid_TimeWalk_Slow {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FelBeast_Haunt {
        constexpr uint32_t damage_per_second = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FelBeast_Haunt_OnDeath {
        constexpr uint32_t projectile_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FillerThinker {
        constexpr uint32_t hCasterList = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t bStarted = 0x1330; // bool
        constexpr uint32_t nCount = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Filler_Heal {
        constexpr uint32_t hp_heal = 0x1318; // int32
        constexpr uint32_t mp_heal = 0x131C; // int32
        constexpr uint32_t hp_heal_growth = 0x1320; // int32
        constexpr uint32_t mp_heal_growth = 0x1324; // float32
        constexpr uint32_t hp_heal_pct = 0x1328; // int32
        constexpr uint32_t mp_heal_pct = 0x132C; // int32
        constexpr uint32_t tota_hp_per_second = 0x1330; // int32
        constexpr uint32_t tota_mp_per_second = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Filler_Heal_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Filler_LastDitch {
        constexpr uint32_t melee_number = 0x1318; // float32
        constexpr uint32_t ranged_number = 0x131C; // float32
        constexpr uint32_t siege_number = 0x1320; // float32
        constexpr uint32_t lane = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Firecracker_Debuff {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Firework_Mine {
        constexpr uint32_t damage_radius = 0x1318; // int32
        constexpr uint32_t trigger_radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_FixedNumberOfHitsToKill {
        constexpr uint32_t creep_attack_divisor = 0x1318; // int32
        constexpr uint32_t attack_count = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Flagbearer_Creep_Aura_Effect {
        constexpr uint32_t bonus_health_regen = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FlaskHealing {
        constexpr uint32_t health_regen = 0x1318; // int32
        constexpr uint32_t break_on_hero_damage = 0x131C; // int32
        constexpr uint32_t m_fHealingDone = 0x1320; // float32
    }

    namespace CDOTA_Modifier_ForceStaff {
        constexpr uint32_t push_length = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Force_Boots {
        constexpr uint32_t push_length = 0x1318; // int32
        constexpr uint32_t push_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_ForestTrollHighPriest_HealAmp {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ForestTrollHighPriest_HealAmp_Bonus {
        constexpr uint32_t heal_amp = 0x1318; // float32
    }

    namespace CDOTA_Modifier_ForestTrollHighPriest_HealAutocast {
        constexpr uint32_t health = 0x1318; // int32
        constexpr uint32_t m_hHealTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_ForestTrollHighPriest_ManaAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ForestTrollHighPriest_ManaAura_Bonus {
        constexpr uint32_t mana_regen = 0x1318; // float32
        constexpr uint32_t allow_multiple = 0x131C; // int32
        constexpr uint32_t m_nAttributes = 0x1320; // int32
    }

    namespace CDOTA_Modifier_ForgedSpirit_MeltingStrike {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_ForgedSpirit_Stats {
        constexpr uint32_t level = 0x1318; // int32
        constexpr uint32_t armor = 0x131C; // int32
        constexpr uint32_t mana = 0x1320; // int32
        constexpr uint32_t attack_range = 0x1324; // float32
        constexpr uint32_t armor_per_attack = 0x1328; // float32
    }

    namespace CDOTA_Modifier_FountainInvulnerabilityBuff {
        constexpr uint32_t m_vecPosition = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_FountainPassive {
        constexpr uint32_t bonus_chance = 0x1318; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_FrostbittenGolem_TimeWarpAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_FrostbittenGolem_TimeWarpAura_Bonus {
        constexpr uint32_t bonus_cdr = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Return {
        constexpr uint32_t return_damage = 0x1318; // int32
        constexpr uint32_t strength_gain_duration = 0x131C; // float32
        constexpr uint32_t max_stacks = 0x1320; // int32
        constexpr uint32_t ally_factor = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Return_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Return_Bonus_Strength {
        constexpr uint32_t strength_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Stampede {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_reduction = 0x131C; // int32
        constexpr uint32_t m_hEntitiesAffected = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Bonus_Armor {
        constexpr uint32_t bonus_base_armor_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Centaur_Stampede_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army {
        constexpr uint32_t attack_rate = 0x1318; // float32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_Burning_Army_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
        constexpr uint32_t m_vFacePosition = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_SearingArrows {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t m_bBonusAttack = 0x1330; // bool
        constexpr uint32_t damage_bonus = 0x1334; // int32
        constexpr uint32_t attack_spill_width = 0x1338; // int32
        constexpr uint32_t attack_spill_range = 0x133C; // int32
        constexpr uint32_t spill_damage_multiplier = 0x1340; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_Strafe {
        constexpr uint32_t attack_speed_bonus_pct = 0x1318; // int32
        constexpr uint32_t attack_spill_width = 0x131C; // int32
        constexpr uint32_t attack_spill_range = 0x1320; // int32
        constexpr uint32_t spill_damage_multiplier = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk {
        constexpr uint32_t m_hEntitiesAffected = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bFreePathing = 0x1340; // bool
        constexpr uint32_t move_speed_bonus_pct = 0x1344; // int32
        constexpr uint32_t radius = 0x1348; // int32
        constexpr uint32_t attack_steal_amount = 0x134C; // int32
        constexpr uint32_t attack_steal_duration = 0x1350; // float32
        constexpr uint32_t max_stacks = 0x1354; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_AttackDebuff {
        constexpr uint32_t attack_steal_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Clinkz_WindWalk_BonusDamage {
        constexpr uint32_t bonus_base_dmg_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_DarkWillow_Bedlam {
        constexpr uint32_t m_flRotation = 0x1318; // float32
        constexpr uint32_t m_hWisp = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flLastAttack = 0x1320; // GameTime_t
        constexpr uint32_t roaming_radius = 0x1324; // int32
        constexpr uint32_t attack_radius = 0x1328; // int32
        constexpr uint32_t roaming_seconds_per_rotation = 0x132C; // float32
        constexpr uint32_t attack_interval = 0x1330; // float32
        constexpr uint32_t attack_targets = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Creation_Thinker {
        constexpr uint32_t latch_creation_interval = 0x1318; // float32
        constexpr uint32_t initial_creation_delay = 0x131C; // float32
        constexpr uint32_t placement_count = 0x1320; // int32
        constexpr uint32_t placement_duration = 0x1324; // float32
        constexpr uint32_t m_iBramblesIndex = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_DarkWillow_BrambleMaze_Thinker {
        constexpr uint32_t latch_count = 0x1318; // int32
        constexpr uint32_t latch_range = 0x131C; // int32
        constexpr uint32_t latch_vision = 0x1320; // int32
        constexpr uint32_t latch_creation_delay = 0x1324; // float32
        constexpr uint32_t latch_duration = 0x1328; // float32
        constexpr uint32_t m_bActive = 0x1334; // bool
        constexpr uint32_t m_nLatchedEnemies = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Buff {
        constexpr uint32_t m_flStartTime = 0x1318; // GameTime_t
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t max_damage_duration = 0x1320; // float32
        constexpr uint32_t slow_radius = 0x1324; // float32
        constexpr uint32_t burn_duration = 0x1328; // float32
        constexpr uint32_t burn_damage = 0x132C; // float32
        constexpr uint32_t slow_attack_speed_pct = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_DarkWillow_ShadowRealm_Burn_Slow {
        constexpr uint32_t burn_damage = 0x1318; // float32
        constexpr uint32_t move_slow = 0x131C; // int32
        constexpr uint32_t m_flDamageScale = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Decorate_Tree_Thinker {
        constexpr uint32_t num_explosions = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_fExplosions = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Earthshaker_Aftershock {
        constexpr uint32_t aftershock_range = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t ability_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeLock {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t duration_creep = 0x131C; // float32
        constexpr uint32_t chance_pct = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t radius = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker {
        constexpr uint32_t m_vDamageSources = 0x1318; // CUtlVector< CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker::sDamageSources >
    }

    namespace CDOTA_Modifier_Frostivus2018_FacelessVoid_TimeWalk_Tracker_sDamageSources {
        constexpr uint32_t flTime = 0x0; // GameTime_t
        constexpr uint32_t flAmount = 0x4; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_FestiveFirework_Blind {
        constexpr uint32_t miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Counter {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Debuff {
        constexpr uint32_t burn_damage = 0x1318; // int32
        constexpr uint32_t tick_rate = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Huskar_Burning_Spear_Self {
        constexpr uint32_t health_cost = 0x1318; // int32
        constexpr uint32_t spear_aoe = 0x131C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Frostivus2018_Luna_Eclipse {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t beams = 0x1320; // int32
        constexpr uint32_t hit_count = 0x1324; // int32
        constexpr uint32_t m_iBeamDamage = 0x1328; // int32
        constexpr uint32_t m_flBeamStun = 0x132C; // float32
        constexpr uint32_t vPosition = 0x1330; // Vector
        constexpr uint32_t lucent_beam_radius = 0x133C; // int32
        constexpr uint32_t bAreaTarget = 0x1340; // bool
        constexpr uint32_t m_iTickCount = 0x1344; // int32
        constexpr uint32_t m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
        constexpr uint32_t m_HitTargets = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t beam_interval = 0x1368; // float32
        constexpr uint32_t beam_interval_scepter = 0x136C; // float32
        constexpr uint32_t m_flInterval = 0x1370; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Magnataur_Skewer_Bonus_Strength {
        constexpr uint32_t strength_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Omniknight_Degen_Aura_Effect {
        constexpr uint32_t speed_bonus = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Omniknight_Repel {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Puck_DreamCoil_Thinker {
        constexpr uint32_t m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t coil_radius = 0x1330; // int32
        constexpr uint32_t coil_break_radius = 0x1334; // int32
        constexpr uint32_t coil_stun_duration = 0x1338; // float32
        constexpr uint32_t coil_stun_duration_scepter = 0x133C; // float32
        constexpr uint32_t coil_slow = 0x1340; // float32
        constexpr uint32_t coil_break_damage = 0x1344; // int32
        constexpr uint32_t coil_break_damage_scepter = 0x1348; // int32
        constexpr uint32_t m_bHasScepter = 0x134C; // bool
        constexpr uint32_t m_FXIndex = 0x1350; // CUtlVector< ParticleIndex_t >
    }

    namespace CDOTA_Modifier_Frostivus2018_Siege_Fireball_Burn {
        constexpr uint32_t damage_per_tick = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_Siege_Fireball_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Frostivus2018_Snowman_Taunt {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDidSetAttackTarget = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion {
        constexpr uint32_t damage_reflection_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Spectre_ActiveDispersion_Thinker {
        constexpr uint32_t m_fDamage = 0x1318; // float32
        constexpr uint32_t m_fLastRadius = 0x131C; // float32
        constexpr uint32_t m_fCurRadius = 0x1320; // float32
        constexpr uint32_t m_fLastThink = 0x1324; // GameTime_t
        constexpr uint32_t m_bContracting = 0x1328; // bool
        constexpr uint32_t m_ViewerTimer = 0x1330; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1348; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1368; // int32
        constexpr uint32_t radius = 0x136C; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Summon_Snowman_Thinker {
        constexpr uint32_t tick_rate = 0x1318; // float32
        constexpr uint32_t taunt_radius = 0x131C; // int32
        constexpr uint32_t taunt_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Frostivus2018_TrollWarlord_BattleTrance {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t lifesteal = 0x1320; // int32
        constexpr uint32_t bonus_damage_pct = 0x1324; // int32
        constexpr uint32_t cleave_damage_pct = 0x1328; // float32
        constexpr uint32_t cleave_starting_width = 0x132C; // int32
        constexpr uint32_t cleave_ending_width = 0x1330; // int32
        constexpr uint32_t cleave_distance = 0x1334; // int32
        constexpr uint32_t splash_damage_pct = 0x1338; // float32
        constexpr uint32_t splash_radius = 0x133C; // int32
        constexpr uint32_t m_hTarget = 0x1340; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Frostivus2018_TrollWarlord_Fervor {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t m_hUnit = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_AirTime {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Tusk_WalrusKick_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Frostivus2018_Weaver_GeminateAttack {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttacksRemaining = 0x131C; // int32
        constexpr uint32_t arrow_count = 0x1358; // int32
        constexpr uint32_t bonus_range = 0x135C; // int32
    }

    namespace CDOTA_Modifier_Furbolg_Enrage_AttackSpeed_OnDeath {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Furbolg_Enrage_Damage_OnDeath {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Furion_Arboreal_Might_Armor {
        constexpr uint32_t armor_per_stack = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Furion_Arboreal_Might_Attack_Damage {
        constexpr uint32_t damage_per_stack = 0x1318; // float32
        constexpr uint32_t iMaxStacks = 0x131C; // int32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Furion_CurseOfTheForest {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_per_tree = 0x131C; // int32
        constexpr uint32_t slow_per_tree = 0x1320; // int32
        constexpr uint32_t m_nSlow = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Furion_Sprout_Blind {
        constexpr uint32_t blind_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Furion_Sprout_Damage {
        constexpr uint32_t sprout_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Furion_Sprout_Damage_Aura {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Furion_WrathOfNature_Thinker {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t max_targets = 0x131C; // int32
        constexpr uint32_t damage_percent_add = 0x1320; // int32
        constexpr uint32_t jump_delay = 0x1324; // float32
        constexpr uint32_t m_iFixedDamage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Fusion_runeHealing {
        constexpr uint32_t health_regen = 0x1318; // int32
        constexpr uint32_t m_fHealingDone = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Gem_Active_TrueSight {
        constexpr uint32_t active_radius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_GhostScepter_Active {
        constexpr uint32_t extra_spell_damage_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ghost_FrostAttack {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t movespeed_slow = 0x131C; // int32
        constexpr uint32_t attackspeed_slow = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Ghost_FrostAttack_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_GiantWolf_CriticalStrike {
        constexpr uint32_t crit_mult = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_GiantWolf_Intimidate {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Gladiator_Helm_Buff {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t armor = 0x131C; // int32
        constexpr uint32_t movement_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_GlimmerCape_Fade {
        constexpr uint32_t active_movement_speed = 0x1318; // int32
        constexpr uint32_t barrier_block = 0x131C; // int32
        constexpr uint32_t barrier_amount = 0x1320; // int32
        constexpr uint32_t initial_fade_delay = 0x1324; // float32
        constexpr uint32_t secondary_fade_delay = 0x1328; // float32
        constexpr uint32_t m_flFadeTime = 0x132C; // float32
        constexpr uint32_t m_flCurentFadeDelay = 0x1330; // float32
        constexpr uint32_t m_flLastActionTime = 0x1334; // GameTime_t
    }

    namespace CDOTA_Modifier_GnollAssassin_EnvenomedWeapon {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t non_hero_duration = 0x131C; // float32
        constexpr uint32_t hero_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_GnollAssassin_EnvenomedWeapon_Poison {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t regen_reduction = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Gold_Bag_Launch {
        constexpr uint32_t gold_amount = 0x1348; // int32
    }

    namespace CDOTA_Modifier_Grandmasters_Glaive_Bonus_Agi {
        constexpr uint32_t agi_stance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Grandmasters_Glaive_Bonus_Int {
        constexpr uint32_t int_stance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Grandmasters_Glaive_Bonus_Str {
        constexpr uint32_t str_stance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_GraniteGolem_HPAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_GraniteGolem_HPAura_Bonus {
        constexpr uint32_t bonus_hp = 0x1318; // float32
    }

    namespace CDOTA_Modifier_GreaterClarity {
        constexpr uint32_t total_mana = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Black_Nightmare {
        constexpr uint32_t animation_rate = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Blue_ColdFeet {
        constexpr uint32_t m_vecStartPosition = 0x1318; // Vector
        constexpr uint32_t m_nCurrentTick = 0x1324; // int32
        constexpr uint32_t damage = 0x1328; // float32
        constexpr uint32_t break_distance = 0x132C; // int32
        constexpr uint32_t stun_duration = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortex {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
        constexpr uint32_t spell_resist_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Blue_IceVortexThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t movement_speed_pct = 0x131C; // int32
        constexpr uint32_t spell_resist_pct = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_hChilledEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Casting {
        constexpr uint32_t cast_animation = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Green_LivingArmor {
        constexpr uint32_t health_regen = 0x1318; // int32
        constexpr uint32_t damage_block = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Orange_LightStrikeArray_Thinker {
        constexpr uint32_t m_iDamage = 0x1318; // int32
        constexpr uint32_t m_flStunDuration = 0x131C; // float32
        constexpr uint32_t light_strike_array_aoe = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Purple_VenomousGale {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t tick_damage = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Red_Earthshock {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Red_Overpower {
        constexpr uint32_t attack_speed_bonus_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Sight {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_White_Degen_Aura_Effect {
        constexpr uint32_t speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Greevil_Miniboss_Yellow_IonShell {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_DarkArtistry_Slow {
        constexpr uint32_t movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_InkCreature {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nAmbientFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nAttackCount = 0x1320; // int32
        constexpr uint32_t m_bIsLatched = 0x1324; // bool
        constexpr uint32_t m_hAttachTarget = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_EnemyVision = 0x1330; // CountdownTimer
        constexpr uint32_t latch_duration = 0x1348; // float32
        constexpr uint32_t speed = 0x134C; // float32
        constexpr uint32_t destroy_attacks = 0x1350; // int32
        constexpr uint32_t hero_attack_multiplier = 0x1354; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_InkCreature_Debuff {
        constexpr uint32_t m_flCurrentArmorReduction = 0x1318; // float32
        constexpr uint32_t m_hLatchedCreature = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t damage_per_second = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_InkCreature_Latched {
        constexpr uint32_t m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_fZOffset = 0x131C; // float32
        constexpr uint32_t m_bRemovedByEnemy = 0x1320; // bool
        constexpr uint32_t latch_duration = 0x1324; // float32
        constexpr uint32_t pop_damage = 0x1328; // int32
        constexpr uint32_t latched_unit_offset = 0x132C; // int32
        constexpr uint32_t latched_unit_offset_short = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_InkCreature_Spawning {
        constexpr uint32_t m_hAttachTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Grimstroke_Scepter_Buff {
        constexpr uint32_t images_movespeed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_Shard_Buff {
        constexpr uint32_t total_damage = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t move_speed = 0x1320; // int32
        constexpr uint32_t m_flInterval = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Grimstroke_SoulChain {
        constexpr uint32_t m_hPartner = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsPrimary = 0x131C; // bool
        constexpr uint32_t m_bEscaped = 0x131D; // bool
        constexpr uint32_t m_bTethered = 0x131E; // bool
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexA = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_bStartedLeashSound = 0x132C; // bool
        constexpr uint32_t m_fLeashDistance = 0x1330; // float32
        constexpr uint32_t m_fOriginalStartTime = 0x1334; // GameTime_t
        constexpr uint32_t m_nOverheadFXIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t chain_latch_radius = 0x133C; // int32
        constexpr uint32_t chain_break_distance = 0x1340; // int32
        constexpr uint32_t leash_limit_multiplier = 0x1344; // float32
        constexpr uint32_t chain_duration = 0x1348; // float32
        constexpr uint32_t creep_duration_pct = 0x134C; // float32
        constexpr uint32_t bonus_reflected_spell_damage = 0x1350; // int32
    }

    namespace CDOTA_Modifier_Grimstroke_SoulChain_ChannelCheck {
        constexpr uint32_t m_hAbility = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAbilities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vLocation = 0x1338; // Vector
        constexpr uint32_t m_fChannelEnd = 0x1344; // GameTime_t
        constexpr uint32_t m_bInterrupt = 0x1348; // bool
        constexpr uint32_t m_bExpired = 0x1349; // bool
    }

    namespace CDOTA_Modifier_Grimstroke_SpiritWalk_Buff {
        constexpr uint32_t m_fStartTime = 0x1318; // GameTime_t
        constexpr uint32_t m_nHeroTickDamageApplied = 0x131C; // int32
        constexpr uint32_t m_fLastEffectsTime = 0x1320; // GameTime_t
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t buff_duration = 0x1328; // float32
        constexpr uint32_t debuff_duration = 0x132C; // float32
        constexpr uint32_t max_damage = 0x1330; // int32
        constexpr uint32_t max_stun = 0x1334; // float32
        constexpr uint32_t movespeed_bonus_pct = 0x1338; // int32
        constexpr uint32_t damage_per_tick = 0x133C; // int32
        constexpr uint32_t tick_rate = 0x1340; // float32
        constexpr uint32_t max_threshold_duration = 0x1344; // float32
        constexpr uint32_t shard_bonus_damage_pct = 0x1348; // int32
        constexpr uint32_t shard_heal_pct = 0x134C; // int32
        constexpr uint32_t shard_creep_penalty = 0x1350; // float32
        constexpr uint32_t m_bIsReflection = 0x1354; // bool
    }

    namespace CDOTA_Modifier_GungirChain {
        constexpr uint32_t chain_radius = 0x1318; // int32
        constexpr uint32_t chain_strikes = 0x131C; // int32
        constexpr uint32_t chain_damage = 0x1320; // int32
        constexpr uint32_t chain_delay = 0x1324; // float32
        constexpr uint32_t m_iCurJumpCount = 0x1328; // int32
        constexpr uint32_t m_vCurTargetLoc = 0x132C; // Vector
        constexpr uint32_t m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Gyrocopter_Call_Down {
        constexpr uint32_t slow_duration = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t slow = 0x1324; // int32
        constexpr uint32_t m_bDelayed = 0x1328; // bool
    }

    namespace CDOTA_Modifier_Gyrocopter_Call_Down_Slow {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Gyrocopter_Flak_Cannon {
        constexpr uint32_t max_attacks = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t m_iNumAttacks = 0x1320; // int32
        constexpr uint32_t projectile_speed = 0x1324; // int32
        constexpr uint32_t bonus_night_vision = 0x1328; // int32
        constexpr uint32_t radius = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Gyrocopter_Flak_Cannon_Scepter {
        constexpr uint32_t fire_rate = 0x1318; // float32
        constexpr uint32_t scepter_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Gyrocopter_Homing_Missile {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t hero_damage = 0x1320; // int32
        constexpr uint32_t acceleration = 0x1324; // int32
        constexpr uint32_t min_damage = 0x1328; // int32
        constexpr uint32_t max_distance = 0x132C; // int32
        constexpr uint32_t shard_radius = 0x1330; // int32
        constexpr uint32_t shard_delay = 0x1334; // float32
        constexpr uint32_t pre_flight_time = 0x1338; // float32
        constexpr uint32_t stun_duration = 0x133C; // float32
        constexpr uint32_t m_nMissileDamage = 0x1340; // int32
        constexpr uint32_t m_nTeamNumber = 0x1344; // int32
        constexpr uint32_t speed = 0x1350; // float32
        constexpr uint32_t m_hAttachTarget = 0x1354; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vStartPosition = 0x1358; // Vector
        constexpr uint32_t m_EnemyVision = 0x1368; // CountdownTimer
        constexpr uint32_t m_MoveTime = 0x1380; // CountdownTimer
    }

    namespace CDOTA_Modifier_Gyrocopter_Homing_Rocket_Barrage {
        constexpr uint32_t rocket_damage = 0x1318; // int32
        constexpr uint32_t shard_radius = 0x131C; // int32
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Gyrocopter_Rocket_Barrage {
        constexpr uint32_t rocket_damage = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t slow_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_HallOfFame_Glow {
        constexpr uint32_t m_vecGlowingPlayerIDs = 0x1318; // CUtlVector< PlayerID_t >
        constexpr uint32_t m_vecGlowingPlayerIDs2 = 0x1330; // CUtlVector< PlayerID_t >
    }

    namespace CDOTA_Modifier_HarpyScout_TakeOff {
        constexpr uint32_t move_speed_penalty = 0x1318; // int32
        constexpr uint32_t cost_per_second = 0x131C; // float32
    }

    namespace CDOTA_Modifier_HarpyStorm_ChainLightning {
        constexpr uint32_t jump_range = 0x1318; // int32
        constexpr uint32_t max_targets = 0x131C; // int32
        constexpr uint32_t damage_percent_loss = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Havoc_Hammer_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Healing_Campfire_Heal {
        constexpr uint32_t heal_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_HeavensHalberd_Debuff {
        constexpr uint32_t m_bPierceDebuffImmunity = 0x1318; // bool
    }

    namespace CDOTA_Modifier_HeroStatue {
        constexpr uint32_t m_unStatusEffectIndex = 0x1318; // uint32
        constexpr uint32_t m_hPedestal = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Hide_On_Minimap {
        constexpr uint32_t m_bEnemiesOnly = 0x1318; // bool
    }

    namespace CDOTA_Modifier_HighFiveRequested {
        constexpr uint32_t acknowledge_range = 0x1318; // int32
        constexpr uint32_t think_interval = 0x131C; // float32
        constexpr uint32_t acknowledged_cooldown = 0x1320; // float32
        constexpr uint32_t m_bAcknowledged = 0x1324; // bool
        constexpr uint32_t m_bFirstThink = 0x1325; // bool
        constexpr uint32_t high_five_level = 0x1328; // int32
    }

    namespace CDOTA_Modifier_HillTroll_Rally {
        constexpr uint32_t damage_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_HillTroll_RallyAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_HoldoutCullingBlade {
        constexpr uint32_t leap_distance = 0x1318; // int32
        constexpr uint32_t leap_radius = 0x131C; // int32
        constexpr uint32_t leap_speed = 0x1320; // float32
        constexpr uint32_t leap_acceleration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Holdout_GladiatorsUnite {
        constexpr uint32_t bonus_armor_per_hero = 0x1318; // int32
        constexpr uint32_t bonus_damage_per_hero = 0x131C; // int32
        constexpr uint32_t lifesteal_per_hero = 0x1320; // int32
        constexpr uint32_t scepter_damage_reduction_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Holdout_GladiatorsUnite_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Holdout_StaticRemnantThinker {
        constexpr uint32_t static_remnant_radius = 0x1318; // int32
        constexpr uint32_t static_remnant_damage_radius = 0x131C; // int32
        constexpr uint32_t static_remnant_damage = 0x1320; // int32
        constexpr uint32_t static_remnant_delay = 0x1324; // float32
        constexpr uint32_t overload_duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Hoodwink_AcornShot_ArmorCorruption {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Hoodwink_AcornShot_BonusDamage {
        constexpr uint32_t acorn_shot_damage = 0x1318; // int32
        constexpr uint32_t base_damage_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_AcornShot_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Bushwhack_Trap {
        constexpr uint32_t visual_height = 0x1318; // int32
        constexpr uint32_t animation_rate = 0x131C; // float32
        constexpr uint32_t m_iIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_bPullComplete = 0x1324; // bool
        constexpr uint32_t m_TreeId = 0x1328; // uint32
        constexpr uint32_t m_flDamagePerTick = 0x132C; // float32
        constexpr uint32_t m_nDamageTicks = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Caltrops_Debuff {
        constexpr uint32_t movespeed_pct = 0x1318; // int32
        constexpr uint32_t tick_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Camouflage {
        constexpr uint32_t fade_time = 0x1318; // float32
        constexpr uint32_t m_flFadeTime = 0x131C; // GameTime_t
        constexpr uint32_t m_bInvisLastThink = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Hoodwink_Decoy_Illusion {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Hoodwink_Decoy_Invisibility {
        constexpr uint32_t movement_speed = 0x1328; // int32
        constexpr uint32_t m_hEntitiesAffected = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Hoodwink_HeavyQuiver {
        constexpr uint32_t bonus_projectile_speed_pct = 0x1318; // int32
        constexpr uint32_t bonus_attack_range = 0x131C; // int32
        constexpr uint32_t deadly_blow_multiplier = 0x1320; // int32
        constexpr uint32_t maim_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Hoodwink_HuntersQuiver {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t debuff_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Hoodwink_HuntersQuiver_Mark {
        constexpr uint32_t stack_crit_chance_pct = 0x1318; // int32
        constexpr uint32_t critical_damage_pct = 0x131C; // int32
        constexpr uint32_t stack_slow_pct = 0x1320; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Hoodwink_Hunters_Mark {
        constexpr uint32_t slow_pct = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
        constexpr uint32_t status_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Scurry_Active {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
        constexpr uint32_t attack_range = 0x131C; // int32
        constexpr uint32_t cast_range = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Scurry_Passive {
        constexpr uint32_t evasion = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t bonus_active_evasion = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Hoodwink_Sharpshooter_Debuff {
        constexpr uint32_t slow_move_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Sharpshooter_VisionThinker {
        constexpr uint32_t arrow_width = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Hoodwink_Sharpshooter_Windup {
        constexpr uint32_t arrow_vision = 0x1318; // int32
        constexpr uint32_t max_charge_time = 0x131C; // float32
        constexpr uint32_t turn_rate = 0x1320; // float32
        constexpr uint32_t base_power = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Hurricane_Pike_Active {
        constexpr uint32_t push_length = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Hurricane_Pike_Active_Alternate {
        constexpr uint32_t enemy_length = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Hurricane_Pike_Range {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t max_attacks = 0x131C; // int32
        constexpr uint32_t m_iNumAttacks = 0x1320; // int32
        constexpr uint32_t bActive = 0x1324; // bool
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Huskar_Berserkers_Blood {
        constexpr uint32_t maximum_health_regen = 0x1318; // int32
        constexpr uint32_t maximum_attack_speed = 0x131C; // int32
        constexpr uint32_t maximum_magic_resist = 0x1320; // int32
        constexpr uint32_t hp_threshold_max = 0x1324; // int32
        constexpr uint32_t m_nFxHuskIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_nFxIndexA = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Huskar_Burning_Spear_Counter {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Huskar_Burning_Spear_Debuff {
        constexpr uint32_t burn_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Huskar_Burning_Spear_Self {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t duration = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Huskar_Inner_Fire_Disarm {
        constexpr uint32_t movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Huskar_Inner_Fire_Knockback {
        constexpr uint32_t knockback_distance = 0x1318; // float32
        constexpr uint32_t knockback_duration = 0x131C; // float32
        constexpr uint32_t effective_distance = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Huskar_Inner_Vitality {
        constexpr uint32_t heal = 0x1318; // int32
        constexpr uint32_t attrib_bonus = 0x131C; // float32
        constexpr uint32_t hurt_attrib_bonus = 0x1320; // float32
        constexpr uint32_t hurt_percent = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Huskar_Life_Break {
        constexpr uint32_t attack_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Huskar_Life_Break_Taunt {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDidSetAttackTarget = 0x131C; // bool
    }

    namespace CDOTA_Modifier_IceShaman_IncendiaryBomb {
        constexpr uint32_t burn_damage = 0x1318; // int32
        constexpr uint32_t building_damage_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_IceSlide {
        constexpr uint32_t m_fLastUpdateTime = 0x1318; // GameTime_t
        constexpr uint32_t m_vVelocity = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_Illusion {
        constexpr uint32_t outgoing_damage = 0x1318; // int32
        constexpr uint32_t outgoing_damage_structure = 0x131C; // int32
        constexpr uint32_t outgoing_damage_roshan = 0x1320; // int32
        constexpr uint32_t incoming_damage = 0x1324; // int32
        constexpr uint32_t bounty_base = 0x1328; // int32
        constexpr uint32_t bounty_growth = 0x132C; // int32
        constexpr uint32_t m_strIllusionType = 0x1330; // CUtlString
        constexpr uint32_t m_szIllusionLabel = 0x1338; // char[64]
        constexpr uint32_t m_bHidden = 0x1378; // bool
    }

    namespace CDOTA_Modifier_InvisibilityEdge_WindWalk {
        constexpr uint32_t windwalk_bonus_damage = 0x1328; // int32
        constexpr uint32_t windwalk_movement_speed = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Invisible {
        constexpr uint32_t m_bSubtle = 0x1318; // bool
        constexpr uint32_t m_flFadeTime = 0x131C; // GameTime_t
        constexpr uint32_t m_flFadeTimeValue = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Invoke_Bonuses {
        constexpr uint32_t spell_amp = 0x1318; // float32
        constexpr uint32_t spell_lifesteal = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Invoker_Alacrity {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Invoker_ChaosMeteor_Burn {
        constexpr uint32_t spell_amp = 0x1318; // float32
        constexpr uint32_t spell_lifesteal = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Invoker_ColdSnap {
        constexpr uint32_t freeze_damage = 0x1318; // float32
        constexpr uint32_t freeze_duration = 0x131C; // float32
        constexpr uint32_t freeze_cooldown = 0x1320; // float32
        constexpr uint32_t damage_trigger = 0x1324; // float32
        constexpr uint32_t spell_lifesteal = 0x1328; // float32
        constexpr uint32_t spell_amp = 0x132C; // float32
        constexpr uint32_t freeze_heal = 0x1330; // float32
        constexpr uint32_t nQuasApplications = 0x1334; // int32
        constexpr uint32_t nExortApplications = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Invoker_DeafeningBlast_Knockback {
        constexpr uint32_t disarm_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Invoker_EMP {
        constexpr uint32_t area_of_effect = 0x1318; // int32
        constexpr uint32_t mana_burned = 0x131C; // int32
        constexpr uint32_t damage_per_mana = 0x1320; // float32
        constexpr uint32_t spell_lifesteal = 0x1324; // float32
        constexpr uint32_t spell_amp = 0x1328; // float32
        constexpr uint32_t self_mana_restore_pct = 0x132C; // int32
        constexpr uint32_t m_hPullThinker = 0x1330; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Invoker_EMP_Pull {
        constexpr uint32_t shard_drag_speed = 0x1318; // int32
        constexpr uint32_t aura_origin_x = 0x131C; // float32
        constexpr uint32_t aura_origin_y = 0x1320; // float32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_vCenter = 0x1328; // Vector
        constexpr uint32_t m_flLastThinkTime = 0x1334; // GameTime_t
    }

    namespace CDOTA_Modifier_Invoker_EMP_Pull_Thinker {
        constexpr uint32_t area_of_effect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Invoker_ExortInstance {
        constexpr uint32_t bonus_damage_per_instance = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Invoker_GhostWalk_Enemy {
        constexpr uint32_t enemy_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Invoker_GhostWalk_Self {
        constexpr uint32_t self_slow = 0x1328; // int32
        constexpr uint32_t area_of_effect = 0x132C; // int32
        constexpr uint32_t aura_fade_time = 0x1330; // float32
        constexpr uint32_t health_regen = 0x1334; // float32
        constexpr uint32_t mana_regen = 0x1338; // float32
        constexpr uint32_t disable_time = 0x133C; // float32
        constexpr uint32_t m_timeLastDamage = 0x1340; // GameTime_t
    }

    namespace CDOTA_Modifier_Invoker_IceWall_SlowAura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
        constexpr uint32_t slow_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Invoker_IceWall_SlowDebuff {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Invoker_IceWall_Thinker {
        constexpr uint32_t damage_per_second = 0x1318; // float32
        constexpr uint32_t num_wall_elements = 0x131C; // int32
        constexpr uint32_t wall_element_spacing = 0x1320; // int32
        constexpr uint32_t wall_element_radius = 0x1324; // int32
        constexpr uint32_t spell_amp = 0x1328; // float32
        constexpr uint32_t spell_lifesteal = 0x132C; // float32
        constexpr uint32_t m_vWallDir = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_Invoker_QuasInstance {
        constexpr uint32_t spell_lifesteal = 0x1318; // float32
        constexpr uint32_t health_regen_per_instance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Invoker_SunStrike {
        constexpr uint32_t area_of_effect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Invoker_SunStrike_Cataclysm {
        constexpr uint32_t area_of_effect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Invoker_SunStrike_Cataclysm_Thinker {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t spell_lifesteal = 0x131C; // float32
        constexpr uint32_t spell_amp = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Invoker_WexInstance {
        constexpr uint32_t move_speed_per_instance = 0x1318; // float32
        constexpr uint32_t cooldown_reduction = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Invoker_Wex_Cooldown_Reduction {
        constexpr uint32_t cooldown_reduction = 0x1318; // int32
        constexpr uint32_t m_nTotalCDR = 0x131C; // int32
    }

    namespace CDOTA_Modifier_IonShell {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_AbyssalBlade {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bash_chance_melee = 0x131C; // int32
        constexpr uint32_t bash_chance_ranged = 0x1320; // int32
        constexpr uint32_t bash_duration = 0x1324; // float32
        constexpr uint32_t bash_cooldown = 0x1328; // float32
        constexpr uint32_t bonus_chance_damage = 0x132C; // int32
        constexpr uint32_t bonus_damage = 0x1330; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t bonus_health = 0x1350; // int32
        constexpr uint32_t bonus_health_regen = 0x1354; // float32
        constexpr uint32_t block_damage_ranged = 0x1358; // int32
        constexpr uint32_t block_damage_melee = 0x135C; // int32
        constexpr uint32_t block_chance = 0x1360; // int32
    }

    namespace CDOTA_Modifier_Item_Aegis {
        constexpr uint32_t reincarnate_time = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_AeonDisk {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t health_threshold_pct = 0x1320; // int32
        constexpr uint32_t buff_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_AeonDisk_Buff {
        constexpr uint32_t status_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_AetherialHalo {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t spell_amp = 0x1324; // float32
        constexpr uint32_t mana_regen_multiplier = 0x1328; // float32
        constexpr uint32_t spell_lifesteal_amp = 0x132C; // float32
        constexpr uint32_t bonus_aoe = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_AetherialHalo_Burn {
        constexpr uint32_t burn_dps_buildings = 0x1318; // int32
        constexpr uint32_t burn_dps_units = 0x131C; // int32
        constexpr uint32_t burn_interval = 0x1320; // float32
        constexpr uint32_t burn_slow = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_AetherialHalo_Land {
        constexpr uint32_t impact_radius = 0x1318; // int32
        constexpr uint32_t land_time = 0x131C; // float32
        constexpr uint32_t burn_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_AghsFort_Bloodstone {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t mana_regen_multiplier = 0x1320; // int32
        constexpr uint32_t regen_per_charge = 0x1324; // float32
        constexpr uint32_t amp_per_charge = 0x1328; // float32
        constexpr uint32_t death_charges = 0x132C; // int32
        constexpr uint32_t kill_charges = 0x1330; // int32
        constexpr uint32_t hero_lifesteal = 0x1334; // float32
        constexpr uint32_t creep_lifesteal = 0x1338; // float32
        constexpr uint32_t bonus_intellect = 0x133C; // int32
        constexpr uint32_t spell_amp = 0x1340; // int32
        constexpr uint32_t spell_lifesteal_amp = 0x1344; // int32
    }

    namespace CDOTA_Modifier_Item_AghsFort_Bloodstone_Active {
        constexpr uint32_t mana_cost_percentage = 0x1318; // int32
        constexpr uint32_t restore_duration = 0x131C; // float32
        constexpr uint32_t m_flDrainAmount = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_AncientGuardian {
        constexpr uint32_t actual_bonus_damage = 0x1318; // int32
        constexpr uint32_t extra_bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t radius = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_Ancient_Janggo {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t bonus_str = 0x131C; // int32
        constexpr uint32_t bonus_int = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Ancient_Janggo_Active {
        constexpr uint32_t bonus_attack_speed_pct = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Ancient_Janggo_Aura {
        constexpr uint32_t aura_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ancient_Perseverance {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
        constexpr uint32_t mana_regen_amp = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Angels_Demise {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
        constexpr uint32_t bonus_spell_damage = 0x1324; // int32
        constexpr uint32_t slow_duration = 0x1328; // float32
        constexpr uint32_t bonus_all_stats = 0x132C; // int32
        constexpr uint32_t bonus_damage = 0x1330; // int32
        constexpr uint32_t crit_chance = 0x1334; // int32
        constexpr uint32_t crit_multiplier = 0x1338; // int32
        constexpr uint32_t spell_crit_multiplier = 0x133C; // int32
        constexpr uint32_t spell_crit_flat = 0x1340; // int32
        constexpr uint32_t vecActivatedAbilities = 0x1348; // CUtlVector< C_DOTABaseAbility* >
    }

    namespace CDOTA_Modifier_Item_Angels_Demise_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Apex {
        constexpr uint32_t primary_stat = 0x1318; // int32
        constexpr uint32_t primary_stat_universal = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Arcane_Blink {
        constexpr uint32_t blink_damage_cooldown = 0x1318; // float32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Arcane_Blink_Buff {
        constexpr uint32_t cast_pct_improvement = 0x1318; // int32
        constexpr uint32_t manacost_reduction = 0x131C; // int32
        constexpr uint32_t debuff_amp = 0x1320; // int32
        constexpr uint32_t cast_range_bonus = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Arcane_Boots {
        constexpr uint32_t bonus_movement = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t aura_radius = 0x1320; // int32
        constexpr uint32_t mana_regen = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_Arcane_Ring {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_intelligence = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Arcane_Scout {
        constexpr uint32_t vision_bonus = 0x1318; // int32
        constexpr uint32_t magic_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Arcane_Scout_Invulnerability {
        constexpr uint32_t scout_movespeed = 0x1318; // int32
        constexpr uint32_t sight_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Armlet {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_health_regen = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_AsceticCap {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_AsceticCapBuff {
        constexpr uint32_t status_resistance = 0x1318; // int32
        constexpr uint32_t slow_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_AssassinsDagger {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t debuff_duration = 0x1330; // int32
        constexpr uint32_t bonus_attack_speed = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Item_Assault_Cuirass {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Assault_Cuirass_Negative_Armor {
        constexpr uint32_t aura_negative_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Assault_Cuirass_Positive {
        constexpr uint32_t aura_attack_speed = 0x1318; // int32
        constexpr uint32_t aura_positive_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Ballista {
        constexpr uint32_t attack_range_bonus = 0x1318; // int32
        constexpr uint32_t knockback_distance = 0x131C; // float32
        constexpr uint32_t knockback_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Barricade {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Barricade_Thinker {
        constexpr uint32_t length = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // int32
        constexpr uint32_t max_hits = 0x1320; // int32
        constexpr uint32_t m_iCurrentHits = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Battlefury {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
        constexpr uint32_t cleave_damage_percent = 0x1324; // int32
        constexpr uint32_t cleave_damage_percent_creep = 0x1328; // int32
        constexpr uint32_t cleave_starting_width = 0x132C; // int32
        constexpr uint32_t cleave_ending_width = 0x1330; // int32
        constexpr uint32_t cleave_distance = 0x1334; // int32
        constexpr uint32_t upgraded_cleave_bonus = 0x1338; // int32
        constexpr uint32_t upgraded_damage_bonus = 0x133C; // int32
        constexpr uint32_t quelling_bonus = 0x1340; // int32
        constexpr uint32_t quelling_bonus_ranged = 0x1344; // int32
    }

    namespace CDOTA_Modifier_Item_BeltOfStrength {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Black_King_Bar {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_BladeOfAlacrity {
        constexpr uint32_t bonus_agility = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Blade_Mail {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t passive_reflection_constant = 0x1324; // int32
        constexpr uint32_t passive_reflection_pct = 0x1328; // int32
        constexpr uint32_t active_reflection_pct = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_BladesOfAttack {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Blight_Stone {
        constexpr uint32_t corruption_duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_BlightedSpirit_Blight {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t heal_reduction = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_BlinkDagger {
        constexpr uint32_t blink_damage_cooldown = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Blood_Grenade {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Blood_Grenade_Debuff {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t damage_over_time = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Blood_Grenade_Flight_Thinker {
        constexpr uint32_t speed = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage_over_time = 0x1320; // int32
        constexpr uint32_t impact_damage = 0x1324; // int32
        constexpr uint32_t debuff_duration = 0x1328; // float32
        constexpr uint32_t movespeed_slow = 0x132C; // int32
        constexpr uint32_t tick_rate = 0x1330; // float32
        constexpr uint32_t m_nFXIndex = 0x1334; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Bloodstone {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_aoe = 0x1320; // int32
        constexpr uint32_t spell_lifesteal = 0x1324; // float32
        constexpr uint32_t lifesteal_multiplier = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_Bloodthorn {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t bonus_intellect = 0x1330; // int32
        constexpr uint32_t bonus_mana_regen = 0x1334; // float32
        constexpr uint32_t bonus_damage = 0x1338; // int32
        constexpr uint32_t bonus_attack_speed = 0x133C; // int32
        constexpr uint32_t spell_amp = 0x1340; // int32
        constexpr uint32_t mana_regen_multiplier = 0x1344; // int32
        constexpr uint32_t bonus_magic_resist = 0x1348; // int32
        constexpr uint32_t duration = 0x134C; // float32
        constexpr uint32_t proc_damage = 0x1350; // int32
        constexpr uint32_t proc_chance = 0x1354; // int32
        constexpr uint32_t bonus_health_regen = 0x1358; // float32
    }

    namespace CDOTA_Modifier_Item_Book_Of_Shadows {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t night_vision = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Book_Of_Shadows_Buff {
        constexpr uint32_t m_bUntargetableAllies = 0x1318; // bool
        constexpr uint32_t m_bUntargetableEnemies = 0x1319; // bool
    }

    namespace CDOTA_Modifier_Item_BootsOfElven {
        constexpr uint32_t bonus_agility = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_BootsOfSpeed {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_BootsOfTravel {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Boots_Of_Bearing {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t bonus_health_regen = 0x1320; // int32
        constexpr uint32_t bonus_str = 0x1324; // int32
        constexpr uint32_t bonus_int = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Boots_Of_Bearing_Active {
        constexpr uint32_t bonus_attack_speed_pct = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed_pct = 0x131C; // int32
        constexpr uint32_t bonus_ms_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Boots_Of_Bearing_Aura {
        constexpr uint32_t aura_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Bottomless_Chalice {
        constexpr uint32_t max_charges_per_kill = 0x1318; // int32
        constexpr uint32_t recharge_time = 0x131C; // float32
        constexpr uint32_t m_bFull = 0x1320; // bool
        constexpr uint32_t bonus_intellect = 0x1324; // int32
        constexpr uint32_t movement_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Bottomless_Chalice_Regen {
        constexpr uint32_t health = 0x1318; // int32
        constexpr uint32_t mana = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Bracer {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t clock_time = 0x1324; // int32
        constexpr uint32_t bonus_health_regen = 0x1328; // float32
        constexpr uint32_t bonus_damage = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Broadsword {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Broom_Handle {
        constexpr uint32_t melee_attack_range = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Buckler {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t bonus_aoe_radius = 0x131C; // int32
        constexpr uint32_t armor = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Buckler_Effect {
        constexpr uint32_t bonus_aoe_armor = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Bullwhip {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Bullwhip_Buff {
        constexpr uint32_t speed = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Bullwhip_Buff_Thinker {
        constexpr uint32_t speed = 0x1318; // int32
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Butterfly {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_evasion = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed_pct = 0x1324; // int32
        constexpr uint32_t bonus_slow_resistance = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Butterfly_Extra {
        constexpr uint32_t bonus_move_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Caster_Rapier {
        constexpr uint32_t cast_range_limit = 0x1318; // int32
        constexpr uint32_t bonus_spell_amp = 0x131C; // int32
        constexpr uint32_t backstab_duration = 0x1320; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Ceremonial_Robe {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t aura_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_ChainMail {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Chipped_Vest {
        constexpr uint32_t hp_regen = 0x1318; // float32
        constexpr uint32_t damage_return_hero = 0x131C; // int32
        constexpr uint32_t damage_return_creep = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Circlet {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Claymore {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Cloak_Of_Flames {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Clumsy_Net {
        constexpr uint32_t all_stats = 0x1318; // int32
        constexpr uint32_t mana_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Cornucopia {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Craggy_Coat {
        constexpr uint32_t armor_bonus = 0x1318; // int32
        constexpr uint32_t move_speed = 0x131C; // int32
        constexpr uint32_t bonus_health = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Craggy_Coat_Tanky {
        constexpr uint32_t active_armor = 0x1318; // int32
        constexpr uint32_t move_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_CraniumBasher {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bash_chance_melee = 0x131C; // int32
        constexpr uint32_t bash_chance_ranged = 0x1320; // int32
        constexpr uint32_t bash_duration = 0x1324; // float32
        constexpr uint32_t bash_cooldown = 0x1328; // float32
        constexpr uint32_t bonus_chance_damage = 0x132C; // int32
        constexpr uint32_t bonus_damage = 0x1330; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Crimson_Guard {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
        constexpr uint32_t bonus_armor = 0x1320; // float32
        constexpr uint32_t block_damage_ranged = 0x1324; // int32
        constexpr uint32_t block_damage_melee = 0x1328; // int32
        constexpr uint32_t block_chance = 0x132C; // int32
        constexpr uint32_t bonus_aoe_radius = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Crimson_Guard_Extra {
        constexpr uint32_t block_chance_active = 0x1318; // int32
        constexpr uint32_t block_damage_active = 0x131C; // int32
        constexpr uint32_t strength_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Crown {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Cyclone {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_movement_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_DaggerOfRistul {
        constexpr uint32_t aspd = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Dagon {
        constexpr uint32_t bonus_int = 0x1318; // int32
        constexpr uint32_t bonus_str = 0x131C; // int32
        constexpr uint32_t bonus_agi = 0x1320; // int32
        constexpr uint32_t passive_spell_lifesteal = 0x1324; // float32
        constexpr uint32_t dagon_spell_lifesteal = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_DemonEdge {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Demonicon {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Desolator {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_damage_per_kill = 0x131C; // int32
        constexpr uint32_t bonus_damage_per_assist = 0x1320; // int32
        constexpr uint32_t max_damage = 0x1324; // int32
        constexpr uint32_t corruption_duration = 0x1328; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Desolator_2 {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t corruption_duration = 0x131C; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Devastator {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t projectile_speed = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
        constexpr uint32_t mana_cost = 0x1328; // int32
        constexpr uint32_t slow_duration = 0x132C; // int32
        constexpr uint32_t spell_amp_duration = 0x1330; // int32
        constexpr uint32_t damage_penalty = 0x1334; // int32
        constexpr uint32_t passive_cooldown = 0x1338; // int32
        constexpr uint32_t m_InFlightWitchBladeAttackRecords = 0x1340; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Diadem {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Diffusal_Blade {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
        constexpr uint32_t damage_per_burn = 0x1320; // float32
        constexpr uint32_t feedback_mana_burn = 0x1324; // int32
        constexpr uint32_t feedback_mana_burn_illusion_melee = 0x1328; // int32
        constexpr uint32_t feedback_mana_burn_illusion_ranged = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Diffusal_Blade_Slow {
        constexpr uint32_t purge_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Disperser {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
        constexpr uint32_t bonus_attack_speed = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
        constexpr uint32_t damage_per_burn = 0x132C; // float32
        constexpr uint32_t feedback_mana_burn = 0x1330; // int32
        constexpr uint32_t feedback_mana_burn_illusion_melee = 0x1334; // int32
        constexpr uint32_t feedback_mana_burn_illusion_ranged = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Item_Disperser_Attack_Debuff {
        constexpr uint32_t attack_speed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Disperser_Evasion_Buff {
        constexpr uint32_t purge_bonus_miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Disperser_Movespeed_Buff {
        constexpr uint32_t movement_speed_buff_rate = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_DivineRapier {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_spell_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Doubloon {
        constexpr uint32_t conversion_pct = 0x1318; // float32
        constexpr uint32_t bonus_health_regen = 0x131C; // int32
        constexpr uint32_t bonus_mana_regen = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_DragonLance {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t base_attack_range = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Dragon_Scale {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_DuelistGloves {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // float32
        constexpr uint32_t actual_attack_speed = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_DustofAppearance {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_DustofAppearance_Thinker {
        constexpr uint32_t radius = 0x1318; // float32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t linger_duration = 0x1320; // float32
        constexpr uint32_t movespeed = 0x1324; // int32
        constexpr uint32_t damage = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_Dynamite_Jacket {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t blind_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_EagleEye {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t bonus_agi = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_EagleHorn {
        constexpr uint32_t bonus_agility = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_EchoSabre {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
        constexpr uint32_t bonus_strength = 0x1328; // int32
        constexpr uint32_t slow_duration = 0x132C; // float32
        constexpr uint32_t bonus_speed = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Item_Elven_Tunic {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t evasion = 0x131C; // int32
        constexpr uint32_t movment = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Enchanted_Mango {
        constexpr uint32_t hp_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Enchanted_Quiver {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t active_bonus_attack_range = 0x1320; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_EnergyBooster {
        constexpr uint32_t bonus_mana = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Essence_Ring {
        constexpr uint32_t bonus_int = 0x1318; // int32
        constexpr uint32_t mp_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Essence_Ring_Active {
        constexpr uint32_t health_gain = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Eternal_Shroud {
        constexpr uint32_t bonus_spell_resist = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_health = 0x1324; // float32
        constexpr uint32_t mana_restore_pct = 0x1328; // int32
        constexpr uint32_t stack_threshold = 0x132C; // float32
        constexpr uint32_t stack_resist = 0x1330; // float32
        constexpr uint32_t stack_duration = 0x1334; // float32
        constexpr uint32_t max_stacks = 0x1338; // int32
        constexpr uint32_t m_flCumulativeDamage = 0x133C; // float32
    }

    namespace CDOTA_Modifier_Item_Eternal_Shroud_Barrier {
        constexpr uint32_t barrier_block = 0x1318; // int32
        constexpr uint32_t barrier_amount = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Eternal_Shroud_Bonus_Magic_Resist {
        constexpr uint32_t max_stacks = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ethereal_Blade {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_mana = 0x1324; // int32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
        constexpr uint32_t bonus_cast_range = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Ethereal_Blade_Slow {
        constexpr uint32_t blast_movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ex_Machina {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_EyeOfTheVizier {
        constexpr uint32_t cast_range_bonus = 0x1318; // int32
        constexpr uint32_t mana_reduction_pct = 0x131C; // int32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Faded_Broach {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Faerie_Fire {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Falcon_Blade {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_damage_per_kill = 0x131C; // int32
        constexpr uint32_t bonus_damage_per_assist = 0x1320; // int32
        constexpr uint32_t bonus_health = 0x1324; // int32
        constexpr uint32_t max_damage = 0x1328; // int32
        constexpr uint32_t bonus_mana_regen = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_Fallen_Sky {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
        constexpr uint32_t bonus_health_regen = 0x1320; // float32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
        constexpr uint32_t blink_damage_cooldown = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_Fallen_Sky_Burn {
        constexpr uint32_t burn_dps_buildings = 0x1318; // int32
        constexpr uint32_t burn_dps_units = 0x131C; // int32
        constexpr uint32_t burn_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Fallen_Sky_Land {
        constexpr uint32_t impact_radius = 0x1318; // int32
        constexpr uint32_t land_time = 0x131C; // float32
        constexpr uint32_t burn_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Flicker {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Fluffy_Hat {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_ForceStaff {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Force_Boots {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Force_Field {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t bonus_aoe_radius = 0x131C; // int32
        constexpr uint32_t self_armor = 0x1320; // int32
        constexpr uint32_t self_mres = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Force_Field_Bonus_Aura {
        constexpr uint32_t bonus_aoe_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Force_Field_Effect {
        constexpr uint32_t bonus_aoe_armor = 0x1318; // float32
        constexpr uint32_t bonus_aoe_ms = 0x131C; // float32
        constexpr uint32_t bonus_aoe_mres = 0x1320; // float32
        constexpr uint32_t self_mres = 0x1324; // float32
        constexpr uint32_t self_armor = 0x1328; // float32
        constexpr uint32_t active_reflection_pct = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Fortitude_Ring {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Fortitude_Ring_Active {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Gauntlets {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_GemOfTrueSight {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_GhostScepter {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Giants_Ring {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t model_scale = 0x1320; // int32
        constexpr uint32_t damage_radius = 0x1324; // int32
        constexpr uint32_t pct_str_damage_per_second = 0x1328; // int32
        constexpr uint32_t tick_rate = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_GlimmerCape {
        constexpr uint32_t bonus_magical_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Gloves_Of_Travel {
        constexpr uint32_t attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Gossamer_Cape {
        constexpr uint32_t movement_speed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Grandmasters_Glaive {
        constexpr uint32_t sange_bonus_strength = 0x1318; // int32
        constexpr uint32_t sange_status_resistance = 0x131C; // int32
        constexpr uint32_t sange_hp_regen_amp = 0x1320; // int32
        constexpr uint32_t kaya_bonus_intellect = 0x1324; // int32
        constexpr uint32_t kaya_spell_amp = 0x1328; // int32
        constexpr uint32_t kaya_mana_regen_multiplier = 0x132C; // int32
        constexpr uint32_t kaya_magic_damage_attack = 0x1330; // int32
        constexpr uint32_t yasha_bonus_agility = 0x1334; // int32
        constexpr uint32_t yasha_bonus_attack_speed = 0x1338; // int32
        constexpr uint32_t yasha_movement_speed_percent_bonus = 0x133C; // int32
        constexpr uint32_t m_iCurrentStance = 0x1340; // int32
        constexpr uint32_t bonus_strength = 0x1344; // int32
        constexpr uint32_t bash_chance_melee = 0x1348; // int32
        constexpr uint32_t bash_chance_ranged = 0x134C; // int32
        constexpr uint32_t bash_duration = 0x1350; // float32
        constexpr uint32_t bash_cooldown = 0x1354; // float32
        constexpr uint32_t bonus_chance_damage = 0x1358; // int32
        constexpr uint32_t bonus_damage = 0x135C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1360; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_GreaterCritical {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t crit_multiplier = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Greater_Faerie_Fire {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Grove_Bow {
        constexpr uint32_t attack_range_bonus = 0x1318; // int32
        constexpr uint32_t attack_speed_bonus = 0x131C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Grove_Bow_Debuff {
        constexpr uint32_t magic_resistance_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_GuardianShell_Active {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Guardian_Greaves {
        constexpr uint32_t bonus_movement = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_mres = 0x1320; // int32
        constexpr uint32_t bonus_armor = 0x1324; // int32
        constexpr uint32_t aura_radius = 0x1328; // int32
        constexpr uint32_t mana_regen = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_Guardian_Greaves_Aura {
        constexpr uint32_t aura_health_regen = 0x1318; // float32
        constexpr uint32_t aura_armor = 0x131C; // float32
        constexpr uint32_t aura_health_regen_bonus = 0x1320; // float32
        constexpr uint32_t aura_armor_bonus = 0x1324; // float32
        constexpr uint32_t aura_mana_regen = 0x1328; // float32
        constexpr uint32_t aura_mana_regen_bonus = 0x132C; // float32
        constexpr uint32_t aura_bonus_threshold = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Guardian_Shell {
        constexpr uint32_t all_stats = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t counter_cooldown = 0x1320; // float32
        constexpr uint32_t m_flLastCounterTime = 0x1324; // GameTime_t
    }

    namespace CDOTA_Modifier_Item_Gungir {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_strength = 0x1320; // int32
        constexpr uint32_t bonus_agility = 0x1324; // int32
        constexpr uint32_t bonus_intellect = 0x1328; // int32
        constexpr uint32_t bonus_hp = 0x132C; // int32
        constexpr uint32_t chain_chance = 0x1330; // int32
        constexpr uint32_t chain_strikes = 0x1334; // int32
        constexpr uint32_t chain_damage = 0x1338; // int32
        constexpr uint32_t chain_radius = 0x133C; // int32
        constexpr uint32_t chain_cooldown = 0x1340; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1348; // CUtlVector< int16 >
        constexpr uint32_t m_ChainTimer = 0x1360; // CountdownTimer
    }

    namespace CDOTA_Modifier_Item_HandOfMidas {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t charge_gain_timer = 0x131C; // float32
        constexpr uint32_t max_charges = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Harpoon {
        constexpr uint32_t bonus_chance = 0x1318; // int32
        constexpr uint32_t bonus_chance_damage = 0x131C; // int32
        constexpr uint32_t bonus_strength = 0x1320; // int32
        constexpr uint32_t bonus_agility = 0x1324; // int32
        constexpr uint32_t bonus_intellect = 0x1328; // int32
        constexpr uint32_t bonus_mana_regen = 0x132C; // float32
        constexpr uint32_t bonus_damage = 0x1330; // int32
        constexpr uint32_t bonus_speed = 0x1334; // int32
        constexpr uint32_t m_InFlightProcAttackRecords = 0x1338; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Harpoon_EchoSabre_Component {
        constexpr uint32_t slow_duration = 0x1318; // float32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_speed = 0x1320; // bool
        constexpr uint32_t passive_cooldown = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_Harpoon_Pull {
        constexpr uint32_t m_flDistance = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Harpoon_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Havoc_Hammer {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Headdress {
        constexpr uint32_t health_regen = 0x1318; // float32
        constexpr uint32_t aura_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Headdress_Aura {
        constexpr uint32_t aura_health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Heart {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
        constexpr uint32_t health_regen_pct = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_HeavensHalberd {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t hp_regen_amp = 0x131C; // int32
        constexpr uint32_t bonus_evasion = 0x1320; // int32
        constexpr uint32_t status_resistance = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Heavy_Blade {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_HelmOfIronWill {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_HelmOfTheDominator {
        constexpr uint32_t bonus_stats = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t bonus_regen = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_HelmOfTheDominator_BonusHealth {
        constexpr uint32_t health_min = 0x1318; // int32
        constexpr uint32_t new_max = 0x131C; // int32
        constexpr uint32_t health_bonus = 0x1320; // int32
        constexpr uint32_t model_scale = 0x1324; // int32
        constexpr uint32_t creep_bonus_damage = 0x1328; // int32
        constexpr uint32_t creep_bonus_hp_regen = 0x132C; // int32
        constexpr uint32_t creep_bonus_mp_regen = 0x1330; // int32
        constexpr uint32_t creep_bonus_armor = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Item_Helm_Of_The_Undying {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Helm_Of_The_Undying_Active {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bPassive = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Item_Hermes_Sandals {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage_melee = 0x131C; // int32
        constexpr uint32_t bonus_damage_range = 0x1320; // int32
        constexpr uint32_t bonus_armor = 0x1324; // int32
        constexpr uint32_t bonus_agility = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Hermes_Sandals_Active {
        constexpr uint32_t phase_movement_speed = 0x1318; // int32
        constexpr uint32_t phase_movement_speed_range = 0x131C; // int32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_bWasRooted = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Item_Holy_Locket {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
        constexpr uint32_t bonus_mana = 0x1320; // int32
        constexpr uint32_t heal_increase = 0x1324; // int32
        constexpr uint32_t charge_radius = 0x1328; // int32
        constexpr uint32_t max_charges = 0x132C; // int32
        constexpr uint32_t bonus_all_stats = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Holy_Locket_Aura {
        constexpr uint32_t aura_health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Hood_Of_Defiance {
        constexpr uint32_t bonus_spell_resist = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Hood_Of_Defiance_Barrier {
        constexpr uint32_t barrier_block = 0x1318; // int32
        constexpr uint32_t barrier_amount = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_HorizonsEquilibrium {
        constexpr uint32_t distance = 0x1318; // int32
        constexpr uint32_t damage_reduction = 0x131C; // int32
        constexpr uint32_t attack_lifesteal = 0x1320; // int32
        constexpr uint32_t spell_lifesteal = 0x1324; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Hurricane_Pike {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
        constexpr uint32_t bonus_agility = 0x1320; // int32
        constexpr uint32_t bonus_strength = 0x1324; // int32
        constexpr uint32_t base_attack_range = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Hyperstone {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_IcarusWings {
        constexpr uint32_t move_speed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_IcarusWingsBuff {
        constexpr uint32_t status_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_IcarusWingsDebuff {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Illusionists_Cape_Aura {
        constexpr uint32_t attack_damage_aura = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Illusionsts_Cape {
        constexpr uint32_t bonus_agi = 0x1318; // int32
        constexpr uint32_t bonus_str = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Imp_Claw {
        constexpr uint32_t crit_multiplier = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Infused_Raindrop {
        constexpr uint32_t mana_regen = 0x1318; // float32
        constexpr uint32_t bonus_armor = 0x131C; // float32
        constexpr uint32_t bonus_magical_armor = 0x1320; // int32
        constexpr uint32_t magic_damage_block = 0x1324; // int32
        constexpr uint32_t min_damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_InvisibilityEdge {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Iron_Talon {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_IronwoodBranch {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ironwood_tree {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Javelin {
        constexpr uint32_t bonus_chance = 0x1318; // int32
        constexpr uint32_t bonus_chance_damage = 0x131C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Kaya {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
        constexpr uint32_t mana_regen_multiplier = 0x1320; // int32
        constexpr uint32_t spell_lifesteal_amp = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Kaya_And_Sange {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t hp_regen_amp = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t spell_amp = 0x1324; // int32
        constexpr uint32_t mana_regen_multiplier = 0x1328; // int32
        constexpr uint32_t status_resistance = 0x132C; // int32
        constexpr uint32_t spell_lifesteal_amp = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_LanceOfPursuit {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t backstab_damage = 0x1320; // int32
        constexpr uint32_t backstab_angle = 0x1324; // int32
        constexpr uint32_t slow_duration = 0x1328; // float32
        constexpr uint32_t m_bBackstab = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Item_Lance_of_Pursuit_Slow {
        constexpr uint32_t slow_pct_melee = 0x1318; // int32
        constexpr uint32_t slow_pct_ranged = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_LesserCritical {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t crit_multiplier = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_LightRobes {
        constexpr uint32_t health_penalty = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Lotus_Orb {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_mana = 0x1324; // int32
        constexpr uint32_t block_cooldown = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_Lotus_Orb_Active {
        constexpr uint32_t m_LastParams = 0x1318; // CModifierParams
    }

    namespace CDOTA_Modifier_Item_Lotus_Orb_ChannelCheck {
        constexpr uint32_t m_hAbility = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vLocation = 0x1320; // Vector
        constexpr uint32_t m_fChannelEnd = 0x132C; // GameTime_t
        constexpr uint32_t m_bInterrupt = 0x1330; // bool
        constexpr uint32_t m_bExpired = 0x1331; // bool
    }

    namespace CDOTA_Modifier_Item_Lunar_Crest {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t bonus_spell_resist = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Lunar_Crest_Barrier_Addition {
        constexpr uint32_t barrier_block = 0x1318; // int32
        constexpr uint32_t barrier_amount = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Lunar_Crest_Barrier_Reduction {
        constexpr uint32_t barrier_block = 0x1318; // int32
        constexpr uint32_t m_flDamageTotal = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Maelstrom {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t chain_chance = 0x1320; // int32
        constexpr uint32_t chain_strikes = 0x1324; // int32
        constexpr uint32_t chain_damage = 0x1328; // int32
        constexpr uint32_t chain_radius = 0x132C; // int32
        constexpr uint32_t chain_cooldown = 0x1330; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t m_ChainTimer = 0x1350; // CountdownTimer
    }

    namespace CDOTA_Modifier_Item_Mage_Slayer {
        constexpr uint32_t bonus_magical_armor = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t duration = 0x1324; // float32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
        constexpr uint32_t bonus_intellect = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Mage_Slayer_Debuff {
        constexpr uint32_t spell_amp_debuff = 0x1318; // int32
        constexpr uint32_t dps = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_MagicStick {
        constexpr uint32_t charge_radius = 0x1318; // int32
        constexpr uint32_t max_charges = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_MagicWand {
        constexpr uint32_t charge_radius = 0x1318; // int32
        constexpr uint32_t max_charges = 0x131C; // int32
        constexpr uint32_t bonus_all_stats = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Magus_Minimus {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_intellect = 0x131C; // int32
        constexpr uint32_t damage_per_burn = 0x1320; // float32
        constexpr uint32_t feedback_mana_burn = 0x1324; // int32
        constexpr uint32_t feedback_mana_burn_illusion_melee = 0x1328; // int32
        constexpr uint32_t feedback_mana_burn_illusion_ranged = 0x132C; // int32
        constexpr uint32_t aura_radius = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Magus_Minimus_Aura_Slow {
        constexpr uint32_t max_slow_pct = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Magus_Minimus_Inhibit {
        constexpr uint32_t purge_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_ManaclesOfPower {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_ManaclesOfPower_Effect {
        constexpr uint32_t m_hPartner = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t leash_distance = 0x1320; // float32
        constexpr uint32_t leash_limit_multiplier = 0x1324; // float32
        constexpr uint32_t m_hAnchor = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Item_Mango_Tree {
        constexpr uint32_t m_hTree = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_Timer = 0x1320; // CountdownTimer
        constexpr uint32_t seconds = 0x1338; // float32
    }

    namespace CDOTA_Modifier_Item_MantaStyle {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t bonus_agility = 0x1320; // int32
        constexpr uint32_t bonus_intellect = 0x1324; // int32
        constexpr uint32_t bonus_movement_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Mantle {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_MartyrsPlate {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t magic_resist = 0x131C; // int32
        constexpr uint32_t hp_regen = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_MartyrsPlate_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_MartyrsPlate_Effect {
        constexpr uint32_t damage_redirection = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_MaskOfDeath {
        constexpr uint32_t lifesteal_percent = 0x1318; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_MaskOfDispair {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // float32
        constexpr uint32_t spell_lifesteal = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_MaskOfMadness {
        constexpr uint32_t lifesteal_percent = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Mechanical_Arm {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t bat = 0x131C; // float32
        constexpr uint32_t stun_duration = 0x1320; // float32
        constexpr uint32_t stun_chance = 0x1324; // int32
        constexpr uint32_t m_nAttack = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Medallion_Of_Courage {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen_pct = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Addition {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Medallion_Of_Courage_Armor_Reduction {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Mekansm {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Mekansm_Aura {
        constexpr uint32_t aura_health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_MeteorHammer {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t spell_amp = 0x1324; // float32
        constexpr uint32_t mana_regen_multiplier = 0x1328; // float32
        constexpr uint32_t spell_lifesteal_amp = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_MeteorHammer_Burn {
        constexpr uint32_t burn_dps_buildings = 0x1318; // int32
        constexpr uint32_t burn_dps_units = 0x131C; // int32
        constexpr uint32_t burn_interval = 0x1320; // float32
        constexpr uint32_t burn_slow = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_MeteorHammer_Land {
        constexpr uint32_t impact_radius = 0x1318; // int32
        constexpr uint32_t land_time = 0x131C; // float32
        constexpr uint32_t burn_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Mind_Breaker {
        constexpr uint32_t magic_damage = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Minotaur_Horn {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Mirror_Shield {
        constexpr uint32_t m_LastParams = 0x1318; // CModifierParams
        constexpr uint32_t all_stats = 0x14F8; // int32
        constexpr uint32_t reflect_chance = 0x14FC; // int32
        constexpr uint32_t m_bProcSuccessful = 0x1500; // bool
    }

    namespace CDOTA_Modifier_Item_Misericorde {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t missing_hp = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t aspd = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_MithrilHammer {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Mjollnir {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t chain_chance = 0x1320; // int32
        constexpr uint32_t chain_strikes = 0x1324; // int32
        constexpr uint32_t chain_damage = 0x1328; // int32
        constexpr uint32_t chain_radius = 0x132C; // int32
        constexpr uint32_t chain_damage_per_charge = 0x1330; // int32
        constexpr uint32_t max_charges = 0x1334; // int32
        constexpr uint32_t chain_cooldown = 0x1338; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
        constexpr uint32_t m_ChainTimer = 0x1358; // CountdownTimer
    }

    namespace CDOTA_Modifier_Item_Mjollnir_Static {
        constexpr uint32_t static_chance = 0x1320; // int32
        constexpr uint32_t static_strikes = 0x1324; // int32
        constexpr uint32_t static_damage = 0x1328; // int32
        constexpr uint32_t static_primary_radius = 0x132C; // int32
        constexpr uint32_t static_seconary_radius = 0x1330; // int32
        constexpr uint32_t static_radius = 0x1334; // int32
        constexpr uint32_t static_cooldown = 0x1338; // float32
        constexpr uint32_t chain_damage_per_charge = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Item_MonkeyKingBar {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_chance = 0x131C; // int32
        constexpr uint32_t bonus_chance_damage = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Moonshard {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_night_vision = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Moonshard_Consumed {
        constexpr uint32_t consumed_bonus = 0x1318; // int32
        constexpr uint32_t consumed_bonus_night_vision = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_MuertasGun {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t bonus_cast_pct = 0x131C; // int32
        constexpr uint32_t bonus_spell_amp = 0x1320; // int32
        constexpr uint32_t health_pct_penalty = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Mysterious_Hat {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
        constexpr uint32_t manacost_reduction = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_MysticStaff {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Naginata {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t bonus_health = 0x1324; // int32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
        constexpr uint32_t cooldown_reduction_percent = 0x132C; // int32
        constexpr uint32_t bonus_chance = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Necronomicon {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_2 {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t aura_radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_3 {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t aura_radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_Archer_Aura {
        constexpr uint32_t ms_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_Mana_Aura {
        constexpr uint32_t aura_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_Mana_Aura_2 {
        constexpr uint32_t aura_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Necronomicon_Mana_Aura_3 {
        constexpr uint32_t aura_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Nemesis_Curse_Debuff {
        constexpr uint32_t debuff_enemy = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Nether_Shawl {
        constexpr uint32_t bonus_magic_resistance = 0x1318; // int32
        constexpr uint32_t bonus_spell_amp = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Ninja_Gear {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t passive_movement_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_NullTalisman {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
        constexpr uint32_t bonus_max_mana_percentage = 0x1328; // int32
        constexpr uint32_t clock_time = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Nullifier_Slow {
        constexpr uint32_t slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Oakheart {
        constexpr uint32_t strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_OblivionStaff {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_Occult_Bracelet {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t stack_limit = 0x131C; // int32
        constexpr uint32_t stack_duration = 0x1320; // float32
        constexpr uint32_t m_flStackDieTime = 0x1324; // GameTime_t
        constexpr uint32_t magic_resistance = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Occult_Bracelet_Stack {
        constexpr uint32_t mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Ocean_Heart {
        constexpr uint32_t water_hp_regen = 0x1318; // float32
        constexpr uint32_t water_mp_regen = 0x131C; // float32
        constexpr uint32_t all_stats = 0x1320; // int32
        constexpr uint32_t m_bInRiver = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Item_Octarine_Core {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_cooldown = 0x1320; // float32
        constexpr uint32_t bonus_health_regen = 0x1324; // float32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_OgreAxe {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_OgreSealTotem {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Orb_Of_Corrosion {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Orb_Of_Destruction {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Orb_of_Pestilence {
        constexpr uint32_t poison_movement_speed_melee = 0x1318; // int32
        constexpr uint32_t poison_movement_speed_range = 0x131C; // int32
        constexpr uint32_t poison_duration = 0x1320; // float32
        constexpr uint32_t poison_damage = 0x1324; // float32
        constexpr uint32_t armor = 0x1328; // int32
        constexpr uint32_t hp_regen = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_Orb_of_Pestilence_Slow {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t slow = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Orb_of_Venom {
        constexpr uint32_t poison_movement_speed_melee = 0x1318; // int32
        constexpr uint32_t poison_movement_speed_range = 0x131C; // int32
        constexpr uint32_t poison_duration = 0x1320; // float32
        constexpr uint32_t poison_damage_melee = 0x1324; // float32
        constexpr uint32_t poison_damage_range = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Item_Orb_of_Venom_Slow {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t slow = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_OrchidMalevolence {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_health_regen = 0x1320; // float32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Overwhelming_Blink {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t blink_damage_cooldown = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Overwhelming_Blink_Debuff {
        constexpr uint32_t caster_strength = 0x1318; // float32
        constexpr uint32_t movement_slow = 0x131C; // int32
        constexpr uint32_t attack_slow = 0x1320; // int32
        constexpr uint32_t damage_pct_over_time = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Item_Paintball {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Paintball_Debuff {
        constexpr uint32_t dps = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Paladin_Sword {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_lifesteal = 0x131C; // int32
        constexpr uint32_t bonus_spell_lifesteal = 0x1320; // int32
        constexpr uint32_t bonus_amp = 0x1324; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Panic_Button {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t health_threshold = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Pavise {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // float32
        constexpr uint32_t bonus_health = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Pavise_Shield {
        constexpr uint32_t absorb_amount = 0x1318; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Penta_Edged_Sword {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t maim_chance = 0x131C; // int32
        constexpr uint32_t maim_duration = 0x1320; // float32
        constexpr uint32_t melee_attack_range = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Perseverance {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_PhaseBoots {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage_melee = 0x131C; // int32
        constexpr uint32_t bonus_damage_range = 0x1320; // int32
        constexpr uint32_t damage_block_melee = 0x1324; // int32
        constexpr uint32_t damage_block_ranged = 0x1328; // int32
        constexpr uint32_t block_chance = 0x132C; // int32
        constexpr uint32_t bonus_attack_speed = 0x1330; // int32
        constexpr uint32_t bonus_armor = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Item_PhaseBoots_Active {
        constexpr uint32_t phase_movement_speed = 0x1318; // int32
        constexpr uint32_t phase_movement_speed_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Philosophers_Stone {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_gpm = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Phoenix_Ash {
        constexpr uint32_t health_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Phylactery {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
        constexpr uint32_t bonus_spell_damage = 0x1324; // int32
        constexpr uint32_t slow_duration = 0x1328; // float32
        constexpr uint32_t bonus_all_stats = 0x132C; // int32
        constexpr uint32_t vecActivatedAbilities = 0x1330; // CUtlVector< C_DOTABaseAbility* >
    }

    namespace CDOTA_Modifier_Item_Phylactery_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Pipe {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t health_regen = 0x131C; // float32
        constexpr uint32_t magic_resistance = 0x1320; // int32
        constexpr uint32_t aura_radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Pipe_Aura {
        constexpr uint32_t aura_health_regen = 0x1318; // float32
        constexpr uint32_t magic_resistance_aura = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Pipe_Barrier {
        constexpr uint32_t barrier_amount = 0x1318; // int32
        constexpr uint32_t barrier_block = 0x131C; // int32
        constexpr uint32_t barrier_block_creep = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Pirate_Hat {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_ms = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_PlaneswalkersCloak {
        constexpr uint32_t bonus_magical_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_PlateMail {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_PogoStick {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_PointBooster {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_PoorMansShield {
        constexpr uint32_t damage_block_melee = 0x1318; // int32
        constexpr uint32_t damage_block_ranged = 0x131C; // int32
        constexpr uint32_t block_chance = 0x1320; // int32
        constexpr uint32_t bonus_agility = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Possessed_Mask {
        constexpr uint32_t primary_attribute = 0x1318; // int32
        constexpr uint32_t lifesteal = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_PowerTreads {
        constexpr uint32_t bonus_movement_speed_ranged = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed_melee = 0x131C; // int32
        constexpr uint32_t bonus_attack_speed = 0x1320; // int32
        constexpr uint32_t bonus_stat = 0x1324; // int32
        constexpr uint32_t bonus_damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Princes_Knife {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t projectile_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Princes_Knife_Hex {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Psychic_Headband {
        constexpr uint32_t intelligence_pct = 0x1318; // int32
        constexpr uint32_t cast_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Pupils_gift {
        constexpr uint32_t secondary_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Quarterstaff {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_QuellingBlade {
        constexpr uint32_t damage_bonus = 0x1318; // int32
        constexpr uint32_t damage_bonus_ranged = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Quickening_Charm {
        constexpr uint32_t bonus_cooldown = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Quicksilver_Amulet {
        constexpr uint32_t base_attack = 0x1318; // int32
        constexpr uint32_t bonus_attack = 0x131C; // int32
        constexpr uint32_t base_movement = 0x1320; // int32
        constexpr uint32_t bonus_movement = 0x1324; // int32
        constexpr uint32_t projectile_increase = 0x1328; // int32
        constexpr uint32_t anim_increase = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Radiance {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t evasion = 0x131C; // int32
        constexpr uint32_t upgrade_day_vision = 0x1320; // int32
        constexpr uint32_t aura_radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Radiance_Debuff {
        constexpr uint32_t aura_damage = 0x1320; // int32
        constexpr uint32_t aura_damage_upgrade_bonus = 0x1324; // int32
        constexpr uint32_t aura_damage_illusions = 0x1328; // int32
        constexpr uint32_t blind_pct = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Rattlecage {
        constexpr uint32_t m_iDamageTaken = 0x1318; // int32
        constexpr uint32_t damage_threshold = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t damage_reset_interval = 0x1324; // float32
        constexpr uint32_t bonus_armor = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Rattlecage_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Reaver {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_RefresherOrb {
        constexpr uint32_t bonus_health_regen = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_RefresherShard {
        constexpr uint32_t bonus_health_regen = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Repair_Kit {
        constexpr uint32_t hp_regen = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Revenants_Brooch {
        constexpr uint32_t m_bScepter = 0x1318; // bool
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t spell_lifesteal = 0x1320; // int32
        constexpr uint32_t bonus_spell_lifesteal = 0x1324; // int32
        constexpr uint32_t manacost_per_hit = 0x1328; // int32
        constexpr uint32_t m_bActive = 0x132C; // bool
        constexpr uint32_t m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_RingOfAquila {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t bonus_armor = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_RingOfAquila_Aura {
        constexpr uint32_t m_bAppliesToCreeps = 0x1318; // bool
        constexpr uint32_t aura_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_RingOfAquila_Aura_Bonus {
        constexpr uint32_t aura_bonus_armor = 0x1318; // int32
        constexpr uint32_t aura_mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_RingOfHealth {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_RingOfProtection {
        constexpr uint32_t bonus_armor = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_RingOfRegeneration {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_RingOfTarrasque {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_health = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Ring_Of_Basilius {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Ring_Of_Basilius_Effect {
        constexpr uint32_t aura_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_RobeOfMagi {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_RodOfAtos {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_hp = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Royal_Jelly {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_SacredRelic {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_SamplePicker {
        constexpr uint32_t base_gold = 0x1318; // int32
        constexpr uint32_t gold_per_level = 0x131C; // int32
        constexpr uint32_t strength_penalty = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Samurai_Tabi {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_all_stats = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Samurai_Tabi_Agi {
        constexpr uint32_t stat_per_tick = 0x1318; // int32
        constexpr uint32_t base_interval = 0x131C; // float32
        constexpr uint32_t max_tick_count = 0x1320; // int32
        constexpr uint32_t bonus_all_stats = 0x1324; // int32
        constexpr uint32_t agi_counter_chance = 0x1328; // int32
        constexpr uint32_t agi_counter_cooldown = 0x132C; // float32
        constexpr uint32_t m_flLastCounterTime = 0x1330; // GameTime_t
        constexpr uint32_t iCurrentTickCount = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Item_Samurai_Tabi_Int {
        constexpr uint32_t stat_per_tick = 0x1318; // int32
        constexpr uint32_t base_interval = 0x131C; // float32
        constexpr uint32_t max_tick_count = 0x1320; // int32
        constexpr uint32_t int_damage_interval = 0x1324; // float32
        constexpr uint32_t int_damage_range = 0x1328; // float32
        constexpr uint32_t int_damage = 0x132C; // float32
        constexpr uint32_t iCurrentTickCount = 0x1330; // int32
        constexpr uint32_t int_max_targets = 0x1334; // int32
        constexpr uint32_t m_flNextHit = 0x1338; // GameTime_t
        constexpr uint32_t bonus_all_stats = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Item_Samurai_Tabi_Str {
        constexpr uint32_t stat_per_tick = 0x1318; // int32
        constexpr uint32_t bonus_all_stats = 0x131C; // int32
        constexpr uint32_t base_interval = 0x1320; // float32
        constexpr uint32_t max_tick_count = 0x1324; // int32
        constexpr uint32_t str_root_duration = 0x1328; // float32
        constexpr uint32_t str_root_cooldown = 0x132C; // float32
        constexpr uint32_t str_root_chance = 0x1330; // int32
        constexpr uint32_t str_bonus_damage = 0x1334; // float32
        constexpr uint32_t iCurrentTickCount = 0x1338; // int32
        constexpr uint32_t m_flLastRootTime = 0x133C; // GameTime_t
        constexpr uint32_t m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Sange {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t hp_regen_amp = 0x131C; // int32
        constexpr uint32_t status_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_SangeAndYasha {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t movement_speed_percent_bonus = 0x1320; // int32
        constexpr uint32_t bonus_strength = 0x1324; // int32
        constexpr uint32_t hp_regen_amp = 0x1328; // int32
        constexpr uint32_t status_resistance = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Satanic {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_strength = 0x131C; // int32
        constexpr uint32_t lifesteal_percent = 0x1320; // int32
        constexpr uint32_t unholy_lifesteal_percent = 0x1324; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Satanic_Unholy {
        constexpr uint32_t unholy_lifesteal_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Satchel {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t xp_gain = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_SeedsOfSerenity {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_SeedsOfSerenity_Active {
        constexpr uint32_t aura_health_regen = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_SeedsOfSerenity_Active_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_SheepStick {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_mana_regen = 0x1324; // float32
        constexpr uint32_t bonus_mana = 0x1328; // int32
        constexpr uint32_t cast_range_bonus = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Shivas_Guard {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t aura_radius = 0x1320; // int32
        constexpr uint32_t bonus_hp_regen = 0x1324; // int32
        constexpr uint32_t bonus_strength = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Shivas_Guard_Aura {
        constexpr uint32_t aura_attack_speed = 0x1318; // int32
        constexpr uint32_t hp_regen_degen_aura = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Shivas_Guard_Blast {
        constexpr uint32_t blast_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Shivas_Guard_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_ViewerTimer = 0x1338; // CountdownTimer
        constexpr uint32_t blast_speed = 0x1350; // int32
        constexpr uint32_t blast_radius = 0x1354; // int32
        constexpr uint32_t blast_damage = 0x1358; // int32
        constexpr uint32_t illusion_multiplier_pct = 0x135C; // int32
        constexpr uint32_t blast_debuff_duration = 0x1360; // float32
        constexpr uint32_t resist_debuff_duration = 0x1364; // float32
    }

    namespace CDOTA_Modifier_Item_Silver_Edge {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_attack_speed = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t crit_chance = 0x1328; // int32
        constexpr uint32_t crit_multiplier = 0x132C; // int32
        constexpr uint32_t backstab_duration = 0x1330; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Skadi {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
        constexpr uint32_t bonus_mana = 0x1320; // int32
        constexpr uint32_t cold_duration = 0x1324; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Skadi_Slow {
        constexpr uint32_t cold_slow_melee = 0x1318; // int32
        constexpr uint32_t cold_slow_ranged = 0x131C; // int32
        constexpr uint32_t cold_attack_slow_melee = 0x1320; // int32
        constexpr uint32_t cold_attack_slow_ranged = 0x1324; // int32
        constexpr uint32_t heal_reduction = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Slime_Vial {
        constexpr uint32_t health_regen = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Slime_Vial_Spill_Debuff {
        constexpr uint32_t spill_movement_speed = 0x1318; // int32
        constexpr uint32_t spill_attack_speed = 0x131C; // int32
        constexpr uint32_t spill_self_bonus_armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Slime_Vial_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_ViewerTimer = 0x1338; // CountdownTimer
        constexpr uint32_t spill_speed = 0x1350; // int32
        constexpr uint32_t spill_radius = 0x1354; // int32
        constexpr uint32_t spill_damage = 0x1358; // int32
        constexpr uint32_t spill_debuff_duration = 0x135C; // float32
    }

    namespace CDOTA_Modifier_Item_Slippers {
        constexpr uint32_t bonus_agility = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_SobiMask {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Solar_Crest {
        constexpr uint32_t bonus_mana = 0x1318; // float32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t bonus_all_stats = 0x1320; // int32
        constexpr uint32_t bonus_health = 0x1324; // int32
        constexpr uint32_t self_movement_speed = 0x1328; // int32
        constexpr uint32_t nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_Solar_Crest_Armor_Addition {
        constexpr uint32_t target_armor = 0x1318; // int32
        constexpr uint32_t target_attack_speed = 0x131C; // int32
        constexpr uint32_t target_movement_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Solar_Crest_Armor_Reduction {
        constexpr uint32_t target_armor = 0x1318; // int32
        constexpr uint32_t target_attack_speed = 0x131C; // int32
        constexpr uint32_t target_movement_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Sorcerers_Staff {
        constexpr uint32_t mana_regen_amp = 0x1318; // int32
        constexpr uint32_t spell_amp_creeps = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Soul_Booster {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_magical_armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Soul_Ring {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Spark_Of_Courage {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t armor = 0x131C; // int32
        constexpr uint32_t health_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_SpecialistsArray {
        constexpr uint32_t all_stats = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t proc_bonus_damage = 0x1320; // int32
        constexpr uint32_t count = 0x1324; // int32
        constexpr uint32_t secondary_target_range_bonus = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_SpecialistsArray_ProcDamage {
        constexpr uint32_t proc_bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Sphere {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t block_cooldown = 0x1328; // float32
        constexpr uint32_t upgrade_absorb_duration = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_Sphere_Target {
        constexpr uint32_t upgrade_absorb_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Sphere_Upgrade_Absorb {
        constexpr uint32_t damage_absorb = 0x1318; // int32
        constexpr uint32_t m_bStartedTimer = 0x131C; // bool
        constexpr uint32_t m_flDamageAbsorbed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Spider_Legs_Active {
        constexpr uint32_t bonus_movement_speed_active = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Spirit_Vessel {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_armor = 0x1320; // float32
        constexpr uint32_t bonus_all_stats = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Spirit_Vessel_Damage {
        constexpr uint32_t hp_regen_reduction_enemy = 0x1318; // int32
        constexpr uint32_t soul_damage_amount = 0x131C; // int32
        constexpr uint32_t enemy_hp_drain = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Spirit_Vessel_Heal {
        constexpr uint32_t soul_heal_amount = 0x1318; // int32
        constexpr uint32_t m_fHealingDone = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Spy_Gadget {
        constexpr uint32_t attack_range = 0x1318; // int32
        constexpr uint32_t cast_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Spy_Gadget_Aura {
        constexpr uint32_t scan_cooldown_reduction = 0x1318; // int32
        constexpr uint32_t aura_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Star_Mace {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t cleave_damage_percent = 0x1320; // int32
        constexpr uint32_t cleave_starting_width = 0x1324; // int32
        constexpr uint32_t cleave_ending_width = 0x1328; // int32
        constexpr uint32_t cleave_distance = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Stormcrafter {
        constexpr uint32_t m_flNextHit = 0x1318; // GameTime_t
        constexpr uint32_t passive_movement_bonus = 0x131C; // int32
        constexpr uint32_t range = 0x1320; // int32
        constexpr uint32_t interval = 0x1324; // float32
        constexpr uint32_t damage = 0x1328; // int32
        constexpr uint32_t slow_duration = 0x132C; // float32
        constexpr uint32_t bonus_mana_regen = 0x1330; // float32
        constexpr uint32_t max_targets = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Item_StoutShield {
        constexpr uint32_t damage_block_melee = 0x1318; // int32
        constexpr uint32_t damage_block_ranged = 0x131C; // int32
        constexpr uint32_t block_chance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Swift_Blink {
        constexpr uint32_t blink_damage_cooldown = 0x1318; // float32
        constexpr uint32_t bonus_agility = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Swift_Blink_Buff {
        constexpr uint32_t bonus_movement = 0x1318; // int32
        constexpr uint32_t bonus_agi_active = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_TalismanOfEvasion {
        constexpr uint32_t bonus_evasion = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Tenderizer {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bash_chance_melee = 0x1320; // int32
        constexpr uint32_t bash_chance_ranged = 0x1324; // int32
        constexpr uint32_t bash_duration = 0x1328; // float32
        constexpr uint32_t bash_cooldown = 0x132C; // float32
        constexpr uint32_t bonus_chance_damage = 0x1330; // int32
        constexpr uint32_t bonus_damage = 0x1334; // int32
        constexpr uint32_t weaken_per_hit = 0x1338; // int32
        constexpr uint32_t weaken_duration = 0x133C; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1340; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Terror_Mask {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Terror_Mask_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Item_Terror_Mask_Fear_Aura {
        constexpr uint32_t effect_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_The_Leveller {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t demolish = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_TiaraOfSelemene {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_Timeless_Relic {
        constexpr uint32_t spell_amp = 0x1318; // int32
        constexpr uint32_t debuff_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Titan_Sliver {
        constexpr uint32_t base_attack_damage = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t status_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Tome_of_Omniscience {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_xpm = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_TranquilBoots {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t broken_movement_speed = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_health_regen = 0x1324; // int32
        constexpr uint32_t break_threshold = 0x1328; // int32
        constexpr uint32_t break_time = 0x132C; // int32
        constexpr uint32_t break_count = 0x1330; // int32
        constexpr uint32_t m_flResetTime = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Item_TranquilBoots2 {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t broken_movement_speed = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_health_regen = 0x1324; // int32
        constexpr uint32_t break_threshold = 0x1328; // int32
        constexpr uint32_t break_time = 0x132C; // int32
        constexpr uint32_t break_count = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Item_Tree_Processor {
        constexpr uint32_t bonus_int = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Tree_Processor_Speed {
        constexpr uint32_t health_per_tree = 0x1318; // int32
        constexpr uint32_t hp_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Trickster_Cloak {
        constexpr uint32_t evasion = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t debuff_limit = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Trident {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t movement_speed_percent_bonus = 0x1320; // int32
        constexpr uint32_t bonus_strength = 0x1324; // int32
        constexpr uint32_t hp_regen_amp = 0x1328; // int32
        constexpr uint32_t status_resistance = 0x132C; // int32
        constexpr uint32_t bonus_intellect = 0x1330; // int32
        constexpr uint32_t spell_amp = 0x1334; // int32
        constexpr uint32_t mana_regen_multiplier = 0x1338; // int32
        constexpr uint32_t magic_damage_attack = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Item_Trusty_Shovel {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_UltimateOrb {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_UltimateScepter {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t bonus_all_stats = 0x131C; // int32
        constexpr uint32_t bonus_health = 0x1320; // int32
        constexpr uint32_t bonus_mana = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_UltimateScepter_Consumed_Alchemist {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t bonus_all_stats = 0x131C; // int32
        constexpr uint32_t bonus_health = 0x1320; // int32
        constexpr uint32_t bonus_mana = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_UnstableWand {
        constexpr uint32_t all_stats = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Urn_Damage {
        constexpr uint32_t soul_damage_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Urn_Heal {
        constexpr uint32_t soul_heal_amount = 0x1318; // int32
        constexpr uint32_t m_fHealingDone = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Urn_Of_Shadows {
        constexpr uint32_t mana_regen = 0x1318; // float32
        constexpr uint32_t bonus_all_stats = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Vambrace {
        constexpr uint32_t bonus_primary_stat = 0x1318; // int32
        constexpr uint32_t bonus_secondary_stat = 0x131C; // int32
        constexpr uint32_t bonus_magic_resistance = 0x1320; // int32
        constexpr uint32_t bonus_spell_amp = 0x1324; // int32
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
        constexpr uint32_t m_iStat = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Item_Vampire_Fangs {
        constexpr uint32_t attack_lifesteal = 0x1318; // int32
        constexpr uint32_t spell_lifesteal = 0x131C; // int32
        constexpr uint32_t night_vision = 0x1320; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Vanguard {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_health_regen = 0x131C; // float32
        constexpr uint32_t block_damage_ranged = 0x1320; // int32
        constexpr uint32_t block_damage_melee = 0x1324; // int32
        constexpr uint32_t block_chance = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Veil_Of_Discord {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_hp_regen = 0x131C; // int32
        constexpr uint32_t bonus_all_stats = 0x1320; // int32
        constexpr uint32_t bonus_aoe = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Veil_Of_Discord_Debuff {
        constexpr uint32_t spell_amp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Veil_Of_Discord_Thinker {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t debuff_radius = 0x131C; // int32
        constexpr uint32_t resist_debuff_duration = 0x1320; // float32
        constexpr uint32_t m_nHeroesHit = 0x1324; // int32
        constexpr uint32_t m_bHitInvisibleHero = 0x1328; // bool
        constexpr uint32_t m_bFirstPulse = 0x1329; // bool
    }

    namespace CDOTA_Modifier_Item_Vengeances_Shadow {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t damage_return = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Venom_Gland {
        constexpr uint32_t primary_attribute = 0x1318; // int32
        constexpr uint32_t debuff_amp = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Vermillion_Robe {
        constexpr uint32_t mana_regen_pct = 0x1318; // int32
        constexpr uint32_t move_speed_bonus = 0x131C; // int32
        constexpr uint32_t bonus_stats = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Vermillion_Robe_Flames {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage_per_health_missing = 0x131C; // float32
        constexpr uint32_t delay = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_VindicatorsAxe {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t bonus_slow_resist = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_VitalityBooster {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Vladmir {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Vladmir_Aura {
        constexpr uint32_t lifesteal_aura = 0x1318; // int32
        constexpr uint32_t damage_aura = 0x131C; // int32
        constexpr uint32_t armor_aura = 0x1320; // float32
        constexpr uint32_t mana_regen_aura = 0x1324; // float32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_VoidStone {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_VoidwalkerScythe {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t attacks = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t buff_duration = 0x1324; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
        constexpr uint32_t m_nCounter = 0x1340; // int32
    }

    namespace CDOTA_Modifier_Item_Voodoo_Mask {
        constexpr uint32_t spell_lifesteal = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Item_WandOfSanctitude {
        constexpr uint32_t all_stats = 0x1318; // int32
        constexpr uint32_t cast_range_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_WandOfSanctitude_Active_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_WandOfTheBrine {
        constexpr uint32_t heal_increase = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_WandOfTheBrine_Active {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t heal = 0x1324; // int32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Item_WardTrueSight {
        constexpr uint32_t true_sight_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ward_Dispenser {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Ward_Maker {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Warhammer {
        constexpr uint32_t bonus_strength = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Warhammer_Armor {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_WindLace {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Item_Wind_Waker {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_movement_speed = 0x1320; // int32
        constexpr uint32_t bonus_mana = 0x1324; // int32
        constexpr uint32_t cast_range_bonus = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Item_Witch_Blade {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t slow_duration = 0x1324; // float32
        constexpr uint32_t bonus_mana_regen = 0x1328; // float32
        constexpr uint32_t projectile_speed = 0x132C; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1330; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Item_Witch_Blade_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t int_damage_multiplier = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Item_Witches_Switch {
        constexpr uint32_t bonus_health_regen = 0x1318; // float32
        constexpr uint32_t bonus_mana_regen = 0x131C; // float32
        constexpr uint32_t bonus_armor = 0x1320; // int32
        constexpr uint32_t aura_radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Item_Witches_Switch_Aura_Effect {
        constexpr uint32_t aura_mana_regen = 0x1318; // float32
        constexpr uint32_t aura_health_regen = 0x131C; // float32
        constexpr uint32_t aura_armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Witless_shako {
        constexpr uint32_t max_health = 0x1318; // int32
        constexpr uint32_t max_mana = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Wizard_Glass {
        constexpr uint32_t debuff_amp = 0x1318; // int32
        constexpr uint32_t cooldown_reduction = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_Woodland_Striders {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Item_WraithBand {
        constexpr uint32_t bonus_strength = 0x1318; // int32
        constexpr uint32_t bonus_agility = 0x131C; // int32
        constexpr uint32_t bonus_intellect = 0x1320; // int32
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
        constexpr uint32_t clock_time = 0x1328; // int32
        constexpr uint32_t bonus_armor = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Item_WraithPact {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_health = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_WraithPact_DeathAura {
        constexpr uint32_t armor_penalty_aura = 0x1318; // int32
        constexpr uint32_t damage_penalty_aura = 0x131C; // int32
        constexpr uint32_t aura_dps = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_WraithPact_Thinker {
        constexpr uint32_t pact_aura_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t aura_dps = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Item_Yasha {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t movement_speed_percent_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Item_Yasha_And_Kaya {
        constexpr uint32_t bonus_agility = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t movement_speed_percent_bonus = 0x1320; // int32
        constexpr uint32_t bonus_intellect = 0x1324; // int32
        constexpr uint32_t spell_amp = 0x1328; // int32
        constexpr uint32_t mana_regen_multiplier = 0x132C; // int32
        constexpr uint32_t spell_lifesteal_amp = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Jacket_Blind {
        constexpr uint32_t blind_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Jakiro_DualBreath_Burn {
        constexpr uint32_t m_bFirst = 0x1318; // bool
        constexpr uint32_t burn_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Jakiro_DualBreath_Slow {
        constexpr uint32_t slow_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t slow_attack_speed_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Jakiro_DualBreath_Thinker {
        constexpr uint32_t start_radius = 0x1318; // int32
        constexpr uint32_t end_radius = 0x131C; // int32
        constexpr uint32_t m_fStartTime = 0x1320; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x1324; // float32
        constexpr uint32_t m_vCastPosition = 0x1328; // Vector
    }

    namespace CDOTA_Modifier_Jakiro_IcePath_Thinker {
        constexpr uint32_t path_delay = 0x1318; // float32
        constexpr uint32_t path_radius = 0x131C; // int32
        constexpr uint32_t m_nDamage = 0x1320; // int32
        constexpr uint32_t m_flRadius = 0x1324; // float32
        constexpr uint32_t stun_duration = 0x1328; // float32
        constexpr uint32_t m_hUnitsHit = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vPathStart = 0x1348; // Vector
        constexpr uint32_t m_vPathEnd = 0x1354; // Vector
        constexpr uint32_t m_fStartTime = 0x1360; // GameTime_t
    }

    namespace CDOTA_Modifier_Jakiro_LiquidFire {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_bForceProc = 0x1340; // bool
    }

    namespace CDOTA_Modifier_Jakiro_LiquidFire_Burn {
        constexpr uint32_t slow_attack_speed_pct = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Jakiro_LiquidIce {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_bForceProc = 0x1340; // bool
    }

    namespace CDOTA_Modifier_Jakiro_LiquidIce_Debuff {
        constexpr uint32_t base_damage = 0x1318; // int32
        constexpr uint32_t pct_health_damage = 0x131C; // float32
        constexpr uint32_t movement_slow = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Jakiro_Macropyre_Burn {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t burn_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Jakiro_Macropyre_Ice_EdgeThinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t ice_edge_path_radius = 0x1324; // int32
        constexpr uint32_t cast_range = 0x1328; // int32
        constexpr uint32_t ice_edge_linger_duration = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Jakiro_Macropyre_Ice_Edge_Slow {
        constexpr uint32_t ice_edge_movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Jakiro_Macropyre_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t burn_interval = 0x1324; // float32
        constexpr uint32_t path_radius = 0x1328; // int32
        constexpr uint32_t cast_range = 0x132C; // int32
        constexpr uint32_t linger_duration = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Jugg_Caster {
        constexpr uint32_t shard_damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Juggernaut_BladeDance {
        constexpr uint32_t blade_dance_crit_mult = 0x1318; // int32
        constexpr uint32_t blade_dance_crit_chance = 0x131C; // int32
        constexpr uint32_t blade_dance_lifesteal = 0x1320; // int32
        constexpr uint32_t m_bHasCrit = 0x1324; // bool
        constexpr uint32_t m_bWasBladeDanceTriggeredCrit = 0x1325; // bool
    }

    namespace CDOTA_Modifier_Juggernaut_BladeFury {
        constexpr uint32_t blade_fury_radius = 0x1318; // int32
        constexpr uint32_t blade_fury_damage_per_tick = 0x131C; // int32
        constexpr uint32_t blade_fury_aspd_multiplier = 0x1320; // float32
        constexpr uint32_t m_flTotalAppliedDamage = 0x1324; // float32
        constexpr uint32_t bonus_movespeed = 0x1328; // int32
        constexpr uint32_t m_flNextAttack = 0x132C; // GameTime_t
        constexpr uint32_t m_bIgnoreAttackRestriction = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Juggernaut_BladeFury_Pull {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Juggernaut_Healing_Ward_Aura {
        constexpr uint32_t healing_ward_movespeed_tooltip = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Juggernaut_Healing_Ward_Heal {
        constexpr uint32_t healing_ward_heal_amount = 0x1318; // int32
        constexpr uint32_t m_nStartingHealthThisInterval = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Juggernaut_Omnislash {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hLastTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nJumps = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
        constexpr uint32_t omni_slash_radius = 0x132C; // int32
        constexpr uint32_t attack_rate_multiplier = 0x1330; // float32
        constexpr uint32_t m_bFirstHit = 0x1334; // bool
        constexpr uint32_t m_iTotalDamage = 0x1338; // int32
        constexpr uint32_t m_iHeroDamage = 0x133C; // int32
        constexpr uint32_t m_iKilledHeroes = 0x1340; // int32
        constexpr uint32_t m_fNextAttackTime = 0x1344; // GameTime_t
        constexpr uint32_t m_bScepterCast = 0x1348; // bool
        constexpr uint32_t m_bReflection = 0x1349; // bool
        constexpr uint32_t m_bEndNext = 0x134A; // bool
    }

    namespace CDOTA_Modifier_JumpBoots {
        constexpr uint32_t push_length = 0x1318; // int32
    }

    namespace CDOTA_Modifier_JumpBootsIntrinsic {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_JungleSpirit_RiverRejuvenation {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Effect {
        constexpr uint32_t distance_from_shrine = 0x1318; // int32
    }

    namespace CDOTA_Modifier_JungleSpirit_RiverRejuvenation_Regen {
        constexpr uint32_t health_restore = 0x1318; // int32
        constexpr uint32_t mana_restore = 0x131C; // int32
        constexpr uint32_t regen_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_JungleSpirit_Storm_Cyclone {
        constexpr uint32_t m_FXIndex = 0x1318; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_hCyclones = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t projectile_distance = 0x1348; // int32
        constexpr uint32_t projectile_radius = 0x134C; // int32
        constexpr uint32_t projectile_amount = 0x1350; // int32
        constexpr uint32_t projectile_duration = 0x1354; // float32
        constexpr uint32_t delay = 0x1358; // float32
        constexpr uint32_t m_flDieTime = 0x135C; // GameTime_t
        constexpr uint32_t m_flStartTime = 0x1360; // GameTime_t
        constexpr uint32_t m_vLeftControl = 0x1368; // CUtlVector< Vector >
        constexpr uint32_t m_vSourceLoc = 0x1380; // CUtlVector< Vector >
        constexpr uint32_t m_vTargetLoc = 0x1398; // Vector
    }

    namespace CDOTA_Modifier_JungleVarmint_Creator {
        constexpr uint32_t m_hVarmint = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nClientVarmintEntIndex = 0x131C; // CEntityIndex
    }

    namespace CDOTA_Modifier_JungleVarmint_Dive {
        constexpr uint32_t distance = 0x1318; // int32
        constexpr uint32_t speed = 0x131C; // float32
        constexpr uint32_t acceleration = 0x1320; // float32
        constexpr uint32_t radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Jungle_Spirit {
        constexpr uint32_t hCasterList = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t bAcceptingGems = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Ally_Alert {
        constexpr uint32_t m_flLastHowl = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Range_Attack {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t projectile_speed = 0x131C; // int32
        constexpr uint32_t turn_rate = 0x1320; // float32
        constexpr uint32_t m_hAttachTarget = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Reductions {
        constexpr uint32_t m_vecAlliesNearby = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nAlliesNearby = 0x1330; // int32
        constexpr uint32_t stat_reduction_pct = 0x1334; // int32
        constexpr uint32_t armor_reduction = 0x1338; // int32
        constexpr uint32_t radius = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Debuff {
        constexpr uint32_t m_flStartTime = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Storm_Cyclone_Invulnerable {
        constexpr uint32_t nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t projectile_radius = 0x131C; // int32
        constexpr uint32_t projectile_destruction_radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Jungle_Spirit_Volcano_Fire_Strike_Caster {
        constexpr uint32_t damage_modifier = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Keen_Optic {
        constexpr uint32_t bonus_mana_regen = 0x1318; // float32
        constexpr uint32_t cast_range_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_BlindingLight {
        constexpr uint32_t miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_BlindingLight_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_Illuminate {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t total_damage = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t channel_vision_radius = 0x1324; // int32
        constexpr uint32_t channel_vision_interval = 0x1328; // float32
        constexpr uint32_t channel_vision_duration = 0x132C; // float32
        constexpr uint32_t channel_vision_step = 0x1330; // int32
        constexpr uint32_t m_flLastChantTime = 0x1334; // GameTime_t
        constexpr uint32_t m_vNextVisionLocation = 0x1338; // Vector
        constexpr uint32_t m_vCastDirection = 0x1344; // Vector
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_ManaLeak {
        constexpr uint32_t mana_leak_pct = 0x1318; // float32
        constexpr uint32_t vLastPos = 0x131C; // Vector
        constexpr uint32_t bResetPosition = 0x1328; // bool
        constexpr uint32_t m_fAccumulatedManaLeak = 0x132C; // float32
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_Radiant_Bind {
        constexpr uint32_t slow = 0x1318; // float32
        constexpr uint32_t magic_resistance = 0x131C; // int32
        constexpr uint32_t stun_duration = 0x1320; // float32
        constexpr uint32_t vLastPos = 0x1324; // Vector
        constexpr uint32_t bResetPosition = 0x1330; // bool
        constexpr uint32_t m_fAccumulatedDistance = 0x1334; // float32
        constexpr uint32_t m_nFXIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_nStatusFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_bStunned = 0x1340; // bool
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_Recall {
        constexpr uint32_t m_bWasAttacked = 0x1318; // bool
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_SpiritForm {
        constexpr uint32_t m_nFXIndexA = 0x1318; // ParticleIndex_t
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t cast_range = 0x1320; // int32
        constexpr uint32_t m_bDidSwapSpiritForm = 0x1324; // bool
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_SpiritForm_Illuminate {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t vision_radius = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t total_damage = 0x1324; // int32
        constexpr uint32_t max_channel_time = 0x1328; // float32
        constexpr uint32_t speed = 0x132C; // float32
        constexpr uint32_t vision_duration = 0x1330; // float32
        constexpr uint32_t channel_vision_radius = 0x1334; // int32
        constexpr uint32_t channel_vision_interval = 0x1338; // float32
        constexpr uint32_t channel_vision_duration = 0x133C; // float32
        constexpr uint32_t channel_vision_step = 0x1340; // int32
        constexpr uint32_t m_vCastLoc = 0x1344; // Vector
        constexpr uint32_t m_vTargetLoc = 0x1350; // Vector
        constexpr uint32_t m_fStartTime = 0x135C; // GameTime_t
        constexpr uint32_t m_qCastAngle = 0x1360; // QAngle
        constexpr uint32_t m_iProjectile = 0x136C; // int32
        constexpr uint32_t m_nFXIndex = 0x1370; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1374; // ParticleIndex_t
        constexpr uint32_t m_vNextVisionLocation = 0x1378; // Vector
        constexpr uint32_t m_vCastDirection = 0x1384; // Vector
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp {
        constexpr uint32_t fixed_movement_speed = 0x1318; // int32
        constexpr uint32_t m_vSource = 0x131C; // Vector
    }

    namespace CDOTA_Modifier_KeeperOfTheLight_Will_O_Wisp_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t wisp_damage = 0x131C; // float32
        constexpr uint32_t off_duration = 0x1320; // float32
        constexpr uint32_t off_duration_initial = 0x1324; // float32
        constexpr uint32_t on_duration = 0x1328; // float32
        constexpr uint32_t hit_count = 0x132C; // int32
        constexpr uint32_t m_iAttackCount = 0x1330; // int32
        constexpr uint32_t m_flNextTimeOn = 0x1334; // GameTime_t
        constexpr uint32_t m_bActive = 0x1338; // bool
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_flNextTime = 0x1344; // GameTime_t
        constexpr uint32_t m_vecDamagedEntities = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flCorrectionTime = 0x1360; // float32
    }

    namespace CDOTA_Modifier_Kill {
        constexpr uint32_t m_bHideOnKill = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Knockback {
        constexpr uint32_t knockback_distance = 0x1318; // float32
        constexpr uint32_t knockback_height = 0x131C; // int32
        constexpr uint32_t knockback_duration = 0x1320; // float32
        constexpr uint32_t m_vHorizOffset = 0x1324; // Vector
        constexpr uint32_t m_vStartPosition = 0x1330; // Vector
        constexpr uint32_t m_fCurrentTimeHoriz = 0x133C; // float32
        constexpr uint32_t m_fCurrentTimeVert = 0x1340; // float32
        constexpr uint32_t m_bShouldStun = 0x1344; // bool
        constexpr uint32_t m_bRespectLeash = 0x1345; // bool
        constexpr uint32_t m_bReversePolarity = 0x1346; // bool
    }

    namespace CDOTA_Modifier_KoboldTaskmaster_SpeedAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_KoboldTaskmaster_SpeedAura_Bonus {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_KoboldTunneler_ProspectingAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_KoboldTunneler_ProspectingAura_Money {
        constexpr uint32_t gpm_aura = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Kobold_Disarm {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Kunkka_Davy_Jones_Locker_Aura {
        constexpr uint32_t m_flRadius = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Kunkka_Fear {
        constexpr uint32_t m_pEntityToBeAfraidOf = 0x1318; // CHandle< C_DOTA_BaseNPC >
    }

    namespace CDOTA_Modifier_Kunkka_GhostShip_DamageAbsorb {
        constexpr uint32_t m_iAccumulatedDamage = 0x1318; // int32
        constexpr uint32_t movespeed_bonus = 0x131C; // int32
        constexpr uint32_t ghostship_absorb = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Kunkka_GhostShip_DamageDelay {
        constexpr uint32_t m_iAccumulatedDamage = 0x1318; // int32
        constexpr uint32_t m_flDuration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Kunkka_Ghost_Ship_Fleet {
        constexpr uint32_t vCasterOrigin = 0x1318; // Vector
        constexpr uint32_t vEnd = 0x1324; // Vector
        constexpr uint32_t hitcount = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Man_the_Helm {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t forward_move_speed = 0x131C; // float32
        constexpr uint32_t turn_rate_boosted = 0x1320; // float32
        constexpr uint32_t turn_rate = 0x1324; // float32
        constexpr uint32_t hit_radius = 0x1328; // int32
        constexpr uint32_t knockback_radius = 0x132C; // int32
        constexpr uint32_t m_bHitFirstUpdate = 0x1330; // bool
        constexpr uint32_t m_flHitEndTime = 0x1334; // GameTime_t
        constexpr uint32_t hit_recover_time = 0x1338; // float32
        constexpr uint32_t m_flTurnBoostProgress = 0x133C; // float32
        constexpr uint32_t m_flFacingTarget = 0x1340; // float32
        constexpr uint32_t m_flLastHeroAttackTime = 0x1344; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1348; // ParticleIndex_t
        constexpr uint32_t m_flGyroshellDurationRemaining = 0x134C; // float32
        constexpr uint32_t m_flTurnHistory = 0x1350; // CUtlVector< float32 >
        constexpr uint32_t m_vecHeroesHitLastRicochet = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesCredited = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesHitCurrentRicochet = 0x1398; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vDirection = 0x13B0; // Vector
    }

    namespace CDOTA_Modifier_Kunkka_No_Quarter_Counter {
        constexpr uint32_t m_nStackCount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Rumboldened_Immunity {
        constexpr uint32_t model_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Tidebringer {
        constexpr uint32_t m_bTidebringerAttack = 0x1318; // bool
        constexpr uint32_t cleave_starting_width = 0x131C; // int32
        constexpr uint32_t cleave_ending_width = 0x1320; // int32
        constexpr uint32_t cleave_distance = 0x1324; // int32
        constexpr uint32_t damage_bonus = 0x1328; // int32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t cleave_damage = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Tidebringer_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Torrent {
        constexpr uint32_t torrent_damage = 0x1318; // int32
        constexpr uint32_t damage_tick_interval = 0x131C; // float32
        constexpr uint32_t percent_instant = 0x1320; // float32
        constexpr uint32_t flDamagePerTick = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Kunkka_Torrent_Slow {
        constexpr uint32_t movespeed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Torrent_Storm {
        constexpr uint32_t torrent_min_distance = 0x1318; // int32
        constexpr uint32_t torrent_max_distance = 0x131C; // int32
        constexpr uint32_t m_iExplosionQuadrant = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Kunkka_Torrent_Thinker {
        constexpr uint32_t m_bShowEnemies = 0x1318; // bool
        constexpr uint32_t m_bTorrentStorm = 0x1319; // bool
        constexpr uint32_t m_bTorrentStarted = 0x131A; // bool
        constexpr uint32_t m_fTorrentStartTime = 0x131C; // GameTime_t
        constexpr uint32_t flDamagePerTick = 0x1320; // float32
        constexpr uint32_t flFirstDamage = 0x1324; // float32
        constexpr uint32_t damage_tick_interval = 0x1328; // float32
        constexpr uint32_t percent_instant = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Kunkka_XMarksTheSpot {
        constexpr uint32_t ally_ms = 0x1318; // int32
        constexpr uint32_t ally_armor = 0x131C; // int32
        constexpr uint32_t hThinker = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Kunkka_XMarksTheSpot_Thinker {
        constexpr uint32_t m_vStartLoc = 0x1318; // Vector
        constexpr uint32_t m_bIsReflection = 0x1324; // bool
        constexpr uint32_t m_hEntity = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Lamp_Off {
        constexpr uint32_t m_iTempViewer = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Legion_Commander_Duel {
        constexpr uint32_t reward_damage = 0x1318; // int32
        constexpr uint32_t scepter_damage_reduction_pct = 0x131C; // int32
        constexpr uint32_t m_bAttacked = 0x1320; // bool
        constexpr uint32_t m_bHadAVictor = 0x1321; // bool
        constexpr uint32_t m_flTimeDuelStart = 0x1324; // GameTime_t
        constexpr uint32_t m_hPartner = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flNextTime = 0x132C; // float32
        constexpr uint32_t hAlreadyHitList = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Legion_Commander_MomentOfCourage {
        constexpr uint32_t trigger_chance = 0x1318; // int32
        constexpr uint32_t buff_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Legion_Commander_MomentOfCourage_Lifesteal {
        constexpr uint32_t hp_leech_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Legion_Commander_OverwhelmingOdds {
        constexpr uint32_t bonus_attack_speed_creeps = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t armor_per_creep = 0x1320; // float32
        constexpr uint32_t armor_per_hero = 0x1324; // float32
        constexpr uint32_t m_nTotalBonus = 0x1328; // int32
        constexpr uint32_t m_flBonusArmor = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Legion_Commander_PressTheAttack {
        constexpr uint32_t move_speed = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Legion_Commander_PressTheAttack_Immunity {
        constexpr uint32_t model_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Decrepify {
        constexpr uint32_t magic_amp = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Decrepify_Aura {
        constexpr uint32_t magic_amp = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Diabolic_Edict {
        constexpr uint32_t num_explosions = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_fExplosions = 0x1320; // float32
        constexpr uint32_t tower_bonus = 0x1324; // float32
        constexpr uint32_t m_bTalentActive = 0x1328; // bool
    }

    namespace CDOTA_Modifier_Leshrac_Greater_Lightning_Storm {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Leshrac_Lightning_Storm {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t jump_count = 0x1320; // int32
        constexpr uint32_t slow_duration = 0x1324; // float32
        constexpr uint32_t jump_delay = 0x1328; // float32
        constexpr uint32_t hInitialTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flDamage = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Leshrac_Lightning_Storm_Scepter_Thinker {
        constexpr uint32_t pulse_nova_lightning_interval = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Lightning_Storm_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Pulse_Nova {
        constexpr uint32_t m_bFirst = 0x1318; // bool
        constexpr uint32_t damage_resistance = 0x1324; // int32
        constexpr uint32_t bonus_movespeed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Leshrac_Split_Earth_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Lesser_NightCrawler_Pounce {
        constexpr uint32_t pounce_distance = 0x1318; // int32
        constexpr uint32_t pounce_speed = 0x131C; // float32
        constexpr uint32_t pounce_acceleration = 0x1320; // float32
        constexpr uint32_t pounce_radius = 0x1324; // int32
        constexpr uint32_t pounce_damage = 0x1328; // int32
        constexpr uint32_t leash_duration = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Lich_ChainFrost_OnDeath {
        constexpr uint32_t should_fire_chain_frost_on_death = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lich_ChainFrost_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t slow_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Lich_Chain_Frost_Thinker {
        constexpr uint32_t m_nDamageToHeroes = 0x1318; // int32
        constexpr uint32_t m_nHeroesKilled = 0x131C; // int32
        constexpr uint32_t m_nJumps = 0x1320; // int32
        constexpr uint32_t m_bFirstJump = 0x1324; // bool
        constexpr uint32_t m_hTarget = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAvoidTarget = 0x132C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Lich_DarkSorcery_Buff {
        constexpr uint32_t mana_drain = 0x1318; // int32
        constexpr uint32_t attack_count = 0x131C; // int32
        constexpr uint32_t attack_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Lich_FrostArmor {
        constexpr uint32_t armor_bonus = 0x1318; // int32
        constexpr uint32_t health_regen = 0x131C; // int32
        constexpr uint32_t slow_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Lich_FrostArmor_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t slow_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Lich_FrostAura {
        constexpr uint32_t duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Lich_FrostAura_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lich_FrostAura_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lich_FrostNova_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t slow_attack_speed = 0x131C; // int32
        constexpr uint32_t slow_attack_speed_primary = 0x1320; // int32
        constexpr uint32_t m_bIsPrimary = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Lich_FrostShield {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t interval = 0x131C; // float32
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t health_regen = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Lich_FrostShield_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lich_Ice_Spire {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_Timer = 0x1320; // CountdownTimer
    }

    namespace CDOTA_Modifier_Lich_Ice_Spire_Debuff {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lich_Sinister_Gaze {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t mana_drain = 0x131C; // int32
        constexpr uint32_t m_flIntervalRate = 0x1320; // float32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t creep_damage = 0x1328; // float32
        constexpr uint32_t m_bBlasted = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Life_Stealer_Assimilate {
        constexpr uint32_t order_lock_duration = 0x1318; // float32
        constexpr uint32_t m_fOrderLockDone = 0x131C; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Feast {
        constexpr uint32_t hp_leech_percent = 0x1318; // float32
        constexpr uint32_t hp_damage_percent = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy {
        constexpr uint32_t attack_speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Ghoul_Frenzy_Slow {
        constexpr uint32_t miss_pct = 0x1318; // int32
        constexpr uint32_t movement_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Infest {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x131C; // int32
        constexpr uint32_t self_regen = 0x1320; // float32
        constexpr uint32_t m_nStartingHealth = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Infest_Creep {
        constexpr uint32_t m_bChangedTeams = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Life_Stealer_Infest_Effect {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_health = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Infest_Enemy_Hero {
        constexpr uint32_t attack_rate_enemy = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Life_Stealer_Open_Wounds {
        constexpr uint32_t slow_steps = 0x1318; // int32[8]
        constexpr uint32_t heal_percent = 0x1338; // int32
        constexpr uint32_t m_nDamageTracker = 0x133C; // int32
        constexpr uint32_t damage_threshold = 0x1340; // int32
        constexpr uint32_t spread_radius = 0x1344; // int32
        constexpr uint32_t max_health_as_damage_pct = 0x1348; // int32
    }

    namespace CDOTA_Modifier_Life_Stealer_Rage {
        constexpr uint32_t movement_speed_bonus = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Light_Collector {
        constexpr uint32_t m_bActive = 0x1318; // bool
        constexpr uint32_t health_regen = 0x131C; // int32
        constexpr uint32_t mana_regen = 0x1320; // int32
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t movespeed_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Light_Collector_Blind {
        constexpr uint32_t miss_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lina_DragonSlave_Burn {
        constexpr uint32_t dragon_slave_burn = 0x1318; // int32
        constexpr uint32_t target_crit_multiplier = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Lina_FierySoul {
        constexpr uint32_t fiery_soul_attack_speed_bonus = 0x1318; // int32
        constexpr uint32_t fiery_soul_move_speed_bonus = 0x131C; // float32
        constexpr uint32_t fiery_soul_max_stacks = 0x1320; // int32
        constexpr uint32_t fiery_soul_stack_duration = 0x1324; // float32
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_flFierySoulDieTime = 0x132C; // GameTime_t
    }

    namespace CDOTA_Modifier_Lina_Fiery_Cloak {
        constexpr uint32_t magic_resistance = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
        constexpr uint32_t visualzdelta = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Lina_LagunaBlade {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lina_LagunaBlade_Line {
        constexpr uint32_t vStart = 0x1318; // Vector
        constexpr uint32_t vEnd = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_Lina_LagunaBlade_Superheated {
        constexpr uint32_t increased_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lina_LightStrikeArray_Thinker {
        constexpr uint32_t m_iDamage = 0x1318; // int32
        constexpr uint32_t m_flStunDuration = 0x131C; // float32
        constexpr uint32_t light_strike_array_aoe = 0x1320; // int32
        constexpr uint32_t light_strike_array_damage = 0x1324; // int32
        constexpr uint32_t light_strike_array_stun_duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Lion_Arcana_Kill_Effect {
        constexpr uint32_t m_bFrozen = 0x1318; // bool
        constexpr uint32_t m_bFlail = 0x1319; // bool
    }

    namespace CDOTA_Modifier_Lion_FingerOfDeath {
        constexpr uint32_t m_bIgnoreBonus = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Lion_ManaDrain {
        constexpr uint32_t mana_per_second = 0x1318; // int32
        constexpr uint32_t break_distance = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t movespeed = 0x1324; // int32
        constexpr uint32_t damage_pct = 0x1328; // int32
        constexpr uint32_t ally_pct = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Lion_Voodoo {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_Entangling_Claws {
        constexpr uint32_t attack_amp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_Rabid {
        constexpr uint32_t shard_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t shard_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SavageRoar {
        constexpr uint32_t bonus_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_AttackCheck {
        constexpr uint32_t m_bCanBeResummoned = 0x1318; // bool
        constexpr uint32_t m_bCanAttack = 0x1319; // bool
        constexpr uint32_t m_nFxIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nStatusFxIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Defender {
        constexpr uint32_t damage_share = 0x1318; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Demolish {
        constexpr uint32_t bonus_building_damage = 0x1318; // int32
        constexpr uint32_t true_form_bonus_building_damage = 0x131C; // int32
        constexpr uint32_t spell_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Entangle {
        constexpr uint32_t entangle_chance = 0x1318; // int32
        constexpr uint32_t hero_entangle_chance = 0x131C; // int32
        constexpr uint32_t hero_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Entangle_Effect {
        constexpr uint32_t m_iEntangleDamage = 0x1318; // int32
        constexpr uint32_t interval_rate = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Fetch {
        constexpr uint32_t tick_rate = 0x1318; // float32
        constexpr uint32_t drag_distance = 0x131C; // int32
        constexpr uint32_t break_distance = 0x1320; // int32
        constexpr uint32_t vPreviousLocation = 0x1324; // Vector
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Damage {
        constexpr uint32_t max_ticks = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t tick_rate = 0x1324; // float32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritBear_Fetch_Self {
        constexpr uint32_t self_slow = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bFetchingRune = 0x1324; // bool
        constexpr uint32_t m_vPreviousLoc = 0x1328; // Vector
        constexpr uint32_t drag_distance = 0x1334; // int32
        constexpr uint32_t break_distance = 0x1338; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritLink {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t lifesteal_percent = 0x131C; // int32
        constexpr uint32_t armor = 0x1320; // int32
        constexpr uint32_t armor_sharing = 0x1324; // int32
        constexpr uint32_t active_bonus = 0x1328; // int32
        constexpr uint32_t m_hTarget = 0x132C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritLink_Active {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_LoneDruid_SpiritLink_BearFear {
        constexpr uint32_t bonus_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_LoneDruid_TrueForm {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_hp = 0x131C; // int32
        constexpr uint32_t base_attack_time = 0x1320; // float32
    }

    namespace CDOTA_Modifier_LoneDruid_TrueForm_BattleCry {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Lua {
        constexpr uint32_t m_bHasCustomTransmitterData = 0x1400; // bool
    }

    namespace CDOTA_Modifier_Luna_Eclipse {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t beams = 0x1320; // int32
        constexpr uint32_t hit_count = 0x1324; // int32
        constexpr uint32_t m_iBeamDamage = 0x1328; // int32
        constexpr uint32_t beam_interval = 0x132C; // float32
        constexpr uint32_t stun_duration = 0x1330; // float32
        constexpr uint32_t vPosition = 0x1334; // Vector
        constexpr uint32_t bAreaTarget = 0x1340; // bool
        constexpr uint32_t m_iTickCount = 0x1344; // int32
        constexpr uint32_t m_nMoonlightFXIndex = 0x1348; // ParticleIndex_t
        constexpr uint32_t m_HitTargets = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flBeamStun = 0x1368; // float32
    }

    namespace CDOTA_Modifier_Luna_LucentBeam_Damage_Buff {
        constexpr uint32_t damage_buff_per_beam = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Luna_LunarBlessing {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t bonus_night_vision = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Luna_LunarBlessingAura {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_damage_self = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Luna_LunarBlessing_Active {
        constexpr uint32_t attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Luna_LunarBlessing_Smoke {
        constexpr uint32_t bonus_speed_day = 0x1328; // int32
        constexpr uint32_t bonus_speed_night = 0x132C; // int32
        constexpr uint32_t break_distance_day = 0x1330; // int32
        constexpr uint32_t break_distance_night = 0x1334; // int32
        constexpr uint32_t visibility_radius = 0x1338; // int32
        constexpr uint32_t bonus_movement_speed = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Luna_Lunar_Grace {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t night_multiplier = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Luna_MoonGlaive {
        constexpr uint32_t range = 0x1318; // int32
        constexpr uint32_t bounces = 0x131C; // int32
        constexpr uint32_t damage_reduction_percent = 0x1320; // int32
        constexpr uint32_t m_nMoonGlaiveFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Luna_MoonGlaive_Shield {
        constexpr uint32_t rotating_glaives = 0x1318; // int32
        constexpr uint32_t rotating_glaives_hit_radius = 0x131C; // float32
        constexpr uint32_t rotating_glaives_speed = 0x1320; // float32
        constexpr uint32_t rotating_glaives_collision_damage = 0x1324; // float32
        constexpr uint32_t rotating_glaives_movement_radius = 0x1328; // float32
        constexpr uint32_t rotating_glaives_damage_reduction = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Lycan_FeralImpulse {
        constexpr uint32_t bonus_hp_regen = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Lycan_FeralImpulse_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lycan_Howl {
        constexpr uint32_t attack_damage_reduction = 0x1318; // int32
        constexpr uint32_t total_attack_damage_reduction = 0x131C; // int32
        constexpr uint32_t armor = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Lycan_Shapeshift {
        constexpr uint32_t bonus_night_vision = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_iOriginalAttackCapability = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Lycan_Shapeshift_Speed {
        constexpr uint32_t speed = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t crit_multiplier = 0x1320; // int32
        constexpr uint32_t health_bonus = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Lycan_Shard {
        constexpr uint32_t m_flNextSpawn = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Lycan_SummonWolves_Bash {
        constexpr uint32_t bash_chance = 0x1318; // int32
        constexpr uint32_t bash_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Lycan_SummonWolves_BonusDamage {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lycan_SummonWolves_CriticalStrike {
        constexpr uint32_t m_CooldownTimer = 0x1318; // CountdownTimer
        constexpr uint32_t maim_chance = 0x1330; // int32
        constexpr uint32_t maim_duration = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Lycan_SummonWolves_Health {
        constexpr uint32_t bonus_health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lycan_SummonWolves_Maim {
        constexpr uint32_t maim_movement_speed = 0x1318; // int32
        constexpr uint32_t maim_attack_speed = 0x131C; // int32
        constexpr uint32_t maim_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Lycan_Wolf_Bite_Attack_Range {
        constexpr uint32_t attack_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Lycan_Wolf_Bite_Lifesteal {
        constexpr uint32_t lifesteal_percent = 0x1318; // int32
        constexpr uint32_t lifesteal_range = 0x131C; // int32
        constexpr uint32_t m_vecTargets = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_MaelstromChain {
        constexpr uint32_t chain_radius = 0x1318; // int32
        constexpr uint32_t chain_strikes = 0x131C; // int32
        constexpr uint32_t chain_damage = 0x1320; // int32
        constexpr uint32_t chain_delay = 0x1324; // float32
        constexpr uint32_t m_iCurJumpCount = 0x1328; // int32
        constexpr uint32_t m_vCurTargetLoc = 0x132C; // Vector
        constexpr uint32_t m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Magnataur_Empower {
        constexpr uint32_t bonus_damage_pct = 0x1318; // int32
        constexpr uint32_t cleave_damage_pct = 0x131C; // float32
        constexpr uint32_t cleave_starting_width = 0x1320; // int32
        constexpr uint32_t cleave_ending_width = 0x1324; // int32
        constexpr uint32_t cleave_distance = 0x1328; // int32
        constexpr uint32_t self_multiplier = 0x132C; // float32
        constexpr uint32_t secondary_cleave_distance = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Horn_Toss_Slow {
        constexpr uint32_t horn_toss_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Magnataur_ReversePolarity_Stats {
        constexpr uint32_t stats_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Shockwave {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Shockwave_Erupt {
        constexpr uint32_t scepter_width = 0x1318; // int32
        constexpr uint32_t scepter_duration = 0x131C; // float32
        constexpr uint32_t play_particle = 0x1320; // bool
        constexpr uint32_t m_vStart = 0x1324; // Vector
        constexpr uint32_t m_vEnd = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_Magnataur_Shockwave_Eruption_Slow {
        constexpr uint32_t scepter_slow_pct = 0x1318; // int32
        constexpr uint32_t scepter_armor_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Shockwave_Pull {
        constexpr uint32_t m_vDirection = 0x1318; // Vector
        constexpr uint32_t m_flEndTime = 0x1324; // float32
        constexpr uint32_t m_flCurTime = 0x1328; // float32
        constexpr uint32_t pull_duration = 0x132C; // float32
        constexpr uint32_t effective_distance = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Magnataur_Skewer_Impact {
        constexpr uint32_t slow_duration = 0x1318; // float32
        constexpr uint32_t skewer_damage = 0x131C; // int32
        constexpr uint32_t damage_distance_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Skewer_Movement {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Magnataur_Skewer_Slow {
        constexpr uint32_t slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Magnus_Strength_Of_Joelrak {
        constexpr uint32_t strength_per_stack = 0x1318; // int32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t stack_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Marci_CompanionRun_AllyMovespeed {
        constexpr uint32_t ally_movespeed_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Marci_Dispose_Debuff {
        constexpr uint32_t movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Marci_Grapple_VictimMotion {
        constexpr uint32_t impact_damage = 0x1318; // int32
        constexpr uint32_t debuff_duration = 0x131C; // float32
        constexpr uint32_t landing_radius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Marci_Guardian_Buff {
        constexpr uint32_t lifesteal_pct = 0x1318; // float32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_attack_range = 0x1320; // int32
        constexpr uint32_t max_partner_distance = 0x1324; // int32
        constexpr uint32_t max_partner_penalty = 0x1328; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x132C; // int32
        constexpr uint32_t m_fLifestealPct = 0x1330; // float32
        constexpr uint32_t m_fDamageAbsorbed = 0x1334; // float32
        constexpr uint32_t m_bActive = 0x1338; // bool
        constexpr uint32_t m_nFxIndex = 0x133C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Marci_Lunge_Arc {
        constexpr uint32_t m_bTriggeredLandingAnim = 0x1318; // bool
        constexpr uint32_t m_nMaxJumpDistance = 0x131C; // int32
        constexpr uint32_t min_jump_distance = 0x1320; // int32
        constexpr uint32_t max_jump_distance = 0x1324; // int32
        constexpr uint32_t min_lob_travel_time = 0x1328; // float32
        constexpr uint32_t max_lob_travel_time = 0x132C; // float32
        constexpr uint32_t landing_radius = 0x1330; // int32
        constexpr uint32_t debuff_duration = 0x1334; // float32
        constexpr uint32_t min_height_above_lowest = 0x1338; // float32
        constexpr uint32_t min_height_above_highest = 0x133C; // float32
        constexpr uint32_t min_acceleration = 0x1340; // float32
        constexpr uint32_t max_acceleration = 0x1344; // float32
        constexpr uint32_t impact_damage = 0x1348; // float32
        constexpr uint32_t impact_position_offset = 0x134C; // int32
        constexpr uint32_t ally_buff_duration = 0x1350; // float32
    }

    namespace CDOTA_Modifier_Marci_Lunge_Buff {
        constexpr uint32_t scepter_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Marci_Lunge_Debuff {
        constexpr uint32_t movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Marci_Lunge_TrackingMotion {
        constexpr uint32_t m_nProjectileID = 0x1318; // int32
        constexpr uint32_t m_nMaxJumpDistance = 0x131C; // int32
        constexpr uint32_t landing_radius = 0x1320; // int32
        constexpr uint32_t max_jump_distance = 0x1324; // int32
        constexpr uint32_t min_jump_distance = 0x1328; // int32
        constexpr uint32_t target_abort_distance = 0x132C; // int32
        constexpr uint32_t impact_position_offset = 0x1330; // int32
        constexpr uint32_t m_flCastDistance = 0x1334; // float32
        constexpr uint32_t m_nAoEFXIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_vDestination = 0x133C; // Vector
        constexpr uint32_t m_hBounceEntity = 0x1348; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBounceEntityClient = 0x134C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Marci_Unleash {
        constexpr uint32_t time_between_flurries = 0x1318; // float32
        constexpr uint32_t charges_per_flurry = 0x131C; // int32
        constexpr uint32_t flurry_charge_increment = 0x1320; // int32
        constexpr uint32_t bonus_movespeed = 0x1324; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Marci_Unleash_Flurry {
        constexpr uint32_t flurry_bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t time_between_flurries = 0x131C; // float32
        constexpr uint32_t debuff_duration = 0x1320; // float32
        constexpr uint32_t max_time_window_per_hit = 0x1324; // float32
        constexpr uint32_t m_bBonusSpeed = 0x1328; // bool
        constexpr uint32_t m_nFXStackIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t m_bIsDoingFlurryAttack = 0x1330; // bool
        constexpr uint32_t m_bIsDoingFlurryPulseAttack = 0x1331; // bool
        constexpr uint32_t m_fLastAttackTime = 0x1334; // GameTime_t
    }

    namespace CDOTA_Modifier_Marci_Unleash_FlurryCooldown {
        constexpr uint32_t charges_per_flurry = 0x1318; // int32
        constexpr uint32_t time_between_flurries = 0x131C; // float32
        constexpr uint32_t recovery_fixed_attack_rate = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Marci_Unleash_FlurryPulse_Debuff {
        constexpr uint32_t pulse_move_slow_pct = 0x1318; // float32
        constexpr uint32_t pulse_attack_slow_pct = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Marci_Unleash_Pull {
        constexpr uint32_t shard_push_length = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // int32
        constexpr uint32_t spear_damage = 0x1320; // int32
        constexpr uint32_t spear_distance_from_wall = 0x1324; // int32
        constexpr uint32_t spear_attack_interval = 0x1328; // float32
        constexpr uint32_t warrior_fade_min_dist = 0x1348; // float32
        constexpr uint32_t warrior_fade_max_dist = 0x134C; // float32
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood_AnimationAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood_Buff {
        constexpr uint32_t health_regen = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood_BuffAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood_Leash {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // float32
        constexpr uint32_t m_vOriginLoc = 0x1320; // Vector
    }

    namespace CDOTA_Modifier_Mars_ArenaOfBlood_Thinker {
        constexpr uint32_t radius = 0x1318; // float32
        constexpr uint32_t formation_time = 0x131C; // float32
        constexpr uint32_t m_flInitialZ = 0x1320; // float32
        constexpr uint32_t m_flFinalZ = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Mars_Bulwark {
        constexpr uint32_t physical_damage_reduction = 0x1318; // float32
        constexpr uint32_t physical_damage_reduction_side = 0x131C; // float32
        constexpr uint32_t forward_angle = 0x1320; // float32
        constexpr uint32_t side_angle = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Mars_Bulwark_Active {
        constexpr uint32_t redirect_chance = 0x1318; // int32
        constexpr uint32_t redirect_range = 0x131C; // int32
        constexpr uint32_t forward_angle = 0x1320; // float32
        constexpr uint32_t side_angle = 0x1324; // float32
        constexpr uint32_t redirect_speed_penatly = 0x1328; // int32
        constexpr uint32_t redirect_close_range = 0x132C; // int32
        constexpr uint32_t attack_redirection_grace_distance = 0x1330; // int32
        constexpr uint32_t m_nPoseParameterWE = 0x1334; // int32
        constexpr uint32_t m_nPoseParameterNS = 0x1338; // int32
        constexpr uint32_t m_flLastPoseX = 0x133C; // float32
        constexpr uint32_t m_flLastPoseY = 0x1340; // float32
        constexpr uint32_t m_nLastMaxDirection = 0x1344; // int32
        constexpr uint32_t m_vLastOrigin = 0x1348; // Vector
        constexpr uint32_t m_flLastGameTime = 0x1354; // GameTime_t
    }

    namespace CDOTA_Modifier_Mars_Bulwark_Soldier_Bonus {
        constexpr uint32_t m_nPoseParameterWE = 0x1318; // int32
        constexpr uint32_t m_nPoseParameterNS = 0x131C; // int32
        constexpr uint32_t m_flLastPoseX = 0x1320; // float32
        constexpr uint32_t m_flLastPoseY = 0x1324; // float32
        constexpr uint32_t m_nLastMaxDirection = 0x1328; // int32
        constexpr uint32_t m_vLastOrigin = 0x132C; // Vector
        constexpr uint32_t m_flLastGameTime = 0x1338; // GameTime_t
    }

    namespace CDOTA_Modifier_Mars_Bulwark_Soldier_Thinker {
        constexpr uint32_t m_NextAttack = 0x1318; // GameTime_t
        constexpr uint32_t soldier_offset = 0x131C; // int32
        constexpr uint32_t soldier_count = 0x1320; // int32
        constexpr uint32_t forward_angle = 0x1324; // int32
        constexpr uint32_t knockback_distance = 0x1328; // int32
        constexpr uint32_t m_hAllSoldiers = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flLastStationaryTime = 0x1348; // GameTime_t
        constexpr uint32_t m_vLastStationaryPosition = 0x134C; // Vector
        constexpr uint32_t stationary_attack_delay = 0x1358; // float32
    }

    namespace CDOTA_Modifier_Mars_GodsRebuke_Crit {
        constexpr uint32_t crit_mult = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_Gods_Rebuke {
        constexpr uint32_t knockback_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_Scepter_Damage {
        constexpr uint32_t scepter_bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mars_Scepter_Damage_Slow {
        constexpr uint32_t scepter_movement_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MaskOfDispair_Berserk {
        constexpr uint32_t berserk_spell_amp = 0x1318; // int32
        constexpr uint32_t berserk_manacost_reduction = 0x131C; // int32
        constexpr uint32_t berserk_magic_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_MaskOfMadness_Berserk {
        constexpr uint32_t berserk_bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t berserk_bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t berserk_armor_reduction = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Medusa_ManaShield {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t absorption_pct = 0x131C; // float32
        constexpr uint32_t damage_per_mana = 0x1320; // float32
        constexpr uint32_t illusion_damage_per_mana = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Medusa_Mystic_Snake_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t turn_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Medusa_SplitShot {
        constexpr uint32_t damage_modifier = 0x1318; // int32
        constexpr uint32_t range = 0x131C; // int32
        constexpr uint32_t arrow_count = 0x1320; // int32
        constexpr uint32_t projectile_speed = 0x1324; // int32
        constexpr uint32_t m_nSplitShotBowFXIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Medusa_StoneGaze {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t vision_cone = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t speed_boost = 0x1324; // int32
        constexpr uint32_t m_hHitEntities = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Medusa_StoneGaze_Facing {
        constexpr uint32_t face_duration = 0x1318; // float32
        constexpr uint32_t stone_duration = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t vision_cone = 0x1324; // float32
        constexpr uint32_t m_flAccumulatedTime = 0x1328; // float32
        constexpr uint32_t ctFacing = 0x1330; // CountdownTimer
        constexpr uint32_t m_bAlreadyStoned = 0x1348; // bool
        constexpr uint32_t m_nFXIndex = 0x134C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Medusa_StoneGaze_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Medusa_StoneGaze_Stone {
        constexpr uint32_t bonus_physical_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Medusa_StoneGaze_Tracker {
        constexpr uint32_t m_nNumStoned = 0x1318; // int32
        constexpr uint32_t m_bAnyInvisible = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Meepo_Divided_We_Stand {
        constexpr uint32_t respawn = 0x1318; // float32
        constexpr uint32_t magic_resist = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Meepo_Fling_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Meepo_Flung {
        constexpr uint32_t m_nHandle = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Meepo_Geostrike_Debuff {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Meepo_MegaMeepo {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_flOffset = 0x131C; // float32
        constexpr uint32_t m_vStartAngles = 0x1320; // QAngle
        constexpr uint32_t m_vStartLocation = 0x132C; // Vector
        constexpr uint32_t animation_rate = 0x1338; // float32
        constexpr uint32_t m_bInterrupted = 0x133C; // bool
        constexpr uint32_t m_bHasBeenDestroyed = 0x133D; // bool
        constexpr uint32_t m_bIsHighestMeepo = 0x133E; // bool
    }

    namespace CDOTA_Modifier_Meepo_MegaMeepo_Self {
        constexpr uint32_t base_strength = 0x1318; // int32
        constexpr uint32_t base_int = 0x131C; // int32
        constexpr uint32_t base_agi = 0x1320; // int32
        constexpr uint32_t stats_pct = 0x1324; // int32
        constexpr uint32_t m_hMegameepoFrame = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bWasOutOfGame = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Meepo_Petrify {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t hp_restore = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Meepo_Poof_Damage_Sharing {
        constexpr uint32_t damage_share_percentage = 0x1318; // int32
        constexpr uint32_t damage_share_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Meepo_Poof_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Meepo_Ransack {
        constexpr uint32_t health_steal_heroes = 0x1318; // int32
        constexpr uint32_t health_steal_creeps = 0x131C; // int32
    }

    namespace CDOTA_Modifier_MeltingStrike_Debuff {
        constexpr uint32_t armor_removed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Miniboss_Radiance {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Miniboss_Radiance_Debuff {
        constexpr uint32_t aura_damage = 0x1320; // int32
        constexpr uint32_t aura_interval = 0x1324; // float32
        constexpr uint32_t aura_radius = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Miniboss_Reflect {
        constexpr uint32_t passive_reflection_pct = 0x1318; // int32
        constexpr uint32_t passive_reflection_bonus_per_death = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Miniboss_UnyieldingShield {
        constexpr uint32_t damage_absorb = 0x1318; // int32
        constexpr uint32_t regen_per_second = 0x131C; // float32
        constexpr uint32_t regen_bonus_per_death = 0x1320; // float32
        constexpr uint32_t m_nDamageAbsorbed = 0x1324; // int32
        constexpr uint32_t m_timeLastTick = 0x1328; // GameTime_t
        constexpr uint32_t nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Minotaur_Horn_Immune {
        constexpr uint32_t model_scale = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mirana_Leap {
        constexpr uint32_t leap_distance = 0x1318; // int32
        constexpr uint32_t shard_radius = 0x131C; // float32
        constexpr uint32_t shard_radius_end = 0x1320; // float32
        constexpr uint32_t shard_damage = 0x1324; // float32
        constexpr uint32_t shard_slow_pct = 0x1328; // float32
        constexpr uint32_t shard_slow_duration = 0x132C; // float32
        constexpr uint32_t leap_speed = 0x1330; // float32
        constexpr uint32_t leap_acceleration = 0x1334; // float32
        constexpr uint32_t leap_radius = 0x1338; // int32
        constexpr uint32_t leap_bonus_duration = 0x133C; // float32
        constexpr uint32_t m_bLaunched = 0x1340; // bool
    }

    namespace CDOTA_Modifier_Mirana_Leap_Buff {
        constexpr uint32_t leap_speedbonus = 0x1318; // int32
        constexpr uint32_t leap_speedbonus_as = 0x131C; // int32
        constexpr uint32_t m_bCritUsed = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Mirana_Leap_Slow {
        constexpr uint32_t shard_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mirana_MoonlightShadow {
        constexpr uint32_t duration = 0x1328; // float32
        constexpr uint32_t bonus_movement_speed = 0x132C; // int32
        constexpr uint32_t evasion = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Mirana_Starfall_Scepter_Thinker {
        constexpr uint32_t interval_scepter = 0x1318; // float32
        constexpr uint32_t bInBufferTime = 0x131C; // bool
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Mirana_Starfall_Thinker {
        constexpr uint32_t starfall_secondary_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MjollnirChain {
        constexpr uint32_t chain_radius = 0x1318; // int32
        constexpr uint32_t chain_strikes = 0x131C; // int32
        constexpr uint32_t chain_damage = 0x1320; // int32
        constexpr uint32_t chain_delay = 0x1324; // float32
        constexpr uint32_t chain_damage_per_charge = 0x1328; // int32
        constexpr uint32_t m_iCurJumpCount = 0x132C; // int32
        constexpr uint32_t m_vCurTargetLoc = 0x1330; // Vector
        constexpr uint32_t m_hHitEntities = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_MonkeyKing_ArcToGround {
        constexpr uint32_t leap_speed = 0x1318; // float32
        constexpr uint32_t give_up_distance = 0x131C; // float32
        constexpr uint32_t attackspeed_duration = 0x1320; // float32
        constexpr uint32_t m_flOriginalZDelta = 0x1324; // float32
        constexpr uint32_t m_flZDelta = 0x1328; // float32
    }

    namespace CDOTA_Modifier_MonkeyKing_Bounce {
        constexpr uint32_t jump_damage_cooldown = 0x1318; // float32
    }

    namespace CDOTA_Modifier_MonkeyKing_BounceLeap {
        constexpr uint32_t give_up_distance = 0x1318; // float32
        constexpr uint32_t ground_jump_distance = 0x131C; // float32
        constexpr uint32_t m_flZDelta = 0x1320; // float32
        constexpr uint32_t perched_day_vision = 0x1324; // float32
        constexpr uint32_t perched_night_vision = 0x1328; // float32
    }

    namespace CDOTA_Modifier_MonkeyKing_BouncePerch {
        constexpr uint32_t m_hTree = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bGroundToTree = 0x131C; // bool
        constexpr uint32_t m_bTreeToGround = 0x131D; // bool
        constexpr uint32_t m_bTreeToTree = 0x131E; // bool
        constexpr uint32_t perched_day_vision = 0x1320; // float32
        constexpr uint32_t perched_night_vision = 0x1324; // float32
        constexpr uint32_t m_bAbilityIsStolen = 0x1328; // bool
    }

    namespace CDOTA_Modifier_MonkeyKing_BoundlessStrike_ShardMovement {
        constexpr uint32_t acceleration_z = 0x1318; // int32
        constexpr uint32_t min_height_above_lowest = 0x131C; // int32
        constexpr uint32_t min_height_above_highest = 0x1320; // int32
        constexpr uint32_t max_horizontal_acceleration = 0x1324; // int32
        constexpr uint32_t spring_channel_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_FurArmyThinker {
        constexpr uint32_t m_fDuration = 0x1318; // float32
        constexpr uint32_t m_fTimeThinkerCreated = 0x131C; // GameTime_t
        constexpr uint32_t m_vTargetPositions = 0x1320; // CUtlVector< Vector >
        constexpr uint32_t m_vInitialPos = 0x1338; // Vector
        constexpr uint32_t first_radius = 0x1344; // int32
        constexpr uint32_t num_first_soldiers = 0x1348; // int32
        constexpr uint32_t second_radius = 0x134C; // int32
        constexpr uint32_t num_second_soldiers = 0x1350; // int32
        constexpr uint32_t m_nRingFXIndex = 0x1354; // ParticleIndex_t
        constexpr uint32_t final_radius = 0x1358; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_FurArmy_BonusDamage {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_FurArmy_Soldier {
        constexpr uint32_t m_vTargetPos = 0x1318; // Vector
        constexpr uint32_t m_vDirection = 0x1324; // Vector
        constexpr uint32_t move_speed = 0x1330; // int32
        constexpr uint32_t m_hThinker = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsInPosition = 0x1338; // bool
        constexpr uint32_t m_nFXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_bAutoSpawn = 0x1340; // bool
    }

    namespace CDOTA_Modifier_MonkeyKing_FurArmy_SoldierInPosition {
        constexpr uint32_t m_vTargetPos = 0x1318; // Vector
        constexpr uint32_t m_hAttackTarget = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t attack_speed = 0x1328; // float32
        constexpr uint32_t second_radius = 0x132C; // int32
        constexpr uint32_t outer_attack_buffer = 0x1330; // int32
        constexpr uint32_t m_hThinker = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDisarmed = 0x1338; // bool
        constexpr uint32_t m_flNextAttackTime = 0x133C; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_bAutoSpawn = 0x1344; // bool
    }

    namespace CDOTA_Modifier_MonkeyKing_QuadrupleTap {
        constexpr uint32_t counter_duration = 0x1318; // int32
        constexpr uint32_t required_hits = 0x131C; // int32
        constexpr uint32_t max_duration = 0x1320; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_QuadrupleTap_Bonuses {
        constexpr uint32_t charges = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t lifesteal = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_nIgnoreStrikeIndex = 0x1328; // int32
        constexpr uint32_t m_bIsAttackAnim = 0x132C; // bool
    }

    namespace CDOTA_Modifier_MonkeyKing_QuadrupleTap_Counter {
        constexpr uint32_t m_nFXStackIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_MonkeyKing_SpringSlow {
        constexpr uint32_t impact_movement_slow = 0x1318; // int32
        constexpr uint32_t m_nSlowPct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_Spring_Thinker {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_MonkeyKing_Strike_Crit {
        constexpr uint32_t strike_crit_mult = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MonkeyKing_Transform {
        constexpr uint32_t m_strDisguise = 0x1318; // CUtlString
        constexpr uint32_t movespeed = 0x1320; // int32
        constexpr uint32_t m_nDisguisedSpeed = 0x1324; // int32
        constexpr uint32_t reveal_radius = 0x1328; // int32
        constexpr uint32_t m_nDisguiseEffectIndex = 0x132C; // ParticleIndex_t
        constexpr uint32_t m_hCourierToClone = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hCreepToClone = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t m_aryBountyRuneSpawners = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bIsFlyingCourier = 0x1350; // bool
        constexpr uint32_t m_bIsRune = 0x1351; // bool
        constexpr uint32_t m_bIsBanana = 0x1352; // bool
        constexpr uint32_t m_bIsFakeAlly = 0x1353; // bool
        constexpr uint32_t m_nMischiefUnitType = 0x1354; // uint32
        constexpr uint32_t m_nMischiefHealthbarOffset = 0x1358; // int32
        constexpr uint32_t invul_duration = 0x135C; // float32
    }

    namespace CDOTA_Modifier_MonkeyKing_TreeDance_Activity {
        constexpr uint32_t m_fAbilityRangePct = 0x1318; // float32
        constexpr uint32_t m_bIsSpring = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Morokai_JungleHealBeam {
        constexpr uint32_t beam_count = 0x1318; // int32
        constexpr uint32_t beam_range = 0x131C; // int32
        constexpr uint32_t beam_radius = 0x1320; // int32
        constexpr uint32_t beam_buffer = 0x1324; // int32
        constexpr uint32_t turn_rate = 0x1328; // int32
        constexpr uint32_t hp_per_second = 0x132C; // int32
        constexpr uint32_t m_flLastThinkTime = 0x1330; // GameTime_t
        constexpr uint32_t m_vecTargetedEntities = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t flLastTreeDestroyed = 0x1368; // float32
        constexpr uint32_t flTreeDestructionCooldown = 0x136C; // float32
    }

    namespace CDOTA_Modifier_Morphling_Adaptive_Strike_Armor {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Morphling_Morph {
        constexpr uint32_t tick_rate = 0x1318; // float32
        constexpr uint32_t bonus_attributes = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Morphling_Morph_Agi {
        constexpr uint32_t mana_cost = 0x1318; // int32
        constexpr uint32_t points_per_tick = 0x131C; // int32
        constexpr uint32_t morph_cooldown = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Morphling_Morph_Str {
        constexpr uint32_t mana_cost = 0x1318; // int32
        constexpr uint32_t points_per_tick = 0x131C; // int32
        constexpr uint32_t morph_cooldown = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Morphling_Replicate {
        constexpr uint32_t m_hTinyTreeWearable = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flBaseAttackRange = 0x131C; // float32
        constexpr uint32_t m_flBaseMovementSpeed = 0x1320; // float32
        constexpr uint32_t m_iszModelName = 0x1328; // CUtlSymbolLarge
        constexpr uint32_t m_iszProjectileName = 0x1330; // CUtlSymbolLarge
        constexpr uint32_t m_iszOriginalModel = 0x1338; // CUtlSymbolLarge
        constexpr uint32_t m_nCopiedHeroID = 0x1340; // int32
        constexpr uint32_t m_fOriginalModelScale = 0x1344; // float32
        constexpr uint32_t m_vecOriginalItems = 0x1348; // CUtlVector< C_EconItemView* >
        constexpr uint32_t m_flOriginalStr = 0x1390; // float32
        constexpr uint32_t m_flOriginalAgi = 0x1394; // float32
        constexpr uint32_t m_flOriginalInt = 0x1398; // float32
        constexpr uint32_t m_iOriginalAttackCapability = 0x139C; // int32
        constexpr uint32_t m_flOriginalHealthPercentage = 0x13A0; // float32
        constexpr uint32_t m_flOriginalManaPercentage = 0x13A4; // float32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Buff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_attack_speed = 0x131C; // int32
        constexpr uint32_t nStrengthSteal = 0x1320; // int32
        constexpr uint32_t nAgilitySteal = 0x1324; // int32
        constexpr uint32_t nIntSteal = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Agility_Debuff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Buff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t nStrengthSteal = 0x131C; // int32
        constexpr uint32_t nAgiSteal = 0x1320; // int32
        constexpr uint32_t nIntSteal = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_All_Debuff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Buff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_spell_amplify = 0x131C; // int32
        constexpr uint32_t nStrengthSteal = 0x1320; // int32
        constexpr uint32_t nIntSteal = 0x1324; // int32
        constexpr uint32_t nAgilitySteal = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Intelligence_Debuff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_spell_amplify = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Buff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_status_resist = 0x131C; // int32
        constexpr uint32_t nStrengthSteal = 0x1320; // int32
        constexpr uint32_t nAgiSteal = 0x1324; // int32
        constexpr uint32_t nIntSteal = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Morphling_ScepterStatsDrain_Strength_Debuff {
        constexpr uint32_t scepter_stat_steal = 0x1318; // int32
        constexpr uint32_t scepter_status_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Morty_Hop {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t height = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t damage_radius = 0x1324; // int32
    }

    namespace CDOTA_Modifier_MoveSpeed_Percentage {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MudGolem_CloakAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_MudGolem_CloakAura_Bonus {
        constexpr uint32_t bonus_magical_armor = 0x1318; // int32
        constexpr uint32_t bonus_magical_armor_creeps = 0x131C; // int32
    }

    namespace CDOTA_Modifier_MudGolem_RockDestroy {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t shard_health = 0x1320; // int32
        constexpr uint32_t shard_damage = 0x1324; // int32
        constexpr uint32_t shard_duration = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Muerta_DeadShot_Fear {
        constexpr uint32_t m_vFearDir = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Muerta_DeadShot_Slow {
        constexpr uint32_t impact_slow_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Muerta_Gunslinger {
        constexpr uint32_t double_shot_chance = 0x1318; // float32
        constexpr uint32_t target_search_bonus_range = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Muerta_PartingShot_PhysicalBodyDebuff {
        constexpr uint32_t m_hSoulEntityClient = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t damage_reduction_percent = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Muerta_PartingShot_ProjectileReturn {
        constexpr uint32_t m_nProjectileHandle = 0x1318; // int32
        constexpr uint32_t m_hPhysicalBody = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Muerta_PartingShot_SoulDebuff {
        constexpr uint32_t ethereal_damage_bonus = 0x1318; // int32
        constexpr uint32_t movement_slow = 0x131C; // int32
        constexpr uint32_t m_hPhysicalBody = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nTetherFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Muerta_PierceTheVeil {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Muerta_PierceTheVeil_Buff {
        constexpr uint32_t modelscale = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t spell_lifesteal = 0x1320; // int32
        constexpr uint32_t attack_projectile_speed_bonus = 0x1324; // int32
        constexpr uint32_t attack_range_bonus = 0x1328; // int32
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x132C; // int32
        constexpr uint32_t m_nScreenFXIndex = 0x1330; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Muerta_Revenant_Thinker {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t hit_radius = 0x131C; // int32
        constexpr uint32_t dead_zone_distance = 0x1320; // int32
        constexpr uint32_t speed_initial = 0x1324; // float32
        constexpr uint32_t speed_max = 0x1328; // float32
        constexpr uint32_t acceleration = 0x132C; // float32
        constexpr uint32_t num_revenants = 0x1330; // int32
        constexpr uint32_t rotation_direction = 0x1334; // int32
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t rotation_initial = 0x133C; // float32
        constexpr uint32_t show_warning = 0x1340; // int32
        constexpr uint32_t m_nWarningFX = 0x1344; // ParticleIndex_t
        constexpr uint32_t m_SpiritDefs = 0x1348; // CUtlVector< sRevenantDef >
    }

    namespace CDOTA_Modifier_Muerta_TheCallingAuraSlow {
        constexpr uint32_t aura_movespeed_slow = 0x1318; // int32
        constexpr uint32_t aura_attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Muertas_Gun_Fear {
        constexpr uint32_t m_vFearDir = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Muertas_Gun_Slow {
        constexpr uint32_t impact_slow_percent = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mutation_Cooldown_Reduction {
        constexpr uint32_t m_iCooldownReduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mutation_Crit_Chance {
        constexpr uint32_t m_iChance = 0x1318; // int32
        constexpr uint32_t m_iDamageMultiplier = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Mutation_DeathExplosionDelayed {
        constexpr uint32_t m_iDamageBase = 0x1318; // int32
        constexpr uint32_t m_iDamagePerLevel = 0x131C; // int32
        constexpr uint32_t m_iRadius = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Mutation_KillstreakPower {
        constexpr uint32_t m_iDamageDonePct = 0x1318; // int32
        constexpr uint32_t m_iDamageTakenPct = 0x131C; // int32
        constexpr uint32_t m_iModelScale = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Mutation_StationaryDamageReduction {
        constexpr uint32_t m_iReductionPct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mutation_Treecutter {
        constexpr uint32_t m_iRadius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Mutation_Vampire {
        constexpr uint32_t m_iLifeStealPct = 0x1318; // int32
        constexpr uint32_t m_iHealthDrain = 0x131C; // int32
    }

    namespace CDOTA_Modifier_NPXBuff {
        constexpr uint32_t m_nCurReduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_NagaSiren_Crit_Passive {
        constexpr uint32_t chance = 0x1318; // int32
        constexpr uint32_t crit = 0x131C; // int32
    }

    namespace CDOTA_Modifier_NagaSiren_RipTide {
        constexpr uint32_t armor_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_NagaSiren_SongOfTheSiren {
        constexpr uint32_t animation_rate = 0x1318; // float32
    }

    namespace CDOTA_Modifier_NagaSiren_SongOfTheSiren_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nAffectedEnemies = 0x131C; // int32
        constexpr uint32_t m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_NagaSiren_SongOfTheSiren_Healing_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nAffectedAllies = 0x131C; // int32
        constexpr uint32_t m_vhAffectedHeroes = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Naga_Siren_Reel_In {
        constexpr uint32_t pull_strength = 0x1318; // float32
        constexpr uint32_t min_pull_distance = 0x131C; // int32
        constexpr uint32_t m_flLastThinkTime = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_Necrolyte_Heartstopper_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t m_bStackCountChanged = 0x131C; // bool
        constexpr uint32_t m_fStackExpireTimes = 0x1320; // CUtlVector< GameTime_t >
    }

    namespace CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Counter {
        constexpr uint32_t mana_regen = 0x1318; // float32
        constexpr uint32_t health_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Necrolyte_Heartstopper_Aura_Effect {
        constexpr uint32_t aura_damage = 0x1318; // float32
        constexpr uint32_t heal_reduction_pct = 0x131C; // int32
        constexpr uint32_t heal_regen_to_damage = 0x1320; // float32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Necrolyte_ReapersScythe {
        constexpr uint32_t stun_duration = 0x1318; // float32
        constexpr uint32_t m_bIllusion = 0x131C; // bool
        constexpr uint32_t m_bArcWardenClone = 0x131D; // bool
        constexpr uint32_t m_bSpiritBear = 0x131E; // bool
    }

    namespace CDOTA_Modifier_Necrolyte_ReapersScythe_RespawnTime {
        constexpr uint32_t hp_per_kill = 0x1318; // float32
        constexpr uint32_t mana_per_kill = 0x131C; // float32
        constexpr uint32_t hp_regen = 0x1320; // float32
        constexpr uint32_t mp_regen = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Necrolyte_Sadist_Active {
        constexpr uint32_t heal_bonus = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t slow_aoe = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Necrolyte_Sadist_Aura_Effect {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necronomicon_Archer_AoE {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necronomicon_Archer_Purge {
        constexpr uint32_t purge_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necronomicon_Warrior_LastWill {
        constexpr uint32_t explosion = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necronomicon_Warrior_ManaBurn {
        constexpr uint32_t burn_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necronomicon_Warrior_Sight {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Necrophos_Death_Seeker_Ethereal {
        constexpr uint32_t magic_resistance_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nemesis_Curse {
        constexpr uint32_t debuff_self = 0x1318; // int32
        constexpr uint32_t debuff_enemy = 0x131C; // float32
        constexpr uint32_t debuff_enemy_duration = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Neutral_Sleep_AI {
        constexpr uint32_t m_iFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Neutral_Upgrade {
        constexpr uint32_t increase_time = 0x1318; // float32
        constexpr uint32_t increase_damage = 0x131C; // int32
        constexpr uint32_t increase_health = 0x1320; // int32
        constexpr uint32_t increase_armor = 0x1324; // float32
        constexpr uint32_t increase_aspd = 0x1328; // int32
        constexpr uint32_t increase_gold = 0x132C; // int32
        constexpr uint32_t increase_xp = 0x1330; // int32
        constexpr uint32_t current_level = 0x1334; // int32
        constexpr uint32_t max_level = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Nevermore_Necromastery {
        constexpr uint32_t necromastery_damage_per_soul = 0x1318; // int32
        constexpr uint32_t necromastery_max_souls = 0x131C; // int32
        constexpr uint32_t necromastery_max_souls_scepter = 0x1320; // int32
        constexpr uint32_t shard_crit_pct = 0x1324; // int32
        constexpr uint32_t shard_souls_per_kill = 0x1328; // int32
        constexpr uint32_t shard_fear_duration = 0x132C; // float32
        constexpr uint32_t m_iParticleSoulsIndex = 0x1330; // ParticleIndex_t
        constexpr uint32_t m_FXIndex = 0x1334; // ParticleIndex_t
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Nevermore_Presence {
        constexpr uint32_t presence_armor_reduction = 0x1318; // int32
        constexpr uint32_t bonus_armor_per_stack = 0x131C; // int32
        constexpr uint32_t m_bWasHidden = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Nevermore_Presence_Aura {
        constexpr uint32_t presence_radius = 0x1318; // int32
        constexpr uint32_t kill_buff_duration = 0x131C; // float32
        constexpr uint32_t m_fLastStackChange = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_Nevermore_Requiem_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Nevermore_Requiem_InvisBreak {
        constexpr uint32_t bDisableInvis = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Nevermore_Requiem_Slow {
        constexpr uint32_t requiem_reduction_ms = 0x1318; // int32
        constexpr uint32_t requiem_reduction_mres = 0x131C; // int32
    }

    namespace CDOTA_Modifier_NianCharge {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_NianChargePinned {
        constexpr uint32_t pinned_damage_amount = 0x1318; // float32
        constexpr uint32_t pinned_damage_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Nian_Apocalypse {
        constexpr uint32_t area_of_effect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nian_Damage_Reflection {
        constexpr uint32_t m_flReflectionStartTime = 0x1318; // GameTime_t
        constexpr uint32_t m_flReflectionAmount = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Nian_Dive {
        constexpr uint32_t pounce_distance = 0x1318; // int32
        constexpr uint32_t pounce_speed = 0x131C; // float32
        constexpr uint32_t pounce_acceleration = 0x1320; // float32
        constexpr uint32_t pounce_radius = 0x1324; // int32
        constexpr uint32_t pounce_damage = 0x1328; // int32
        constexpr uint32_t stun_radius = 0x132C; // int32
        constexpr uint32_t stun_duration = 0x1330; // float32
        constexpr uint32_t leash_duration = 0x1334; // float32
        constexpr uint32_t initial_delay = 0x1338; // float32
        constexpr uint32_t landing_delay = 0x133C; // float32
        constexpr uint32_t vertical_adjust = 0x1340; // float32
        constexpr uint32_t vertical_adjust_max_distance = 0x1344; // float32
        constexpr uint32_t vertical_adjust_min_distance = 0x1348; // float32
        constexpr uint32_t claw_damage = 0x134C; // int32
        constexpr uint32_t claw_damage_radius = 0x1350; // int32
        constexpr uint32_t claw_damage_delay = 0x1354; // float32
        constexpr uint32_t claw_damage_duration = 0x1358; // float32
        constexpr uint32_t m_vHitEntities = 0x1360; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Nian_EruptionPendingThinker {
        constexpr uint32_t tick_count = 0x1318; // int32
        constexpr uint32_t beam_radius = 0x131C; // int32
        constexpr uint32_t m_nTickCount = 0x1320; // int32
        constexpr uint32_t n_FXIndex = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Nian_EruptionThinker {
        constexpr uint32_t explosion_radius = 0x1318; // int32
        constexpr uint32_t damage_interval = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t n_FXIndex = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Nian_Flag_Trap_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nian_Flag_Trapped {
        constexpr uint32_t bonus_spell_damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nian_Frenzy {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_radius = 0x131C; // int32
        constexpr uint32_t stun_radius = 0x1320; // int32
        constexpr uint32_t dive_distance = 0x1324; // float32
        constexpr uint32_t initial_rise_time = 0x1328; // float32
        constexpr uint32_t right_swipe_time = 0x132C; // float32
        constexpr uint32_t left_swipe_time = 0x1330; // float32
        constexpr uint32_t knockdown_duration = 0x1334; // float32
        constexpr uint32_t stun_duration = 0x1338; // float32
        constexpr uint32_t m_nTickCounter = 0x133C; // int32
        constexpr uint32_t m_hEnemies = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Nian_GreaterBash {
        constexpr uint32_t chance_pct = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t movespeed_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Nian_GreaterBash_Speed {
        constexpr uint32_t bonus_movespeed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nian_Hurricane_Whirlpool {
        constexpr uint32_t pull_switch_interval = 0x1318; // float32
        constexpr uint32_t pull_speed = 0x131C; // int32
        constexpr uint32_t m_bForward = 0x1320; // bool
        constexpr uint32_t m_nfxIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Nian_Knockdown {
        constexpr uint32_t m_flStandUpDuration = 0x1318; // float32
        constexpr uint32_t m_flKnockDownDuration = 0x131C; // float32
        constexpr uint32_t m_bDebuff = 0x1320; // bool
        constexpr uint32_t m_bStandingUp = 0x1321; // bool
    }

    namespace CDOTA_Modifier_Nian_Leap {
        constexpr uint32_t pounce_distance = 0x1318; // int32
        constexpr uint32_t pounce_speed = 0x131C; // float32
        constexpr uint32_t pounce_acceleration = 0x1320; // float32
        constexpr uint32_t initial_delay = 0x1324; // float32
        constexpr uint32_t landing_delay = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Nian_Waterball {
        constexpr uint32_t trail_damage_per_second = 0x1318; // int32
        constexpr uint32_t trail_damage_radius = 0x131C; // int32
        constexpr uint32_t m_vFXIndices = 0x1320; // CUtlVector< int32 >
        constexpr uint32_t m_vLocations = 0x1338; // CUtlVector< Vector >
    }

    namespace CDOTA_Modifier_Nian_WhirlpoolThinker {
        constexpr uint32_t pull_radius = 0x1318; // int32
        constexpr uint32_t n_FXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Nian_Whirlpool_Pull {
        constexpr uint32_t pull_radius = 0x1318; // int32
        constexpr uint32_t pull_speed = 0x131C; // int32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t whirlpool_damage = 0x1324; // int32
        constexpr uint32_t tick_rate = 0x1328; // float32
        constexpr uint32_t m_flDamageTick = 0x132C; // GameTime_t
    }

    namespace CDOTA_Modifier_NightStalker_CripplingFear {
        constexpr uint32_t dps = 0x1320; // int32
        constexpr uint32_t tick_rate = 0x1324; // float32
    }

    namespace CDOTA_Modifier_NightStalker_CripplingFear_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_NightStalker_Darkness {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
        constexpr uint32_t hp_regen = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_NightStalker_HunterInTheNight {
        constexpr uint32_t bonus_movement_speed_pct_night = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed_night = 0x131C; // int32
        constexpr uint32_t bonus_status_resist_night = 0x1320; // int32
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_NightStalker_Void {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_NightStalker_Void_ZoneThinker {
        constexpr uint32_t radius_scepter = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nullifier {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t bonus_regen = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Nullifier_Mute {
        constexpr uint32_t slow_interval_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Nyx_Assassin_Burrow {
        constexpr uint32_t health_regen_rate = 0x1328; // float32
        constexpr uint32_t mana_regen_rate = 0x132C; // float32
        constexpr uint32_t damage_reduction = 0x1330; // int32
        constexpr uint32_t m_vecInitialPos = 0x1334; // Vector
    }

    namespace CDOTA_Modifier_Nyx_Assassin_Impale {
        constexpr uint32_t impale_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nyx_Assassin_Jolt_Debuff {
        constexpr uint32_t resist_debuff = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Nyx_Assassin_SpikedCarapace {
        constexpr uint32_t stun_duration = 0x1318; // float32
        constexpr uint32_t m_hProcessedEnemies = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Nyx_Assassin_Vendetta {
        constexpr uint32_t bonus_damage = 0x1328; // int32
        constexpr uint32_t movement_speed = 0x132C; // int32
        constexpr uint32_t shard_movement_speed_bonus = 0x1330; // int32
        constexpr uint32_t mana_removal_pct = 0x1334; // int32
        constexpr uint32_t m_bFreePathing = 0x1338; // bool
        constexpr uint32_t attack_animation_bonus = 0x133C; // int32
        constexpr uint32_t attack_range_bonus = 0x1340; // int32
    }

    namespace CDOTA_Modifier_Nyx_Assassin_Vendetta_Armor_Reduction {
        constexpr uint32_t shard_magic_resist_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Oakheart_Healing {
        constexpr uint32_t heal = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t regen = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_ArcaneOrb {
        constexpr uint32_t mana_pool_damage_pct = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_AstralImprisonment_Prison {
        constexpr uint32_t allied_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t m_bAllowMovement = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Equilibrium {
        constexpr uint32_t proc_chance = 0x1318; // int32
        constexpr uint32_t mana_restore = 0x131C; // int32
        constexpr uint32_t mana_capacity_steal = 0x1320; // float32
        constexpr uint32_t mana_capacity_duration = 0x1324; // float32
        constexpr uint32_t shard_mana_duration = 0x1328; // float32
        constexpr uint32_t scepter_barrier_threshold = 0x132C; // float32
        constexpr uint32_t scepter_barrier_duration = 0x1330; // float32
        constexpr uint32_t scepter_barrier_cooldown = 0x1334; // float32
        constexpr uint32_t scepter_max_mana_barrier_pct = 0x1338; // float32
        constexpr uint32_t spell_lifesteal = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Barrier {
        constexpr uint32_t barrier_amt = 0x1318; // float32
        constexpr uint32_t m_nDamageAbsorbed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_BonusMana {
        constexpr uint32_t shard_bonus_mana = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Buff {
        constexpr uint32_t mana_steal = 0x1318; // int32
        constexpr uint32_t m_flCurrentMana = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Equilibrium_Debuff {
        constexpr uint32_t mana_steal = 0x1318; // int32
        constexpr uint32_t m_flCurrentMana = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_EssenceAura {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_EssenceAura_Effect {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t restore_chance = 0x131C; // int32
        constexpr uint32_t restore_amount = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Obsidian_Destroyer_Mana_Allergy {
        constexpr uint32_t percentage_damage = 0x1318; // int32
        constexpr uint32_t percentage_heal = 0x131C; // int32
    }

    namespace CDOTA_Modifier_OgreMagi_FrostArmor {
        constexpr uint32_t armor_bonus = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_OgreMagi_FrostArmor_Slow {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_OgreSealTotem_Active {
        constexpr uint32_t m_nCurrentBounce = 0x1318; // int32
        constexpr uint32_t leap_distance = 0x131C; // int32
        constexpr uint32_t leap_speed = 0x1320; // float32
        constexpr uint32_t leap_acceleration = 0x1324; // float32
        constexpr uint32_t leap_radius = 0x1328; // int32
        constexpr uint32_t leap_bonus_duration = 0x132C; // float32
        constexpr uint32_t m_bLaunched = 0x1330; // bool
    }

    namespace CDOTA_Modifier_OgreSealTotem_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ogre_Magi_Bloodlust {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t self_bonus = 0x1320; // int32
        constexpr uint32_t modelscale = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Ogre_Magi_DumbLuck {
        constexpr uint32_t mana_per_str = 0x1318; // float32
        constexpr uint32_t mana_regen_per_str = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Ogre_Magi_Fireblast_Multicast {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t multicast_delay = 0x131C; // float32
        constexpr uint32_t m_nMultiCastCount = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Ogre_Magi_Ignite {
        constexpr uint32_t slow_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t burn_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Ogre_Magi_Ignite_Multicast {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t multicast_delay = 0x131C; // float32
        constexpr uint32_t m_nMultiCastCount = 0x1320; // int32
        constexpr uint32_t ignite_multicast_aoe = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Ogre_Magi_Smash_Buff {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t attacks = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Angelic_Flight {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Degen_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Degen_Aura_Effect {
        constexpr uint32_t speed_bonus = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Omniknight_GuardianAngel {
        constexpr uint32_t scepter_status_resist = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Omniknight_HammerOfPurity {
        constexpr uint32_t m_flNextAttackTime = 0x1318; // GameTime_t
        constexpr uint32_t attack_cooldown = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Omniknight_Hammer_Of_Purity_Bomb {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Marty {
        constexpr uint32_t base_strength = 0x1318; // int32
        constexpr uint32_t base_hpregen = 0x131C; // int32
        constexpr uint32_t strength_bonus = 0x1320; // int32
        constexpr uint32_t nDebuffAmount = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Pacify {
        constexpr uint32_t spell_resistance_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Omniknight_Repel {
        constexpr uint32_t status_resistance = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // float32
        constexpr uint32_t bonus_str = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Oracle_FalsePromise {
        constexpr uint32_t m_bWaitingForInvulnerability = 0x1348; // bool
        constexpr uint32_t m_bDisableHealing = 0x1349; // bool
        constexpr uint32_t m_flHealthOnCreated = 0x134C; // float32
        constexpr uint32_t m_nFXIndex = 0x1350; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x1354; // ParticleIndex_t
        constexpr uint32_t m_flRunningDmg = 0x1358; // float32
        constexpr uint32_t m_flRunningHealth = 0x135C; // float32
        constexpr uint32_t bonus_armor = 0x1360; // int32
    }

    namespace CDOTA_Modifier_Oracle_FalsePromise_Invis {
        constexpr uint32_t shard_spell_amp_bonus = 0x1328; // float32
        constexpr uint32_t shard_bat_bonus = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Oracle_PurifyingFlames {
        constexpr uint32_t heal_per_second = 0x1318; // float32
        constexpr uint32_t tick_rate = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Oracle_RainOfDestiny {
        constexpr uint32_t heal_amp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Oracle_RainOfDestiny_Aura {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_nFXIndex = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Orb_Of_Corrosion_Debuff {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t slow_melee = 0x131C; // int32
        constexpr uint32_t slow_range = 0x1320; // int32
        constexpr uint32_t heal_reduction = 0x1324; // int32
        constexpr uint32_t bCasterRanged = 0x1328; // bool
        constexpr uint32_t damage = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Orb_Of_Destruction_Debuff {
        constexpr uint32_t armor_reduction = 0x1318; // int32
        constexpr uint32_t slow_melee = 0x131C; // int32
        constexpr uint32_t slow_range = 0x1320; // int32
        constexpr uint32_t bCasterRanged = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Orb_Of_Revelations {
        constexpr uint32_t bonus_health = 0x1318; // int32
        constexpr uint32_t bonus_mana = 0x131C; // int32
        constexpr uint32_t bonus_mana_regen = 0x1320; // float32
        constexpr uint32_t cast_range_bonus = 0x1324; // int32
        constexpr uint32_t bonus_magical_armor = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Orb_Of_Revelations_Reveal {
        constexpr uint32_t movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_OrchidMalevolence_Debuff {
        constexpr uint32_t silence_damage_percent = 0x1318; // float32
        constexpr uint32_t m_flDamageTaken = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Overflowing_Elixir_Regen {
        constexpr uint32_t health = 0x1318; // int32
        constexpr uint32_t mana = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Pangolier_Gyroshell {
        constexpr uint32_t mp_cost_per_second = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
        constexpr uint32_t forward_move_speed = 0x1320; // float32
        constexpr uint32_t turn_rate_boosted = 0x1324; // float32
        constexpr uint32_t turn_rate = 0x1328; // float32
        constexpr uint32_t hit_radius = 0x132C; // int32
        constexpr uint32_t knockback_radius = 0x1330; // int32
        constexpr uint32_t m_bHitFirstUpdate = 0x1334; // bool
        constexpr uint32_t m_flHitEndTime = 0x1338; // GameTime_t
        constexpr uint32_t hit_recover_time = 0x133C; // float32
        constexpr uint32_t m_flJumpEndTime = 0x1340; // GameTime_t
        constexpr uint32_t jump_recover_time = 0x1344; // float32
        constexpr uint32_t m_flTurnBoostProgress = 0x1348; // float32
        constexpr uint32_t m_flFacingTarget = 0x134C; // float32
        constexpr uint32_t m_bIsJumping = 0x1350; // bool
        constexpr uint32_t m_nFXIndex = 0x1354; // ParticleIndex_t
        constexpr uint32_t m_flTurnHistory = 0x1358; // CUtlVector< float32 >
        constexpr uint32_t m_vecHeroesHitLastRicochet = 0x1370; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesCredited = 0x1388; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesHitCurrentRicochet = 0x13A0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Pangolier_HeartPiercer {
        constexpr uint32_t debuff_delay = 0x1318; // float32
        constexpr uint32_t chance_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Pangolier_HeartPiercer_Debuff {
        constexpr uint32_t slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Pangolier_HeartPiercer_Delay {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t debuff_delay = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Pangolier_LuckyShot {
        constexpr uint32_t chance_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Pangolier_LuckyShot_Disarm {
        constexpr uint32_t armor = 0x1318; // int32
        constexpr uint32_t attack_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Pangolier_LuckyShot_Silence {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Pangolier_Rollup {
        constexpr uint32_t mp_cost_per_second = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
        constexpr uint32_t forward_move_speed = 0x1320; // float32
        constexpr uint32_t turn_rate_boosted = 0x1324; // float32
        constexpr uint32_t turn_rate = 0x1328; // float32
        constexpr uint32_t hit_radius = 0x132C; // int32
        constexpr uint32_t knockback_radius = 0x1330; // int32
        constexpr uint32_t m_bHitFirstUpdate = 0x1334; // bool
        constexpr uint32_t m_flHitEndTime = 0x1338; // GameTime_t
        constexpr uint32_t hit_recover_time = 0x133C; // float32
        constexpr uint32_t m_flJumpEndTime = 0x1340; // GameTime_t
        constexpr uint32_t jump_recover_time = 0x1344; // float32
        constexpr uint32_t m_flTurnBoostProgress = 0x1348; // float32
        constexpr uint32_t m_flFacingTarget = 0x134C; // float32
        constexpr uint32_t m_flLastHeroAttackTime = 0x1350; // GameTime_t
        constexpr uint32_t m_bIsJumping = 0x1354; // bool
        constexpr uint32_t m_nFXIndex = 0x1358; // ParticleIndex_t
        constexpr uint32_t m_flGyroshellDurationRemaining = 0x135C; // float32
        constexpr uint32_t m_flTurnHistory = 0x1360; // CUtlVector< float32 >
        constexpr uint32_t m_vecHeroesHitLastRicochet = 0x1378; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesCredited = 0x1390; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesHitCurrentRicochet = 0x13A8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Pangolier_ShieldCrash_Buff {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
        constexpr uint32_t hero_shield = 0x1320; // int32
        constexpr uint32_t base_shield = 0x1324; // int32
        constexpr uint32_t accummulated_value = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Pangolier_ShieldCrash_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Pangolier_Swashbuckle {
        constexpr uint32_t m_nStrikesLeft = 0x1318; // int32
        constexpr uint32_t attack_interval = 0x131C; // float32
        constexpr uint32_t m_vSpawnPos = 0x1320; // Vector
        constexpr uint32_t m_vStrikeDir = 0x132C; // Vector
        constexpr uint32_t m_vDashDir = 0x1338; // Vector
    }

    namespace CDOTA_Modifier_Pangolier_Swashbuckle_Attack {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Passive_Mango_Tree {
        constexpr uint32_t m_hTree = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nMangoSeconds = 0x131C; // int32
        constexpr uint32_t m_MangoTimer = 0x1320; // CountdownTimer
        constexpr uint32_t m_nRespawnSeconds = 0x1338; // int32
        constexpr uint32_t m_RespawnTimer = 0x1340; // CountdownTimer
        constexpr uint32_t m_nMangosAvailable = 0x1358; // int32
        constexpr uint32_t m_nChannelCount = 0x135C; // int32
    }

    namespace CDOTA_Modifier_Penta_Edged_Sword_Maim {
        constexpr uint32_t maim_slow_movement = 0x1318; // int32
        constexpr uint32_t maim_slow_attack = 0x131C; // int32
    }

    namespace CDOTA_Modifier_PersistentInvisibility {
        constexpr uint32_t fade_delay = 0x1318; // float32
        constexpr uint32_t m_flFadeTime = 0x131C; // float32
        constexpr uint32_t m_flLastActionTime = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_PhantomAssassin_Blur {
        constexpr uint32_t bonus_evasion = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PhantomAssassin_BlurActive {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t fade_duration = 0x132C; // float32
        constexpr uint32_t scepter_fade_duration = 0x1330; // float32
        constexpr uint32_t m_bDestroyNext = 0x1334; // bool
    }

    namespace CDOTA_Modifier_PhantomAssassin_CoupdeGrace {
        constexpr uint32_t crit_bonus = 0x1318; // int32
        constexpr uint32_t crit_chance = 0x131C; // int32
        constexpr uint32_t dagger_crit_chance = 0x1320; // int32
        constexpr uint32_t crit_active = 0x1324; // bool
        constexpr uint32_t duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_PhantomAssassin_Fan_Of_Knives_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_ViewerTimer = 0x1338; // CountdownTimer
        constexpr uint32_t projectile_speed = 0x1350; // int32
        constexpr uint32_t radius = 0x1354; // int32
        constexpr uint32_t duration = 0x1358; // float32
        constexpr uint32_t pct_health_damage_initial = 0x135C; // float32
        constexpr uint32_t max_damage_initial = 0x1360; // float32
    }

    namespace CDOTA_Modifier_PhantomAssassin_Gravestone {
        constexpr uint32_t m_nFXIndex = 0x1318; // int32
        constexpr uint32_t m_bContractGravestoneComplete = 0x131C; // bool
    }

    namespace CDOTA_Modifier_PhantomAssassin_Gravestone_Thinker {
        constexpr uint32_t m_nEpitaph = 0x1318; // int32
        constexpr uint32_t m_nVictimPlayerID = 0x131C; // PlayerID_t
        constexpr uint32_t m_nVictimHeroID = 0x1320; // int32
        constexpr uint32_t m_nCritDmg = 0x1324; // int32
        constexpr uint32_t m_nContractComplete = 0x1328; // int32
    }

    namespace CDOTA_Modifier_PhantomAssassin_PhantomStrike {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t lifesteal_pct = 0x131C; // int32
        constexpr uint32_t creep_lifesteal_penalty = 0x1320; // int32
    }

    namespace CDOTA_Modifier_PhantomAssassin_StiflingDagger {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PhantomAssassin_StiflingDagger_Caster {
        constexpr uint32_t base_damage = 0x1318; // int32
        constexpr uint32_t attack_factor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_PhantomLancer_Doppelwalk_Illusion {
        constexpr uint32_t flDamageTaken = 0x1318; // float32
    }

    namespace CDOTA_Modifier_PhantomLancer_Dopplewalk_Phase {
        constexpr uint32_t vTargetPosition = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_PhantomLancer_Juxtapose {
        constexpr uint32_t proc_chance_pct = 0x1318; // int32
        constexpr uint32_t illusion_proc_chance_pct = 0x131C; // int32
        constexpr uint32_t max_illusions = 0x1320; // int32
        constexpr uint32_t illusion_duration = 0x1324; // float32
        constexpr uint32_t illusion_damage_out_pct = 0x1328; // int32
        constexpr uint32_t illusion_damage_in_pct = 0x132C; // int32
        constexpr uint32_t shard_bonus_illusions = 0x1330; // int32
    }

    namespace CDOTA_Modifier_PhantomLancer_JuxtaposeIllusion {
        constexpr uint32_t m_bstrongIllusion = 0x1318; // bool
    }

    namespace CDOTA_Modifier_PhantomLancer_Juxtapose_Cache {
        constexpr uint32_t m_nControllingPlayer = 0x1318; // PlayerID_t
    }

    namespace CDOTA_Modifier_PhantomLancer_Juxtapose_Invisibility {
        constexpr uint32_t invis_movespeed = 0x1328; // float32
    }

    namespace CDOTA_Modifier_PhantomLancer_Juxtapose_Thinker {
        constexpr uint32_t max_illusions = 0x1318; // int32
        constexpr uint32_t scepter_bonus_illusions = 0x131C; // int32
        constexpr uint32_t illusion_duration = 0x1320; // float32
        constexpr uint32_t illusion_damage_out_pct = 0x1324; // int32
        constexpr uint32_t illusion_damage_in_pct = 0x1328; // int32
        constexpr uint32_t scepter_bonus_duration = 0x132C; // float32
        constexpr uint32_t m_iIllusionsSoFar = 0x1330; // int32
    }

    namespace CDOTA_Modifier_PhantomLancer_PhantomEdge {
        constexpr uint32_t min_distance = 0x1318; // int32
        constexpr uint32_t max_distance = 0x131C; // int32
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_PhantomLancer_PhantomEdge_Agility {
        constexpr uint32_t bonus_agility = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PhantomLancer_PhantomEdge_Boost {
        constexpr uint32_t bonus_speed = 0x1318; // int32
        constexpr uint32_t agility_duration = 0x131C; // float32
        constexpr uint32_t m_bGiveAgility = 0x1320; // bool
        constexpr uint32_t m_hTarget = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_PhantomLancer_SpiritLance {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Phoenix_FireSpiritBurn {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
        constexpr uint32_t damage_per_second = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Phoenix_FireSpiritCount {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Phoenix_IcarusDive {
        constexpr uint32_t m_vSource = 0x1318; // Vector
        constexpr uint32_t m_vTarget = 0x1324; // Vector
        constexpr uint32_t m_vDirection = 0x1330; // Vector
        constexpr uint32_t m_angDirection = 0x133C; // QAngle
        constexpr uint32_t m_flCurrentTime = 0x1348; // float32
        constexpr uint32_t dash_length = 0x134C; // int32
        constexpr uint32_t dash_width = 0x1350; // int32
        constexpr uint32_t hit_radius = 0x1354; // int32
        constexpr uint32_t burn_duration = 0x1358; // float32
        constexpr uint32_t dive_duration = 0x135C; // float32
        constexpr uint32_t impact_damage = 0x1360; // float32
        constexpr uint32_t m_vecHitEntities = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Phoenix_IcarusDiveBurn {
        constexpr uint32_t burn_tick_interval = 0x1318; // float32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t slow_movement_speed_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Phoenix_Sun {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t max_hero_attacks = 0x1320; // int32
        constexpr uint32_t max_hero_attacks_scepter = 0x1324; // int32
        constexpr uint32_t max_hero_attacks_required = 0x1328; // int32
        constexpr uint32_t m_hSecondaryTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttackCount = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Phoenix_SunRay {
        constexpr uint32_t hp_cost_perc_per_second = 0x1318; // int32
        constexpr uint32_t beam_range = 0x131C; // int32
        constexpr uint32_t base_damage = 0x1320; // int32
        constexpr uint32_t base_heal = 0x1324; // int32
        constexpr uint32_t tick_interval = 0x1328; // float32
        constexpr uint32_t forward_move_speed = 0x132C; // float32
        constexpr uint32_t turn_rate_initial = 0x1330; // float32
        constexpr uint32_t turn_rate = 0x1334; // float32
        constexpr uint32_t radius = 0x1338; // int32
        constexpr uint32_t m_flCurrentTime = 0x133C; // float32
        constexpr uint32_t m_flAccumulatedSelfDamage = 0x1340; // float32
        constexpr uint32_t m_bMovingForward = 0x1344; // bool
        constexpr uint32_t m_bTurningFast = 0x1345; // bool
        constexpr uint32_t m_flFacingTarget = 0x1348; // float32
        constexpr uint32_t hp_perc_damage = 0x134C; // float32
        constexpr uint32_t hp_perc_heal = 0x1350; // float32
        constexpr uint32_t blind_duration = 0x1354; // float32
        constexpr uint32_t blind_per_second = 0x1358; // int32
        constexpr uint32_t m_nBeamFXIndex = 0x135C; // ParticleIndex_t
        constexpr uint32_t m_hVisionThinkers = 0x1360; // CHandle< C_BaseEntity >[8]
        constexpr uint32_t m_hBeamEnd = 0x1380; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bCreatedVisionThinkers = 0x1384; // bool
        constexpr uint32_t m_hBeamEndSound = 0x1388; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Phoenix_SunRay_Luminance {
        constexpr uint32_t pct_of_heal_as_attack_speed = 0x1318; // float32
        constexpr uint32_t m_fAttackSpeedBonus = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Phoenix_Sun_Debuff {
        constexpr uint32_t damage_per_sec = 0x1318; // int32
        constexpr uint32_t tick_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Phoenix_Sun_Ray_Slow {
        constexpr uint32_t shard_move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PineCone_AcornShot_BonusDamage {
        constexpr uint32_t acorn_shot_damage = 0x1318; // int32
        constexpr uint32_t base_damage_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_PineCone_AcornShot_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PineCone_ShieldBash_Crit {
        constexpr uint32_t crit_mult = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PineCone_ShieldBash_Slow {
        constexpr uint32_t knockback_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Plague_Wards_Bonus {
        constexpr uint32_t ward_hp = 0x1318; // int32
        constexpr uint32_t ward_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Plague_Wards_Bonus_Range {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Plus_HighFiveRequested {
        constexpr uint32_t acknowledge_range = 0x1318; // int32
        constexpr uint32_t think_interval = 0x131C; // float32
        constexpr uint32_t acknowledged_cooldown = 0x1320; // float32
        constexpr uint32_t m_bAcknowledged = 0x1324; // bool
        constexpr uint32_t m_bFirstThink = 0x1325; // bool
        constexpr uint32_t high_five_level = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Pogo_Stick_Active {
        constexpr uint32_t leap_distance = 0x1318; // int32
        constexpr uint32_t leap_speed = 0x131C; // float32
        constexpr uint32_t leap_acceleration = 0x1320; // float32
        constexpr uint32_t leap_radius = 0x1324; // int32
        constexpr uint32_t leap_bonus_duration = 0x1328; // float32
        constexpr uint32_t m_bLaunched = 0x132C; // bool
    }

    namespace CDOTA_Modifier_PoisonNova_Thinker {
        constexpr uint32_t m_fCurRadius = 0x1318; // float32
        constexpr uint32_t m_fLastThink = 0x131C; // GameTime_t
        constexpr uint32_t m_entitiesHit = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1338; // int32
        constexpr uint32_t radius = 0x133C; // int32
        constexpr uint32_t start_radius = 0x1340; // int32
        constexpr uint32_t duration = 0x1344; // float32
    }

    namespace CDOTA_Modifier_PolarFurbolgUrsaWarrior_ThunderClap {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_PrimalBeast_Onslaught_Movement {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t charge_speed = 0x131C; // float32
        constexpr uint32_t movement_turn_rate = 0x1320; // float32
        constexpr uint32_t knockback_radius = 0x1324; // int32
        constexpr uint32_t knockback_distance = 0x1328; // float32
        constexpr uint32_t knockback_damage = 0x132C; // int32
        constexpr uint32_t m_nEnemyHeroesHit = 0x1330; // int32
        constexpr uint32_t m_flFacingTarget = 0x1334; // float32
        constexpr uint32_t m_nFXIndex = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_hHitEntities = 0x1340; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_PrimalBeast_Onslaught_Windup {
        constexpr uint32_t max_distance = 0x1318; // int32
        constexpr uint32_t max_charge_time = 0x131C; // float32
        constexpr uint32_t turn_rate = 0x1320; // float32
        constexpr uint32_t base_power = 0x1324; // float32
        constexpr uint32_t charge_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_PrimalBeast_Pulverize {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_flOffset = 0x131C; // float32
        constexpr uint32_t m_vStartAngles = 0x1320; // QAngle
        constexpr uint32_t m_vStartLocation = 0x132C; // Vector
        constexpr uint32_t animation_rate = 0x1338; // float32
        constexpr uint32_t m_bInterrupted = 0x133C; // bool
        constexpr uint32_t m_bHasBeenDestroyed = 0x133D; // bool
    }

    namespace CDOTA_Modifier_PrimalBeast_Pulverize_Self {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_vPulverizeCenter = 0x131C; // Vector
        constexpr uint32_t m_vCasterStartPos = 0x1328; // Vector
        constexpr uint32_t splash_radius = 0x1334; // int32
        constexpr uint32_t interval = 0x1338; // float32
        constexpr uint32_t ministun = 0x133C; // float32
        constexpr uint32_t damage = 0x1340; // int32
        constexpr uint32_t bonus_damage_per_hit = 0x1344; // int32
        constexpr uint32_t m_nHitCount = 0x1348; // int32
    }

    namespace CDOTA_Modifier_PrimalBeast_Uproar {
        constexpr uint32_t stack_limit = 0x1318; // int32
        constexpr uint32_t damage_limit = 0x131C; // int32
        constexpr uint32_t stack_duration = 0x1320; // float32
        constexpr uint32_t damage_min = 0x1324; // float32
        constexpr uint32_t damage_max = 0x1328; // float32
        constexpr uint32_t bonus_damage_per_stack = 0x132C; // int32
        constexpr uint32_t m_nFxIndexA = 0x1330; // ParticleIndex_t
        constexpr uint32_t iCur_stack = 0x1334; // int32
        constexpr uint32_t bonus_damage = 0x1338; // int32
        constexpr uint32_t slow_duration = 0x133C; // float32
        constexpr uint32_t m_fTotalDamage = 0x1358; // float32
        constexpr uint32_t m_flLastStackTime = 0x135C; // GameTime_t
    }

    namespace CDOTA_Modifier_PrimalBeast_Uproar_Roared_Self {
        constexpr uint32_t roared_bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t roared_bonus_armor = 0x131C; // int32
        constexpr uint32_t m_nBuffStackCount = 0x1320; // int32
    }

    namespace CDOTA_Modifier_PrimalBeast_Uproar_Slow {
        constexpr uint32_t move_slow_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Primal_Beast_Uproar_Projectile_Thinker {
        constexpr uint32_t projectiles_per_stack = 0x1318; // int32
        constexpr uint32_t projectile_speed = 0x131C; // int32
        constexpr uint32_t projectile_distance = 0x1320; // int32
        constexpr uint32_t projectile_width = 0x1324; // int32
        constexpr uint32_t splinter_angle = 0x1328; // int32
        constexpr uint32_t split_delay = 0x132C; // float32
        constexpr uint32_t projectile_waves = 0x1330; // int32
        constexpr uint32_t m_nCurrentWaveCount = 0x1334; // int32
        constexpr uint32_t tectonic_shift_projectiles = 0x1338; // int32
    }

    namespace CDOTA_Modifier_Primalbeast_Trample {
        constexpr uint32_t effect_radius = 0x1318; // int32
        constexpr uint32_t vLastPos = 0x131C; // Vector
        constexpr uint32_t flCurrentDistance = 0x1328; // float32
        constexpr uint32_t step_distance = 0x132C; // int32
        constexpr uint32_t bonus_magic_resistance = 0x1330; // int32
        constexpr uint32_t m_bIsUnslowable = 0x1334; // bool
    }

    namespace CDOTA_Modifier_Psychic_Headband {
        constexpr uint32_t push_length = 0x1318; // int32
        constexpr uint32_t push_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Puck_Coil_Break_Stun {
        constexpr uint32_t m_vCastLocation = 0x1318; // Vector
        constexpr uint32_t coil_rapid_fire_z_offset = 0x1324; // int32
        constexpr uint32_t coil_rapid_fire_rate = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Puck_Coiled {
        constexpr uint32_t m_vCastLocation = 0x1318; // Vector
        constexpr uint32_t coil_rapid_fire_z_offset = 0x1324; // int32
        constexpr uint32_t coil_rapid_fire_rate = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Puck_DreamCoil_Thinker {
        constexpr uint32_t m_hLinkedEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t coil_radius = 0x1330; // int32
        constexpr uint32_t coil_break_radius = 0x1334; // int32
        constexpr uint32_t coil_initial_damage = 0x1338; // int32
        constexpr uint32_t coil_stun_duration = 0x133C; // float32
        constexpr uint32_t coil_duration = 0x1340; // float32
        constexpr uint32_t coil_break_damage = 0x1344; // int32
        constexpr uint32_t m_FXIndex = 0x1348; // CUtlVector< ParticleIndex_t >
    }

    namespace CDOTA_Modifier_Puck_PhaseShift_AttackBonus {
        constexpr uint32_t shard_bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_PudgeMiniboss_ArmorCorruption {
        constexpr uint32_t armor_reduction_per_stack = 0x1318; // float32
        constexpr uint32_t stack_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_PudgeMiniboss_ArmorCorruptionDebuff {
        constexpr uint32_t armor_reduction_per_stack = 0x1318; // float32
        constexpr uint32_t stack_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_PudgeMiniboss_HatefulStrike {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t maxhp_percent_damage = 0x131C; // int32
        constexpr uint32_t every_n_attacks = 0x1320; // int32
        constexpr uint32_t crit_active = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Pudge_Dismember {
        constexpr uint32_t dismember_damage = 0x1318; // int32
        constexpr uint32_t strength_damage = 0x131C; // float32
        constexpr uint32_t m_nTicks = 0x1320; // int32
        constexpr uint32_t m_nMaxTicks = 0x1324; // int32
        constexpr uint32_t m_flTickRate = 0x1328; // float32
        constexpr uint32_t animation_rate = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Pudge_Dismember_Pull {
        constexpr uint32_t m_vDestination = 0x1318; // Vector
        constexpr uint32_t pull_units_per_second = 0x1324; // int32
        constexpr uint32_t pull_distance_limit = 0x1328; // float32
        constexpr uint32_t animation_rate = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Pudge_FleshHeap {
        constexpr uint32_t magic_resistance = 0x1318; // float32
        constexpr uint32_t damage_block = 0x131C; // float32
        constexpr uint32_t flesh_heap_strength_buff_amount = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Pudge_FleshHeap_Block {
        constexpr uint32_t damage_block = 0x1318; // float32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Pudge_Rot {
        constexpr uint32_t rot_damage = 0x1318; // int32
        constexpr uint32_t rot_slow = 0x131C; // int32
        constexpr uint32_t scepter_rot_regen_reduction_pct = 0x1320; // int32
        constexpr uint32_t m_flLastRotTime = 0x132C; // GameTime_t
        constexpr uint32_t m_bQualifiesAsPotentionalDeny = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Pudge_Swallow {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Pudge_Swallow_Hide {
        constexpr uint32_t order_lock_duration = 0x1318; // float32
        constexpr uint32_t m_fOrderLockDone = 0x131C; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1320; // int32
        constexpr uint32_t shard_regen_pct = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Pugna_Decrepify {
        constexpr uint32_t bonus_spell_damage_pct = 0x1318; // int32
        constexpr uint32_t bonus_heal_amp_pct_allies = 0x131C; // int32
        constexpr uint32_t bonus_movement_speed = 0x1320; // int32
        constexpr uint32_t bonus_movement_speed_allies = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Pugna_LifeDrain {
        constexpr uint32_t health_drain = 0x1318; // int32
        constexpr uint32_t ally_healing = 0x131C; // int32
        constexpr uint32_t tick_rate = 0x1320; // float32
        constexpr uint32_t m_bDoRangeCheck = 0x1324; // bool
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t m_flElapsedTime = 0x132C; // GameTime_t
        constexpr uint32_t m_bPrimary = 0x1330; // bool
        constexpr uint32_t m_bShard = 0x1331; // bool
        constexpr uint32_t m_bFromWard = 0x1332; // bool
        constexpr uint32_t m_hWard = 0x1334; // CHandle< C_BaseEntity >
        constexpr uint32_t spell_amp_drain_duration = 0x1338; // float32
        constexpr uint32_t max_spell_amp_drain_pct = 0x133C; // int32
        constexpr uint32_t spell_amp_drain_rate = 0x1340; // int32
        constexpr uint32_t spell_amp_drain_rate_ward = 0x1344; // int32
        constexpr uint32_t spell_amp_drain_max = 0x1348; // int32
        constexpr uint32_t health_to_mana_rate = 0x134C; // int32
    }

    namespace CDOTA_Modifier_Pugna_LifeDrain_SpellAmp {
        constexpr uint32_t m_bIsFriendly = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Pugna_NetherWard {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t mana_multiplier = 0x131C; // float32
        constexpr uint32_t mana_drained_per_attack = 0x1320; // float32
        constexpr uint32_t attacks_to_destroy = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Pugna_NetherWard_Aura {
        constexpr uint32_t mana_regen = 0x1318; // float32
        constexpr uint32_t spell_damage_reduction = 0x131C; // float32
    }

    namespace CDOTA_Modifier_QueenOfPain_Arcana {
        constexpr uint32_t m_bIsMeleeAttack = 0x1318; // bool
    }

    namespace CDOTA_Modifier_QueenOfPain_ScreamOfPain_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_QueenOfPain_ShadowStrike {
        constexpr uint32_t duration_damage = 0x1318; // int32
        constexpr uint32_t duration_heal = 0x131C; // int32
        constexpr uint32_t movement_slow = 0x1320; // int32
        constexpr uint32_t m_SlowInterval = 0x1328; // CountdownTimer
        constexpr uint32_t m_flSlowStep = 0x1340; // float32
        constexpr uint32_t m_flSlowStepStep = 0x1344; // float32
        constexpr uint32_t attack_buff_duration = 0x1348; // float32
    }

    namespace CDOTA_Modifier_QueenOfPain_SonicWave_Damage {
        constexpr uint32_t m_flDamagePerTick = 0x1318; // float32
        constexpr uint32_t m_nCurrentTick = 0x131C; // int32
        constexpr uint32_t m_nTotalTicks = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Radar_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_bEverFound = 0x131C; // bool
        constexpr uint32_t m_bBonus = 0x131D; // bool
    }

    namespace CDOTA_Modifier_Rattletrap_Cog {
        constexpr uint32_t m_bEnabled = 0x1318; // bool
        constexpr uint32_t trigger_distance = 0x131C; // int32
        constexpr uint32_t push_length = 0x1320; // int32
        constexpr uint32_t push_duration = 0x1324; // float32
        constexpr uint32_t cogs_radius = 0x1328; // int32
        constexpr uint32_t attacks_to_destroy = 0x132C; // int32
        constexpr uint32_t m_iCogIndex = 0x1330; // int32
        constexpr uint32_t m_nFXIndex = 0x1334; // ParticleIndex_t
        constexpr uint32_t vCenter = 0x1338; // Vector
    }

    namespace CDOTA_Modifier_Rattletrap_CogPush {
        constexpr uint32_t m_flStartTime = 0x1318; // GameTime_t
        constexpr uint32_t push_length = 0x131C; // int32
        constexpr uint32_t push_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Barrier {
        constexpr uint32_t magic_barrier = 0x1318; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Leash {
        constexpr uint32_t leash = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Thinker {
        constexpr uint32_t cogs_radius = 0x1318; // int32
        constexpr uint32_t extra_pull_buffer = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Thinker_Leash {
        constexpr uint32_t cogs_radius = 0x1318; // int32
        constexpr uint32_t extra_pull_buffer = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Thinker_Self_Bonuses {
        constexpr uint32_t cogs_radius = 0x1318; // int32
        constexpr uint32_t extra_pull_buffer = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Cog_Thinker_Talent {
        constexpr uint32_t cogs_radius = 0x1318; // int32
        constexpr uint32_t extra_pull_buffer = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_Hookshot {
        constexpr uint32_t speed = 0x1320; // int32
        constexpr uint32_t stun_radius = 0x1324; // float32
        constexpr uint32_t damage = 0x1328; // float32
        constexpr uint32_t duration = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Rattletrap_JetPack {
        constexpr uint32_t m_nMovementSpeed = 0x1318; // int32
        constexpr uint32_t bonus_speed = 0x131C; // int32
        constexpr uint32_t turn_rate = 0x1320; // float32
        constexpr uint32_t m_flStartTime = 0x1324; // GameTime_t
        constexpr uint32_t tick_interval = 0x1328; // float32
        constexpr uint32_t m_flFacingTarget = 0x132C; // float32
        constexpr uint32_t m_nFXIndex = 0x1330; // ParticleIndex_t
        constexpr uint32_t m_flTurnHistory = 0x1338; // CUtlVector< float32 >
        constexpr uint32_t m_vecHeroesHitLastRicochet = 0x1350; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesCredited = 0x1368; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecHeroesHitCurrentRicochet = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Rattletrap_Overclocking {
        constexpr uint32_t m_nOverclockFX = 0x1318; // ParticleIndex_t
        constexpr uint32_t bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t bonus_attack_speed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Rattletrap_RocketFlare {
        constexpr uint32_t projectile_vision_radius = 0x1320; // int32
        constexpr uint32_t projectile_vision_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Rattletrap_RocketFlare_Overclock {
        constexpr uint32_t rocket_flare_interval = 0x1318; // float32
        constexpr uint32_t rocket_flare_offset_pct = 0x131C; // int32
        constexpr uint32_t rocket_flare_rockets = 0x1320; // int32
        constexpr uint32_t m_nRocketsFired = 0x1324; // int32
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t m_vOriginalTarget = 0x132C; // Vector
    }

    namespace CDOTA_Modifier_Rattletrap_RocketFlare_Slow {
        constexpr uint32_t slow_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Razor_Arcana {
        constexpr uint32_t m_bIsMeleeAttack = 0x1318; // bool
        constexpr uint32_t m_bTauntQueued = 0x1319; // bool
    }

    namespace CDOTA_Modifier_Razor_Arcana_EmpoweredState {
        constexpr uint32_t m_nEmpoweredBodyFX = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nEmpoweredWeaponFX = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Razor_Arcana_Kill_Effect {
        constexpr uint32_t m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Razor_EyeOfTheStorm {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t armor_reduction = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Razor_EyeOfTheStorm_Passive {
        constexpr uint32_t passive_area_damage = 0x1318; // int32
        constexpr uint32_t passive_area_interval = 0x131C; // float32
        constexpr uint32_t radius = 0x1320; // int32
        constexpr uint32_t m_bHitNext = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Razor_PlasmaField_Slow {
        constexpr uint32_t slow_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Razor_PlasmaField_Thinker {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_bContracting = 0x1324; // bool
        constexpr uint32_t m_ViewerTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1360; // int32
        constexpr uint32_t radius = 0x1364; // int32
        constexpr uint32_t damage_min = 0x1368; // float32
        constexpr uint32_t damage_max = 0x136C; // float32
        constexpr uint32_t slow_min = 0x1370; // int32
        constexpr uint32_t slow_max = 0x1374; // int32
        constexpr uint32_t slow_duration = 0x1378; // float32
        constexpr uint32_t m_bHasCreatedFx = 0x137C; // bool
        constexpr uint32_t total_ability_time = 0x1380; // float32
    }

    namespace CDOTA_Modifier_Razor_StaticLink {
        constexpr uint32_t flSmoothness = 0x1318; // float32
        constexpr uint32_t drain_duration = 0x131C; // float32
        constexpr uint32_t drain_rate = 0x1320; // int32
        constexpr uint32_t drain_range = 0x1324; // int32
        constexpr uint32_t drain_range_buffer = 0x1328; // int32
        constexpr uint32_t m_hTarget = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iTotalDrainAmount = 0x1330; // int32
        constexpr uint32_t pull_speed = 0x1334; // int32
        constexpr uint32_t min_pull_range = 0x1338; // int32
        constexpr uint32_t m_iLinkIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_pBuffPositive = 0x1340; // CDOTA_Buff*
        constexpr uint32_t m_pNegative = 0x1348; // CDOTA_Buff*
        constexpr uint32_t m_flLastThinkTime = 0x1350; // GameTime_t
    }

    namespace CDOTA_Modifier_Razor_StaticLink_Buff {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t drain_rate = 0x131C; // int32
        constexpr uint32_t drain_length = 0x1320; // float32
        constexpr uint32_t attack_speed_factor = 0x1324; // int32
        constexpr uint32_t drain_armor = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Razor_StaticLink_Debuff {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t attack_speed_factor = 0x131C; // int32
        constexpr uint32_t drain_rate = 0x1320; // int32
        constexpr uint32_t drain_armor = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Razor_UnstableCurrent_Aura {
        constexpr uint32_t self_movement_speed_pct = 0x1318; // int32
        constexpr uint32_t strike_pct_chance = 0x131C; // int32
        constexpr uint32_t strike_damage = 0x1320; // float32
        constexpr uint32_t strike_move_slow_pct = 0x1324; // int32
        constexpr uint32_t strike_search_radius = 0x1328; // int32
        constexpr uint32_t strike_target_count = 0x132C; // int32
        constexpr uint32_t strike_slow_duration = 0x1330; // float32
        constexpr uint32_t strike_internal_cd = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Razor_UnstableCurrent_Delayed_Damage {
        constexpr uint32_t strike_damage = 0x1318; // float32
        constexpr uint32_t strike_slow_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Razor_UnstableCurrent_Slow {
        constexpr uint32_t strike_move_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Repair_Kit {
        constexpr uint32_t health_regen = 0x1318; // float32
        constexpr uint32_t armor_bonus = 0x131C; // int32
        constexpr uint32_t multishot_count = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Riki_Backstab {
        constexpr uint32_t fade_delay = 0x1328; // float32
        constexpr uint32_t backstab_angle = 0x132C; // int32
        constexpr uint32_t cleave = 0x1330; // int32
        constexpr uint32_t damage_multiplier = 0x1334; // float32
        constexpr uint32_t bonus_xp_kill = 0x1338; // float32
        constexpr uint32_t bonus_xp_assist = 0x133C; // float32
        constexpr uint32_t m_bBackstab = 0x1340; // bool
    }

    namespace CDOTA_Modifier_Riki_Permanent_Invisibility {
        constexpr uint32_t movement_speed = 0x1328; // int32
        constexpr uint32_t fade_delay = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Riki_Poison_Dart {
        constexpr uint32_t wake_damage_limit = 0x1318; // int32
        constexpr uint32_t m_flDamageTaken = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Riki_Poison_Dart_Debuff {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Riki_SmokeScreen {
        constexpr uint32_t miss_rate = 0x1318; // int32
        constexpr uint32_t dodge_chance = 0x131C; // int32
        constexpr uint32_t block_targeting = 0x1320; // int32
        constexpr uint32_t armor_reduction = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Riki_SmokeScreenThinker {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Riki_TricksOfTheTrade_Phase {
        constexpr uint32_t m_nFxIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_Timer = 0x1320; // CountdownTimer
        constexpr uint32_t m_hPreviousTarget = 0x1338; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nSucceessiveHits = 0x133C; // int32
        constexpr uint32_t damage_pct = 0x1340; // int32
        constexpr uint32_t agility_pct = 0x1344; // int32
    }

    namespace CDOTA_Modifier_Roshan_Bash {
        constexpr uint32_t bash_chance = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t stun_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Roshan_DevotionAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Roshan_Moving {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bFlipped = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Roshan_RevengeRoar {
        constexpr uint32_t damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Roshan_Slam {
        constexpr uint32_t slow_amount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Roshans_Banner_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t hp_bonus = 0x131C; // int32
        constexpr uint32_t damage_bonus = 0x1320; // int32
        constexpr uint32_t model_scale = 0x1324; // int32
        constexpr uint32_t buff_linger_duration = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Roshans_Banner_Effect {
        constexpr uint32_t damage_bonus = 0x1318; // int32
        constexpr uint32_t hp_bonus = 0x131C; // int32
        constexpr uint32_t model_scale = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Roshans_Banner_HP {
        constexpr uint32_t health = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Royal_Jelly_Regen {
        constexpr uint32_t health_regen = 0x1318; // float32
        constexpr uint32_t mana_regen = 0x131C; // float32
        constexpr uint32_t charges = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Royale_With_Cheese {
        constexpr uint32_t shield = 0x1318; // float32
        constexpr uint32_t regen = 0x131C; // float32
        constexpr uint32_t idle = 0x1320; // float32
        constexpr uint32_t m_nDamageAbsorbed = 0x1324; // int32
        constexpr uint32_t m_timeLastTick = 0x1328; // GameTime_t
        constexpr uint32_t m_timeLastDamage = 0x132C; // GameTime_t
        constexpr uint32_t nFXIndex = 0x1330; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Rubick_Arcane_Supremacy {
        constexpr uint32_t cast_range = 0x1318; // int32
        constexpr uint32_t spell_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rubick_FadeBolt {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t jump_damage_reduction_pct = 0x1320; // int32
        constexpr uint32_t jump_delay = 0x1324; // float32
        constexpr uint32_t m_iCurJumpCount = 0x1328; // int32
        constexpr uint32_t m_vCurTargetLoc = 0x132C; // Vector
        constexpr uint32_t m_hHitEntities = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Rubick_FadeBoltBuff {
        constexpr uint32_t attack_damage_bonus = 0x1318; // int32
        constexpr uint32_t attack_damage_reduction = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rubick_FadeBoltDebuff {
        constexpr uint32_t attack_damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Rubick_NullField {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Rubick_NullField_Effect {
        constexpr uint32_t magic_damage_reduction_pct = 0x1318; // int32
        constexpr uint32_t m_bWasHidden = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Rubick_SpellSteal {
        constexpr uint32_t m_strActivityModifier = 0x1318; // CUtlString
        constexpr uint32_t stolen_debuff_amp = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Rubick_Telekinesis {
        constexpr uint32_t m_fStartTime = 0x1318; // GameTime_t
        constexpr uint32_t m_fEndTime = 0x131C; // GameTime_t
        constexpr uint32_t m_fTargetHeight = 0x1320; // float32
        constexpr uint32_t m_fCurHeight = 0x1324; // float32
        constexpr uint32_t m_vStartLoc = 0x1328; // Vector
        constexpr uint32_t m_vCurLoc = 0x1334; // Vector
        constexpr uint32_t max_land_distance = 0x1340; // int32
        constexpr uint32_t fall_duration = 0x1344; // float32
        constexpr uint32_t m_bOverrideDuration = 0x1348; // bool
        constexpr uint32_t m_flOverrideDuration = 0x134C; // float32
    }

    namespace CDOTA_Modifier_Rune_Arcane {
        constexpr uint32_t m_iCooldownReductionPct = 0x1318; // int32
        constexpr uint32_t m_iCostReductionPct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Rune_ExtraDamage {
        constexpr uint32_t m_iAdditionalDamagePct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Rune_Shield {
        constexpr uint32_t damage_absorb = 0x1318; // int32
        constexpr uint32_t m_bStartedTimer = 0x131C; // bool
        constexpr uint32_t m_nDamageAbsorbed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Safety_Bubble {
        constexpr uint32_t m_nDamageAbsorbed = 0x1318; // int32
        constexpr uint32_t m_timeLastDamage = 0x131C; // GameTime_t
        constexpr uint32_t bonus_hp_regen = 0x1320; // int32
        constexpr uint32_t shield = 0x1324; // int32
        constexpr uint32_t restore_time = 0x1328; // float32
    }

    namespace CDOTA_Modifier_SandKing_CausticFinale {
        constexpr uint32_t caustic_finale_duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_SandKing_CausticFinaleOrb {
        constexpr uint32_t caustic_finale_radius = 0x1318; // int32
        constexpr uint32_t caustic_finale_damage_base = 0x131C; // int32
        constexpr uint32_t caustic_finale_damage_pct = 0x1320; // int32
        constexpr uint32_t caustic_finale_slow = 0x1324; // int32
    }

    namespace CDOTA_Modifier_SandKing_Epicenter {
        constexpr uint32_t epicenter_radius_base = 0x1318; // int32
        constexpr uint32_t epicenter_radius_increment = 0x131C; // int32
        constexpr uint32_t epicenter_pulses = 0x1320; // int32
        constexpr uint32_t epicenter_radius = 0x1324; // int32[16]
        constexpr uint32_t m_iMaxPulses = 0x1364; // int32
        constexpr uint32_t m_iPulseCount = 0x1368; // int32
    }

    namespace CDOTA_Modifier_SandKing_Epicenter_Slow {
        constexpr uint32_t epicenter_slow = 0x1318; // int32
        constexpr uint32_t epicenter_slow_as = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SandKing_SandStorm {
        constexpr uint32_t sand_storm_radius = 0x1328; // int32
        constexpr uint32_t sand_storm_damage = 0x132C; // int32
        constexpr uint32_t damage_tick_rate = 0x1330; // float32
        constexpr uint32_t m_flLastDamageTime = 0x1334; // GameTime_t
        constexpr uint32_t m_nSandStormParticleIndex1 = 0x1338; // ParticleIndex_t
        constexpr uint32_t m_nSandStormParticleIndex2 = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_hThinker = 0x1348; // CHandle< C_BaseEntity >
        constexpr uint32_t sand_storm_move_speed = 0x134C; // int32
        constexpr uint32_t vecSpawnPos = 0x1350; // Vector
        constexpr uint32_t m_iExplosionQuadrant = 0x135C; // int32
        constexpr uint32_t m_iExplosionDistance = 0x1360; // int32
    }

    namespace CDOTA_Modifier_SandKing_SandStorm_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t blind = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SandKing_SandStorm_Slow_Aura_Thinker {
        constexpr uint32_t sand_storm_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sand_King_BurrowStrike {
        constexpr uint32_t m_vPopupLocation = 0x1318; // Vector
        constexpr uint32_t m_bTeleported = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Sand_King_Shard {
        constexpr uint32_t shard_move_distance = 0x1318; // float32
        constexpr uint32_t shard_interval = 0x131C; // float32
        constexpr uint32_t vLastPos = 0x1320; // Vector
        constexpr uint32_t m_fAccumulatedDistance = 0x132C; // float32
    }

    namespace CDOTA_Modifier_SatyrHellcaller_UnholyAura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SatyrHellcaller_UnholyAura_Bonus {
        constexpr uint32_t health_regen = 0x1318; // float32
    }

    namespace CDOTA_Modifier_SatyrSoulstealer_ManaBurn {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SatyrTrickster_Purge {
        constexpr uint32_t purge_rate = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ScoutBonuses {
        constexpr uint32_t reveal_radius = 0x1318; // int32
        constexpr uint32_t increase_health = 0x131C; // float32
        constexpr uint32_t max_health = 0x1320; // int32
        constexpr uint32_t increase_armor = 0x1324; // float32
        constexpr uint32_t max_armor = 0x1328; // float32
    }

    namespace CDOTA_Modifier_ScoutVisible {
        constexpr uint32_t reveal_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ScriptedMotionController {
        constexpr uint32_t m_hHorizontalControlFunction = 0x1318; // HSCRIPT
        constexpr uint32_t m_hVerticalControlFunction = 0x1320; // HSCRIPT
        constexpr uint32_t m_hOnDestroyFunction = 0x1328; // HSCRIPT
        constexpr uint32_t m_parameterTable = 0x1330; // CVariantBase< CVariantDefaultAllocator >
    }

    namespace CDOTA_Modifier_Seasonal_Diretide2020_HighFiveRequested {
        constexpr uint32_t acknowledge_range = 0x1318; // int32
        constexpr uint32_t think_interval = 0x131C; // float32
        constexpr uint32_t acknowledged_cooldown = 0x1320; // float32
        constexpr uint32_t m_bAcknowledged = 0x1324; // bool
        constexpr uint32_t m_bFirstThink = 0x1325; // bool
        constexpr uint32_t high_five_level = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Seasonal_Penguin {
        constexpr uint32_t m_fLifetimeGained = 0x1318; // float32
        constexpr uint32_t m_vTargetPos = 0x131C; // Vector
        constexpr uint32_t m_nCurrentSpeed = 0x1328; // int32
        constexpr uint32_t m_fLastBumpTime = 0x132C; // GameTime_t
        constexpr uint32_t m_vLastPos = 0x1330; // Vector
        constexpr uint32_t m_hLastHit = 0x133C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vDir = 0x1340; // Vector
        constexpr uint32_t m_vRunEndPos = 0x134C; // Vector
        constexpr uint32_t m_bIsInInitialRun = 0x1358; // bool
        constexpr uint32_t m_vJumpEndPos = 0x135C; // Vector
        constexpr uint32_t m_bPlayedVroomSinceLastCrash = 0x1368; // bool
        constexpr uint32_t m_nVroomFX = 0x136C; // ParticleIndex_t
        constexpr uint32_t m_fLastSpeedStepTime = 0x1370; // GameTime_t
        constexpr uint32_t m_fLastSpeechTime = 0x1374; // GameTime_t
        constexpr uint32_t m_nFXStackIndex = 0x1378; // ParticleIndex_t
        constexpr uint32_t m_nBumpsSinceLastCrash = 0x137C; // int32
        constexpr uint32_t m_hLastBumpingHero = 0x1380; // CHandle< C_BaseEntity >
        constexpr uint32_t initial_speed = 0x1384; // int32
        constexpr uint32_t max_speed = 0x1388; // int32
        constexpr uint32_t speed_step = 0x138C; // int32
        constexpr uint32_t speed_step_interval = 0x1390; // float32
        constexpr uint32_t bump_delay = 0x1394; // float32
        constexpr uint32_t bump_delay_absolute = 0x1398; // float32
        constexpr uint32_t bump_collision_radius = 0x139C; // int32
        constexpr uint32_t run_distance = 0x13A0; // int32
        constexpr uint32_t jump_distance = 0x13A4; // int32
        constexpr uint32_t speed_after_crash = 0x13A8; // int32
        constexpr uint32_t speed_gain_per_hero_bump = 0x13AC; // int32
        constexpr uint32_t max_gainable_lifetime = 0x13B0; // float32
        constexpr uint32_t lifetime_gain_per_hero_bump = 0x13B4; // float32
        constexpr uint32_t min_speech_repeat_time = 0x13B8; // float32
    }

    namespace CDOTA_Modifier_Seasonal_Summon_CNY_Balloon_Thinker {
        constexpr uint32_t speed = 0x1318; // float32
        constexpr uint32_t min_distance_before_bounce = 0x131C; // int32
        constexpr uint32_t drag = 0x1320; // float32
        constexpr uint32_t max_height = 0x1324; // float32
        constexpr uint32_t max_vertical_move_time = 0x1328; // float32
        constexpr uint32_t bounce_turn_angle = 0x132C; // float32
        constexpr uint32_t bounce_turn_angle_tree = 0x1330; // float32
        constexpr uint32_t bounce_delay = 0x1334; // float32
        constexpr uint32_t m_vLastPos = 0x1338; // Vector
        constexpr uint32_t m_vDir = 0x1344; // Vector
        constexpr uint32_t m_flSpeed = 0x1350; // float32
        constexpr uint32_t m_flDistRemaining = 0x1354; // float32
        constexpr uint32_t m_flTreeTimeRemaining = 0x1358; // float32
        constexpr uint32_t m_hLastHit = 0x135C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Seasonal_Summon_Common_Thinker {
        constexpr uint32_t grace_period = 0x1318; // float32
        constexpr uint32_t search_distance = 0x131C; // int32
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Seasonal_Summon_Snowman_Thinker {
        constexpr uint32_t grace_period = 0x1318; // float32
        constexpr uint32_t search_distance = 0x131C; // int32
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Thinker {
        constexpr uint32_t speed = 0x1318; // float32
        constexpr uint32_t min_distance_before_bounce = 0x131C; // int32
        constexpr uint32_t drag = 0x1320; // float32
        constexpr uint32_t max_height = 0x1324; // float32
        constexpr uint32_t max_vertical_move_time = 0x1328; // float32
        constexpr uint32_t bounce_turn_angle = 0x132C; // float32
        constexpr uint32_t bounce_turn_angle_tree = 0x1330; // float32
        constexpr uint32_t bounce_delay = 0x1334; // float32
        constexpr uint32_t max_bounces = 0x1338; // int32
        constexpr uint32_t max_model_scale = 0x133C; // float32
        constexpr uint32_t power_growth_exponent = 0x1340; // float32
        constexpr uint32_t m_vLastPos = 0x1344; // Vector
        constexpr uint32_t m_vDir = 0x1350; // Vector
        constexpr uint32_t m_flSpeed = 0x135C; // float32
        constexpr uint32_t m_flDistRemaining = 0x1360; // float32
        constexpr uint32_t m_flTreeTimeRemaining = 0x1364; // float32
        constexpr uint32_t m_nTimesBounced = 0x1368; // int32
        constexpr uint32_t m_flModelScale = 0x136C; // float32
        constexpr uint32_t m_hLastHit = 0x1370; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Seasonal_Summon_TI11_Balloon_Visuals {
        constexpr uint32_t model_scale_per_stack = 0x1318; // float32
        constexpr uint32_t m_bIsRadiant = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Seasonal_Summon_TI9_Balloon_Thinker {
        constexpr uint32_t speed = 0x1318; // float32
        constexpr uint32_t min_distance_before_bounce = 0x131C; // int32
        constexpr uint32_t drag = 0x1320; // float32
        constexpr uint32_t max_height = 0x1324; // float32
        constexpr uint32_t max_vertical_move_time = 0x1328; // float32
        constexpr uint32_t bounce_turn_angle = 0x132C; // float32
        constexpr uint32_t bounce_turn_angle_tree = 0x1330; // float32
        constexpr uint32_t bounce_delay = 0x1334; // float32
        constexpr uint32_t m_vLastPos = 0x1338; // Vector
        constexpr uint32_t m_vDir = 0x1344; // Vector
        constexpr uint32_t m_flSpeed = 0x1350; // float32
        constexpr uint32_t m_flDistRemaining = 0x1354; // float32
        constexpr uint32_t m_flTreeTimeRemaining = 0x1358; // float32
        constexpr uint32_t m_hLastHit = 0x135C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Seasonal_TI10_DiscoBall_Channeling {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nGesture = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Seasonal_TI10_HighFiveRequested {
        constexpr uint32_t acknowledge_range = 0x1318; // int32
        constexpr uint32_t think_interval = 0x131C; // float32
        constexpr uint32_t acknowledged_cooldown = 0x1320; // float32
        constexpr uint32_t m_bAcknowledged = 0x1324; // bool
        constexpr uint32_t m_bFirstThink = 0x1325; // bool
        constexpr uint32_t high_five_level = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Seasonal_TI10_Portal {
        constexpr uint32_t m_vSpawnPos = 0x1318; // Vector
        constexpr uint32_t m_vecEmissions = 0x1328; // CUtlVector< Vector >
        constexpr uint32_t m_bChatSent = 0x1340; // bool
        constexpr uint32_t m_nPhase = 0x1344; // int32
        constexpr uint32_t m_nNumEmitted = 0x1348; // int32
        constexpr uint32_t m_nNumDrops = 0x134C; // int32
        constexpr uint32_t m_flStartTime = 0x1350; // GameTime_t
        constexpr uint32_t m_flLastEmitTime = 0x1354; // GameTime_t
        constexpr uint32_t m_bIsOnRadiant = 0x1358; // bool
        constexpr uint32_t m_bUseLargeEmit = 0x1359; // bool
        constexpr uint32_t m_nOutcome = 0x135C; // int32
        constexpr uint32_t PHASE_OPEN = 0x1370; // int32
        constexpr uint32_t PHASE_EMIT = 0x1374; // int32
        constexpr uint32_t PHASE_EMIT_DONE = 0x1378; // int32
        constexpr uint32_t PHASE_CLOSE = 0x137C; // int32
    }

    namespace CDOTA_Modifier_Seasonal_TI10_SoccerBall {
        constexpr uint32_t m_vPost1 = 0x1318; // Vector
        constexpr uint32_t m_vPost2 = 0x1324; // Vector
        constexpr uint32_t m_vPostForward = 0x1330; // Vector
        constexpr uint32_t m_nPost1FXIndex = 0x133C; // ParticleIndex_t
        constexpr uint32_t m_nPost2FXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_nPost3FXIndex = 0x1344; // ParticleIndex_t
        constexpr uint32_t PHASE_START = 0x1348; // int32
        constexpr uint32_t PHASE_GESTURE = 0x134C; // int32
        constexpr uint32_t PHASE_FX = 0x1350; // int32
        constexpr uint32_t PHASE_MOTION = 0x1354; // int32
        constexpr uint32_t PHASE_IMPACT = 0x1358; // int32
        constexpr uint32_t PHASE_FAIL = 0x135C; // int32
        constexpr uint32_t PHASE_CROSSED_GOAL = 0x1360; // int32
        constexpr uint32_t PHASE_GOAL = 0x1364; // int32
        constexpr uint32_t tick_interval = 0x1368; // float32
        constexpr uint32_t forward_move_speed = 0x136C; // float32
        constexpr uint32_t magnus_coefficient = 0x1370; // float32
        constexpr uint32_t magnus_falloff = 0x1374; // float32
        constexpr uint32_t drag_coefficient = 0x1378; // float32
        constexpr uint32_t min_delay = 0x137C; // float32
        constexpr uint32_t max_delay = 0x1380; // float32
        constexpr uint32_t hit_radius = 0x1384; // int32
        constexpr uint32_t m_nFXIndex = 0x1388; // ParticleIndex_t
        constexpr uint32_t m_vVelocity = 0x138C; // Vector
        constexpr uint32_t m_vSpawnPos = 0x1398; // Vector
        constexpr uint32_t m_vTargetPos = 0x13A4; // Vector
        constexpr uint32_t m_nPhase = 0x13B0; // int32
        constexpr uint32_t m_nHits = 0x13B4; // int32
        constexpr uint32_t m_flMagnusValue = 0x13B8; // float32
        constexpr uint32_t m_flStartTime = 0x13BC; // GameTime_t
        constexpr uint32_t m_flDelay = 0x13C0; // float32
        constexpr uint32_t m_flStateChangeTime = 0x13C4; // GameTime_t
        constexpr uint32_t m_bFirstThink = 0x13C8; // bool
        constexpr uint32_t m_bGroundHit = 0x13C9; // bool
        constexpr uint32_t m_nTargetPlayerID = 0x13CC; // PlayerID_t
        constexpr uint32_t m_flCurTime = 0x13D0; // float32
        constexpr uint32_t m_flStartZ = 0x13D4; // float32
        constexpr uint32_t m_flAirTime = 0x13D8; // float32
        constexpr uint32_t m_flHeight = 0x13DC; // float32
    }

    namespace CDOTA_Modifier_Seasonal_TI11_BubbleGun {
        constexpr uint32_t think_interval = 0x1318; // float32
        constexpr uint32_t max_charges = 0x131C; // int32
        constexpr uint32_t m_nChargesUsed = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Seasonal_TI11_CongaLineSlow {
        constexpr uint32_t m_flMaxSpeed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Seasonal_TI11_DuelAccepted {
        constexpr uint32_t m_nDuelOpponent = 0x1318; // PlayerID_t
    }

    namespace CDOTA_Modifier_Seasonal_TI11_RockPaperScissors {
        constexpr uint32_t challenge_duration = 0x1318; // float32
        constexpr uint32_t reveal_duration = 0x131C; // float32
        constexpr uint32_t reveal_delay = 0x1320; // float32
        constexpr uint32_t completed_cooldown = 0x1324; // float32
        constexpr uint32_t think_interval = 0x1328; // float32
        constexpr uint32_t acknowledge_range = 0x132C; // float32
        constexpr uint32_t m_flRevealTime = 0x1334; // GameTime_t
        constexpr uint32_t m_nOverheadFXIndex = 0x1338; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Seasonal_TI11_RockPaperScissors_Playing {
        constexpr uint32_t input_duration = 0x1318; // float32
        constexpr uint32_t think_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Seasonal_TI9_Shovel_BabyRoshan {
        constexpr uint32_t m_bFirstThink = 0x1318; // bool
        constexpr uint32_t m_flStartTime = 0x131C; // GameTime_t
        constexpr uint32_t m_vecStartingPos = 0x1320; // Vector
    }

    namespace CDOTA_Modifier_Seasonal_TI9_Shovel_Stasis_Trap {
        constexpr uint32_t m_hHero = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Seer_Stone {
        constexpr uint32_t cast_range_bonus = 0x1318; // int32
        constexpr uint32_t vision_bonus = 0x131C; // int32
        constexpr uint32_t mana_regen = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Seer_Stone_Truesight {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_SetScaleset {
        constexpr uint32_t m_Scaleset = 0x1318; // CUtlString
        constexpr uint32_t m_bActive = 0x1320; // bool
    }

    namespace CDOTA_Modifier_ShadowAmulet_Fade {
        constexpr uint32_t fade_time = 0x1318; // float32
        constexpr uint32_t m_flFadeTime = 0x131C; // GameTime_t
        constexpr uint32_t m_bFaded = 0x1320; // bool
    }

    namespace CDOTA_Modifier_ShadowShaman_SerpentWard {
        constexpr uint32_t scepter_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_ShadowShaman_Shackles {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t total_damage = 0x131C; // float32
        constexpr uint32_t channel_time = 0x1320; // float32
    }

    namespace CDOTA_Modifier_ShadowShaman_Voodoo {
        constexpr uint32_t movespeed = 0x1318; // int32
        constexpr uint32_t damage_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Shadow_Demon_Disruption {
        constexpr uint32_t m_flHealth = 0x1318; // float32
        constexpr uint32_t m_flDisseminate_Duration = 0x131C; // float32
        constexpr uint32_t m_hDisseminateAbility = 0x1320; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Shadow_Demon_Disruption_Bonus_Damage {
        constexpr uint32_t illusion_flat_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Shadow_Demon_Disseminate {
        constexpr uint32_t damage_reflection_pct = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t m_flLastDispersionPulseEffectTime = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_Shadow_Demon_Shadow_Poison {
        constexpr uint32_t stack_damage = 0x1318; // float32
        constexpr uint32_t bonus_stack_damage = 0x131C; // float32
        constexpr uint32_t max_multiply_stacks = 0x1320; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1324; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Shadow_Demon_Soul_Catcher {
        constexpr uint32_t actual_health_lost = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Shadow_Demon_Soul_Catcher_Illusion {
        constexpr uint32_t hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Shadow_Demon_Soul_Catcher_SpellAmp {
        constexpr uint32_t num_heroes = 0x1318; // int32
        constexpr uint32_t bonus_spell_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Shadowraze_Counter {
        constexpr uint32_t shadowraze_cooldown = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Shadowraze_Debuff {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
        constexpr uint32_t turn_rate_pct = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SheepStick_Debuff {
        constexpr uint32_t sheep_movement_speed = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Shredder_Chakram_Debuff {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t slow_health_percentage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Shredder_Chakram_Thinker {
        constexpr uint32_t damage_per_second = 0x1318; // int32
        constexpr uint32_t mana_per_second = 0x131C; // float32
        constexpr uint32_t radius = 0x1320; // float32
        constexpr uint32_t break_distance = 0x1324; // float32
        constexpr uint32_t damage_interval = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Shredder_Flamethrower {
        constexpr uint32_t length = 0x1318; // int32
        constexpr uint32_t width = 0x131C; // int32
        constexpr uint32_t damage_per_second = 0x1320; // int32
        constexpr uint32_t m_nBeamFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_hBeamEnd = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flLastHit = 0x132C; // GameTime_t
        constexpr uint32_t m_vecBurningTrees = 0x1330; // CUtlVector< C_BaseEntity* >
    }

    namespace CDOTA_Modifier_Shredder_Flamethrower_Damage {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nActiveFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nActiveStatusFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t damage_per_second = 0x1324; // float32
        constexpr uint32_t building_dmg_pct = 0x1328; // int32
        constexpr uint32_t move_slow_pct = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Shredder_Flamethrower_TreeFire_Thinker {
        constexpr uint32_t m_vecTreeFires = 0x1318; // CUtlVector< CUtlPair< CHandle< C_BaseEntity >, GameTime_t > >
        constexpr uint32_t m_bCleanupWhenEmpty = 0x1330; // bool
    }

    namespace CDOTA_Modifier_Shredder_ReactiveArmor_Bomb {
        constexpr uint32_t initial_shield = 0x1318; // float32
        constexpr uint32_t max_shield = 0x131C; // float32
        constexpr uint32_t shield_per_sec = 0x1320; // float32
        constexpr uint32_t shield_per_sec_per_enemy = 0x1324; // float32
        constexpr uint32_t duration = 0x1328; // float32
        constexpr uint32_t base_explosion = 0x132C; // float32
        constexpr uint32_t radius = 0x1330; // int32
        constexpr uint32_t explosion_radius = 0x1334; // int32
        constexpr uint32_t m_nDamageAbsorbed = 0x1338; // int32
        constexpr uint32_t m_timeLastTick = 0x133C; // GameTime_t
        constexpr uint32_t m_StartTime = 0x1340; // GameTime_t
        constexpr uint32_t m_nLastParticleTime = 0x1344; // int32
    }

    namespace CDOTA_Modifier_Shredder_Reactive_Armor {
        constexpr uint32_t stack_limit = 0x1318; // int32
        constexpr uint32_t stack_duration = 0x131C; // float32
        constexpr uint32_t stacks_per_hero_attack = 0x1320; // int32
        constexpr uint32_t m_flStackDieTime = 0x1324; // GameTime_t
        constexpr uint32_t m_pFXIndex = 0x1328; // ParticleIndex_t[4]
    }

    namespace CDOTA_Modifier_Shredder_Reactive_Armor_Stack {
        constexpr uint32_t bonus_armor = 0x1318; // float32
        constexpr uint32_t bonus_hp_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Shredder_TimberChain {
        constexpr uint32_t speed = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Shredder_WhirlingDeath_Debuff {
        constexpr uint32_t stat_loss_pct = 0x1318; // int32
        constexpr uint32_t stat_loss_univ = 0x131C; // int32
        constexpr uint32_t iPrimaryAttribute = 0x1320; // int32
        constexpr uint32_t flStatLossStr = 0x1324; // float32
        constexpr uint32_t flStatLossAgi = 0x1328; // float32
        constexpr uint32_t flStatLossInt = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Silencer_CurseOfTheSilent {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t nFxIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t penalty_duration = 0x1320; // int32
        constexpr uint32_t penalty_multiplier = 0x1324; // float32
        constexpr uint32_t movespeed = 0x1328; // int32
        constexpr uint32_t undispellable = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Silencer_GlaivesOfWisdom {
        constexpr uint32_t intellect_damage_pct = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_InFlightSilenceAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t m_pAttackCounterBuff = 0x1350; // CDOTA_Buff*
    }

    namespace CDOTA_Modifier_Silencer_GlaivesOfWisdom_Buff {
        constexpr uint32_t int_steal = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Silencer_GlaivesOfWisdom_Debuff {
        constexpr uint32_t int_steal = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Silencer_LastWord {
        constexpr uint32_t duration = 0x1318; // int32
        constexpr uint32_t spellcast = 0x131C; // bool
        constexpr uint32_t damage = 0x1320; // int32
        constexpr uint32_t debuff_duration = 0x1324; // float32
        constexpr uint32_t int_multiplier = 0x1328; // float32
        constexpr uint32_t scepter_bonus_damage = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Silver_Edge_WindWalk {
        constexpr uint32_t windwalk_bonus_damage = 0x1328; // int32
        constexpr uint32_t windwalk_movement_speed = 0x132C; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_HellfireBlast {
        constexpr uint32_t blast_dot_damage = 0x1318; // int32
        constexpr uint32_t blast_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_HellfireBlast_Skeleton_Buff {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_move_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_MortalStrike {
        constexpr uint32_t crit_mult = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_Reincarnation {
        constexpr uint32_t reincarnate_time = 0x1318; // float32
        constexpr uint32_t scepter_aura_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter {
        constexpr uint32_t scepter_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_Active {
        constexpr uint32_t scepter_move_speed_pct = 0x1318; // int32
        constexpr uint32_t scepter_attack_speed = 0x131C; // int32
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bPassive = 0x1324; // bool
        constexpr uint32_t m_bKillAtEnd = 0x1325; // bool
    }

    namespace CDOTA_Modifier_SkeletonKing_Reincarnation_Scepter_RespawnTime {
        constexpr uint32_t scepter_respawn_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_SkeletonKing_Reincarnation_Slow {
        constexpr uint32_t movespeed = 0x1318; // int32
        constexpr uint32_t attackslow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_VampiricAura {
        constexpr uint32_t vampiric_aura = 0x1318; // int32
        constexpr uint32_t creep_lifesteal_reduction_pct = 0x131C; // int32
        constexpr uint32_t skeleton_duration = 0x1320; // float32
        constexpr uint32_t max_skeleton_charges = 0x1324; // int32
        constexpr uint32_t m_iKillCounter = 0x1328; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_VampiricAura_Summon {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t talent_skeleton_damage = 0x131C; // int32
        constexpr uint32_t m_bRespawnReady = 0x1320; // bool
        constexpr uint32_t m_bRespawnConsumed = 0x1321; // bool
        constexpr uint32_t m_bKillParentOnDestroy = 0x1322; // bool
        constexpr uint32_t m_flRespawnTime = 0x1324; // GameTime_t
        constexpr uint32_t vampiric_aura = 0x1328; // int32
        constexpr uint32_t gold_bounty = 0x132C; // int32
        constexpr uint32_t xp_bounty = 0x1330; // int32
        constexpr uint32_t skeleton_building_damage_reduction = 0x1334; // int32
        constexpr uint32_t skeleton_bonus_hero_damage = 0x1338; // int32
    }

    namespace CDOTA_Modifier_SkeletonKing_VampiricAura_Summon_Thinker {
        constexpr uint32_t m_iCount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Ancient_Seal {
        constexpr uint32_t resist_debuff = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Arcane_Bolt_Lifesteal {
        constexpr uint32_t lifesteal_amt = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Concussive_Shot {
        constexpr uint32_t movement_speed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Mystic_Flare {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t damage_interval = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Shard {
        constexpr uint32_t stack_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Shard_Bonus {
        constexpr uint32_t bonus_intelligence = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Skywrath_Mage_Shard_Bonus_Counter {
        constexpr uint32_t bonus_intelligence = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Slardar_Amplify_Damage {
        constexpr uint32_t armor_reduction = 0x1318; // int32
        constexpr uint32_t scepter_delay = 0x131C; // float32
        constexpr uint32_t undispellable = 0x1320; // int32
        constexpr uint32_t puddle_radius = 0x1324; // int32
        constexpr uint32_t puddle_duration = 0x1328; // float32
        constexpr uint32_t m_vecLastPuddle = 0x132C; // Vector
        constexpr uint32_t m_hPuddle = 0x1338; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Slardar_Bash_Active {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
        constexpr uint32_t attack_count = 0x1320; // int32
        constexpr uint32_t river_damage = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Slardar_Puddle_Thinker {
        constexpr uint32_t puddle_radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Slardar_Slithereen_Crush {
        constexpr uint32_t crush_extra_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slardar_Sprint {
        constexpr uint32_t bonus_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slardar_Sprint_River {
        constexpr uint32_t river_speed = 0x1318; // int32
        constexpr uint32_t puddle_regen = 0x131C; // int32
        constexpr uint32_t puddle_armor = 0x1320; // int32
        constexpr uint32_t puddle_status_resistance = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Slark_DarkPact_Pulses {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t total_damage = 0x131C; // int32
        constexpr uint32_t total_pulses = 0x1320; // int32
        constexpr uint32_t self_damage_pct = 0x1324; // int32
        constexpr uint32_t pulse_interval = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Slark_Depth_Shroud {
        constexpr uint32_t m_nFXIndex = 0x1328; // ParticleIndex_t
        constexpr uint32_t bonus_movement_speed = 0x132C; // int32
        constexpr uint32_t bonus_regen = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Slark_Depth_Shroud_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_hVisibleEntity = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Slark_EssenceShift {
        constexpr uint32_t agi_gain = 0x1318; // int32
        constexpr uint32_t duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Slark_EssenceShift_Debuff {
        constexpr uint32_t stat_loss = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slark_Fish_Bait_Post {
        constexpr uint32_t attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slark_Fish_Bait_Pre {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slark_Pounce {
        constexpr uint32_t pounce_distance = 0x1318; // int32
        constexpr uint32_t pounce_distance_scepter = 0x131C; // int32
        constexpr uint32_t pounce_speed = 0x1320; // float32
        constexpr uint32_t pounce_acceleration = 0x1324; // float32
        constexpr uint32_t pounce_radius = 0x1328; // int32
        constexpr uint32_t pounce_damage = 0x132C; // int32
        constexpr uint32_t leash_duration = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Slark_Pounce_Leash {
        constexpr uint32_t leash_radius = 0x1318; // int32
        constexpr uint32_t vLeashLocation = 0x131C; // Vector
        constexpr uint32_t m_bEscaped = 0x1328; // bool
        constexpr uint32_t m_bFishBait = 0x1329; // bool
    }

    namespace CDOTA_Modifier_Slark_ShadowDance {
        constexpr uint32_t m_hVisibleEntity = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Slark_ShadowDance_Aura {
        constexpr uint32_t scepter_aoe = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Slark_ShadowDance_Passive {
        constexpr uint32_t activation_delay = 0x1318; // float32
        constexpr uint32_t neutral_disable = 0x131C; // float32
        constexpr uint32_t m_bPendingRefresh = 0x1320; // bool
        constexpr uint32_t m_fPendingStateChangeTime = 0x1324; // GameTime_t
        constexpr uint32_t m_NeutralHitTimer = 0x1328; // CountdownTimer
    }

    namespace CDOTA_Modifier_Slark_ShadowDance_PassiveRegen {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_regen = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Slark_ShadowDance_Visual {
        constexpr uint32_t m_bScepter = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Smoke_Of_Deceit {
        constexpr uint32_t bonus_movement_speed = 0x1328; // int32
        constexpr uint32_t visibility_radius = 0x132C; // int32
        constexpr uint32_t secondary_application_radius = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Snapfire_FiresnapCookie_PreHop {
        constexpr uint32_t jump_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Snapfire_GobbleUp_BellyHasUnit {
        constexpr uint32_t m_hGobbledUnit = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nOriginalControllingUnit = 0x131C; // PlayerID_t
        constexpr uint32_t m_bUnitWasLaunched = 0x1320; // bool
        constexpr uint32_t max_time_in_belly = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Snapfire_LilShredder_Attack {
        constexpr uint32_t damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Snapfire_LilShredder_Attack_Reduction {
        constexpr uint32_t damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Snapfire_LilShredder_Buff {
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
        constexpr uint32_t m_nIsActive = 0x1338; // int32
        constexpr uint32_t m_bHasAttackTalent = 0x133C; // bool
        constexpr uint32_t m_bBonusAttack = 0x133D; // bool
        constexpr uint32_t attack_range_bonus = 0x1340; // int32
        constexpr uint32_t buffed_attacks = 0x1344; // int32
        constexpr uint32_t base_attack_time = 0x1348; // float32
        constexpr uint32_t attack_speed_bonus = 0x134C; // int32
        constexpr uint32_t armor_duration = 0x1350; // float32
    }

    namespace CDOTA_Modifier_Snapfire_LilShredder_Debuff {
        constexpr uint32_t armor_reduction_per_attack = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Snapfire_Magma_Burn_Slow {
        constexpr uint32_t m_nMoveSlowPct = 0x1318; // int32
        constexpr uint32_t m_fBurnDamagePerTick = 0x131C; // float32
        constexpr uint32_t move_slow_pct = 0x1320; // int32
        constexpr uint32_t burn_interval = 0x1324; // float32
        constexpr uint32_t burn_damage = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Snapfire_Magma_Thinker {
        constexpr uint32_t burn_interval = 0x1318; // float32
        constexpr uint32_t impact_radius = 0x131C; // int32
        constexpr uint32_t move_slow_pct = 0x1320; // int32
        constexpr uint32_t burn_linger_duration = 0x1324; // float32
        constexpr uint32_t m_nPathEffectIndex = 0x1328; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Snapfire_MortimerKisses {
        constexpr uint32_t m_fIntervalPerRocket = 0x1318; // float32
        constexpr uint32_t m_flFacingTarget = 0x131C; // float32
        constexpr uint32_t m_nBeamFXIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_hBeamEnd = 0x1324; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flCurDistance = 0x1328; // float32
        constexpr uint32_t m_vAimTarget = 0x132C; // Vector
        constexpr uint32_t m_fLastTurnAmount = 0x1338; // float32
        constexpr uint32_t m_nProjectilesLaunched = 0x133C; // int32
        constexpr uint32_t m_bDestroyOnNextThink = 0x1340; // bool
        constexpr uint32_t m_nProjectilesToLaunch = 0x1344; // int32
        constexpr uint32_t m_bHasProjectileTalent = 0x1348; // bool
        constexpr uint32_t projectile_count = 0x134C; // int32
        constexpr uint32_t projectile_speed = 0x1350; // int32
        constexpr uint32_t projectile_width = 0x1354; // int32
        constexpr uint32_t projectile_vision = 0x1358; // int32
        constexpr uint32_t turn_rate = 0x135C; // float32
        constexpr uint32_t min_range = 0x1360; // int32
        constexpr uint32_t impact_radius = 0x1364; // int32
        constexpr uint32_t min_lob_travel_time = 0x1368; // float32
        constexpr uint32_t max_lob_travel_time = 0x136C; // float32
        constexpr uint32_t delay_after_last_projectile = 0x1370; // float32
    }

    namespace CDOTA_Modifier_Snapfire_Scatterblast_Slow {
        constexpr uint32_t m_bIsPointBlank = 0x1318; // bool
        constexpr uint32_t movement_slow_pct = 0x131C; // int32
        constexpr uint32_t attack_slow_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Snapfire_SpitCreep_ArcingUnit {
        constexpr uint32_t min_range = 0x1318; // int32
        constexpr uint32_t min_lob_travel_time = 0x131C; // float32
        constexpr uint32_t max_lob_travel_time = 0x1320; // float32
        constexpr uint32_t impact_radius = 0x1324; // int32
        constexpr uint32_t projectile_vision = 0x1328; // int32
        constexpr uint32_t stun_duration = 0x132C; // float32
        constexpr uint32_t min_height_above_lowest = 0x1330; // float32
        constexpr uint32_t min_height_above_highest = 0x1334; // float32
        constexpr uint32_t min_acceleration = 0x1338; // float32
        constexpr uint32_t max_acceleration = 0x133C; // float32
    }

    namespace CDOTA_Modifier_Sniper_Assassinate_Crit {
        constexpr uint32_t scepter_crit_damage = 0x1318; // int32
        constexpr uint32_t scatter_damage_pct = 0x131C; // int32
        constexpr uint32_t is_secondary = 0x1320; // bool
    }

    namespace CDOTA_Modifier_Sniper_Concussive_Grenade {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sniper_Headshot {
        constexpr uint32_t proc_chance = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
        constexpr uint32_t knockback_distance = 0x1320; // float32
        constexpr uint32_t bonus_damage_creeps = 0x1324; // int32
        constexpr uint32_t bonus_attack_range = 0x1328; // int32
        constexpr uint32_t damage = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Sniper_Headshot_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sniper_Shrapnel_Slow {
        constexpr uint32_t slow_movement_speed = 0x1318; // int32
        constexpr uint32_t shrapnel_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Sniper_Shrapnel_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_bExploded = 0x131C; // bool
    }

    namespace CDOTA_Modifier_Sniper_TakeAim {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sniper_TakeAim_Bonus {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t active_attack_range_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Soul_Ring_Buff {
        constexpr uint32_t m_iTempExtraMaxMana = 0x1318; // int32
        constexpr uint32_t m_iManaToRemove = 0x131C; // int32
        constexpr uint32_t duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Spawnlord_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Spawnlord_Aura_Bonus {
        constexpr uint32_t lifesteal = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Spawnlord_Master_Freeze {
        constexpr uint32_t m_bFreezeAttack = 0x1318; // bool
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Spawnlord_Master_Freeze_Root {
        constexpr uint32_t max_ticks = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Spawnlord_Master_Stomp {
        constexpr uint32_t armor_reduction_pct = 0x1318; // int32
        constexpr uint32_t m_flArmorReduction = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_20_Bash {
        constexpr uint32_t value = 0x1318; // float32
        constexpr uint32_t value2 = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Agility {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Agility_And_Intelligence {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_All_Stats {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Armor {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Attack_Base_Damage {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Attack_Damage {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Attack_Range {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Attack_Speed {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Attributes {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Base_Attack_Rate {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Cast_Range {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Cast_Speed {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Cleave {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Cooldown_Reduction {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Corruption {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Corruption_Debuff {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Crit {
        constexpr uint32_t crit_chance = 0x1318; // float32
        constexpr uint32_t crit_multiplier = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Day_Vision {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Evasion {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Exp_Boost {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Gold {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Gold_Income {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_HP {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_HP_Regen {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Haste {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Intelligence {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Lifesteal {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_MP {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_MP_Regen {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_MP_Regen_Amp {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Magic_Resistance {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Mana_Break {
        constexpr uint32_t value = 0x1318; // int32
        constexpr uint32_t burn_illusions_ranged = 0x131C; // int32
        constexpr uint32_t burn_illusions_melee = 0x1320; // int32
        constexpr uint32_t damage_per_burn = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Manaloss_Reduction {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Movement_Speed {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Movement_Speed_Percentage {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Night_Vision {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Reincarnation {
        constexpr uint32_t value = 0x1318; // float32
        constexpr uint32_t reincarnate_time = 0x131C; // float32
        constexpr uint32_t m_fLastReincarnationTime = 0x1320; // GameTime_t
    }

    namespace CDOTA_Modifier_Special_Bonus_Respawn_Reduction {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Spell_Amplify {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Spell_Block {
        constexpr uint32_t block_cooldown = 0x1318; // float32
        constexpr uint32_t m_CooldownTimer = 0x1320; // CountdownTimer
    }

    namespace CDOTA_Modifier_Special_Bonus_Spell_Lifesteal {
        constexpr uint32_t value = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Special_Bonus_Status_Resistance {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Strength {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_5 {
        constexpr uint32_t bonus_ms = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Unique_Beastmaster_6 {
        constexpr uint32_t bonus_hp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Bonus_Vision {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Special_Gyrocopter_Call_Down_Land_Mines {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t proximity_threshold = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // float32
        constexpr uint32_t activation_delay = 0x1324; // float32
        constexpr uint32_t bActivated = 0x1328; // bool
        constexpr uint32_t m_Timer = 0x1330; // CountdownTimer
    }

    namespace CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Burn {
        constexpr uint32_t shard_dps = 0x1318; // int32
        constexpr uint32_t shard_move_slow_pct = 0x131C; // int32
        constexpr uint32_t shard_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Special_Mars_Spear_Burning_Trail_Thinker {
        constexpr uint32_t m_vPathDir = 0x1318; // Vector
        constexpr uint32_t shard_trail_radius = 0x1324; // int32
        constexpr uint32_t shard_debuff_linger_duration = 0x1328; // float32
        constexpr uint32_t shard_interval = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Spectre_Arcana_Kill_Effect {
        constexpr uint32_t m_nCasterFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Spectre_Desolate {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Spectre_Desolate_Blind {
        constexpr uint32_t blind_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Spectre_Dispersion {
        constexpr uint32_t damage_reflection_pct = 0x1318; // int32
        constexpr uint32_t min_radius = 0x131C; // int32
        constexpr uint32_t max_radius = 0x1320; // int32
        constexpr uint32_t activation_bonus_pct = 0x1324; // int32
        constexpr uint32_t m_flLastDispersionPulseEffectTime = 0x1328; // GameTime_t
        constexpr uint32_t m_fDamageCounter = 0x132C; // float32
        constexpr uint32_t m_fLastTime = 0x1330; // float32
    }

    namespace CDOTA_Modifier_Spectre_Haunt {
        constexpr uint32_t m_fStartAttackTime = 0x1318; // GameTime_t
        constexpr uint32_t hTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Spectre_SpectralDagger {
        constexpr uint32_t path_radius = 0x1318; // int32
        constexpr uint32_t hero_path_duration = 0x131C; // float32
        constexpr uint32_t m_vLastPosition = 0x1320; // Vector
    }

    namespace CDOTA_Modifier_Spectre_SpectralDaggerInPath {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
        constexpr uint32_t m_hTrackingTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Spectre_SpectralDaggerPath {
        constexpr uint32_t m_hUnitsInPath = 0x1330; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t path_radius = 0x1348; // int32
        constexpr uint32_t vision_radius = 0x134C; // int32
        constexpr uint32_t dagger_radius = 0x1350; // int32
        constexpr uint32_t buff_persistence = 0x1354; // float32
        constexpr uint32_t dagger_grace_period = 0x1358; // float32
        constexpr uint32_t dagger_path_duration = 0x135C; // float32
    }

    namespace CDOTA_Modifier_Spell_Prism {
        constexpr uint32_t bonus_all_stats = 0x1318; // int32
        constexpr uint32_t bonus_cooldown = 0x131C; // int32
        constexpr uint32_t mana_regen = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Spider_Legs {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t turn_rate = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_Bulldoze {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
        constexpr uint32_t damage_barrier = 0x1320; // float32
        constexpr uint32_t m_flCurrentBarrier = 0x1324; // float32
    }

    namespace CDOTA_Modifier_SpiritBreaker_ChargeOfDarkness {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessTarget {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iChargeTargetEntityIndex = 0x131C; // CEntityIndex
    }

    namespace CDOTA_Modifier_SpiritBreaker_ChargeOfDarknessVision {
        constexpr uint32_t m_nFXIndex = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_EmpoweringHaste {
        constexpr uint32_t bonus_movespeed_pct_self = 0x1318; // int32
        constexpr uint32_t bonus_movespeed_pct_allies = 0x131C; // int32
        constexpr uint32_t bonus_movespeed_pct_extra = 0x1320; // int32
        constexpr uint32_t duration = 0x1324; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_EmpoweringHasteAura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_GreaterBash {
        constexpr uint32_t chance_pct = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // float32
        constexpr uint32_t movespeed_duration = 0x1320; // float32
    }

    namespace CDOTA_Modifier_SpiritBreaker_GreaterBash_Speed {
        constexpr uint32_t bonus_movespeed_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_NetherStrike {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t m_bStrikeLanded = 0x131C; // bool
        constexpr uint32_t m_vCastLocation = 0x1320; // Vector
        constexpr uint32_t m_hTarget = 0x132C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_SpiritBreaker_NetherStrike_Vision {
        constexpr uint32_t invis_threshold_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_PlanarPocketAura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t magic_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_SpiritBreaker_SpecialAttack {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Spirit_Bear_Attack_Damage {
        constexpr uint32_t bear_bat = 0x1318; // float32
        constexpr uint32_t bear_magic_resistance = 0x131C; // int32
        constexpr uint32_t bonus_bear_hp = 0x1320; // int32
        constexpr uint32_t bear_movespeed = 0x1324; // int32
        constexpr uint32_t bonus_bear_armor = 0x1328; // int32
        constexpr uint32_t hp_gain_per_druid_level = 0x132C; // int32
        constexpr uint32_t damage_gain_per_druid_level = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Spirit_Gem {
        constexpr uint32_t m_flOriginalModelScale = 0x1318; // float32
        constexpr uint32_t m_nHealthBarOffsetOverride = 0x131C; // int32
        constexpr uint32_t m_nFXStackIndex = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_fScaleGainPerGem = 0x1324; // float32
        constexpr uint32_t m_nLevel = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Spring2021_DefusalBomb {
        constexpr uint32_t BOMB_DURATION = 0x1318; // float32
        constexpr uint32_t BOMB_FAST_TICK_START = 0x131C; // float32
        constexpr uint32_t BOMB_DEFAULT_TICK = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Spring2021_TowerDeathRing_Thinker {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_bWindingUp = 0x1324; // bool
        constexpr uint32_t m_ViewerTimer = 0x1328; // CountdownTimer
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1360; // int32
        constexpr uint32_t radius = 0x1364; // int32
        constexpr uint32_t damage = 0x1368; // int32
        constexpr uint32_t windup_time = 0x136C; // float32
    }

    namespace CDOTA_Modifier_StaffOfWizardry {
        constexpr uint32_t bonus_intellect = 0x1318; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_ElectricVortex_Pull {
        constexpr uint32_t m_vDestination = 0x1318; // Vector
        constexpr uint32_t electric_vortex_pull_distance = 0x1324; // int32
        constexpr uint32_t electric_vortex_pull_tether_range = 0x1328; // float32
    }

    namespace CDOTA_Modifier_StormSpirit_ElectricVortex_SelfSlow {
        constexpr uint32_t electric_vortex_self_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_Electric_Rave {
        constexpr uint32_t overload_aoe = 0x1318; // int32
        constexpr uint32_t overload_damage = 0x131C; // int32
        constexpr uint32_t shard_attack_speed_bonus = 0x1320; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_Overload {
        constexpr uint32_t overload_aoe = 0x1318; // int32
        constexpr uint32_t overload_cast_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_OverloadSlow {
        constexpr uint32_t overload_move_slow = 0x1318; // int32
        constexpr uint32_t overload_attack_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_Overload_Attack_Speed_Buff {
        constexpr uint32_t hit_attack_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_StormSpirit_StaticRemnantThinker {
        constexpr uint32_t static_remnant_radius = 0x1318; // int32
        constexpr uint32_t static_remnant_damage_radius = 0x131C; // int32
        constexpr uint32_t static_remnant_damage = 0x1320; // int32
        constexpr uint32_t static_remnant_delay = 0x1324; // float32
        constexpr uint32_t m_iSearchRadius = 0x1328; // int32
        constexpr uint32_t m_iDamageRadius = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Stormcrafter_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sven_GodsStrength {
        constexpr uint32_t gods_strength_damage = 0x1318; // int32
        constexpr uint32_t bonus_slow_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Sven_GreatCleave {
        constexpr uint32_t cleave_starting_width = 0x1318; // int32
        constexpr uint32_t cleave_ending_width = 0x131C; // int32
        constexpr uint32_t cleave_distance = 0x1320; // int32
        constexpr uint32_t great_cleave_damage = 0x1324; // int32
        constexpr uint32_t strength_bonus = 0x1328; // int32
        constexpr uint32_t m_nLastCleaveRecord = 0x132C; // int16
        constexpr uint32_t m_nLastCleaveKills = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Sven_Stormbolt_Hide {
        constexpr uint32_t m_nHandle = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sven_Warcry {
        constexpr uint32_t movespeed = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Sven_Warcry_Aura {
        constexpr uint32_t shard_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Sven_Warcry_Passive {
        constexpr uint32_t shard_passive_armor = 0x1318; // int32
        constexpr uint32_t shard_passive_movespeed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_TangoHeal {
        constexpr uint32_t health_regen = 0x1318; // float32
        constexpr uint32_t superheal = 0x131C; // bool
        constexpr uint32_t m_fHealingDone = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Techies_LandMine {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t proximity_threshold = 0x132C; // float32
        constexpr uint32_t damage = 0x1330; // float32
        constexpr uint32_t activation_delay = 0x1334; // float32
        constexpr uint32_t outer_damage = 0x1338; // float32
        constexpr uint32_t min_distance = 0x133C; // int32
        constexpr uint32_t bActivated = 0x1340; // bool
        constexpr uint32_t m_Timer = 0x1348; // CountdownTimer
    }

    namespace CDOTA_Modifier_Techies_LandMine_Burn {
        constexpr uint32_t mres_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Techies_Minefield_Sign_Scepter {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t minefield_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Techies_Minefield_Sign_Scepter_Aura {
        constexpr uint32_t aura_radius = 0x1318; // float32
        constexpr uint32_t scepter_move_damage = 0x131C; // float32
        constexpr uint32_t scepter_move_amt = 0x1320; // float32
        constexpr uint32_t minefield_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Techies_Minefield_Sign_Thinker {
        constexpr uint32_t aura_radius = 0x1318; // int32
        constexpr uint32_t trigger_radius = 0x131C; // float32
        constexpr uint32_t minefield_duration = 0x1320; // float32
        constexpr uint32_t m_bTriggered = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Techies_ReactiveTazer {
        constexpr uint32_t bonus_ms = 0x1320; // int32
        constexpr uint32_t stun_radius = 0x1324; // int32
        constexpr uint32_t stun_duration = 0x1328; // float32
        constexpr uint32_t damage_percent = 0x132C; // int32
        constexpr uint32_t m_nDamageRemaining = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Techies_RemoteMine {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t damage = 0x132C; // int32
        constexpr uint32_t radius_scepter = 0x1330; // int32
        constexpr uint32_t damage_scepter = 0x1334; // int32
        constexpr uint32_t vision_radius = 0x1338; // int32
        constexpr uint32_t vision_duration = 0x133C; // float32
        constexpr uint32_t model_scale = 0x1340; // int32
        constexpr uint32_t bExploding = 0x1344; // bool
    }

    namespace CDOTA_Modifier_Techies_StasisTrap {
        constexpr uint32_t activation_radius = 0x1328; // int32
        constexpr uint32_t stun_radius = 0x132C; // int32
        constexpr uint32_t stun_duration = 0x1330; // float32
        constexpr uint32_t explode_delay = 0x1334; // float32
        constexpr uint32_t activation_time = 0x1338; // float32
        constexpr uint32_t m_bActivated = 0x133C; // bool
        constexpr uint32_t m_bTriggered = 0x133D; // bool
    }

    namespace CDOTA_Modifier_Techies_StickyBombThrow {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Techies_StickyBomb_Chase {
        constexpr uint32_t acceleration = 0x1318; // int32
        constexpr uint32_t m_nTeamNumber = 0x131C; // int32
        constexpr uint32_t speed = 0x1320; // float32
        constexpr uint32_t pre_chase_time = 0x1324; // float32
        constexpr uint32_t m_hAttachTarget = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vStartPosition = 0x132C; // Vector
        constexpr uint32_t m_MoveTime = 0x1338; // CountdownTimer
    }

    namespace CDOTA_Modifier_Techies_StickyBomb_Countdown {
        constexpr uint32_t m_vLastLoc = 0x1318; // Vector
        constexpr uint32_t m_hAttachTarget = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Techies_StickyBomb_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Techies_StickyBomb_Slow_Secondary {
        constexpr uint32_t secondary_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Techies_Suicide_RespawnTime {
        constexpr uint32_t m_nSuicideKillCount = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Teleporting {
        constexpr uint32_t m_fChannelTime = 0x1318; // float32
        constexpr uint32_t m_vStart = 0x131C; // Vector
        constexpr uint32_t m_vEnd = 0x1328; // Vector
    }

    namespace CDOTA_Modifier_TemplarAssassin_Meld {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t launched_attack = 0x131C; // bool
        constexpr uint32_t m_hTarget = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nAttackRecord = 0x1324; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_MeldArmor {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_Meld_Animation {
        constexpr uint32_t launched_attack = 0x1318; // bool
    }

    namespace CDOTA_Modifier_TemplarAssassin_PsiBlades {
        constexpr uint32_t bonus_attack_range = 0x1318; // int32
        constexpr uint32_t attack_spill_range = 0x131C; // float32
        constexpr uint32_t attack_spill_width = 0x1320; // int32
        constexpr uint32_t attack_spill_pct = 0x1324; // int32
        constexpr uint32_t attack_spill_penalty = 0x1328; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_PsiBlades_Slow {
        constexpr uint32_t value = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_RefractionAbsorb {
        constexpr uint32_t damage_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_RefractionDamage {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t bonus_damage = 0x1330; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_Refraction_Holdout {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t damage_absorb = 0x131C; // int32
        constexpr uint32_t m_flDamageAbsorbed = 0x1320; // float32
    }

    namespace CDOTA_Modifier_TemplarAssassin_Trap {
        constexpr uint32_t bonus_vision = 0x1328; // int32
    }

    namespace CDOTA_Modifier_TemplarAssassin_Trap_Slow {
        constexpr uint32_t movement_speed_min = 0x1318; // int32
        constexpr uint32_t movement_speed_max = 0x131C; // int32
        constexpr uint32_t extra_damage = 0x1320; // int32
        constexpr uint32_t trap_max_charge_duration = 0x1324; // float32
        constexpr uint32_t min_silence_duration = 0x1328; // float32
        constexpr uint32_t max_silence_duration = 0x132C; // float32
        constexpr uint32_t stage = 0x1330; // float32
        constexpr uint32_t flDamagePerTick = 0x1334; // float32
        constexpr uint32_t bExtraDamage = 0x1338; // bool
    }

    namespace CDOTA_Modifier_Tenderizer_Weaken {
        constexpr uint32_t weaken_per_hit = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Terrorblade_Arcana_Kill_Effect {
        constexpr uint32_t m_bFrozen = 0x1318; // bool
        constexpr uint32_t m_bFlail = 0x1319; // bool
    }

    namespace CDOTA_Modifier_Terrorblade_Demon_Zeal {
        constexpr uint32_t berserk_bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t berserk_bonus_movement_speed = 0x131C; // int32
        constexpr uint32_t berserk_bonus_armor = 0x1320; // int32
        constexpr uint32_t reflection_pct = 0x1324; // int32
        constexpr uint32_t melee_bonus = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Terrorblade_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Terrorblade_Metamorphosis {
        constexpr uint32_t base_attack_time = 0x1318; // float32
        constexpr uint32_t bonus_range = 0x131C; // int32
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t speed_loss = 0x1328; // int32
        constexpr uint32_t attack_projectile_speed_bonus = 0x132C; // int32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
        constexpr uint32_t m_iszOriginalRangedAttackEffect = 0x1338; // CUtlSymbolLarge
    }

    namespace CDOTA_Modifier_Terrorblade_Metamorphosis_Fear_Thinker {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t scepter_speed = 0x1340; // int32
        constexpr uint32_t scepter_radius = 0x1344; // int32
        constexpr uint32_t m_bFirstThink = 0x1348; // bool
    }

    namespace CDOTA_Modifier_Terrorblade_Reflection_Invulnerability {
        constexpr uint32_t hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Terrorblade_Reflection_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
        constexpr uint32_t attack_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Third_Eye {
        constexpr uint32_t truesight_radius = 0x1318; // int32
        constexpr uint32_t bonus_vision = 0x131C; // int32
        constexpr uint32_t bonus_all_stats = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Tidehunter_AnchorSmash {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tidehunter_AnchorSmash_Caster {
        constexpr uint32_t attack_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tidehunter_Anchor_Unit {
        constexpr uint32_t chain_length = 0x1318; // int32
        constexpr uint32_t attacks_to_destroy = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Tidehunter_DeadInTheWater {
        constexpr uint32_t max_movement_speed = 0x1318; // int32
        constexpr uint32_t chain_length = 0x131C; // int32
        constexpr uint32_t m_hAnchor = 0x1320; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDragging = 0x1324; // bool
    }

    namespace CDOTA_Modifier_Tidehunter_Gush {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t negative_armor = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Tidehunter_KrakenShell {
        constexpr uint32_t m_iDamageTaken = 0x1318; // int32
        constexpr uint32_t damage_reduction = 0x131C; // int32
        constexpr uint32_t damage_cleanse = 0x1320; // int32
        constexpr uint32_t bonus_reduction_per_stack = 0x1324; // int32
        constexpr uint32_t damage_reset_interval = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Tidehunter_SmashAttack {
        constexpr uint32_t attack_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tinker_Defensive_Matrix {
        constexpr uint32_t damage_absorb = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
        constexpr uint32_t cooldown_reduction = 0x1320; // int32
        constexpr uint32_t m_bStartedTimer = 0x1324; // bool
        constexpr uint32_t m_nDamageAbsorbed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Tinker_LaserBlind {
        constexpr uint32_t miss_rate = 0x1318; // int32
        constexpr uint32_t max_health_removed = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Tinker_MarchOfTheMachinesThinker {
        constexpr uint32_t collision_radius = 0x1318; // int32
        constexpr uint32_t radius = 0x131C; // int32
        constexpr uint32_t distance = 0x1320; // int32
        constexpr uint32_t distance_scepter = 0x1324; // int32
        constexpr uint32_t speed = 0x1328; // int32
        constexpr uint32_t machines_per_sec = 0x132C; // int32
        constexpr uint32_t m_vDir = 0x1330; // Vector
    }

    namespace CDOTA_Modifier_Tinker_Rearmor {
        constexpr uint32_t magic_resistance = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tinker_Warp_Grenade {
        constexpr uint32_t range_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tiny_Avalanche {
        constexpr uint32_t m_pHeroesHit = 0x1318; // CUtlVector< C_DOTA_BaseNPC* >
        constexpr uint32_t radius = 0x1330; // int32
        constexpr uint32_t total_duration = 0x1334; // float32
        constexpr uint32_t stun_duration = 0x1338; // float32
        constexpr uint32_t tick_count = 0x133C; // int32
        constexpr uint32_t toss_multiplier = 0x1340; // float32
        constexpr uint32_t m_damage = 0x1344; // int32
        constexpr uint32_t m_nTicks = 0x1348; // int32
    }

    namespace CDOTA_Modifier_Tiny_CraggyExterior {
        constexpr uint32_t stun_chance = 0x1318; // int32
        constexpr uint32_t stun_duration = 0x131C; // float32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Tiny_Grow {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t attack_speed_reduction = 0x131C; // int32
        constexpr uint32_t bonus_damage = 0x1320; // int32
        constexpr uint32_t tree_bonus_damage_pct = 0x1324; // float32
        constexpr uint32_t slow_resistance = 0x1328; // float32
        constexpr uint32_t m_nFXIndex = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Tiny_Toss {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t toss_damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Tiny_TossTree_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tiny_TossTree_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tiny_Tree_Channel {
        constexpr uint32_t tree_grab_radius = 0x1318; // int32
        constexpr uint32_t splash_radius = 0x131C; // int32
        constexpr uint32_t speed = 0x1320; // int32
        constexpr uint32_t interval = 0x1324; // float32
        constexpr uint32_t m_vPos = 0x1328; // Vector
    }

    namespace CDOTA_Modifier_Tiny_Tree_Channel_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tiny_Tree_Grab {
        constexpr uint32_t attack_count = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_damage_buildings = 0x1320; // int32
        constexpr uint32_t stun_duration = 0x1324; // float32
        constexpr uint32_t attack_range = 0x1328; // int32
        constexpr uint32_t m_nOriginalAttackCapability = 0x132C; // int32
        constexpr uint32_t bat_increase = 0x1330; // float32
        constexpr uint32_t speed_reduction = 0x1334; // int32
        constexpr uint32_t m_nBonusAttackRange = 0x1338; // int32
        constexpr uint32_t m_hStolenTree = 0x133C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_nFXAttackIndex = 0x1344; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Tornado_Tempest {
        constexpr uint32_t near_radius = 0x1318; // int32
        constexpr uint32_t near_damage = 0x131C; // int32
        constexpr uint32_t far_radius = 0x1320; // int32
        constexpr uint32_t far_damage = 0x1324; // int32
        constexpr uint32_t tick_rate = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Tornado_Tempest_Debuff {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
        constexpr uint32_t attackspeed_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Tower_Armor_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tower_Aura {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t m_bOverrideArmor = 0x131C; // bool
        constexpr uint32_t hp_regen = 0x1320; // float32
        constexpr uint32_t m_bOverrideRegen = 0x1324; // bool
        constexpr uint32_t m_nRadius = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Tower_Aura_Bonus {
        constexpr uint32_t bonus_armor = 0x1318; // int32
        constexpr uint32_t hp_regen = 0x131C; // float32
        constexpr uint32_t m_bOverrideArmor = 0x1320; // bool
        constexpr uint32_t m_bOverrideRegen = 0x1321; // bool
        constexpr uint32_t m_bSentFirstRefresh = 0x1322; // bool
    }

    namespace CDOTA_Modifier_Treant_Bonus {
        constexpr uint32_t treant_hp_bonus = 0x1318; // int32
        constexpr uint32_t treant_damage_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Treant_Large_Bonus {
        constexpr uint32_t treant_large_hp_bonus = 0x1318; // int32
        constexpr uint32_t treant_large_damage_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Treant_LeechSeed {
        constexpr uint32_t damage_interval = 0x1318; // float32
        constexpr uint32_t leech_damage = 0x131C; // int32
        constexpr uint32_t movement_slow = 0x1320; // int32
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t projectile_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Treant_LeechSeed_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Treant_Lifebomb_Explode {
        constexpr uint32_t flStartTime = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_Treant_LivingArmor {
        constexpr uint32_t heal_per_second = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Treant_NaturesGrasp_Creation_Thinker {
        constexpr uint32_t creation_interval = 0x1318; // float32
        constexpr uint32_t vines_duration = 0x131C; // float32
        constexpr uint32_t vine_spawn_interval = 0x1320; // int32
        constexpr uint32_t m_vInitialLoc = 0x1324; // Vector
        constexpr uint32_t m_vFinalLoc = 0x1330; // Vector
        constexpr uint32_t m_iVineCount = 0x133C; // int32
        constexpr uint32_t m_iVinesIndex = 0x1340; // int32
        constexpr uint32_t m_bFoundTree = 0x1344; // bool
    }

    namespace CDOTA_Modifier_Treant_NaturesGrasp_Damage {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t damage_per_second = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Treant_NaturesGrasp_Latch_Thinker {
        constexpr uint32_t latch_range = 0x1318; // int32
        constexpr uint32_t latch_vision = 0x131C; // int32
        constexpr uint32_t initial_latch_delay = 0x1320; // float32
        constexpr uint32_t m_bBonus = 0x132C; // bool
    }

    namespace CDOTA_Modifier_Treant_NaturesGuise {
        constexpr uint32_t m_RevealTimer = 0x1318; // CountdownTimer
        constexpr uint32_t m_InvisAttackTimer = 0x1330; // CountdownTimer
        constexpr uint32_t m_CooldownTimer = 0x1348; // CountdownTimer
    }

    namespace CDOTA_Modifier_Treant_NaturesGuise_Root {
        constexpr uint32_t m_flEntangleDamage = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Treant_NaturesGuise_Tree_Walking {
        constexpr uint32_t movement_bonus = 0x1318; // int32
        constexpr uint32_t regen_amp = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Treant_Overgrowth {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t mute = 0x131C; // int32
        constexpr uint32_t bPurgable = 0x1320; // bool
    }

    namespace CDOTA_Modifier_TrollWarlord_BattleTrance {
        constexpr uint32_t movement_speed = 0x1318; // int32
        constexpr uint32_t attack_speed = 0x131C; // int32
        constexpr uint32_t lifesteal = 0x1320; // int32
        constexpr uint32_t m_hTarget = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_TrollWarlord_BerserkersRage {
        constexpr uint32_t bonus_move_speed = 0x1318; // int32
        constexpr uint32_t bonus_range = 0x131C; // int32
        constexpr uint32_t bonus_hp = 0x1320; // int32
        constexpr uint32_t bonus_armor = 0x1324; // int32
        constexpr uint32_t ensnare_chance = 0x1328; // int32
        constexpr uint32_t ensnare_duration = 0x132C; // float32
        constexpr uint32_t base_attack_time = 0x1330; // float32
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x1334; // int32
    }

    namespace CDOTA_Modifier_TrollWarlord_BerserkersRage_Maim {
        constexpr uint32_t maim_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TrollWarlord_Fervor {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t max_stacks = 0x131C; // int32
        constexpr uint32_t extra_attack_chance_per_stack = 0x1320; // int32
        constexpr uint32_t base_chance = 0x1324; // int32
        constexpr uint32_t m_hUnit = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_TrollWarlord_WhirlingAxes_Blind {
        constexpr uint32_t blind_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TrollWarlord_WhirlingAxes_Slow {
        constexpr uint32_t movement_speed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_TrollWarlord_Whirling_Axes_Melee {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t hit_radius = 0x131C; // int32
        constexpr uint32_t axe_movement_speed = 0x1320; // int32
        constexpr uint32_t whirl_duration = 0x1324; // float32
        constexpr uint32_t max_range = 0x1328; // float32
        constexpr uint32_t blind_duration = 0x132C; // float32
        constexpr uint32_t m_flRotation = 0x1330; // float32
        constexpr uint32_t m_flAxeRadius = 0x1334; // float32
        constexpr uint32_t m_flDieTime = 0x1338; // GameTime_t
        constexpr uint32_t m_bPiercesMagicImmunity = 0x133C; // float32
        constexpr uint32_t m_nSwapIndex = 0x1340; // int32
        constexpr uint32_t m_bReturning = 0x1344; // bool
        constexpr uint32_t m_nAxeFXIndex = 0x1348; // ParticleIndex_t[2]
        constexpr uint32_t m_nHeroesHitForRelic = 0x1350; // int32
        constexpr uint32_t hitEntities = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hAxes = 0x1370; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Troll_Warlord_Rampage {
        constexpr uint32_t attack_speed = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Truesight_Aura {
        constexpr uint32_t m_nAuraRadius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_FrozenSigil {
        constexpr uint32_t aghs_shard_move_slow = 0x1318; // int32
        constexpr uint32_t aghs_shard_damage = 0x131C; // int32
        constexpr uint32_t attack_slow = 0x1320; // int32
        constexpr uint32_t turn_rate_slow = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Tusk_FrozenSigil_Aura {
        constexpr uint32_t sigil_radius = 0x1318; // int32
        constexpr uint32_t m_iIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Tusk_Tag_Team {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t slow_duration = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow {
        constexpr uint32_t attack_speed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_Tag_Team_Attack_Slow_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_Tag_Team_Aura {
        constexpr uint32_t m_iIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Tusk_Tag_Team_Slow {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_WalrusKick_AirTime {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_WalrusKick_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_WalrusPunch {
        constexpr uint32_t crit_multiplier = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t air_time = 0x1320; // float32
        constexpr uint32_t slow_duration = 0x1324; // float32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1328; // CUtlSymbolLarge
        constexpr uint32_t m_hTarget = 0x1330; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bWalrusPunch = 0x1334; // bool
        constexpr uint32_t m_InFlightAttackRecords = 0x1338; // CUtlVector< int16 >
        constexpr uint32_t m_nFXIndex = 0x1350; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Tusk_WalrusPunch_AirTime {
        constexpr uint32_t hp_threshold = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tusk_WalrusPunch_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Tutorial_ForceAnimation {
        constexpr uint32_t m_nActivity = 0x1318; // int32
        constexpr uint32_t m_bLoop = 0x131C; // bool
        constexpr uint32_t m_bFacePlayer = 0x131D; // bool
    }

    namespace CDOTA_Modifier_Tutorial_HideNPC {
        constexpr uint32_t m_bRemoveOnDeath = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Tutorial_LastHitHelper {
        constexpr uint32_t m_bTargetFriendlies = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Tutorial_LastHittable {
        constexpr uint32_t m_bIsFriend = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Tutorial_SpeechBubble {
        constexpr uint32_t m_bFacePlayer = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Twin_Gate_FX {
        constexpr uint32_t m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_fPortalRadius = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Twin_Gate_Warp_Channel {
        constexpr uint32_t m_nfxTargetTp = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nfxAmbientFx = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal1 = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal2 = 0x1328; // ParticleIndex_t
        constexpr uint32_t animation_rate = 0x132C; // float32
        constexpr uint32_t stop_distance = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Underlord_Fear {
        constexpr uint32_t m_vOriginal = 0x1318; // Vector
    }

    namespace CDOTA_Modifier_Underlord_Portal_Buff {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t bonus_ms = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Underlord_Portal_FX {
        constexpr uint32_t m_nPortalAmbientFX = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_fPortalRadius = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Underlord_Portal_Warp_Channel {
        constexpr uint32_t m_nfxTargetTp = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nfxTargetTp2 = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nfxAmbientFx = 0x1320; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal1 = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_nfxPortal2 = 0x1328; // ParticleIndex_t
        constexpr uint32_t animation_rate = 0x132C; // float32
        constexpr uint32_t stop_distance = 0x1330; // int32
    }

    namespace CDOTA_Modifier_Undying_Decay_Buff {
        constexpr uint32_t str_steal = 0x1318; // int32
        constexpr uint32_t str_scale_up = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Undying_Decay_Debuff {
        constexpr uint32_t str_steal = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Undying_Decay_Shard {
        constexpr uint32_t shard_buff_duration = 0x1318; // float32
        constexpr uint32_t m_vecStackExpirationTimes = 0x1320; // CUtlVector< GameTime_t >
    }

    namespace CDOTA_Modifier_Undying_FleshGolem {
        constexpr uint32_t str_percentage = 0x1318; // int32
        constexpr uint32_t movement_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Undying_FleshGolem_PlagueAura {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t tick_rate = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Undying_FleshGolem_Slow {
        constexpr uint32_t damage_amp = 0x1318; // int32
        constexpr uint32_t slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Bunker {
        constexpr uint32_t bunker_heal_pct = 0x1318; // float32
        constexpr uint32_t tombstone_grab_radius = 0x131C; // float32
        constexpr uint32_t tombstone_stun_penalty = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_HP {
        constexpr uint32_t tombstone_health = 0x1318; // int32
        constexpr uint32_t zombie_damage_interval = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Zombie_Aura {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t zombie_interval = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Zombie_Deathlust {
        constexpr uint32_t bonus_move_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t health_threshold_pct = 0x131C; // float32
        constexpr uint32_t duration = 0x1320; // float32
        constexpr uint32_t m_hTombstoneSourceAbility = 0x1324; // CHandle< C_DOTABaseAbility >
        constexpr uint32_t m_hChaseUnit = 0x1328; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t m_flDecrementTime = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Undying_Tombstone_Zombie_Deathstrike_Slow_Counter {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Unwavering_Condition {
        constexpr uint32_t max_health = 0x1318; // int32
        constexpr uint32_t magic_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_UpgradedBarricade {
        constexpr uint32_t armor_bonus_per_upgrade = 0x1318; // int32
        constexpr uint32_t hp_bonus_per_upgrade = 0x131C; // int32
    }

    namespace CDOTA_Modifier_UpgradedMortar {
        constexpr uint32_t bonus_per_upgrade = 0x1318; // int32
    }

    namespace CDOTA_Modifier_UpheavalUrn_Reincarnation {
        constexpr uint32_t reincarnate_time = 0x1318; // float32
    }

    namespace CDOTA_Modifier_UrnUpheaval {
        constexpr uint32_t m_iSlow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ursa_Earthshock {
        constexpr uint32_t movement_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ursa_Enrage {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t status_resistance = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Ursa_Fury_Swipes {
        constexpr uint32_t damage_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ursa_Fury_Swipes_Damage_Increase {
        constexpr uint32_t damage_per_stack = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Ursa_Overpower {
        constexpr uint32_t attack_speed_bonus_pct = 0x1318; // int32
        constexpr uint32_t slow_resist = 0x131C; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Command_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Command_Aura_Effect {
        constexpr uint32_t bonus_base_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Command_Aura_Illusion {
        constexpr uint32_t hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Command_Negative_Aura_Effect {
        constexpr uint32_t bonus_damage_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Hybrid_Special {
        constexpr uint32_t scepter_illusion_ms_bonus_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_Nether_Swap_DamageReduction {
        constexpr uint32_t damage_reduction = 0x1318; // float32
        constexpr uint32_t nFXIndex = 0x131C; // ParticleIndex_t
        constexpr uint32_t damage = 0x1320; // float32
        constexpr uint32_t m_nDamageAbsorbed = 0x1324; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_WaveOfTerror {
        constexpr uint32_t armor_reduction = 0x1318; // int32
        constexpr uint32_t attack_reduction = 0x131C; // int32
        constexpr uint32_t damage_reduction_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_VengefulSpirit_WaveOfTerror_Buff {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t steal_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Venom_Gland_Debuff {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t degen = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Venomancer_Latent_Poison {
        constexpr uint32_t duration_damage = 0x1318; // int32
        constexpr uint32_t movement_slow = 0x131C; // int32
        constexpr uint32_t explosion_damage = 0x1320; // int32
        constexpr uint32_t explosion_stun_duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Venomancer_NoxiousPlaguePrimary {
        constexpr uint32_t health_damage = 0x1318; // float32
        constexpr uint32_t debuff_radius = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Venomancer_NoxiousPlagueSecondary {
        constexpr uint32_t health_damage = 0x1318; // float32
        constexpr uint32_t attack_slow = 0x131C; // float32
        constexpr uint32_t movement_slow_max = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Venomancer_NoxiousPlague_Slow {
        constexpr uint32_t attack_slow = 0x1318; // float32
        constexpr uint32_t movement_slow_max = 0x131C; // float32
        constexpr uint32_t debuff_radius = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Venomancer_PoisonNova {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t magic_resist = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Venomancer_PoisonStingBase {
        constexpr uint32_t m_iDamage = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t m_nTicksRemaining = 0x1320; // int32
        constexpr uint32_t m_flAttackDamage = 0x1324; // float32
        constexpr uint32_t hp_regen_reduction = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Venomancer_PoisonStingWard {
        constexpr uint32_t m_iDamage = 0x1318; // int32
        constexpr uint32_t movement_speed = 0x131C; // int32
        constexpr uint32_t hp_regen_reduction = 0x1320; // int32
        constexpr uint32_t m_nTicksRemaining = 0x1324; // int32
        constexpr uint32_t m_flAttackDamage = 0x1328; // float32
    }

    namespace CDOTA_Modifier_Venomancer_PoisonSting_Applier {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Venomancer_VenomousGale {
        constexpr uint32_t movement_slow = 0x1318; // int32
        constexpr uint32_t tick_damage = 0x131C; // int32
        constexpr uint32_t tick_interval = 0x1320; // float32
        constexpr uint32_t duration = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Viper_BecomeUniversal {
        constexpr uint32_t bonus_magic_resistance = 0x1318; // int32
        constexpr uint32_t is_universal = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Viper_CorrosiveSkin {
        constexpr uint32_t bonus_magic_resistance = 0x1318; // int32
        constexpr uint32_t max_range = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Viper_CorrosiveSkin_Slow {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t effect_multiplier_distance = 0x1320; // int32
        constexpr uint32_t effect_multiplier = 0x1324; // int32
        constexpr uint32_t m_bEffectMultiplied = 0x1328; // bool
    }

    namespace CDOTA_Modifier_Viper_Nethertoxin {
        constexpr uint32_t min_damage = 0x1318; // int32
        constexpr uint32_t max_damage = 0x131C; // int32
        constexpr uint32_t max_duration = 0x1320; // float32
        constexpr uint32_t attack_slow = 0x1324; // int32
        constexpr uint32_t m_flDamageInterval = 0x1328; // float32
        constexpr uint32_t m_flTimeIncrement = 0x132C; // float32
    }

    namespace CDOTA_Modifier_Viper_Nethertoxin_Thinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Viper_Nose_Dive {
        constexpr uint32_t m_vTargetPos = 0x1318; // Vector
        constexpr uint32_t m_vStart = 0x1324; // Vector
        constexpr uint32_t m_flZDelta = 0x1330; // float32
        constexpr uint32_t radius = 0x1334; // int32
        constexpr uint32_t corrosive_radius = 0x1338; // int32
        constexpr uint32_t effect_duration = 0x133C; // float32
        constexpr uint32_t dive_speed = 0x1340; // int32
        constexpr uint32_t start_height = 0x1344; // float32
    }

    namespace CDOTA_Modifier_Viper_Nose_Dive_Effect {
        constexpr uint32_t movespeed_slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Viper_PoisonAttack {
        constexpr uint32_t duration = 0x1318; // float32
        constexpr uint32_t m_InFlightAttackRecords = 0x1320; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Viper_PoisonAttack_Slow {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t shard_armor_reduction = 0x131C; // int32
        constexpr uint32_t shard_building_dmg_pct = 0x1320; // int32
        constexpr uint32_t movement_speed = 0x1324; // int32
        constexpr uint32_t magic_resistance = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Viper_ViperStrike_Slow {
        constexpr uint32_t bonus_movement_speed = 0x1318; // int32
        constexpr uint32_t bonus_attack_speed = 0x131C; // int32
        constexpr uint32_t damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Visage_GraveChill_Buff {
        constexpr uint32_t movespeed_bonus = 0x1318; // int32
        constexpr uint32_t attackspeed_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Visage_GraveChill_Debuff {
        constexpr uint32_t movespeed_bonus = 0x1318; // int32
        constexpr uint32_t attackspeed_bonus = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Visage_GravekeepersCloak {
        constexpr uint32_t damage_reduction = 0x1318; // int32
        constexpr uint32_t max_layers = 0x131C; // int32
        constexpr uint32_t minimum_damage = 0x1320; // float32
        constexpr uint32_t recovery_time = 0x1324; // int32
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t max_damage_reduction = 0x132C; // int32
        constexpr uint32_t m_nFXIndex = 0x1330; // ParticleIndex_t[4]
        constexpr uint32_t m_nFXIndexB = 0x1340; // ParticleIndex_t
        constexpr uint32_t vStacks = 0x1348; // CUtlVector< CDOTA_Modifier_Visage_GravekeepersCloak_Stack* >
    }

    namespace CDOTA_Modifier_Visage_GravekeepersCloak_Secondary {
        constexpr uint32_t damage_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Visage_GravekeepersCloak_Stack {
        constexpr uint32_t m_bIsRecovering = 0x1318; // bool
        constexpr uint32_t m_nFXIndex = 0x131C; // int32[4]
    }

    namespace CDOTA_Modifier_Visage_Scepter {
        constexpr uint32_t m_flReadyTime = 0x1318; // GameTime_t
    }

    namespace CDOTA_Modifier_Visage_Silent_As_The_Grave {
        constexpr uint32_t m_bHasMadeAttack = 0x1328; // bool
    }

    namespace CDOTA_Modifier_Visage_Silent_As_The_Grave_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Visage_SoulAssumption {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t stack_limit = 0x131C; // int32
        constexpr uint32_t damage_limit = 0x1320; // int32
        constexpr uint32_t stack_duration = 0x1324; // float32
        constexpr uint32_t damage_min = 0x1328; // float32
        constexpr uint32_t damage_max = 0x132C; // float32
        constexpr uint32_t m_nFxIndexA = 0x1330; // ParticleIndex_t
        constexpr uint32_t m_nFxIndexB = 0x1334; // ParticleIndex_t
        constexpr uint32_t iCur_stack = 0x1338; // int32
        constexpr uint32_t m_fTotalDamage = 0x1358; // float32
    }

    namespace CDOTA_Modifier_Visage_SummonFamiliars_DamageCharge {
        constexpr uint32_t familiar_speed = 0x1318; // int32
        constexpr uint32_t m_nFXIndex = 0x131C; // int32
        constexpr uint32_t m_nFXIndexB = 0x1320; // int32
        constexpr uint32_t m_ctTimer = 0x1328; // CountdownTimer
    }

    namespace CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Buff {
        constexpr uint32_t hp_regen = 0x1318; // float32
        constexpr uint32_t stun_radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Thinker {
        constexpr uint32_t stun_radius = 0x1318; // int32
        constexpr uint32_t stun_damage = 0x131C; // int32
        constexpr uint32_t stun_delay = 0x1320; // float32
        constexpr uint32_t stun_duration = 0x1324; // float32
        constexpr uint32_t stone_duration = 0x1328; // float32
        constexpr uint32_t m_iIntervalCount = 0x132C; // int32
    }

    namespace CDOTA_Modifier_Visage_SummonFamiliars_StoneForm_Timer {
        constexpr uint32_t stone_duration = 0x1318; // float32
        constexpr uint32_t m_fStartTime = 0x131C; // GameTime_t
    }

    namespace CDOTA_Modifier_VoidSpirit_AetherRemnantThinker {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t m_vFacingDir = 0x131C; // Vector
        constexpr uint32_t m_hRemnant = 0x1328; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bTriggered = 0x132C; // bool
        constexpr uint32_t m_flCurThink = 0x1330; // float32
    }

    namespace CDOTA_Modifier_VoidSpirit_AetherRemnantUnit_Truesight {
        constexpr uint32_t m_nRadius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VoidSpirit_AetherRemnant_Pull {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t m_nPlayerID = 0x131C; // PlayerID_t
        constexpr uint32_t think_interval = 0x1320; // float32
    }

    namespace CDOTA_Modifier_VoidSpirit_AetherRemnant_Unit {
        constexpr uint32_t m_vFacingDir = 0x1318; // Vector
        constexpr uint32_t m_hWatchPathThinkers = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nBeamFXIndex = 0x1340; // ParticleIndex_t
        constexpr uint32_t m_nViewerIDs = 0x1348; // CUtlVector< int32 >
        constexpr uint32_t remnant_watch_distance = 0x1360; // int32
        constexpr uint32_t remnant_watch_radius = 0x1364; // int32
        constexpr uint32_t duration = 0x1368; // float32
        constexpr uint32_t watch_path_vision_radius = 0x136C; // int32
        constexpr uint32_t impact_damage = 0x1370; // int32
        constexpr uint32_t pull_duration = 0x1374; // float32
        constexpr uint32_t activation_delay = 0x1378; // float32
        constexpr uint32_t m_bPiercesCreeps = 0x137C; // bool
        constexpr uint32_t m_hAlreadyHit = 0x1380; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_VoidSpirit_AetherRemnant_WatchThinker {
        constexpr uint32_t remnant_watch_radius = 0x1318; // int32
        constexpr uint32_t m_flLastDamageTick = 0x131C; // GameTime_t
        constexpr uint32_t damage_tick_rate = 0x1320; // float32
        constexpr uint32_t flDamage = 0x1324; // float32
        constexpr uint32_t m_bPiercesCreeps = 0x1328; // bool
    }

    namespace CDOTA_Modifier_VoidSpirit_AstralStep_Caster {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_VoidSpirit_AstralStep_Debuff {
        constexpr uint32_t m_nFXStackIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t movement_slow_pct = 0x131C; // int32
        constexpr uint32_t pop_damage = 0x1320; // int32
    }

    namespace CDOTA_Modifier_VoidSpirit_AstralStep_Intrinsic {
        constexpr uint32_t ability_chance_pct = 0x1318; // int32
        constexpr uint32_t attack_chance_pct = 0x131C; // int32
        constexpr uint32_t pop_damage_delay = 0x1320; // float32
    }

    namespace CDOTA_Modifier_VoidSpirit_Dissimilate_Phase {
        constexpr uint32_t m_vFirstPortalPos = 0x1318; // Vector
        constexpr uint32_t m_vecDestinations = 0x1328; // CUtlVector< Vector >
        constexpr uint32_t m_vecDestinationParticles = 0x1340; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_vecDestinationParticles_EnemyTeam = 0x1358; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_nCurrentDestinationIndex = 0x1370; // int32
        constexpr uint32_t m_nClosestIndexPosToClick = 0x1374; // int32
        constexpr uint32_t m_nPortalHeightOffset = 0x1378; // int32
        constexpr uint32_t m_szAlliesPortalFX = 0x1380; // char*
        constexpr uint32_t m_szEnemiesPortalFX = 0x1388; // char*
        constexpr uint32_t m_nPortalRadius = 0x1390; // int32
        constexpr uint32_t m_nPortalPadding = 0x1394; // int32
        constexpr uint32_t m_nFinalImpactDamageRadius = 0x1398; // int32
        constexpr uint32_t m_nFinalImpactFXRadius = 0x139C; // int32
        constexpr uint32_t destination_fx_radius = 0x13A0; // int32
        constexpr uint32_t damage_radius = 0x13A4; // int32
        constexpr uint32_t portals_per_ring = 0x13A8; // int32
        constexpr uint32_t angle_per_ring_portal = 0x13AC; // int32
        constexpr uint32_t first_ring_distance_offset = 0x13B0; // int32
        constexpr uint32_t debuff_duration = 0x13B4; // float32
    }

    namespace CDOTA_Modifier_VoidSpirit_ResonantPulse_PhysicalBuff {
        constexpr uint32_t base_absorb_amount = 0x1318; // int32
        constexpr uint32_t m_nAbsorbRemaining = 0x131C; // int32
        constexpr uint32_t m_nMaxAbsorb = 0x1320; // int32
    }

    namespace CDOTA_Modifier_VoidSpirit_ResonantPulse_Ring {
        constexpr uint32_t m_fLastRadius = 0x1318; // float32
        constexpr uint32_t m_fCurRadius = 0x131C; // float32
        constexpr uint32_t m_fLastThink = 0x1320; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x1324; // ParticleIndex_t
        constexpr uint32_t m_EntitiesHit = 0x1328; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t speed = 0x1340; // int32
        constexpr uint32_t radius = 0x1344; // int32
        constexpr uint32_t damage = 0x1348; // int32
    }

    namespace CDOTA_Modifier_Voidwalker_Phased {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t max_damage_duration = 0x131C; // float32
        constexpr uint32_t attack_range_bonus = 0x1320; // int32
        constexpr uint32_t m_InFlightAttackRecords = 0x1328; // CUtlVector< int16 >
        constexpr uint32_t bAttackRange = 0x1340; // bool
        constexpr uint32_t m_flStartTime = 0x1344; // float32
        constexpr uint32_t m_flFadeTime = 0x1348; // float32
        constexpr uint32_t m_flDamageScale = 0x134C; // float32
        constexpr uint32_t duration = 0x1350; // float32
    }

    namespace CDOTA_Modifier_Warlock_FatalBonds {
        constexpr uint32_t m_FatalBondsEntities = 0x1318; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t damage_share_percentage = 0x1330; // int32
        constexpr uint32_t imp_duration = 0x1334; // float32
    }

    namespace CDOTA_Modifier_Warlock_Golem_Flaming_Fists {
        constexpr uint32_t damage = 0x1318; // float32
        constexpr uint32_t radius = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Warlock_Golem_Permanent_Immolation {
        constexpr uint32_t aura_radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Warlock_Golem_Permanent_Immolation_Debuff {
        constexpr uint32_t aura_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Warlock_Imp_AutoAttack {
        constexpr uint32_t m_hBestTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t bonus_hp = 0x131C; // float32
        constexpr uint32_t bonus_dmg = 0x1320; // float32
        constexpr uint32_t bonus_movespeed = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Warlock_Imp_ExplodeThinker {
        constexpr uint32_t explosion_radius = 0x1318; // float32
        constexpr uint32_t explosion_dmg = 0x131C; // float32
        constexpr uint32_t explosion_nonhero_reduce = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Warlock_Rain_Of_Chaos_Golem {
        constexpr uint32_t bonus_magic_resistance = 0x1318; // int32
        constexpr uint32_t bonus_armor = 0x131C; // int32
        constexpr uint32_t bonus_slow_resistance = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Warlock_Rain_Of_Chaos_Thinker {
        constexpr uint32_t stun_duration = 0x1318; // float32
        constexpr uint32_t bHasScepter = 0x131C; // bool
        constexpr uint32_t aoe = 0x1320; // int32
        constexpr uint32_t m_iCount = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Warlock_Shadow_Word {
        constexpr uint32_t tick_interval = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t shard_movement_speed_pct = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Warlock_Upheaval {
        constexpr uint32_t m_iSlow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Warlock_Upheaval_Ally {
        constexpr uint32_t m_iAttackSpeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_WarpineRaider_SeedShot {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_WarpineRaider_SeedShot_Slow {
        constexpr uint32_t slow = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Watch_Tower {
        constexpr uint32_t m_iCapturingTeam = 0x1318; // int32
        constexpr uint32_t m_flCaptureProgress = 0x131C; // float32
        constexpr uint32_t m_flBonusTime = 0x1320; // float32
        constexpr uint32_t m_bInitialSetupDone = 0x1324; // bool
        constexpr uint32_t m_iOriginalTeam = 0x1328; // int32
        constexpr uint32_t m_hPreviousHero = 0x132C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vecLastCreditedPlayerIDs = 0x1330; // CUtlVector< PlayerID_t >
        constexpr uint32_t m_flAccumulatedCaptureTime = 0x1348; // float32
        constexpr uint32_t m_iBonusCount = 0x134C; // int32
        constexpr uint32_t m_nFxOutpostAmbient = 0x1350; // ParticleIndex_t
        constexpr uint32_t m_nFxOutpostInitialAmbient = 0x1354; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Wave_Blast_Knockback {
        constexpr uint32_t disarm_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Weaver_GeminateAttack {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iAttacksRemaining = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Weaver_GeminateAttack_Bonus {
        constexpr uint32_t bonus_damage = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Weaver_Shukuchi {
        constexpr uint32_t radius = 0x1328; // int32
        constexpr uint32_t damage = 0x132C; // int32
        constexpr uint32_t speed = 0x1330; // int32
        constexpr uint32_t geminate_attack_mark_duration = 0x1334; // float32
        constexpr uint32_t m_hEntitiesAffected = 0x1338; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Weaver_Shukuchi_GeminateAttackManager {
        constexpr uint32_t m_iAttacksRemaining = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Weaver_Swarm {
        constexpr uint32_t m_iMaxDist = 0x1318; // int32
        constexpr uint32_t m_iAttackCount = 0x131C; // int32
        constexpr uint32_t destroy_attacks = 0x1320; // int32
        constexpr uint32_t m_vDirection = 0x1324; // Vector
        constexpr uint32_t m_vStartLoc = 0x1330; // Vector
        constexpr uint32_t m_hAttachTarget = 0x133C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Weaver_Swarm_Debuff {
        constexpr uint32_t armor_reduction = 0x1318; // float32
        constexpr uint32_t damage = 0x131C; // int32
        constexpr uint32_t m_flCurrentArmorReduction = 0x1320; // float32
    }

    namespace CDOTA_Modifier_Weaver_TimeLapse {
        constexpr uint32_t m_PositionIndex = 0x1318; // Vector[11]
        constexpr uint32_t m_flLife = 0x139C; // float32[11]
        constexpr uint32_t m_flMana = 0x13C8; // float32[11]
        constexpr uint32_t m_bHasValidHistory = 0x13F4; // bool
    }

    namespace CDOTA_Modifier_Whisper_Of_The_Dread {
        constexpr uint32_t bonus_mana = 0x1318; // int32
        constexpr uint32_t bonus_spell_damage = 0x131C; // int32
        constexpr uint32_t vision_penalty = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Wildkin_Tornado {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Wind_Waker {
        constexpr uint32_t m_hBlocker = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flStartTime = 0x131C; // GameTime_t
    }

    namespace CDOTA_Modifier_Windrunner_Arcana_Kill_Effect {
        constexpr uint32_t m_bFrozen = 0x1318; // bool
    }

    namespace CDOTA_Modifier_Windrunner_FocusFire {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t focusfire_damage_reduction = 0x131C; // int32
        constexpr uint32_t bActive = 0x1320; // bool
        constexpr uint32_t bonus_attack_speed = 0x1324; // int32
        constexpr uint32_t focusfire_fire_on_the_move = 0x1328; // int32
        constexpr uint32_t m_bPause = 0x132C; // bool
        constexpr uint32_t m_nNumArrowsLanded = 0x1330; // int32
        constexpr uint32_t m_nDamageDealt = 0x1334; // int32
        constexpr uint32_t m_nDamageDealtMax = 0x1338; // int32
        constexpr uint32_t m_nTargetInitialHP = 0x133C; // int32
        constexpr uint32_t m_bHeroKilled = 0x1340; // bool
        constexpr uint32_t m_bRecentFocusFireAttack = 0x1341; // bool
        constexpr uint32_t m_nFXFocusFire = 0x134C; // ParticleIndex_t
        constexpr uint32_t m_flLastFocusFireAttackTime = 0x1350; // GameTime_t
    }

    namespace CDOTA_Modifier_Windrunner_GaleForce_Aura {
        constexpr uint32_t radius = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Windrunner_Powershot_Slow {
        constexpr uint32_t enemy_movespeed_bonus_pct = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Windrunner_Windrun {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t scepter_radius = 0x131C; // int32
        constexpr uint32_t movespeed_bonus_pct = 0x1320; // int32
        constexpr uint32_t m_bDispellable = 0x1324; // bool
        constexpr uint32_t physical_damage_pct = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Windrunner_Windrun_Invis_Thinker {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Windrunner_Windrun_Slow {
        constexpr uint32_t enemy_movespeed_bonus_pct = 0x1318; // float32
        constexpr uint32_t scepter_movespeed_bonus_pct = 0x131C; // float32
        constexpr uint32_t scepter_blind = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Flight {
        constexpr uint32_t attack_point = 0x1318; // float32
        constexpr uint32_t attack_range_bonus = 0x131C; // int32
        constexpr uint32_t projectile_speed_bonus = 0x1320; // int32
        constexpr uint32_t night_vision_bonus = 0x1324; // int32
        constexpr uint32_t movement_scepter = 0x1328; // int32
        constexpr uint32_t m_iszRangedAttackEffect = 0x1330; // CUtlSymbolLarge
        constexpr uint32_t max_attacks = 0x1338; // int32
        constexpr uint32_t m_iNumAttacks = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Frost_Attack {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Arctic_Burn_Slow {
        constexpr uint32_t percent_damage = 0x1318; // float32
        constexpr uint32_t move_slow = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Cold_Embrace {
        constexpr uint32_t heal_additive = 0x1320; // int32
        constexpr uint32_t heal_percentage = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Splinter_Blast_Slow {
        constexpr uint32_t bonus_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Winters_Curse {
        constexpr uint32_t m_hZombieTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hDesiredTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t damage_reduction = 0x1320; // int32
        constexpr uint32_t damage_amplification = 0x1324; // int32
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Aura {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nAlliesTaunted = 0x131C; // int32
        constexpr uint32_t m_bRelicTriggered = 0x1320; // bool
        constexpr uint32_t radius = 0x1324; // int32
        constexpr uint32_t damage_amplification = 0x1328; // int32
        constexpr uint32_t damage_reduction = 0x132C; // int32
        constexpr uint32_t m_flLastSeen = 0x1330; // GameTime_t
    }

    namespace CDOTA_Modifier_Winter_Wyvern_Winters_Curse_Kill_Credit {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
    }

    namespace CDOTA_Modifier_Wisp_Overcharge {
        constexpr uint32_t bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t bonus_spell_amp = 0x131C; // int32
        constexpr uint32_t shard_bonus_slow_resistance = 0x1320; // int32
        constexpr uint32_t hp_regen = 0x1324; // float32
    }

    namespace CDOTA_Modifier_Wisp_Relocate_Return {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vecReturnPosition = 0x131C; // Vector
        constexpr uint32_t return_time = 0x1328; // float32
        constexpr uint32_t m_nFXTimeRemaining = 0x132C; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Wisp_Relocate_Thinker {
        constexpr uint32_t cast_delay = 0x1318; // float32
        constexpr uint32_t m_nFXIndexEndTeam = 0x131C; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexChannel = 0x1320; // ParticleIndex_t
    }

    namespace CDOTA_Modifier_Wisp_Spirits {
        constexpr uint32_t creep_damage = 0x1318; // int32
        constexpr uint32_t hero_damage = 0x131C; // int32
        constexpr uint32_t hit_radius = 0x1320; // int32
        constexpr uint32_t hero_hit_radius = 0x1324; // int32
        constexpr uint32_t explode_radius = 0x1328; // int32
        constexpr uint32_t min_range = 0x132C; // int32
        constexpr uint32_t max_range = 0x1330; // int32
        constexpr uint32_t default_radius = 0x1334; // int32
        constexpr uint32_t spirit_amount = 0x1338; // int32
        constexpr uint32_t m_flRotation = 0x133C; // float32
        constexpr uint32_t m_flSpiritRadius = 0x1340; // float32
        constexpr uint32_t spirit_movement_rate = 0x1344; // int32
        constexpr uint32_t m_flNextSpawn = 0x1348; // GameTime_t
        constexpr uint32_t m_strSpiritsOutSwapAbility = 0x1350; // CUtlString
    }

    namespace CDOTA_Modifier_Wisp_Spirits_Slow {
        constexpr uint32_t scepter_slow_pct = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Wisp_Tentacles {
        constexpr uint32_t m_nFXIndex = 0x1318; // ParticleIndex_t
        constexpr uint32_t hCurrentEntity = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Wisp_Tether {
        constexpr uint32_t m_bInManaGained = 0x1318; // bool
        constexpr uint32_t m_hTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t hStunnedEntities = 0x1320; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t stun_duration = 0x1338; // float32
        constexpr uint32_t movespeed = 0x133C; // int32
        constexpr uint32_t self_bonus = 0x1340; // int32
        constexpr uint32_t m_bIsInRange = 0x1344; // bool
        constexpr uint32_t radius = 0x1348; // int32
        constexpr uint32_t latch_distance = 0x134C; // int32
        constexpr uint32_t m_flHealthHealed = 0x1350; // float32
        constexpr uint32_t m_flManaHealed = 0x1354; // float32
        constexpr uint32_t tether_heal_amp = 0x1358; // float32
        constexpr uint32_t m_flHealMessageTime = 0x135C; // GameTime_t
        constexpr uint32_t m_flManaMessageTime = 0x1360; // GameTime_t
    }

    namespace CDOTA_Modifier_Wisp_Tether_Haste {
        constexpr uint32_t movespeed = 0x1318; // float32
        constexpr uint32_t shard_bonus_spell_lifesteal = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Wisp_Tether_Slow {
        constexpr uint32_t slow = 0x1318; // int32
        constexpr uint32_t tick_rate = 0x131C; // float32
    }

    namespace CDOTA_Modifier_Wisp_Tether_Spell_Lifesteal {
        constexpr uint32_t shard_bonus_spell_lifesteal = 0x1318; // float32
    }

    namespace CDOTA_Modifier_WitchDoctor_Cask_Thinker {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_WitchDoctor_DeathWard {
        constexpr uint32_t bonus_damage = 0x1318; // int32
        constexpr uint32_t m_iBounceRadius = 0x131C; // int32
        constexpr uint32_t bonus_accuracy = 0x1320; // int32
        constexpr uint32_t m_bFirstAttack = 0x1324; // bool
    }

    namespace CDOTA_Modifier_WitchDoctor_DeathWard_Voodoo_Switcheroo_AttackSpeedReduction {
        constexpr uint32_t attack_speed_reduction = 0x1318; // int32
    }

    namespace CDOTA_Modifier_WitchDoctor_Maledict {
        constexpr uint32_t m_iStartHealth = 0x1318; // int32
        constexpr uint32_t bonus_damage = 0x131C; // int32
        constexpr uint32_t bonus_damage_threshold = 0x1320; // int32
        constexpr uint32_t ticks = 0x1324; // int32
        constexpr uint32_t iCurrentTick = 0x1328; // int32
    }

    namespace CDOTA_Modifier_WitchDoctor_Voodoo_Restoration_Heal {
        constexpr uint32_t heal = 0x1318; // int32
        constexpr uint32_t mana_per_second = 0x131C; // float32
        constexpr uint32_t heal_interval = 0x1320; // float32
        constexpr uint32_t enemy_damage_pct = 0x1324; // int32
    }

    namespace CDOTA_Modifier_WitchDoctor_Voodoo_Switcheroo {
        constexpr uint32_t m_vSavedPos = 0x1318; // Vector
        constexpr uint32_t m_hSavedAbility = 0x1324; // CHandle< C_BaseEntity >
    }

    namespace CDOTA_Modifier_Woodland_Striders_Active {
        constexpr uint32_t tree_duration = 0x1318; // float32
    }

    namespace CDOTA_Modifier_Yasha_And_Kaya_Maim {
        constexpr uint32_t maim_slow_movement = 0x1318; // int32
        constexpr uint32_t maim_slow_attack = 0x131C; // int32
        constexpr uint32_t maim_slow_movement_range = 0x1320; // int32
        constexpr uint32_t maim_slow_attack_range = 0x1324; // int32
    }

    namespace CDOTA_Modifier_Zombie_Berserk {
        constexpr uint32_t berserk_bonus_attack_speed = 0x1318; // int32
        constexpr uint32_t berserk_bonus_movement_speed = 0x131C; // int32
    }

    namespace CDOTA_Modifier_Zuus_ArcLightning {
        constexpr uint32_t radius = 0x1318; // int32
        constexpr uint32_t jump_count = 0x131C; // int32
        constexpr uint32_t arc_damage = 0x1320; // int32
        constexpr uint32_t jump_delay = 0x1324; // float32
        constexpr uint32_t damage_health_pct = 0x1328; // int32
        constexpr uint32_t total_damage_pct = 0x132C; // int32
        constexpr uint32_t m_iCurJumpCount = 0x1330; // int32
        constexpr uint32_t trigger_spell_absorb = 0x1334; // bool
        constexpr uint32_t m_vCurTargetLoc = 0x1338; // Vector
        constexpr uint32_t m_hHitEntities = 0x1348; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_Modifier_Zuus_Cloud {
        constexpr uint32_t m_CloudBoltTimer = 0x1318; // CountdownTimer
        constexpr uint32_t cloud_bolt_interval = 0x1330; // float32
        constexpr uint32_t cloud_radius = 0x1334; // int32
    }

    namespace CDOTA_Modifier_Zuus_Heavenly_Jump_Boost {
        constexpr uint32_t postjump_movespeed = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Zuus_Lightning_Hands {
        constexpr uint32_t m_InFlightAttackRecords = 0x1318; // CUtlVector< int16 >
        constexpr uint32_t m_nFXIndex = 0x1330; // ParticleIndex_t
        constexpr uint32_t arc_lightning_damage_pct = 0x1334; // int32
        constexpr uint32_t arc_lightning_damage_illusion_pct = 0x1338; // int32
        constexpr uint32_t attack_range_bonus = 0x133C; // int32
    }

    namespace CDOTA_Modifier_Zuus_Static_Field_Slow {
        constexpr uint32_t move_slow = 0x1318; // int32
        constexpr uint32_t aspd_slow = 0x131C; // int32
        constexpr uint32_t cast_slow = 0x1320; // int32
    }

    namespace CDOTA_Modifier_Zuus_ThunderTrail_Debuff {
        constexpr uint32_t debuff_spell_amp = 0x1318; // int32
    }

    namespace CDOTA_Modifier_Zuus_ThundergodsWrathThinker {
        constexpr uint32_t damage = 0x1318; // int32
        constexpr uint32_t damage_pct = 0x131C; // float32
        constexpr uint32_t sight_duration = 0x1320; // float32
        constexpr uint32_t second_strike_damage_percent = 0x1324; // int32
        constexpr uint32_t second_strike_delay = 0x1328; // float32
    }

    namespace CDOTA_NPC_Observer_Ward {
        constexpr uint32_t m_iDuration = 0x1768; // int32
        constexpr uint32_t m_pVisionRangeFX = 0x1770; // CNewParticleEffect*
        constexpr uint32_t m_nPreviewViewer = 0x1778; // int32
    }

    namespace CDOTA_NPC_Observer_Ward_TrueSight {
        constexpr uint32_t m_iTrueSight = 0x1780; // int32
        constexpr uint32_t m_hCasterEntity = 0x1784; // CEntityHandle
        constexpr uint32_t m_hAbilityEntity = 0x1788; // CEntityHandle
    }

    namespace CDOTA_PlayerChallengeInfo {
        constexpr uint32_t nType = 0x30; // int32
        constexpr uint32_t nQuestID = 0x34; // int32
        constexpr uint32_t nQuestChallengeID = 0x38; // int32
        constexpr uint32_t nTier = 0x3C; // int32
        constexpr uint32_t nParam0 = 0x40; // int32
        constexpr uint32_t nParam1 = 0x44; // int32
        constexpr uint32_t nSlotID = 0x48; // int32
        constexpr uint32_t nProgress = 0x4C; // int32
        constexpr uint32_t nCompletionThreshold = 0x50; // int32
        constexpr uint32_t nPlayerID = 0x54; // PlayerID_t
        constexpr uint32_t nQueryIndex = 0x58; // int32
        constexpr uint32_t nEventID = 0x5C; // int32
        constexpr uint32_t nSequenceID = 0x60; // int32
        constexpr uint32_t nCompleted = 0x64; // int32
        constexpr uint32_t nRank = 0x68; // int32
    }

    namespace CDOTA_Unit_Announcer {
        constexpr uint32_t m_currentAnnouncer = 0x1768; // CAnnouncerDescriptor
    }

    namespace CDOTA_Unit_Hero_AbyssalUnderlord {
        constexpr uint32_t m_iRangeFX = 0x1AC8; // ParticleIndex_t
    }

    namespace CDOTA_Unit_Hero_ArcWarden {
        constexpr uint32_t m_nTalkFXIndex = 0x1AC8; // ParticleIndex_t
        constexpr uint32_t m_nFXDeath = 0x1ACC; // ParticleIndex_t
        constexpr uint32_t m_nTempestFX = 0x1AD0; // ParticleIndex_t
    }

    namespace CDOTA_Unit_Hero_Dawnbreaker {
        constexpr uint32_t m_nAttackState = 0x1AC8; // int32
    }

    namespace CDOTA_Unit_Hero_Grimstroke {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace CDOTA_modifier_aghsfort_juggernaut_omnislash {
        constexpr uint32_t m_hTarget = 0x1318; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hLastTarget = 0x131C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nJumps = 0x1320; // int32
        constexpr uint32_t bonus_damage = 0x1324; // int32
        constexpr uint32_t bonus_attack_speed = 0x1328; // int32
        constexpr uint32_t omni_slash_radius = 0x132C; // int32
        constexpr uint32_t attack_rate_multiplier = 0x1330; // float32
        constexpr uint32_t upgraded_radius = 0x1334; // int32
        constexpr uint32_t m_iTotalDamage = 0x1338; // int32
        constexpr uint32_t m_iHeroDamage = 0x133C; // int32
        constexpr uint32_t m_bReflection = 0x1340; // bool
        constexpr uint32_t m_bFirstHit = 0x1341; // bool
        constexpr uint32_t m_bEndNext = 0x1342; // bool
        constexpr uint32_t m_fNextAttackTime = 0x1344; // GameTime_t
        constexpr uint32_t m_vCastOrigin = 0x1348; // Vector
        constexpr uint32_t m_hIllusions = 0x1358; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace CDOTA_modifier_aghsfort_juggernaut_omnislash_Camera {
        constexpr uint32_t m_bIsDone = 0x1318; // bool
        constexpr uint32_t m_hFollowEnt = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace CDecalInfo {
        constexpr uint32_t m_flAnimationScale = 0x0; // float32
        constexpr uint32_t m_flAnimationLifeSpan = 0x4; // float32
        constexpr uint32_t m_flPlaceTime = 0x8; // float32
        constexpr uint32_t m_flFadeStartTime = 0xC; // float32
        constexpr uint32_t m_flFadeDuration = 0x10; // float32
        constexpr uint32_t m_nVBSlot = 0x14; // int32
        constexpr uint32_t m_nBoneIndex = 0x18; // int32
        constexpr uint32_t m_pNext = 0x28; // CDecalInfo*
        constexpr uint32_t m_pPrev = 0x30; // CDecalInfo*
        constexpr uint32_t m_nDecalMaterialIndex = 0x90; // int32
    }

    namespace CDeferredLightBase {
        constexpr uint32_t m_LightColor = 0x10; // Color
        constexpr uint32_t m_flIntensity = 0x14; // float32
        constexpr uint32_t m_flLightSize = 0x18; // float32
        constexpr uint32_t m_flSpotFoV = 0x1C; // float32
        constexpr uint32_t m_vLightDirection = 0x20; // QAngle
        constexpr uint32_t m_flStartFalloff = 0x2C; // float32
        constexpr uint32_t m_flDistanceFalloff = 0x30; // float32
        constexpr uint32_t m_nFlags = 0x34; // uint32
        constexpr uint32_t m_ProjectedTextureName = 0x38; // char[512]
    }

    namespace CEffectData {
        constexpr uint32_t m_vOrigin = 0x8; // Vector
        constexpr uint32_t m_vStart = 0x14; // Vector
        constexpr uint32_t m_vNormal = 0x20; // Vector
        constexpr uint32_t m_vAngles = 0x2C; // QAngle
        constexpr uint32_t m_hEntity = 0x38; // CEntityHandle
        constexpr uint32_t m_hOtherEntity = 0x3C; // CEntityHandle
        constexpr uint32_t m_flScale = 0x40; // float32
        constexpr uint32_t m_flMagnitude = 0x44; // float32
        constexpr uint32_t m_flRadius = 0x48; // float32
        constexpr uint32_t m_nSurfaceProp = 0x4C; // CUtlStringToken
        constexpr uint32_t m_nEffectIndex = 0x50; // CWeakHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_nDamageType = 0x58; // uint32
        constexpr uint32_t m_nPenetrate = 0x5C; // uint8
        constexpr uint32_t m_nMaterial = 0x5E; // uint16
        constexpr uint32_t m_nHitBox = 0x60; // uint16
        constexpr uint32_t m_nColor = 0x62; // uint8
        constexpr uint32_t m_fFlags = 0x63; // uint8
        constexpr uint32_t m_nAttachmentIndex = 0x64; // AttachmentHandle_t
        constexpr uint32_t m_nAttachmentName = 0x68; // CUtlStringToken
        constexpr uint32_t m_iEffectName = 0x6C; // uint16
        constexpr uint32_t m_nExplosionType = 0x6E; // uint8
    }

    namespace CEntityIdentity {
        constexpr uint32_t m_nameStringableIndex = 0x14; // int32
        constexpr uint32_t m_name = 0x18; // CUtlSymbolLarge
        constexpr uint32_t m_designerName = 0x20; // CUtlSymbolLarge
        constexpr uint32_t m_flags = 0x30; // uint32
        constexpr uint32_t m_worldGroupId = 0x38; // WorldGroupId_t
        constexpr uint32_t m_fDataObjectTypes = 0x3C; // uint32
        constexpr uint32_t m_PathIndex = 0x40; // ChangeAccessorFieldPathIndex_t
        constexpr uint32_t m_pPrev = 0x58; // CEntityIdentity*
        constexpr uint32_t m_pNext = 0x60; // CEntityIdentity*
        constexpr uint32_t m_pPrevByClass = 0x68; // CEntityIdentity*
        constexpr uint32_t m_pNextByClass = 0x70; // CEntityIdentity*
    }

    namespace CEntityInstance {
        constexpr uint32_t m_iszPrivateVScripts = 0x8; // CUtlSymbolLarge
        constexpr uint32_t m_pEntity = 0x10; // CEntityIdentity*
        constexpr uint32_t m_CScriptComponent = 0x28; // CScriptComponent*
    }

    namespace CFlashlightEffect {
        constexpr uint32_t m_bIsOn = 0x10; // bool
        constexpr uint32_t m_bMuzzleFlashEnabled = 0x20; // bool
        constexpr uint32_t m_flMuzzleFlashBrightness = 0x24; // float32
        constexpr uint32_t m_quatMuzzleFlashOrientation = 0x30; // Quaternion
        constexpr uint32_t m_vecMuzzleFlashOrigin = 0x40; // Vector
        constexpr uint32_t m_flFov = 0x4C; // float32
        constexpr uint32_t m_flFarZ = 0x50; // float32
        constexpr uint32_t m_flLinearAtten = 0x54; // float32
        constexpr uint32_t m_bCastsShadows = 0x58; // bool
        constexpr uint32_t m_flCurrentPullBackDist = 0x5C; // float32
        constexpr uint32_t m_FlashlightTexture = 0x60; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_MuzzleFlashTexture = 0x68; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_textureName = 0x70; // char[64]
    }

    namespace CFoWBlockerRegion {
        constexpr uint32_t m_vecFowBlockers = 0x538; // C_UtlVectorEmbeddedNetworkVar< FowBlocker_t >
        constexpr uint32_t m_flMinX = 0x588; // float32
        constexpr uint32_t m_flMaxX = 0x58C; // float32
        constexpr uint32_t m_flMinY = 0x590; // float32
        constexpr uint32_t m_flMaxY = 0x594; // float32
        constexpr uint32_t m_flGridSize = 0x598; // float32
    }

    namespace CGameSceneNode {
        constexpr uint32_t m_nodeToWorld = 0x10; // CTransform
        constexpr uint32_t m_pOwner = 0x30; // CEntityInstance*
        constexpr uint32_t m_pParent = 0x38; // CGameSceneNode*
        constexpr uint32_t m_pChild = 0x40; // CGameSceneNode*
        constexpr uint32_t m_pNextSibling = 0x48; // CGameSceneNode*
        constexpr uint32_t m_hParent = 0x70; // CGameSceneNodeHandle
        constexpr uint32_t m_vecOrigin = 0x80; // CNetworkOriginCellCoordQuantizedVector
        constexpr uint32_t m_angRotation = 0xB8; // QAngle
        constexpr uint32_t m_flScale = 0xC4; // float32
        constexpr uint32_t m_vecAbsOrigin = 0xC8; // Vector
        constexpr uint32_t m_angAbsRotation = 0xD4; // QAngle
        constexpr uint32_t m_flAbsScale = 0xE0; // float32
        constexpr uint32_t m_nParentAttachmentOrBone = 0xE4; // int16
        constexpr uint32_t m_bDebugAbsOriginChanges = 0xE6; // bool
        constexpr uint32_t m_bDormant = 0xE7; // bool
        constexpr uint32_t m_bForceParentToBeNetworked = 0xE8; // bool
        constexpr uint32_t m_bDirtyHierarchy = 0x0; // bitfield:1
        constexpr uint32_t m_bDirtyBoneMergeInfo = 0x0; // bitfield:1
        constexpr uint32_t m_bNetworkedPositionChanged = 0x0; // bitfield:1
        constexpr uint32_t m_bNetworkedAnglesChanged = 0x0; // bitfield:1
        constexpr uint32_t m_bNetworkedScaleChanged = 0x0; // bitfield:1
        constexpr uint32_t m_bWillBeCallingPostDataUpdate = 0x0; // bitfield:1
        constexpr uint32_t m_bNotifyBoneTransformsChanged = 0x0; // bitfield:1
        constexpr uint32_t m_bBoneMergeFlex = 0x0; // bitfield:1
        constexpr uint32_t m_nLatchAbsOrigin = 0x0; // bitfield:2
        constexpr uint32_t m_bDirtyBoneMergeBoneToRoot = 0x0; // bitfield:1
        constexpr uint32_t m_nHierarchicalDepth = 0xEB; // uint8
        constexpr uint32_t m_nHierarchyType = 0xEC; // uint8
        constexpr uint32_t m_nDoNotSetAnimTimeInInvalidatePhysicsCount = 0xED; // uint8
        constexpr uint32_t m_name = 0xF0; // CUtlStringToken
        constexpr uint32_t m_hierarchyAttachName = 0x130; // CUtlStringToken
        constexpr uint32_t m_flZOffset = 0x134; // float32
        constexpr uint32_t m_vRenderOrigin = 0x138; // Vector
    }

    namespace CGameSceneNodeHandle {
        constexpr uint32_t m_hOwner = 0x8; // CEntityHandle
        constexpr uint32_t m_name = 0xC; // CUtlStringToken
    }

    namespace CGlobalLightBase {
        constexpr uint32_t m_bSpotLight = 0x10; // bool
        constexpr uint32_t m_SpotLightOrigin = 0x14; // Vector
        constexpr uint32_t m_SpotLightAngles = 0x20; // QAngle
        constexpr uint32_t m_ShadowDirection = 0x2C; // Vector
        constexpr uint32_t m_AmbientDirection = 0x38; // Vector
        constexpr uint32_t m_SpecularDirection = 0x44; // Vector
        constexpr uint32_t m_InspectorSpecularDirection = 0x50; // Vector
        constexpr uint32_t m_flSpecularPower = 0x5C; // float32
        constexpr uint32_t m_flSpecularIndependence = 0x60; // float32
        constexpr uint32_t m_SpecularColor = 0x64; // Color
        constexpr uint32_t m_bStartDisabled = 0x68; // bool
        constexpr uint32_t m_bEnabled = 0x69; // bool
        constexpr uint32_t m_LightColor = 0x6A; // Color
        constexpr uint32_t m_AmbientColor1 = 0x6E; // Color
        constexpr uint32_t m_AmbientColor2 = 0x72; // Color
        constexpr uint32_t m_AmbientColor3 = 0x76; // Color
        constexpr uint32_t m_flSunDistance = 0x7C; // float32
        constexpr uint32_t m_flFOV = 0x80; // float32
        constexpr uint32_t m_flNearZ = 0x84; // float32
        constexpr uint32_t m_flFarZ = 0x88; // float32
        constexpr uint32_t m_bEnableShadows = 0x8C; // bool
        constexpr uint32_t m_bOldEnableShadows = 0x8D; // bool
        constexpr uint32_t m_bBackgroundClearNotRequired = 0x8E; // bool
        constexpr uint32_t m_flCloudScale = 0x90; // float32
        constexpr uint32_t m_flCloud1Speed = 0x94; // float32
        constexpr uint32_t m_flCloud1Direction = 0x98; // float32
        constexpr uint32_t m_flCloud2Speed = 0x9C; // float32
        constexpr uint32_t m_flCloud2Direction = 0xA0; // float32
        constexpr uint32_t m_flAmbientScale1 = 0xB0; // float32
        constexpr uint32_t m_flAmbientScale2 = 0xB4; // float32
        constexpr uint32_t m_flGroundScale = 0xB8; // float32
        constexpr uint32_t m_flLightScale = 0xBC; // float32
        constexpr uint32_t m_flFoWDarkness = 0xC0; // float32
        constexpr uint32_t m_bEnableSeparateSkyboxFog = 0xC4; // bool
        constexpr uint32_t m_vFowColor = 0xC8; // Vector
        constexpr uint32_t m_ViewOrigin = 0xD4; // Vector
        constexpr uint32_t m_ViewAngles = 0xE0; // QAngle
        constexpr uint32_t m_flViewFoV = 0xEC; // float32
        constexpr uint32_t m_WorldPoints = 0xF0; // Vector[8]
        constexpr uint32_t m_vFogOffsetLayer0 = 0x4A8; // Vector2D
        constexpr uint32_t m_vFogOffsetLayer1 = 0x4B0; // Vector2D
        constexpr uint32_t m_hEnvWind = 0x4B8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hEnvSky = 0x4BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_fSmoothedAmount = 0x4C0; // float32
        constexpr uint32_t m_fSlowSmoothedAmount = 0x4C4; // float32
    }

    namespace CGlowOverlay {
        constexpr uint32_t m_vPos = 0x8; // Vector
        constexpr uint32_t m_bDirectional = 0x14; // bool
        constexpr uint32_t m_vDirection = 0x18; // Vector
        constexpr uint32_t m_bInSky = 0x24; // bool
        constexpr uint32_t m_skyObstructionScale = 0x28; // float32
        constexpr uint32_t m_Sprites = 0x30; // CGlowSprite[4]
        constexpr uint32_t m_nSprites = 0xB0; // int32
        constexpr uint32_t m_flProxyRadius = 0xB4; // float32
        constexpr uint32_t m_flHDRColorScale = 0xB8; // float32
        constexpr uint32_t m_flGlowObstructionScale = 0xBC; // float32
        constexpr uint32_t m_bCacheGlowObstruction = 0xC0; // bool
        constexpr uint32_t m_bCacheSkyObstruction = 0xC1; // bool
        constexpr uint32_t m_bActivated = 0xC2; // int16
        constexpr uint32_t m_ListIndex = 0xC4; // uint16
        constexpr uint32_t m_queryHandle = 0xC8; // int32
    }

    namespace CGlowProperty {
        constexpr uint32_t m_fGlowColor = 0x8; // Vector
        constexpr uint32_t m_iGlowType = 0x30; // int32
        constexpr uint32_t m_iGlowTeam = 0x34; // int32
        constexpr uint32_t m_nGlowRange = 0x38; // int32
        constexpr uint32_t m_nGlowRangeMin = 0x3C; // int32
        constexpr uint32_t m_glowColorOverride = 0x40; // Color
        constexpr uint32_t m_bFlashing = 0x44; // bool
        constexpr uint32_t m_flGlowTime = 0x48; // float32
        constexpr uint32_t m_flGlowStartTime = 0x4C; // float32
        constexpr uint32_t m_bGlowing = 0x50; // bool
    }

    namespace CGlowSprite {
        constexpr uint32_t m_vColor = 0x0; // Vector
        constexpr uint32_t m_flHorzSize = 0xC; // float32
        constexpr uint32_t m_flVertSize = 0x10; // float32
        constexpr uint32_t m_hMaterial = 0x18; // CStrongHandle< InfoForResourceTypeIMaterial2 >
    }

    namespace CHeroStatueLiked {
        constexpr uint32_t m_iPlayerIDLiker = 0x30; // PlayerID_t
        constexpr uint32_t m_iPlayerIDLiked = 0x34; // PlayerID_t
    }

    namespace CHeroesPerPlayer {
        constexpr uint32_t m_vecHeroIDs = 0x30; // C_NetworkUtlVectorBase< int32 >
    }

    namespace CHitboxComponent {
        constexpr uint32_t m_bvDisabledHitGroups = 0x24; // uint32[1]
    }

    namespace CInfoDynamicShadowHint {
        constexpr uint32_t m_bDisabled = 0x538; // bool
        constexpr uint32_t m_flRange = 0x53C; // float32
        constexpr uint32_t m_nImportance = 0x540; // int32
        constexpr uint32_t m_nLightChoice = 0x544; // int32
        constexpr uint32_t m_hLight = 0x548; // CHandle< C_BaseEntity >
    }

    namespace CInfoDynamicShadowHintBox {
        constexpr uint32_t m_vBoxMins = 0x550; // Vector
        constexpr uint32_t m_vBoxMaxs = 0x55C; // Vector
    }

    namespace CInfoOffscreenPanoramaTexture {
        constexpr uint32_t m_bDisabled = 0x538; // bool
        constexpr uint32_t m_nResolutionX = 0x53C; // int32
        constexpr uint32_t m_nResolutionY = 0x540; // int32
        constexpr uint32_t m_szLayoutFileName = 0x548; // CUtlSymbolLarge
        constexpr uint32_t m_RenderAttrName = 0x550; // CUtlSymbolLarge
        constexpr uint32_t m_TargetEntities = 0x558; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
        constexpr uint32_t m_nTargetChangeCount = 0x570; // int32
        constexpr uint32_t m_vecCSSClasses = 0x578; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
        constexpr uint32_t m_bCheckCSSClasses = 0x6F0; // bool
    }

    namespace CInfoWorldLayer {
        constexpr uint32_t m_pOutputOnEntitiesSpawned = 0x538; // CEntityIOOutput
        constexpr uint32_t m_worldName = 0x560; // CUtlSymbolLarge
        constexpr uint32_t m_layerName = 0x568; // CUtlSymbolLarge
        constexpr uint32_t m_bWorldLayerVisible = 0x570; // bool
        constexpr uint32_t m_bEntitiesSpawned = 0x571; // bool
        constexpr uint32_t m_bCreateAsChildSpawnGroup = 0x572; // bool
        constexpr uint32_t m_hLayerSpawnGroup = 0x574; // uint32
        constexpr uint32_t m_bWorldLayerActuallyVisible = 0x578; // bool
    }

    namespace CIngameEvent_MuertaReleaseSpring2023 {
        constexpr uint32_t m_bMiniGameActive = 0x18C0; // bool
        constexpr uint32_t m_vecTargetAssignments = 0x18C1; // int8[10]
        constexpr uint32_t m_vecMiniGamePoints = 0x18CB; // uint8[10]
        constexpr uint32_t m_vecMiniGameKills = 0x18D5; // uint8[10]
        constexpr uint32_t m_activeGravestones = 0x18F0; // CUtlVector< ParticleIndex_t >
    }

    namespace CInterpolatedValue {
        constexpr uint32_t m_flStartTime = 0x0; // float32
        constexpr uint32_t m_flEndTime = 0x4; // float32
        constexpr uint32_t m_flStartValue = 0x8; // float32
        constexpr uint32_t m_flEndValue = 0xC; // float32
        constexpr uint32_t m_nInterpType = 0x10; // int32
    }

    namespace CLightComponent {
        constexpr uint32_t __m_pChainEntity = 0x48; // CNetworkVarChainer
        constexpr uint32_t m_Color = 0x85; // Color
        constexpr uint32_t m_SecondaryColor = 0x89; // Color
        constexpr uint32_t m_flBrightness = 0x90; // float32
        constexpr uint32_t m_flBrightnessScale = 0x94; // float32
        constexpr uint32_t m_flBrightnessMult = 0x98; // float32
        constexpr uint32_t m_flRange = 0x9C; // float32
        constexpr uint32_t m_flFalloff = 0xA0; // float32
        constexpr uint32_t m_flAttenuation0 = 0xA4; // float32
        constexpr uint32_t m_flAttenuation1 = 0xA8; // float32
        constexpr uint32_t m_flAttenuation2 = 0xAC; // float32
        constexpr uint32_t m_flTheta = 0xB0; // float32
        constexpr uint32_t m_flPhi = 0xB4; // float32
        constexpr uint32_t m_hLightCookie = 0xB8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_nCascades = 0xC0; // int32
        constexpr uint32_t m_nCastShadows = 0xC4; // int32
        constexpr uint32_t m_nShadowWidth = 0xC8; // int32
        constexpr uint32_t m_nShadowHeight = 0xCC; // int32
        constexpr uint32_t m_bRenderDiffuse = 0xD0; // bool
        constexpr uint32_t m_nRenderSpecular = 0xD4; // int32
        constexpr uint32_t m_bRenderTransmissive = 0xD8; // bool
        constexpr uint32_t m_flOrthoLightWidth = 0xDC; // float32
        constexpr uint32_t m_flOrthoLightHeight = 0xE0; // float32
        constexpr uint32_t m_nStyle = 0xE4; // int32
        constexpr uint32_t m_Pattern = 0xE8; // CUtlString
        constexpr uint32_t m_nCascadeRenderStaticObjects = 0xF0; // int32
        constexpr uint32_t m_flShadowCascadeCrossFade = 0xF4; // float32
        constexpr uint32_t m_flShadowCascadeDistanceFade = 0xF8; // float32
        constexpr uint32_t m_flShadowCascadeDistance0 = 0xFC; // float32
        constexpr uint32_t m_flShadowCascadeDistance1 = 0x100; // float32
        constexpr uint32_t m_flShadowCascadeDistance2 = 0x104; // float32
        constexpr uint32_t m_flShadowCascadeDistance3 = 0x108; // float32
        constexpr uint32_t m_nShadowCascadeResolution0 = 0x10C; // int32
        constexpr uint32_t m_nShadowCascadeResolution1 = 0x110; // int32
        constexpr uint32_t m_nShadowCascadeResolution2 = 0x114; // int32
        constexpr uint32_t m_nShadowCascadeResolution3 = 0x118; // int32
        constexpr uint32_t m_bUsesBakedShadowing = 0x11C; // bool
        constexpr uint32_t m_nShadowPriority = 0x120; // int32
        constexpr uint32_t m_nBakedShadowIndex = 0x124; // int32
        constexpr uint32_t m_bRenderToCubemaps = 0x128; // bool
        constexpr uint32_t m_LightGroups = 0x130; // CUtlSymbolLarge
        constexpr uint32_t m_nDirectLight = 0x138; // int32
        constexpr uint32_t m_nIndirectLight = 0x13C; // int32
        constexpr uint32_t m_flFadeMinDist = 0x140; // float32
        constexpr uint32_t m_flFadeMaxDist = 0x144; // float32
        constexpr uint32_t m_flShadowFadeMinDist = 0x148; // float32
        constexpr uint32_t m_flShadowFadeMaxDist = 0x14C; // float32
        constexpr uint32_t m_bEnabled = 0x150; // bool
        constexpr uint32_t m_bFlicker = 0x151; // bool
        constexpr uint32_t m_bPrecomputedFieldsValid = 0x152; // bool
        constexpr uint32_t m_vPrecomputedBoundsMins = 0x154; // Vector
        constexpr uint32_t m_vPrecomputedBoundsMaxs = 0x160; // Vector
        constexpr uint32_t m_vPrecomputedOBBOrigin = 0x16C; // Vector
        constexpr uint32_t m_vPrecomputedOBBAngles = 0x178; // QAngle
        constexpr uint32_t m_vPrecomputedOBBExtent = 0x184; // Vector
        constexpr uint32_t m_flPrecomputedMaxRange = 0x190; // float32
        constexpr uint32_t m_nFogLightingMode = 0x194; // int32
        constexpr uint32_t m_flFogContributionStength = 0x198; // float32
        constexpr uint32_t m_flNearClipPlane = 0x19C; // float32
        constexpr uint32_t m_SkyColor = 0x1A0; // Color
        constexpr uint32_t m_flSkyIntensity = 0x1A4; // float32
        constexpr uint32_t m_SkyAmbientBounce = 0x1A8; // Color
        constexpr uint32_t m_bUseSecondaryColor = 0x1AC; // bool
        constexpr uint32_t m_bMixedShadows = 0x1AD; // bool
        constexpr uint32_t m_flLightStyleStartTime = 0x1B0; // GameTime_t
        constexpr uint32_t m_flCapsuleLength = 0x1B4; // float32
        constexpr uint32_t m_flMinRoughness = 0x1B8; // float32
    }

    namespace CLightInfoBase {
        constexpr uint32_t m_origin2D = 0x10; // Vector2D
        constexpr uint32_t m_Color = 0x18; // Color[2]
        constexpr uint32_t m_LightScale = 0x20; // float32[2]
        constexpr uint32_t m_AmbientColor = 0x28; // Color[2]
        constexpr uint32_t m_AmbientScale = 0x30; // float32[2]
        constexpr uint32_t m_ShadowColor = 0x38; // Color[2]
        constexpr uint32_t m_ShadowSecondaryColor = 0x40; // Color[2]
        constexpr uint32_t m_ShadowScale = 0x48; // float32[2]
        constexpr uint32_t m_ShadowGroundScale = 0x50; // float32[2]
        constexpr uint32_t m_SpecularColor = 0x58; // Color[2]
        constexpr uint32_t m_flSpecularPower = 0x60; // float32[2]
        constexpr uint32_t m_flSpecularIndependence = 0x68; // float32[2]
        constexpr uint32_t m_SpecularDirection = 0x70; // Vector[2]
        constexpr uint32_t m_InspectorSpecularDirection = 0x88; // Vector[2]
        constexpr uint32_t m_LightDirection = 0xA0; // Vector[2]
        constexpr uint32_t m_AmbientDirection = 0xB8; // Vector[2]
        constexpr uint32_t m_FogColor = 0xD0; // Color[2]
        constexpr uint32_t m_FogStart = 0xD8; // float32[2]
        constexpr uint32_t m_FogEnd = 0xE0; // float32[2]
        constexpr uint32_t m_HeightFogValue = 0xE8; // float32[2]
        constexpr uint32_t m_HeightFogColor = 0xF0; // Color[2]
        constexpr uint32_t m_FoWDarkness = 0xF8; // float32[2]
        constexpr uint32_t m_FoWColorR = 0x100; // float32[2]
        constexpr uint32_t m_FoWColorG = 0x108; // float32[2]
        constexpr uint32_t m_FoWColorB = 0x110; // float32[2]
        constexpr uint32_t m_InspectorViewFogColor = 0x118; // Color[2]
        constexpr uint32_t m_windAngle = 0x120; // QAngle
        constexpr uint32_t m_flWindAmount = 0x12C; // float32[2]
        constexpr uint32_t m_flMinWind = 0x134; // float32
        constexpr uint32_t m_flMaxWind = 0x138; // float32
        constexpr uint32_t m_flMinGust = 0x13C; // float32
        constexpr uint32_t m_flMaxGust = 0x140; // float32
        constexpr uint32_t m_flMinGustDelay = 0x144; // float32
        constexpr uint32_t m_flMaxGustDelay = 0x148; // float32
        constexpr uint32_t m_flGustDuration = 0x14C; // float32
        constexpr uint32_t m_flGustDirChange = 0x150; // float32
        constexpr uint32_t m_skyboxAngle = 0x154; // QAngle[2]
        constexpr uint32_t m_hSkyboxMaterial = 0x170; // CStrongHandle< InfoForResourceTypeIMaterial2 >[2]
        constexpr uint32_t m_vSkyboxTintColor = 0x180; // Color[2]
        constexpr uint32_t m_nSkyboxFogType = 0x188; // uint8
        constexpr uint32_t m_flSkyboxAngularFogMaxEnd = 0x18C; // float32
        constexpr uint32_t m_flSkyboxAngularFogMaxStart = 0x190; // float32
        constexpr uint32_t m_flSkyboxAngularFogMinStart = 0x194; // float32
        constexpr uint32_t m_flSkyboxAngularFogMinEnd = 0x198; // float32
        constexpr uint32_t m_vAngularParams = 0x19C; // Vector4D
        constexpr uint32_t m_vHeightFogColor = 0x1AC; // Color[2]
        constexpr uint32_t m_flFogMaxZ = 0x1B4; // float32
        constexpr uint32_t m_flFogDensity = 0x1B8; // float32[2]
        constexpr uint32_t m_flFogFalloff = 0x1C0; // float32
        constexpr uint32_t m_hFogTexture0 = 0x1C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_flFogLayer0Rotation = 0x1D0; // float32
        constexpr uint32_t m_flFogLayer0Scale = 0x1D4; // float32
        constexpr uint32_t m_flFoglayer0ScrollU = 0x1D8; // float32[2]
        constexpr uint32_t m_flFoglayer0ScrollV = 0x1E0; // float32[2]
        constexpr uint32_t m_hFogTexture1 = 0x1E8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_flFogLayer1Rotation = 0x1F0; // float32
        constexpr uint32_t m_flFogLayer1Scale = 0x1F4; // float32
        constexpr uint32_t m_flFoglayer1ScrollU = 0x1F8; // float32[2]
        constexpr uint32_t m_flFoglayer1ScrollV = 0x200; // float32[2]
        constexpr uint32_t m_hFogTextureOpacity = 0x208; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hWaterFlowMapTexture = 0x210; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hFogFlowMapTexture = 0x218; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_flFogExclusionInnerRadius = 0x220; // float32
        constexpr uint32_t m_flFogExclusionHeightBias = 0x224; // float32
        constexpr uint32_t m_flCausticSpeedScale = 0x22C; // float32
        constexpr uint32_t m_flCausticAmplitudeScale = 0x230; // float32
        constexpr uint32_t m_hColorWarp = 0x238; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_flColorWarpBlendToFull = 0x240; // float32
        constexpr uint32_t m_fInnerRadius = 0x244; // float32
        constexpr uint32_t m_fOuterRadius = 0x248; // float32
        constexpr uint32_t m_flLightning_specular_pow_scale_min = 0x24C; // float32
        constexpr uint32_t m_flLightning_specular_pow_scale_max = 0x250; // float32
        constexpr uint32_t m_lightningColor = 0x254; // Color
        constexpr uint32_t m_flLightningIntensityMin = 0x258; // float32
        constexpr uint32_t m_flLightningIntensityMax = 0x25C; // float32
        constexpr uint32_t m_flLightningElevation = 0x260; // float32
        constexpr uint32_t m_flLightningSpecularIntensity = 0x264; // float32
        constexpr uint32_t m_flFarZOverride = 0x268; // float32
        constexpr uint32_t m_flAmbientShadowAmount = 0x26C; // float32
        constexpr uint32_t m_nWeatherType = 0x270; // int32
        constexpr uint32_t m_WeatherEffect = 0x278; // CUtlString
        constexpr uint32_t m_flLightning_period_min = 0x280; // float32
        constexpr uint32_t m_flLightning_period_max = 0x284; // float32
        constexpr uint32_t m_flLightning_duration_min = 0x288; // float32
        constexpr uint32_t m_flLightning_duration_max = 0x28C; // float32
        constexpr uint32_t m_flLightning_fluctuation_min = 0x290; // float32
        constexpr uint32_t m_flLightning_fluctuation_max = 0x294; // float32
        constexpr uint32_t m_pszLightningSound = 0x298; // char[260]
        constexpr uint32_t m_flNextLightningStartTime = 0x39C; // float32
        constexpr uint32_t m_flNextLightningEndTime = 0x3A0; // float32
        constexpr uint32_t m_flLightningFluctuationTimeStart = 0x3A4; // float32
        constexpr uint32_t m_flLightningFluctuationTimeEnd = 0x3A8; // float32
        constexpr uint32_t m_flLightningNumFluctuations = 0x3AC; // float32
        constexpr uint32_t m_flNextLightningSoundTime = 0x3B0; // float32
        constexpr uint32_t m_bPlayLightingSound = 0x3B4; // bool
        constexpr uint32_t m_flLightningEventMagnitude = 0x3B8; // float32
        constexpr uint32_t m_flLightningScale = 0x3BC; // float32
        constexpr uint32_t m_flLightningFluctuation = 0x3C0; // float32
        constexpr uint32_t m_flLightningAngle = 0x3C4; // float32
        constexpr uint32_t m_flLightningEventPercentage = 0x3C8; // float32
    }

    namespace CLogicRelay {
        constexpr uint32_t m_OnTrigger = 0x538; // CEntityIOOutput
        constexpr uint32_t m_OnSpawn = 0x560; // CEntityIOOutput
        constexpr uint32_t m_bDisabled = 0x588; // bool
        constexpr uint32_t m_bWaitForRefire = 0x589; // bool
        constexpr uint32_t m_bTriggerOnce = 0x58A; // bool
        constexpr uint32_t m_bFastRetrigger = 0x58B; // bool
        constexpr uint32_t m_bPassthoughCaller = 0x58C; // bool
    }

    namespace CModelState {
        constexpr uint32_t m_hModel = 0xA0; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_ModelName = 0xA8; // CUtlSymbolLarge
        constexpr uint32_t m_bClientClothCreationSuppressed = 0xE8; // bool
        constexpr uint32_t m_MeshGroupMask = 0x180; // uint64
        constexpr uint32_t m_nIdealMotionType = 0x222; // int8
        constexpr uint32_t m_nForceLOD = 0x223; // int8
        constexpr uint32_t m_nClothUpdateFlags = 0x224; // int8
    }

    namespace CNetworkedSequenceOperation {
        constexpr uint32_t m_hSequence = 0x8; // HSequence
        constexpr uint32_t m_flPrevCycle = 0xC; // float32
        constexpr uint32_t m_flCycle = 0x10; // float32
        constexpr uint32_t m_flWeight = 0x14; // CNetworkedQuantizedFloat
        constexpr uint32_t m_bSequenceChangeNetworked = 0x1C; // bool
        constexpr uint32_t m_bDiscontinuity = 0x1D; // bool
        constexpr uint32_t m_flPrevCycleFromDiscontinuity = 0x20; // float32
        constexpr uint32_t m_flPrevCycleForAnimEventDetection = 0x24; // float32
    }

    namespace CPlayer_CameraServices {
        constexpr uint32_t m_PlayerFog = 0x40; // C_fogplayerparams_t
        constexpr uint32_t m_hColorCorrectionCtrl = 0x80; // CHandle< C_ColorCorrection >
        constexpr uint32_t m_hViewEntity = 0x84; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTonemapController = 0x88; // CHandle< C_TonemapController2 >
        constexpr uint32_t m_audio = 0x90; // audioparams_t
        constexpr uint32_t m_PostProcessingVolumes = 0x108; // C_NetworkUtlVectorBase< CHandle< C_PostProcessingVolume > >
        constexpr uint32_t m_flOldPlayerZ = 0x120; // float32
        constexpr uint32_t m_flOldPlayerViewOffsetZ = 0x124; // float32
        constexpr uint32_t m_CurrentFog = 0x128; // fogparams_t
        constexpr uint32_t m_hOldFogController = 0x190; // CHandle< C_FogController >
        constexpr uint32_t m_bOverrideFogColor = 0x194; // bool[5]
        constexpr uint32_t m_OverrideFogColor = 0x199; // Color[5]
        constexpr uint32_t m_bOverrideFogStartEnd = 0x1AD; // bool[5]
        constexpr uint32_t m_fOverrideFogStart = 0x1B4; // float32[5]
        constexpr uint32_t m_fOverrideFogEnd = 0x1C8; // float32[5]
        constexpr uint32_t m_hActivePostProcessingVolume = 0x1DC; // CHandle< C_PostProcessingVolume >
        constexpr uint32_t m_angDemoViewAngles = 0x1E0; // QAngle
    }

    namespace CPlayer_MovementServices {
        constexpr uint32_t m_nImpulse = 0x40; // int32
        constexpr uint32_t m_nButtons = 0x48; // CInButtonState
        constexpr uint32_t m_nQueuedButtonDownMask = 0x68; // uint64
        constexpr uint32_t m_nQueuedButtonChangeMask = 0x70; // uint64
        constexpr uint32_t m_nButtonDoublePressed = 0x78; // uint64
        constexpr uint32_t m_pButtonPressedCmdNumber = 0x80; // uint32[64]
        constexpr uint32_t m_nLastCommandNumberProcessed = 0x180; // uint32
        constexpr uint32_t m_nToggleButtonDownMask = 0x188; // uint64
        constexpr uint32_t m_flMaxspeed = 0x190; // float32
        constexpr uint32_t m_arrForceSubtickMoveWhen = 0x194; // float32[4]
        constexpr uint32_t m_flForwardMove = 0x1A4; // float32
        constexpr uint32_t m_flLeftMove = 0x1A8; // float32
        constexpr uint32_t m_flUpMove = 0x1AC; // float32
        constexpr uint32_t m_vecLastMovementImpulses = 0x1B0; // Vector
        constexpr uint32_t m_vecOldViewAngles = 0x1BC; // QAngle
    }

    namespace CPlayer_MovementServices_Humanoid {
        constexpr uint32_t m_flStepSoundTime = 0x1D0; // float32
        constexpr uint32_t m_flFallVelocity = 0x1D4; // float32
        constexpr uint32_t m_bInCrouch = 0x1D8; // bool
        constexpr uint32_t m_nCrouchState = 0x1DC; // uint32
        constexpr uint32_t m_flCrouchTransitionStartTime = 0x1E0; // GameTime_t
        constexpr uint32_t m_bDucked = 0x1E4; // bool
        constexpr uint32_t m_bDucking = 0x1E5; // bool
        constexpr uint32_t m_bInDuckJump = 0x1E6; // bool
        constexpr uint32_t m_groundNormal = 0x1E8; // Vector
        constexpr uint32_t m_flSurfaceFriction = 0x1F4; // float32
        constexpr uint32_t m_surfaceProps = 0x1F8; // CUtlStringToken
        constexpr uint32_t m_nStepside = 0x208; // int32
    }

    namespace CPlayer_ObserverServices {
        constexpr uint32_t m_iObserverMode = 0x40; // uint8
        constexpr uint32_t m_hObserverTarget = 0x44; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iObserverLastMode = 0x48; // ObserverMode_t
        constexpr uint32_t m_bForcedObserverMode = 0x4C; // bool
        constexpr uint32_t m_flObserverChaseDistance = 0x50; // float32
        constexpr uint32_t m_flObserverChaseDistanceCalcTime = 0x54; // GameTime_t
    }

    namespace CPlayer_WeaponServices {
        constexpr uint32_t m_bAllowSwitchToNoWeapon = 0x40; // bool
        constexpr uint32_t m_hMyWeapons = 0x48; // C_NetworkUtlVectorBase< CHandle< C_BasePlayerWeapon > >
        constexpr uint32_t m_hActiveWeapon = 0x60; // CHandle< C_BasePlayerWeapon >
        constexpr uint32_t m_hLastWeapon = 0x64; // CHandle< C_BasePlayerWeapon >
        constexpr uint32_t m_iAmmo = 0x68; // uint16[32]
    }

    namespace CPointOffScreenIndicatorUi {
        constexpr uint32_t m_bBeenEnabled = 0xA20; // bool
        constexpr uint32_t m_bHide = 0xA21; // bool
        constexpr uint32_t m_flSeenTargetTime = 0xA24; // float32
        constexpr uint32_t m_pTargetPanel = 0xA28; // C_PointClientUIWorldPanel*
    }

    namespace CPointTemplate {
        constexpr uint32_t m_iszWorldName = 0x538; // CUtlSymbolLarge
        constexpr uint32_t m_iszSource2EntityLumpName = 0x540; // CUtlSymbolLarge
        constexpr uint32_t m_iszEntityFilterName = 0x548; // CUtlSymbolLarge
        constexpr uint32_t m_flTimeoutInterval = 0x550; // float32
        constexpr uint32_t m_bAsynchronouslySpawnEntities = 0x554; // bool
        constexpr uint32_t m_pOutputOnSpawned = 0x558; // CEntityIOOutput
        constexpr uint32_t m_clientOnlyEntityBehavior = 0x580; // PointTemplateClientOnlyEntityBehavior_t
        constexpr uint32_t m_ownerSpawnGroupType = 0x584; // PointTemplateOwnerSpawnGroupType_t
        constexpr uint32_t m_createdSpawnGroupHandles = 0x588; // CUtlVector< uint32 >
        constexpr uint32_t m_SpawnedEntityHandles = 0x5A0; // CUtlVector< CEntityHandle >
        constexpr uint32_t m_ScriptSpawnCallback = 0x5B8; // HSCRIPT
        constexpr uint32_t m_ScriptCallbackScope = 0x5C0; // HSCRIPT
    }

    namespace CPortraitData {
        constexpr uint32_t m_RenderList = 0xDE0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hHero = 0xDF8; // CHandle< C_BaseEntity >
    }

    namespace CPrecipitationVData {
        constexpr uint32_t m_szParticlePrecipitationEffect = 0x28; // CResourceNameTyped< CWeakHandle< InfoForResourceTypeIParticleSystemDefinition > >
        constexpr uint32_t m_flInnerDistance = 0x108; // float32
        constexpr uint32_t m_nAttachType = 0x10C; // ParticleAttachment_t
        constexpr uint32_t m_bBatchSameVolumeType = 0x110; // bool
        constexpr uint32_t m_nRTEnvCP = 0x114; // int32
        constexpr uint32_t m_nRTEnvCPComponent = 0x118; // int32
        constexpr uint32_t m_szModifier = 0x120; // CUtlString
    }

    namespace CProjectedTextureBase {
        constexpr uint32_t m_hTargetEntity = 0xC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bState = 0x10; // bool
        constexpr uint32_t m_bAlwaysUpdate = 0x11; // bool
        constexpr uint32_t m_flLightFOV = 0x14; // float32
        constexpr uint32_t m_bEnableShadows = 0x18; // bool
        constexpr uint32_t m_bSimpleProjection = 0x19; // bool
        constexpr uint32_t m_bLightOnlyTarget = 0x1A; // bool
        constexpr uint32_t m_bLightWorld = 0x1B; // bool
        constexpr uint32_t m_bCameraSpace = 0x1C; // bool
        constexpr uint32_t m_flBrightnessScale = 0x20; // float32
        constexpr uint32_t m_LightColor = 0x24; // Color
        constexpr uint32_t m_flIntensity = 0x28; // float32
        constexpr uint32_t m_flLinearAttenuation = 0x2C; // float32
        constexpr uint32_t m_flQuadraticAttenuation = 0x30; // float32
        constexpr uint32_t m_bVolumetric = 0x34; // bool
        constexpr uint32_t m_flVolumetricIntensity = 0x38; // float32
        constexpr uint32_t m_flNoiseStrength = 0x3C; // float32
        constexpr uint32_t m_flFlashlightTime = 0x40; // float32
        constexpr uint32_t m_nNumPlanes = 0x44; // uint32
        constexpr uint32_t m_flPlaneOffset = 0x48; // float32
        constexpr uint32_t m_flColorTransitionTime = 0x4C; // float32
        constexpr uint32_t m_flAmbient = 0x50; // float32
        constexpr uint32_t m_SpotlightTextureName = 0x54; // char[512]
        constexpr uint32_t m_nSpotlightTextureFrame = 0x254; // int32
        constexpr uint32_t m_nShadowQuality = 0x258; // uint32
        constexpr uint32_t m_flNearZ = 0x25C; // float32
        constexpr uint32_t m_flFarZ = 0x260; // float32
        constexpr uint32_t m_flProjectionSize = 0x264; // float32
        constexpr uint32_t m_flRotation = 0x268; // float32
        constexpr uint32_t m_bFlipHorizontal = 0x26C; // bool
    }

    namespace CRenderComponent {
        constexpr uint32_t __m_pChainEntity = 0x10; // CNetworkVarChainer
        constexpr uint32_t m_bIsRenderingWithViewModels = 0x50; // bool
        constexpr uint32_t m_nSplitscreenFlags = 0x54; // uint32
        constexpr uint32_t m_bEnableRendering = 0x60; // bool
        constexpr uint32_t m_bInterpolationReadyToDraw = 0xB0; // bool
    }

    namespace CScriptComponent {
        constexpr uint32_t m_scriptClassName = 0x30; // CUtlSymbolLarge
    }

    namespace CSkeletonInstance {
        constexpr uint32_t m_modelState = 0x160; // CModelState
        constexpr uint32_t m_bIsAnimationEnabled = 0x390; // bool
        constexpr uint32_t m_bUseParentRenderBounds = 0x391; // bool
        constexpr uint32_t m_bDisableSolidCollisionsForHierarchy = 0x392; // bool
        constexpr uint32_t m_bDirtyMotionType = 0x0; // bitfield:1
        constexpr uint32_t m_bIsGeneratingLatchedParentSpaceState = 0x0; // bitfield:1
        constexpr uint32_t m_materialGroup = 0x394; // CUtlStringToken
        constexpr uint32_t m_nHitboxSet = 0x398; // uint8
    }

    namespace CSkyboxReference {
        constexpr uint32_t m_worldGroupId = 0x538; // WorldGroupId_t
        constexpr uint32_t m_hSkyCamera = 0x53C; // CHandle< C_SkyCamera >
    }

    namespace CTimeline {
        constexpr uint32_t m_flValues = 0x10; // float32[64]
        constexpr uint32_t m_nValueCounts = 0x110; // int32[64]
        constexpr uint32_t m_nBucketCount = 0x210; // int32
        constexpr uint32_t m_flInterval = 0x214; // float32
        constexpr uint32_t m_flFinalValue = 0x218; // float32
        constexpr uint32_t m_nCompressionType = 0x21C; // TimelineCompression_t
        constexpr uint32_t m_bStopped = 0x220; // bool
    }

    namespace C_BaseAnimatingController {
        constexpr uint32_t m_baseLayer = 0x10; // CNetworkedSequenceOperation
        constexpr uint32_t m_bSequenceFinished = 0x38; // bool
        constexpr uint32_t m_flGroundSpeed = 0x3C; // float32
        constexpr uint32_t m_flLastEventCycle = 0x40; // float32
        constexpr uint32_t m_flLastEventAnimTime = 0x44; // float32
        constexpr uint32_t m_flPlaybackRate = 0x48; // CNetworkedQuantizedFloat
        constexpr uint32_t m_flPrevAnimTime = 0x50; // float32
        constexpr uint32_t m_flPoseParameter = 0x54; // float32[24]
        constexpr uint32_t m_bClientSideAnimation = 0xB4; // bool
        constexpr uint32_t m_bNetworkedAnimationInputsChanged = 0xB5; // bool
        constexpr uint32_t m_nPrevNewSequenceParity = 0xB6; // uint8
        constexpr uint32_t m_nPrevResetEventsParity = 0xB7; // uint8
        constexpr uint32_t m_nNewSequenceParity = 0xB8; // int32
        constexpr uint32_t m_nResetEventsParity = 0xBC; // int32
        constexpr uint32_t m_nAnimLoopMode = 0xC0; // AnimLoopMode_t
        constexpr uint32_t m_SequenceTransitioner = 0xD8; // C_CSequenceTransitioner2
        constexpr uint32_t m_hLastAnimEventSequence = 0x298; // HSequence
        constexpr uint32_t m_ClientSideAnimationListHandle = 0x29C; // AnimationUpdateListHandle_t
    }

    namespace C_BaseAnimatingOverlayController {
        constexpr uint32_t m_AnimOverlay = 0x348; // C_UtlVectorEmbeddedNetworkVar< CAnimationLayer >
    }

    namespace C_BaseButton {
        constexpr uint32_t m_glowEntity = 0x7B8; // CHandle< C_BaseModelEntity >
        constexpr uint32_t m_usable = 0x7BC; // bool
        constexpr uint32_t m_szDisplayText = 0x7C0; // CUtlSymbolLarge
    }

    namespace C_BaseClientUIEntity {
        constexpr uint32_t m_bEnabled = 0x7C0; // bool
        constexpr uint32_t m_DialogXMLName = 0x7C8; // CUtlSymbolLarge
        constexpr uint32_t m_PanelClassName = 0x7D0; // CUtlSymbolLarge
        constexpr uint32_t m_PanelID = 0x7D8; // CUtlSymbolLarge
    }

    namespace C_BaseCombatCharacter {
        constexpr uint32_t m_hMyWearables = 0x968; // C_NetworkUtlVectorBase< CHandle< C_EconWearable > >
        constexpr uint32_t m_bloodColor = 0x980; // int32
        constexpr uint32_t m_leftFootAttachment = 0x984; // AttachmentHandle_t
        constexpr uint32_t m_rightFootAttachment = 0x985; // AttachmentHandle_t
        constexpr uint32_t m_nWaterWakeMode = 0x988; // C_BaseCombatCharacter::WaterWakeMode_t
        constexpr uint32_t m_flWaterWorldZ = 0x98C; // float32
        constexpr uint32_t m_flWaterNextTraceTime = 0x990; // float32
        constexpr uint32_t m_flFieldOfView = 0x994; // float32
    }

    namespace C_BaseDoor {
        constexpr uint32_t m_bIsUsable = 0x7B8; // bool
    }

    namespace C_BaseEntity {
        constexpr uint32_t m_CBodyComponent = 0x30; // CBodyComponent*
        constexpr uint32_t m_NetworkTransmitComponent = 0x38; // CNetworkTransmitComponent
        constexpr uint32_t m_nLastThinkTick = 0x308; // GameTick_t
        constexpr uint32_t m_pGameSceneNode = 0x310; // CGameSceneNode*
        constexpr uint32_t m_pRenderComponent = 0x318; // CRenderComponent*
        constexpr uint32_t m_pCollision = 0x320; // CCollisionProperty*
        constexpr uint32_t m_iMaxHealth = 0x328; // int32
        constexpr uint32_t m_iHealth = 0x32C; // int32
        constexpr uint32_t m_lifeState = 0x330; // uint8
        constexpr uint32_t m_takedamage = 0x331; // DamageOptions_t
        constexpr uint32_t m_bTakesDamage = 0x332; // bool
        constexpr uint32_t m_nTakeDamageFlags = 0x334; // TakeDamageFlags_t
        constexpr uint32_t m_ubInterpolationFrame = 0x338; // uint8
        constexpr uint32_t m_hSceneObjectController = 0x33C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nNoInterpolationTick = 0x340; // int32
        constexpr uint32_t m_nVisibilityNoInterpolationTick = 0x344; // int32
        constexpr uint32_t m_flProxyRandomValue = 0x348; // float32
        constexpr uint32_t m_iEFlags = 0x34C; // int32
        constexpr uint32_t m_nWaterType = 0x350; // uint8
        constexpr uint32_t m_bInterpolateEvenWithNoModel = 0x351; // bool
        constexpr uint32_t m_bPredictionEligible = 0x352; // bool
        constexpr uint32_t m_bApplyLayerMatchIDToModel = 0x353; // bool
        constexpr uint32_t m_tokLayerMatchID = 0x354; // CUtlStringToken
        constexpr uint32_t m_nSubclassID = 0x358; // CUtlStringToken
        constexpr uint32_t m_nSimulationTick = 0x368; // int32
        constexpr uint32_t m_iCurrentThinkContext = 0x36C; // int32
        constexpr uint32_t m_aThinkFunctions = 0x370; // CUtlVector< thinkfunc_t >
        constexpr uint32_t m_flAnimTime = 0x388; // float32
        constexpr uint32_t m_flSimulationTime = 0x38C; // float32
        constexpr uint32_t m_nSceneObjectOverrideFlags = 0x390; // uint8
        constexpr uint32_t m_bHasSuccessfullyInterpolated = 0x391; // bool
        constexpr uint32_t m_bHasAddedVarsToInterpolation = 0x392; // bool
        constexpr uint32_t m_bRenderEvenWhenNotSuccessfullyInterpolated = 0x393; // bool
        constexpr uint32_t m_nInterpolationLatchDirtyFlags = 0x394; // int32[2]
        constexpr uint32_t m_ListEntry = 0x39C; // uint16[11]
        constexpr uint32_t m_flCreateTime = 0x3B4; // GameTime_t
        constexpr uint32_t m_flSpeed = 0x3B8; // float32
        constexpr uint32_t m_EntClientFlags = 0x3BC; // uint16
        constexpr uint32_t m_bClientSideRagdoll = 0x3BE; // bool
        constexpr uint32_t m_iTeamNum = 0x3BF; // uint8
        constexpr uint32_t m_spawnflags = 0x3C0; // uint32
        constexpr uint32_t m_nNextThinkTick = 0x3C4; // GameTick_t
        constexpr uint32_t m_fFlags = 0x3C8; // uint32
        constexpr uint32_t m_vecAbsVelocity = 0x3CC; // Vector
        constexpr uint32_t m_vecVelocity = 0x3D8; // CNetworkVelocityVector
        constexpr uint32_t m_hEffectEntity = 0x408; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hOwnerEntity = 0x40C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_MoveCollide = 0x410; // MoveCollide_t
        constexpr uint32_t m_MoveType = 0x411; // MoveType_t
        constexpr uint32_t m_flWaterLevel = 0x414; // float32
        constexpr uint32_t m_fEffects = 0x418; // uint32
        constexpr uint32_t m_hGroundEntity = 0x41C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flFriction = 0x420; // float32
        constexpr uint32_t m_flElasticity = 0x424; // float32
        constexpr uint32_t m_flGravityScale = 0x428; // float32
        constexpr uint32_t m_flTimeScale = 0x42C; // float32
        constexpr uint32_t m_bSimulatedEveryTick = 0x430; // bool
        constexpr uint32_t m_bAnimatedEveryTick = 0x431; // bool
        constexpr uint32_t m_flNavIgnoreUntilTime = 0x434; // GameTime_t
        constexpr uint32_t m_hThink = 0x438; // uint16
        constexpr uint32_t m_fBBoxVisFlags = 0x448; // uint8
        constexpr uint32_t m_bPredictable = 0x449; // bool
        constexpr uint32_t m_bRenderWithViewModels = 0x44A; // bool
        constexpr uint32_t m_nSplitUserPlayerPredictionSlot = 0x44C; // CSplitScreenSlot
        constexpr uint32_t m_nFirstPredictableCommand = 0x450; // int32
        constexpr uint32_t m_nLastPredictableCommand = 0x454; // int32
        constexpr uint32_t m_hOldMoveParent = 0x458; // CHandle< C_BaseEntity >
        constexpr uint32_t m_Particles = 0x460; // CParticleProperty
        constexpr uint32_t m_vecPredictedScriptFloats = 0x488; // CUtlVector< float32 >
        constexpr uint32_t m_vecPredictedScriptFloatIDs = 0x4A0; // CUtlVector< int32 >
        constexpr uint32_t m_nNextScriptVarRecordID = 0x4D0; // int32
        constexpr uint32_t m_vecAngVelocity = 0x4E0; // QAngle
        constexpr uint32_t m_DataChangeEventRef = 0x4EC; // int32
        constexpr uint32_t m_dependencies = 0x4F0; // CUtlVector< CEntityHandle >
        constexpr uint32_t m_nCreationTick = 0x508; // int32
        constexpr uint32_t m_bAnimTimeChanged = 0x521; // bool
        constexpr uint32_t m_bSimulationTimeChanged = 0x522; // bool
        constexpr uint32_t m_sUniqueHammerID = 0x530; // CUtlString
    }

    namespace C_BaseFlex {
        constexpr uint32_t m_flexWeight = 0x7F0; // C_NetworkUtlVectorBase< float32 >
        constexpr uint32_t m_vLookTargetPosition = 0x808; // Vector
        constexpr uint32_t m_blinktoggle = 0x820; // bool
        constexpr uint32_t m_nLastFlexUpdateFrameCount = 0x880; // int32
        constexpr uint32_t m_CachedViewTarget = 0x884; // Vector
        constexpr uint32_t m_nNextSceneEventId = 0x890; // uint32
        constexpr uint32_t m_iBlink = 0x894; // int32
        constexpr uint32_t m_blinktime = 0x898; // float32
        constexpr uint32_t m_prevblinktoggle = 0x89C; // bool
        constexpr uint32_t m_iMouthAttachment = 0x89D; // AttachmentHandle_t
        constexpr uint32_t m_iEyeAttachment = 0x89E; // AttachmentHandle_t
        constexpr uint32_t m_bResetFlexWeightsOnModelChange = 0x89F; // bool
        constexpr uint32_t m_nEyeOcclusionRendererBone = 0x8B8; // int32
        constexpr uint32_t m_mEyeOcclusionRendererCameraToBoneTransform = 0x8BC; // matrix3x4_t
        constexpr uint32_t m_vEyeOcclusionRendererHalfExtent = 0x8EC; // Vector
        constexpr uint32_t m_PhonemeClasses = 0x908; // C_BaseFlex::Emphasized_Phoneme[3]
    }

    namespace C_BaseFlex_Emphasized_Phoneme {
        constexpr uint32_t m_sClassName = 0x0; // CUtlString
        constexpr uint32_t m_flAmount = 0x18; // float32
        constexpr uint32_t m_bRequired = 0x1C; // bool
        constexpr uint32_t m_bBasechecked = 0x1D; // bool
        constexpr uint32_t m_bValid = 0x1E; // bool
    }

    namespace C_BaseModelEntity {
        constexpr uint32_t m_CRenderComponent = 0x538; // CRenderComponent*
        constexpr uint32_t m_CHitboxComponent = 0x540; // CHitboxComponent
        constexpr uint32_t m_bInitModelEffects = 0x588; // bool
        constexpr uint32_t m_bIsStaticProp = 0x589; // bool
        constexpr uint32_t m_iViewerID = 0x58C; // int32
        constexpr uint32_t m_iTeamVisibilityBitmask = 0x590; // int32
        constexpr uint32_t m_nLastAddDecal = 0x594; // int32
        constexpr uint32_t m_nDecalsAdded = 0x598; // int32
        constexpr uint32_t m_iOldHealth = 0x59C; // int32
        constexpr uint32_t m_nRenderMode = 0x5A0; // RenderMode_t
        constexpr uint32_t m_bVisibilityDirtyFlag = 0x5A1; // bool
        constexpr uint32_t m_nRenderFX = 0x5A2; // RenderFx_t
        constexpr uint32_t m_bAllowFadeInView = 0x5A3; // bool
        constexpr uint32_t m_clrRender = 0x5A4; // Color
        constexpr uint32_t m_vecRenderAttributes = 0x5A8; // C_UtlVectorEmbeddedNetworkVar< EntityRenderAttribute_t >
        constexpr uint32_t m_LightGroup = 0x610; // CUtlStringToken
        constexpr uint32_t m_bRenderToCubemaps = 0x614; // bool
        constexpr uint32_t m_Collision = 0x618; // CCollisionProperty
        constexpr uint32_t m_Glow = 0x6C8; // CGlowProperty
        constexpr uint32_t m_flGlowBackfaceMult = 0x720; // float32
        constexpr uint32_t m_fadeMinDist = 0x724; // float32
        constexpr uint32_t m_fadeMaxDist = 0x728; // float32
        constexpr uint32_t m_flFadeScale = 0x72C; // float32
        constexpr uint32_t m_flShadowStrength = 0x730; // float32
        constexpr uint32_t m_nObjectCulling = 0x734; // uint8
        constexpr uint32_t m_nAddDecal = 0x738; // int32
        constexpr uint32_t m_vDecalPosition = 0x73C; // Vector
        constexpr uint32_t m_vDecalForwardAxis = 0x748; // Vector
        constexpr uint32_t m_flDecalHealBloodRate = 0x754; // float32
        constexpr uint32_t m_flDecalHealHeightRate = 0x758; // float32
        constexpr uint32_t m_ConfigEntitiesToPropagateMaterialDecalsTo = 0x760; // C_NetworkUtlVectorBase< CHandle< C_BaseModelEntity > >
        constexpr uint32_t m_vecViewOffset = 0x778; // CNetworkViewOffsetVector
        constexpr uint32_t m_pClientAlphaProperty = 0x7A8; // CClientAlphaProperty*
        constexpr uint32_t m_ClientOverrideTint = 0x7B0; // Color
        constexpr uint32_t m_bUseClientOverrideTint = 0x7B4; // bool
    }

    namespace C_BasePlayerPawn {
        constexpr uint32_t m_pWeaponServices = 0x9F8; // CPlayer_WeaponServices*
        constexpr uint32_t m_pItemServices = 0xA00; // CPlayer_ItemServices*
        constexpr uint32_t m_pAutoaimServices = 0xA08; // CPlayer_AutoaimServices*
        constexpr uint32_t m_pObserverServices = 0xA10; // CPlayer_ObserverServices*
        constexpr uint32_t m_pWaterServices = 0xA18; // CPlayer_WaterServices*
        constexpr uint32_t m_pUseServices = 0xA20; // CPlayer_UseServices*
        constexpr uint32_t m_pFlashlightServices = 0xA28; // CPlayer_FlashlightServices*
        constexpr uint32_t m_pCameraServices = 0xA30; // CPlayer_CameraServices*
        constexpr uint32_t m_pMovementServices = 0xA38; // CPlayer_MovementServices*
        constexpr uint32_t v_angle = 0xA48; // QAngle
        constexpr uint32_t v_anglePrevious = 0xA54; // QAngle
        constexpr uint32_t m_iHideHUD = 0xA60; // uint32
        constexpr uint32_t m_skybox3d = 0xA68; // sky3dparams_t
        constexpr uint32_t m_flDeathTime = 0xAF8; // GameTime_t
        constexpr uint32_t m_vecPredictionError = 0xAFC; // Vector
        constexpr uint32_t m_flPredictionErrorTime = 0xB08; // GameTime_t
        constexpr uint32_t m_flFOVSensitivityAdjust = 0xB0C; // float32
        constexpr uint32_t m_flMouseSensitivity = 0xB10; // float32
        constexpr uint32_t m_vOldOrigin = 0xB14; // Vector
        constexpr uint32_t m_flOldSimulationTime = 0xB20; // float32
        constexpr uint32_t m_nLastExecutedCommandNumber = 0xB24; // int32
        constexpr uint32_t m_nLastExecutedCommandTick = 0xB28; // int32
        constexpr uint32_t m_hController = 0xB2C; // CHandle< CBasePlayerController >
        constexpr uint32_t m_bIsSwappingToPredictableController = 0xB30; // bool
    }

    namespace C_BasePlayerWeapon {
        constexpr uint32_t m_nNextPrimaryAttackTick = 0x7E0; // GameTick_t
        constexpr uint32_t m_flNextPrimaryAttackTickRatio = 0x7E4; // float32
        constexpr uint32_t m_nNextSecondaryAttackTick = 0x7E8; // GameTick_t
        constexpr uint32_t m_flNextSecondaryAttackTickRatio = 0x7EC; // float32
        constexpr uint32_t m_iClip1 = 0x7F0; // int32
        constexpr uint32_t m_iClip2 = 0x7F4; // int32
        constexpr uint32_t m_pReserveAmmo = 0x7F8; // int32[2]
    }

    namespace C_BasePropDoor {
        constexpr uint32_t m_eDoorState = 0xA68; // DoorState_t
        constexpr uint32_t m_modelChanged = 0xA6C; // bool
        constexpr uint32_t m_bLocked = 0xA6D; // bool
        constexpr uint32_t m_closedPosition = 0xA70; // Vector
        constexpr uint32_t m_closedAngles = 0xA7C; // QAngle
        constexpr uint32_t m_hMaster = 0xA88; // CHandle< C_BasePropDoor >
        constexpr uint32_t m_vWhereToSetLightingOrigin = 0xA8C; // Vector
    }

    namespace C_BaseTrigger {
        constexpr uint32_t m_bDisabled = 0x7B8; // bool
        constexpr uint32_t m_bClientSidePredicted = 0x7B9; // bool
    }

    namespace C_Beam {
        constexpr uint32_t m_flFrameRate = 0x7B8; // float32
        constexpr uint32_t m_flHDRColorScale = 0x7BC; // float32
        constexpr uint32_t m_flFireTime = 0x7C0; // GameTime_t
        constexpr uint32_t m_flDamage = 0x7C4; // float32
        constexpr uint32_t m_nNumBeamEnts = 0x7C8; // uint8
        constexpr uint32_t m_queryHandleHalo = 0x7CC; // int32
        constexpr uint32_t m_hBaseMaterial = 0x7F0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_nHaloIndex = 0x7F8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_nBeamType = 0x800; // BeamType_t
        constexpr uint32_t m_nBeamFlags = 0x804; // uint32
        constexpr uint32_t m_hAttachEntity = 0x808; // CHandle< C_BaseEntity >[10]
        constexpr uint32_t m_nAttachIndex = 0x830; // AttachmentHandle_t[10]
        constexpr uint32_t m_fWidth = 0x83C; // float32
        constexpr uint32_t m_fEndWidth = 0x840; // float32
        constexpr uint32_t m_fFadeLength = 0x844; // float32
        constexpr uint32_t m_fHaloScale = 0x848; // float32
        constexpr uint32_t m_fAmplitude = 0x84C; // float32
        constexpr uint32_t m_fStartFrame = 0x850; // float32
        constexpr uint32_t m_fSpeed = 0x854; // float32
        constexpr uint32_t m_flFrame = 0x858; // float32
        constexpr uint32_t m_nClipStyle = 0x85C; // BeamClipStyle_t
        constexpr uint32_t m_bTurnedOff = 0x860; // bool
        constexpr uint32_t m_vecEndPos = 0x864; // Vector
        constexpr uint32_t m_hEndEntity = 0x870; // CHandle< C_BaseEntity >
    }

    namespace C_BodyComponentBaseAnimating {
        constexpr uint32_t m_animationController = 0x470; // C_BaseAnimatingController
        constexpr uint32_t __m_pChainEntity = 0x7B8; // CNetworkVarChainer
    }

    namespace C_BodyComponentBaseAnimatingOverlay {
        constexpr uint32_t m_animationController = 0x470; // C_BaseAnimatingOverlayController
        constexpr uint32_t __m_pChainEntity = 0x828; // CNetworkVarChainer
    }

    namespace C_BreakableProp {
        constexpr uint32_t m_OnBreak = 0x828; // CEntityIOOutput
        constexpr uint32_t m_OnHealthChanged = 0x850; // CEntityOutputTemplate< float32 >
        constexpr uint32_t m_OnTakeDamage = 0x878; // CEntityIOOutput
        constexpr uint32_t m_impactEnergyScale = 0x8A0; // float32
        constexpr uint32_t m_iMinHealthDmg = 0x8A4; // int32
        constexpr uint32_t m_flPressureDelay = 0x8A8; // float32
        constexpr uint32_t m_hBreaker = 0x8AC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_PerformanceMode = 0x8B0; // PerformanceMode_t
        constexpr uint32_t m_flDmgModBullet = 0x8B4; // float32
        constexpr uint32_t m_flDmgModClub = 0x8B8; // float32
        constexpr uint32_t m_flDmgModExplosive = 0x8BC; // float32
        constexpr uint32_t m_flDmgModFire = 0x8C0; // float32
        constexpr uint32_t m_iszPhysicsDamageTableName = 0x8C8; // CUtlSymbolLarge
        constexpr uint32_t m_iszBasePropData = 0x8D0; // CUtlSymbolLarge
        constexpr uint32_t m_iInteractions = 0x8D8; // int32
        constexpr uint32_t m_flPreventDamageBeforeTime = 0x8DC; // GameTime_t
        constexpr uint32_t m_bHasBreakPiecesOrCommands = 0x8E0; // bool
        constexpr uint32_t m_explodeDamage = 0x8E4; // float32
        constexpr uint32_t m_explodeRadius = 0x8E8; // float32
        constexpr uint32_t m_explosionDelay = 0x8F0; // float32
        constexpr uint32_t m_explosionBuildupSound = 0x8F8; // CUtlSymbolLarge
        constexpr uint32_t m_explosionCustomEffect = 0x900; // CUtlSymbolLarge
        constexpr uint32_t m_explosionCustomSound = 0x908; // CUtlSymbolLarge
        constexpr uint32_t m_explosionModifier = 0x910; // CUtlSymbolLarge
        constexpr uint32_t m_hPhysicsAttacker = 0x918; // CHandle< C_BasePlayerPawn >
        constexpr uint32_t m_flLastPhysicsInfluenceTime = 0x91C; // GameTime_t
        constexpr uint32_t m_flDefaultFadeScale = 0x920; // float32
        constexpr uint32_t m_hLastAttacker = 0x924; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hFlareEnt = 0x928; // CHandle< C_BaseEntity >
        constexpr uint32_t m_noGhostCollision = 0x92C; // bool
    }

    namespace C_CSequenceTransitioner2 {
        constexpr uint32_t m_currentOp = 0x8; // CNetworkedSequenceOperation
        constexpr uint32_t m_flCurrentPlaybackRate = 0x30; // float32
        constexpr uint32_t m_flCurrentAnimTime = 0x34; // float32
        constexpr uint32_t m_transitioningLayers = 0x38; // TransitioningLayer_t[4]
        constexpr uint32_t m_pOwner = 0x158; // C_BaseAnimatingController*
    }

    namespace C_ClientRagdoll {
        constexpr uint32_t m_bFadeOut = 0x978; // bool
        constexpr uint32_t m_bImportant = 0x979; // bool
        constexpr uint32_t m_flEffectTime = 0x97C; // GameTime_t
        constexpr uint32_t m_gibDespawnTime = 0x980; // GameTime_t
        constexpr uint32_t m_iCurrentFriction = 0x984; // int32
        constexpr uint32_t m_iMinFriction = 0x988; // int32
        constexpr uint32_t m_iMaxFriction = 0x98C; // int32
        constexpr uint32_t m_iFrictionAnimState = 0x990; // int32
        constexpr uint32_t m_bReleaseRagdoll = 0x994; // bool
        constexpr uint32_t m_iEyeAttachment = 0x995; // AttachmentHandle_t
        constexpr uint32_t m_bFadingOut = 0x996; // bool
        constexpr uint32_t m_flScaleEnd = 0x998; // float32[10]
        constexpr uint32_t m_flScaleTimeStart = 0x9C0; // GameTime_t[10]
        constexpr uint32_t m_flScaleTimeEnd = 0x9E8; // GameTime_t[10]
    }

    namespace C_ColorCorrection {
        constexpr uint32_t m_vecOrigin = 0x538; // Vector
        constexpr uint32_t m_MinFalloff = 0x544; // float32
        constexpr uint32_t m_MaxFalloff = 0x548; // float32
        constexpr uint32_t m_flFadeInDuration = 0x54C; // float32
        constexpr uint32_t m_flFadeOutDuration = 0x550; // float32
        constexpr uint32_t m_flMaxWeight = 0x554; // float32
        constexpr uint32_t m_flCurWeight = 0x558; // float32
        constexpr uint32_t m_netlookupFilename = 0x55C; // char[512]
        constexpr uint32_t m_bEnabled = 0x75C; // bool
        constexpr uint32_t m_bMaster = 0x75D; // bool
        constexpr uint32_t m_bClientSide = 0x75E; // bool
        constexpr uint32_t m_bExclusive = 0x75F; // bool
        constexpr uint32_t m_bEnabledOnClient = 0x760; // bool[1]
        constexpr uint32_t m_flCurWeightOnClient = 0x764; // float32[1]
        constexpr uint32_t m_bFadingIn = 0x768; // bool[1]
        constexpr uint32_t m_flFadeStartWeight = 0x76C; // float32[1]
        constexpr uint32_t m_flFadeStartTime = 0x770; // float32[1]
        constexpr uint32_t m_flFadeDuration = 0x774; // float32[1]
    }

    namespace C_ColorCorrectionVolume {
        constexpr uint32_t m_LastEnterWeight = 0x7C0; // float32
        constexpr uint32_t m_LastEnterTime = 0x7C4; // float32
        constexpr uint32_t m_LastExitWeight = 0x7C8; // float32
        constexpr uint32_t m_LastExitTime = 0x7CC; // float32
        constexpr uint32_t m_bEnabled = 0x7D0; // bool
        constexpr uint32_t m_MaxWeight = 0x7D4; // float32
        constexpr uint32_t m_FadeDuration = 0x7D8; // float32
        constexpr uint32_t m_Weight = 0x7DC; // float32
        constexpr uint32_t m_lookupFilename = 0x7E0; // char[512]
    }

    namespace C_CommandContext {
        constexpr uint32_t needsprocessing = 0x0; // bool
        constexpr uint32_t command_number = 0x70; // int32
    }

    namespace C_DOTAAmbientCreatureParticleZone {
        constexpr uint32_t m_szModelName = 0x7B8; // char[64]
        constexpr uint32_t m_szAreaName = 0x7F8; // char[256]
    }

    namespace C_DOTAAppCheers {
        constexpr uint32_t m_nRadiantCheers = 0x538; // int16
        constexpr uint32_t m_nRadiantBronzeCheers = 0x53A; // int16
        constexpr uint32_t m_nRadiantSilverCheers = 0x53C; // int16
        constexpr uint32_t m_nRadiantGoldCheers = 0x53E; // int16
        constexpr uint32_t m_nRadiantCrowdLevel = 0x540; // ECrowdLevel
        constexpr uint32_t m_nDireCheers = 0x544; // int16
        constexpr uint32_t m_nDireBronzeCheers = 0x546; // int16
        constexpr uint32_t m_nDireSilverCheers = 0x548; // int16
        constexpr uint32_t m_nDireGoldCheers = 0x54A; // int16
        constexpr uint32_t m_nDireCrowdLevel = 0x54C; // ECrowdLevel
    }

    namespace C_DOTABaseAbility {
        constexpr uint32_t m_bAuxCastState = 0x540; // bool
        constexpr uint32_t m_iEnemyLevel = 0x544; // int32
        constexpr uint32_t m_iMaxLevel = 0x548; // int32
        constexpr uint32_t m_bCanLearn = 0x54C; // bool
        constexpr uint32_t m_flUpgradeBlend = 0x550; // float32
        constexpr uint32_t m_bUpgradedDuringQuickcastPreview = 0x554; // bool
        constexpr uint32_t m_bConsiderOvershootInGetCastRange = 0x555; // bool
        constexpr uint32_t m_bRefCountsModifiers = 0x556; // bool
        constexpr uint32_t m_bHidden = 0x557; // bool
        constexpr uint32_t m_bOldHidden = 0x558; // bool
        constexpr uint32_t m_bActivated = 0x559; // bool
        constexpr uint32_t m_bOldActivated = 0x55A; // bool
        constexpr uint32_t m_nAbilityBarType = 0x55C; // AbilityBarType_t
        constexpr uint32_t m_iDirtyButtons = 0x560; // int32
        constexpr uint32_t m_bPerformDirtyParity = 0x564; // bool
        constexpr uint32_t m_iLevel = 0x568; // int32
        constexpr uint32_t m_bAbilityLevelDirty = 0x56C; // bool
        constexpr uint32_t m_bToggleState = 0x56D; // bool
        constexpr uint32_t m_flAbilityMuteDuration = 0x570; // float32
        constexpr uint32_t m_bInAbilityPhase = 0x574; // bool
        constexpr uint32_t m_fCooldown = 0x578; // float32
        constexpr uint32_t m_flCooldownLength = 0x57C; // float32
        constexpr uint32_t m_iManaCost = 0x580; // int32
        constexpr uint32_t m_bAutoCastState = 0x584; // bool
        constexpr uint32_t m_bAltCastState = 0x585; // bool
        constexpr uint32_t m_flChannelStartTime = 0x588; // GameTime_t
        constexpr uint32_t m_flCastStartTime = 0x58C; // GameTime_t
        constexpr uint32_t m_bInIndefiniteCooldown = 0x590; // bool
        constexpr uint32_t m_bFrozenCooldown = 0x591; // bool
        constexpr uint32_t m_flOverrideCastPoint = 0x594; // float32
        constexpr uint32_t m_bStolen = 0x598; // bool
        constexpr uint32_t m_bStealable = 0x599; // bool
        constexpr uint32_t m_bReplicated = 0x59A; // bool
        constexpr uint32_t m_nAbilityCurrentCharges = 0x59C; // int32
        constexpr uint32_t m_fAbilityChargeRestoreTimeRemaining = 0x5A0; // float32
        constexpr uint32_t m_bUpgradeRecommended = 0x5A4; // bool
        constexpr uint32_t m_nMaxLevelOverride = 0x5A8; // int32
        constexpr uint32_t m_flLastCastClickTime = 0x5AC; // float32
    }

    namespace C_DOTABaseGameMode {
        constexpr uint32_t m_ForcedHUDSkin = 0x538; // CUtlString
        constexpr uint32_t m_nCustomGameForceHeroSelectionId = 0x540; // int32
        constexpr uint32_t m_bAlwaysShowPlayerInventory = 0x544; // bool
        constexpr uint32_t m_bGoldSoundDisabled = 0x545; // bool
        constexpr uint32_t m_bRecommendedItemsDisabled = 0x546; // bool
        constexpr uint32_t m_bStickyItemDisabled = 0x547; // bool
        constexpr uint32_t m_bStashPurchasingDisabled = 0x548; // bool
        constexpr uint32_t m_bFogOfWarDisabled = 0x549; // bool
        constexpr uint32_t m_bUseUnseenFOW = 0x54A; // bool
        constexpr uint32_t m_bUseCustomBuybackCost = 0x54B; // bool
        constexpr uint32_t m_bUseCustomBuybackCooldown = 0x54C; // bool
        constexpr uint32_t m_bBuybackEnabled = 0x54D; // bool
        constexpr uint32_t m_bUseTurboCouriers = 0x54E; // bool
        constexpr uint32_t m_flCameraDistanceOverride = 0x550; // float32
        constexpr uint32_t m_nCameraSmoothCountOverride = 0x554; // int32
        constexpr uint32_t m_hOverrideSelectionEntity = 0x558; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_bTopBarTeamValuesOverride = 0x55C; // bool
        constexpr uint32_t m_bTopBarTeamValuesVisible = 0x55D; // bool
        constexpr uint32_t m_nTeamGoodGuysTopBarValue = 0x560; // int32
        constexpr uint32_t m_nTeamBadGuysTopBarValue = 0x564; // int32
        constexpr uint32_t m_bAlwaysShowPlayerNames = 0x568; // bool
        constexpr uint32_t m_bUseCustomHeroLevels = 0x569; // bool
        constexpr uint32_t m_nCustomXPRequiredToReachNextLevel = 0x570; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_bTowerBackdoorProtectionEnabled = 0x588; // bool
        constexpr uint32_t m_bBotThinkingEnabled = 0x589; // bool
        constexpr uint32_t m_bAnnouncerDisabled = 0x58A; // bool
        constexpr uint32_t m_bAnnouncerGameModeAnnounceDisabled = 0x58B; // bool
        constexpr uint32_t m_bDeathTipsDisabled = 0x58C; // bool
        constexpr uint32_t m_bFilterPlayerHeroAvailability = 0x58D; // bool
        constexpr uint32_t m_bKillingSpreeAnnouncerDisabled = 0x58E; // bool
        constexpr uint32_t m_flFixedRespawnTime = 0x590; // float32
        constexpr uint32_t m_flBuybackCostScale = 0x594; // float32
        constexpr uint32_t m_flRespawnTimeScale = 0x598; // float32
        constexpr uint32_t m_bLoseGoldOnDeath = 0x59C; // bool
        constexpr uint32_t m_bKillableTombstones = 0x59D; // bool
        constexpr uint32_t m_nHUDVisibilityBits = 0x5A0; // uint32
        constexpr uint32_t m_flMinimumAttackSpeed = 0x5A4; // float32
        constexpr uint32_t m_flMaximumAttackSpeed = 0x5A8; // float32
        constexpr uint32_t m_bIsDaynightCycleDisabled = 0x5AC; // bool
        constexpr uint32_t m_flDaynightCycleAdvanceRate = 0x5B0; // float32
        constexpr uint32_t m_bAreWeatherEffectsDisabled = 0x5B4; // bool
        constexpr uint32_t m_bDisableHudFlip = 0x5B5; // bool
        constexpr uint32_t m_bEnableFriendlyBuildingMoveTo = 0x5B6; // bool
        constexpr uint32_t m_bIsDeathOverlayDisabled = 0x5B7; // bool
        constexpr uint32_t m_bIsHudCombatEventsDisabled = 0x5B8; // bool
        constexpr uint32_t m_strDefaultStickyItem = 0x5C0; // CUtlString
        constexpr uint32_t m_sCustomTerrainWeatherEffect = 0x5C8; // CUtlString
        constexpr uint32_t m_strTPScrollSlotItemOverride = 0x5D0; // CUtlString
        constexpr uint32_t m_flStrengthDamage = 0x5D8; // float32
        constexpr uint32_t m_flStrengthHP = 0x5DC; // float32
        constexpr uint32_t m_flStrengthHPRegen = 0x5E0; // float32
        constexpr uint32_t m_flAgilityDamage = 0x5E4; // float32
        constexpr uint32_t m_flAgilityArmor = 0x5E8; // float32
        constexpr uint32_t m_flAgilityAttackSpeed = 0x5EC; // float32
        constexpr uint32_t m_flAgilityMovementSpeedPercent = 0x5F0; // float32
        constexpr uint32_t m_flIntelligenceDamage = 0x5F4; // float32
        constexpr uint32_t m_flIntelligenceMana = 0x5F8; // float32
        constexpr uint32_t m_flIntelligenceManaRegen = 0x5FC; // float32
        constexpr uint32_t m_flIntelligenceMres = 0x600; // float32
        constexpr uint32_t m_flIntelligenceSpellAmpPercent = 0x604; // float32
        constexpr uint32_t m_flStrengthMagicResistancePercent = 0x608; // float32
        constexpr uint32_t m_flAttributeAllDamage = 0x60C; // float32
        constexpr uint32_t m_flDraftingHeroPickSelectTimeOverride = 0x610; // float32
        constexpr uint32_t m_flDraftingBanningTimeOverride = 0x614; // float32
        constexpr uint32_t m_bPauseEnabled = 0x618; // bool
        constexpr uint32_t m_iCustomScanMaxCharges = 0x61C; // int32
        constexpr uint32_t m_flCustomScanCooldown = 0x620; // float32
        constexpr uint32_t m_flCustomGlyphCooldown = 0x624; // float32
        constexpr uint32_t m_flCustomBackpackSwapCooldown = 0x628; // float32
        constexpr uint32_t m_flCustomBackpackCooldownPercent = 0x62C; // float32
        constexpr uint32_t m_bDefaultRuneSpawnLogic = 0x630; // bool
        constexpr uint32_t m_bEnableFreeCourierMode = 0x631; // bool
        constexpr uint32_t m_bAllowNeutralItemDrops = 0x632; // bool
        constexpr uint32_t m_bEnableNeutralStash = 0x633; // bool
        constexpr uint32_t m_bEnableNeutralStashTeamViewOnly = 0x634; // bool
        constexpr uint32_t m_bEnableNeutralItemHideUndiscovered = 0x635; // bool
        constexpr uint32_t m_bEnableSendToStash = 0x636; // bool
        constexpr uint32_t m_bForceRightClickAttackDisabled = 0x637; // bool
        constexpr uint32_t m_vecCustomShopInfo = 0x638; // C_UtlVectorEmbeddedNetworkVar< CDOTACustomShopInfo >
        constexpr uint32_t m_bCanSellAnywhere = 0x688; // bool
        constexpr uint32_t m_flCameraNearZ = 0x68C; // float32
        constexpr uint32_t m_flCameraFarZ = 0x690; // float32
        constexpr uint32_t m_nCustomRadiantScore = 0x694; // int32
        constexpr uint32_t m_nCustomDireScore = 0x698; // int32
        constexpr uint32_t m_bAbilityUpgradeWhitelistEnabled = 0x69C; // bool
        constexpr uint32_t m_vecAbilityUpgradeWhitelist = 0x6A0; // C_NetworkUtlVectorBase< AbilityID_t >
        constexpr uint32_t m_bGiveFreeTPOnDeath = 0x6B8; // bool
        constexpr uint32_t m_nInnateMeleeDamageBlockPct = 0x6BC; // int32
        constexpr uint32_t m_nInnateMeleeDamageBlockAmount = 0x6C0; // int32
        constexpr uint32_t m_nInnateMeleeDamageBlockPerLevelAmount = 0x6C4; // int32
        constexpr uint32_t m_flWaterRuneSpawnInterval = 0x6C8; // float32
        constexpr uint32_t m_nHUDVisibilityBitsPrevious = 0x6CC; // uint32
    }

    namespace C_DOTACameraBounds {
        constexpr uint32_t m_vecBoundsMin = 0x538; // Vector
        constexpr uint32_t m_vecBoundsMax = 0x544; // Vector
    }

    namespace C_DOTACheers {
        constexpr uint32_t m_nRadiantCheers = 0x538; // int16
        constexpr uint32_t m_nDireCheers = 0x53A; // int16
        constexpr uint32_t m_nRadiantPremiumCheers = 0x53C; // int16
        constexpr uint32_t m_nDirePremiumCheers = 0x53E; // int16
        constexpr uint32_t m_nRadiantCrowdLevel = 0x540; // ECrowdLevel
        constexpr uint32_t m_nDireCrowdLevel = 0x544; // ECrowdLevel
    }

    namespace C_DOTACustomGameHeroPickRules {
        constexpr uint32_t m_Phase = 0x538; // DOTACustomHeroPickRulesPhase_t
        constexpr uint32_t m_nNumBansPerTeam = 0x53C; // int32
        constexpr uint32_t m_flEnterTime = 0x540; // GameTime_t
        constexpr uint32_t m_nNumHeroesPicked = 0x544; // int32
    }

    namespace C_DOTAFogOfWarTempViewers {
        constexpr uint32_t m_FoWTempViewerVersion = 0x538; // uint32
        constexpr uint32_t m_TempViewerInfo = 0x540; // C_UtlVectorEmbeddedNetworkVar< TempViewerInfo_t >
        constexpr uint32_t m_dota_spectator_fog_of_war_last = 0x590; // int32
    }

    namespace C_DOTAGameManager {
        constexpr uint32_t __m_pChainEntity = 0x30; // CNetworkVarChainer
        constexpr uint32_t m_bCustomGame = 0x3E8; // bool
        constexpr uint32_t m_bEventGame = 0x3E9; // bool
        constexpr uint32_t m_bGameModeWantsDefaultNeutralItemSchema = 0x3EA; // bool
        constexpr uint32_t m_bGameModeFilteredAbilities = 0x3EB; // bool
        constexpr uint32_t m_szAddOnGame = 0x3EC; // char[128]
        constexpr uint32_t m_szAddOnMap = 0x46C; // char[128]
        constexpr uint32_t m_pTutorialLessonKeyValues = 0x868; // KeyValues*
        constexpr uint32_t m_pDivisionKeyValues = 0x870; // KeyValues*
        constexpr uint32_t m_pMatchGroupsKeyValues = 0x878; // KeyValues*
        constexpr uint32_t m_pAnimationStatues = 0x880; // KeyValues*
        constexpr uint32_t m_pBotScriptsDedicatedServer = 0x888; // KeyValues*
        constexpr uint32_t m_pkvWardPlacementLocations = 0x890; // KeyValues*
        constexpr uint32_t m_pRegionKeyValues = 0x898; // KeyValues*
        constexpr uint32_t m_pSurveyQuestionData = 0x8A0; // KeyValues*
        constexpr uint32_t m_AddonInfoKeyValues = 0x8A8; // KeyValues3
        constexpr uint32_t m_pCountryKeyValues = 0x8E0; // KeyValues*
        constexpr uint32_t m_bLoadedPortraits = 0xE48; // bool[8]
        constexpr uint32_t m_pControlGroupsKeyValues = 0xE50; // KeyValues*
        constexpr uint32_t m_CurrentHeroAvailable = 0xE58; // bool[256]
    }

    namespace C_DOTAGameManagerProxy {
        constexpr uint32_t m_pGameManager = 0x538; // C_DOTAGameManager*
    }

    namespace C_DOTAGamerules {
        constexpr uint32_t __m_pChainEntity = 0x8; // CNetworkVarChainer
        constexpr uint32_t m_nTotalPausedTicks = 0x30; // int32
        constexpr uint32_t m_nPauseStartTick = 0x34; // int32
        constexpr uint32_t m_nRuneCycle = 0x38; // int32
        constexpr uint32_t m_bGamePaused = 0x3C; // bool
        constexpr uint32_t m_iMiscHeroPickCounter = 0x40; // int32
        constexpr uint32_t m_hEndGameCinematicEntity = 0x44; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hOverlayHealthBarUnit = 0x48; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_nOverlayHealthBarType = 0x4C; // int32
        constexpr uint32_t m_bIsInCinematicMode = 0x50; // bool
        constexpr uint32_t m_bIsInClientSideCinematicMode = 0x51; // bool
        constexpr uint32_t m_bFreeCourierMode = 0x52; // bool
        constexpr uint32_t m_nStartingGold = 0x54; // int32
        constexpr uint32_t m_nGoldPerTick = 0x58; // int32
        constexpr uint32_t m_flGoldTickTime = 0x5C; // float32
        constexpr uint32_t m_bItemWhiteListChanged = 0x60; // bool
        constexpr uint32_t m_bEnableSuggestAbilities = 0x61; // bool
        constexpr uint32_t m_bEnableSuggestItems = 0x62; // bool
        constexpr uint32_t m_unFanfareGoodGuys = 0x64; // uint32
        constexpr uint32_t m_unFanfareBadGuys = 0x68; // uint32
        constexpr uint32_t m_iMapType = 0x6C; // int32
        constexpr uint32_t m_nServerGameState = 0x70; // int32
        constexpr uint32_t m_nServerHeroPickState = 0x74; // DOTA_HeroPickState
        constexpr uint32_t m_nGameState = 0x78; // int32
        constexpr uint32_t m_nHeroPickState = 0x7C; // DOTA_HeroPickState
        constexpr uint32_t m_bAlternateHeroGridsEnabled = 0x80; // bool
        constexpr uint32_t m_flStateTransitionTime = 0x84; // GameTime_t
        constexpr uint32_t m_flOverride_dota_hero_selection_time = 0x88; // float32
        constexpr uint32_t m_flOverride_dota_pregame_time = 0x8C; // float32
        constexpr uint32_t m_flOverride_dota_postgame_time = 0x90; // float32
        constexpr uint32_t m_flOverride_dota_strategy_time = 0x94; // float32
        constexpr uint32_t m_flOverride_dota_team_showcase_duration = 0x98; // float32
        constexpr uint32_t m_flOverride_dota_rune_spawn_time = 0x9C; // float32
        constexpr uint32_t m_flShowcaseTime = 0xA0; // float32[15]
        constexpr uint32_t m_flNeutralInitialSpawnOffset = 0xDC; // float32
        constexpr uint32_t m_iGameMode = 0xE0; // int32
        constexpr uint32_t m_hGameModeEntity = 0xE4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hCustomHeroPickRulesEntity = 0xE8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flHeroPickStateTransitionTime = 0xEC; // GameTime_t
        constexpr uint32_t m_iPlayerIDsInControl = 0xF0; // uint64
        constexpr uint32_t m_bSameHeroSelectionEnabled = 0xF8; // bool
        constexpr uint32_t m_bUseCustomHeroXPValue = 0xF9; // bool
        constexpr uint32_t m_bUseBaseGoldBountyOnHeroes = 0xFA; // bool
        constexpr uint32_t m_bUseUniversalShopMode = 0xFB; // bool
        constexpr uint32_t m_bHideKillMessageHeaders = 0xFC; // bool
        constexpr uint32_t m_flHeroMinimapIconScale = 0x100; // float32
        constexpr uint32_t m_flCreepMinimapIconScale = 0x104; // float32
        constexpr uint32_t m_bCreepSpawningEnabled = 0x108; // bool
        constexpr uint32_t m_flRuneMinimapIconScale = 0x10C; // float32
        constexpr uint32_t m_CustomVictoryMessage = 0x110; // char[256]
        constexpr uint32_t m_flCustomGameEndDelay = 0x210; // float32
        constexpr uint32_t m_flCustomGameSetupAutoLaunchDelay = 0x214; // float32
        constexpr uint32_t m_flCustomGameSetupTimeout = 0x218; // float32
        constexpr uint32_t m_flCustomVictoryMessageDuration = 0x21C; // float32
        constexpr uint32_t m_flHeroSelectPenaltyTime = 0x220; // float32
        constexpr uint32_t m_bCustomGameSetupAutoLaunchEnabled = 0x224; // bool
        constexpr uint32_t m_bCustomGameTeamSelectionLocked = 0x225; // bool
        constexpr uint32_t m_bCustomGameEnablePickRules = 0x226; // bool
        constexpr uint32_t m_bCustomGameAllowHeroPickMusic = 0x227; // bool
        constexpr uint32_t m_bCustomGameAllowMusicAtGameStart = 0x228; // bool
        constexpr uint32_t m_bCustomGameAllowBattleMusic = 0x229; // bool
        constexpr uint32_t m_bCustomGameDisableIK = 0x22A; // bool
        constexpr uint32_t m_bCustomGameAllowSecondaryAbilitiesOnOtherUnits = 0x22B; // bool
        constexpr uint32_t m_iCMModePickBanOrder = 0x22C; // int32
        constexpr uint32_t m_iCDModePickBanOrder = 0x230; // int32
        constexpr uint32_t m_nGGTeam = 0x234; // int32
        constexpr uint32_t m_flGGEndsAtTime = 0x238; // GameTime_t
        constexpr uint32_t m_bGGCalled = 0x23C; // bool
        constexpr uint32_t m_bWhiteListEnabled = 0x23D; // bool
        constexpr uint32_t m_bItemWhiteList = 0x240; // uint64[4]
        constexpr uint32_t m_nLastHitUIMode = 0x260; // int32
        constexpr uint32_t m_bHUDTimerTutorialMode = 0x264; // bool
        constexpr uint32_t m_HeroPickMiscTimer = 0x268; // CountdownTimer
        constexpr uint32_t m_ExtraTimeTimer = 0x280; // CountdownTimer
        constexpr uint32_t m_fExtraTimeRemaining = 0x298; // float32[2]
        constexpr uint32_t m_bHeroRespawnEnabled = 0x2A0; // bool
        constexpr uint32_t m_bIsRandomingEnabled = 0x2A1; // bool
        constexpr uint32_t m_iCaptainPlayerIDs = 0x2A4; // PlayerID_t[2]
        constexpr uint32_t m_BannedHeroes = 0x2AC; // int32[24]
        constexpr uint32_t m_SelectedHeroes = 0x30C; // int32[24]
        constexpr uint32_t m_iActiveTeam = 0x36C; // int32
        constexpr uint32_t m_iStartingTeam = 0x370; // int32
        constexpr uint32_t m_iPenaltyLevelRadiant = 0x374; // int32
        constexpr uint32_t m_iPenaltyLevelDire = 0x378; // int32
        constexpr uint32_t m_bIsLoadingScenario = 0x37C; // bool
        constexpr uint32_t m_vecNewBannedHeroes = 0x380; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_vecWhitelistedHeroes = 0x398; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_vecBlacklistedHeroes = 0x3B0; // C_NetworkUtlVectorBase< int32 >
        constexpr uint32_t m_bHideBlacklistedHeroes = 0x3C8; // bool
        constexpr uint32_t m_nSeriesType = 0x3CC; // int32
        constexpr uint32_t m_nRadiantSeriesWins = 0x3D0; // int32
        constexpr uint32_t m_nDireSeriesWins = 0x3D4; // int32
        constexpr uint32_t m_vecAvailableHerosPerPlayerID = 0x3D8; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
        constexpr uint32_t m_vecLockedHerosByPlayerID = 0x428; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
        constexpr uint32_t m_vecDisabledRandomHerosByPlayerID = 0x478; // C_UtlVectorEmbeddedNetworkVar< CHeroesPerPlayer >
        constexpr uint32_t m_CustomGameForceSelectHero = 0x4C8; // int32[24]
        constexpr uint32_t m_flGoldTime = 0x528; // float32
        constexpr uint32_t m_flXPTime = 0x52C; // float32
        constexpr uint32_t m_flCreepSpawntime = 0x530; // GameTime_t
        constexpr uint32_t m_flAnnounceStartTime = 0x534; // float32
        constexpr uint32_t m_iGoodTomeCount = 0x538; // int32
        constexpr uint32_t m_iBadTomeCount = 0x53C; // int32
        constexpr uint32_t m_flPreGameStartTime = 0x540; // GameTime_t
        constexpr uint32_t m_flGameStartTime = 0x544; // GameTime_t
        constexpr uint32_t m_flGameEndTime = 0x548; // GameTime_t
        constexpr uint32_t m_flGameLoadTime = 0x54C; // float32
        constexpr uint32_t m_iCustomGameScore = 0x550; // int32[2]
        constexpr uint32_t m_nCustomGameDifficulty = 0x558; // int32
        constexpr uint32_t m_bEnemyModifiersEnabled = 0x55C; // bool
        constexpr uint32_t m_iWaves = 0x560; // int32
        constexpr uint32_t m_iCreepUpgradeState = 0x564; // int32
        constexpr uint32_t m_fGoodGlyphCooldown = 0x568; // GameTime_t
        constexpr uint32_t m_fBadGlyphCooldown = 0x56C; // GameTime_t
        constexpr uint32_t m_flGlyphCooldowns = 0x570; // GameTime_t[15]
        constexpr uint32_t m_fGoodRadarCooldown = 0x5AC; // GameTime_t
        constexpr uint32_t m_fBadRadarCooldown = 0x5B0; // GameTime_t
        constexpr uint32_t m_flRadarCooldowns = 0x5B4; // GameTime_t[15]
        constexpr uint32_t m_iGoodRadarCharges = 0x5F0; // int32
        constexpr uint32_t m_iBadRadarCharges = 0x5F4; // int32
        constexpr uint32_t m_iRadarCharges = 0x5F8; // int32[15]
        constexpr uint32_t m_flOutpostTimes = 0x634; // float32[24]
        constexpr uint32_t m_bIsNightstalkerNight = 0x694; // bool
        constexpr uint32_t m_bIsTemporaryNight = 0x695; // bool
        constexpr uint32_t m_bIsTemporaryDay = 0x696; // bool
        constexpr uint32_t m_nRiverType = 0x698; // int32
        constexpr uint32_t m_nTeamFeaturedPlayerID = 0x69C; // PlayerID_t[15]
        constexpr uint32_t m_nTeamVersusScreen = 0x6D8; // item_definition_index_t[15]
        constexpr uint32_t m_flGoldRedistributeTime = 0x714; // float32
        constexpr uint32_t m_nGoldToRedistribute = 0x718; // int32[2]
        constexpr uint32_t m_flNextPreGameThink = 0x720; // GameTime_t
        constexpr uint32_t m_flNextAllDraftGoldThink = 0x724; // GameTime_t
        constexpr uint32_t m_flTimeEnteredState = 0x728; // float64
        constexpr uint32_t m_unRiverAccountID = 0x730; // uint32
        constexpr uint32_t m_ulRiverItemID = 0x738; // itemid_t
        constexpr uint32_t m_vecItemStockInfo = 0x780; // C_UtlVectorEmbeddedNetworkVar< CDOTA_ItemStockInfo >
        constexpr uint32_t m_AssassinMiniGameNetData = 0x7D0; // DOTA_AssassinMinigameNetworkState
        constexpr uint32_t m_nGameWinner = 0x7E0; // int32
        constexpr uint32_t m_unMatchID64 = 0x7E8; // MatchID_t
        constexpr uint32_t m_bMatchSignoutComplete = 0x7F0; // bool
        constexpr uint32_t m_hSideShop1 = 0x7F4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hSideShop2 = 0x7F8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hSecretShop1 = 0x7FC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hSecretShop2 = 0x800; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTeamFountains = 0x804; // CHandle< C_BaseEntity >[15]
        constexpr uint32_t m_hTeamForts = 0x840; // CHandle< C_BaseEntity >[15]
        constexpr uint32_t m_hTeamShops = 0x87C; // CHandle< C_BaseEntity >[15]
        constexpr uint32_t m_hAnnouncerGood = 0x8B8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAnnouncerBad = 0x8BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAnnouncerSpectator = 0x8C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAnnouncerGood_KillingSpree = 0x8C4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAnnouncerBad_KillingSpree = 0x8C8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAnnouncerSpectator_KillingSpree = 0x8CC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_arrTier1TowerDestroyed = 0x8D0; // bool[15]
        constexpr uint32_t m_arrTier2TowerDestroyed = 0x8DF; // bool[15]
        constexpr uint32_t m_arrTier3TowerDestroyed = 0x8EE; // bool[15]
        constexpr uint32_t m_bTier1TowerDestroyed = 0x8FD; // bool
        constexpr uint32_t m_bTier2TowerDestroyed = 0x8FE; // bool
        constexpr uint32_t m_bTier3TowerDestroyed = 0x8FF; // bool
        constexpr uint32_t m_fTimeOfDay = 0x900; // float32
        constexpr uint32_t m_iNetTimeOfDay = 0x904; // int32
        constexpr uint32_t m_nLoadedPlayers = 0x908; // int32
        constexpr uint32_t m_nExpectedPlayers = 0x90C; // int32
        constexpr uint32_t m_iMinimapDebugGridState = 0x918; // int32
        constexpr uint32_t m_iFoWFrameNumber = 0x998; // int32
        constexpr uint32_t m_vWeatherWindDirection = 0x99C; // Vector
        constexpr uint32_t m_vecRequiredPlaytestHeroesStorage = 0x9A8; // int32[24]
        constexpr uint32_t m_vecRecommendedPlaytestHeroesStorage = 0xA08; // int32[24]
        constexpr uint32_t m_bAllRequiredPlaytestHeroesPicked = 0xA68; // bool
        constexpr uint32_t m_nLastPlaytestPickPhase = 0xA6C; // int32
        constexpr uint32_t m_nCustomGameFowTeamCount = 0xA70; // int32
        constexpr uint32_t m_bUseAlternateABRules = 0xA74; // bool
        constexpr uint32_t m_bLobbyIsAssociatedWithGame = 0xA75; // bool
        constexpr uint32_t m_BotDebugTimer = 0xA78; // CountdownTimer
        constexpr uint32_t m_BotDebugPushLane = 0xA90; // uint8[18]
        constexpr uint32_t m_BotDebugDefendLane = 0xAA2; // uint8[18]
        constexpr uint32_t m_BotDebugFarmLane = 0xAB4; // uint8[6]
        constexpr uint32_t m_BotDebugRoam = 0xABA; // uint8[8]
        constexpr uint32_t m_hBotDebugRoamTarget = 0xAC4; // CHandle< C_BaseEntity >[2]
        constexpr uint32_t m_BotDebugRoshan = 0xACC; // uint8[2]
        constexpr uint32_t m_nRoshanRespawnPhase = 0xAD0; // ERoshanSpawnPhase
        constexpr uint32_t m_flRoshanRespawnPhaseEndTime = 0xAD4; // GameTime_t
        constexpr uint32_t m_AbilityDraftAbilities = 0xAD8; // C_UtlVectorEmbeddedNetworkVar< CDOTA_AbilityDraftAbilityState >
        constexpr uint32_t m_bAbilityDraftCurrentPlayerHasPicked = 0xB28; // bool
        constexpr uint32_t m_nAbilityDraftPlayerTracker = 0xB2C; // int32
        constexpr uint32_t m_nAbilityDraftRoundNumber = 0xB30; // int32
        constexpr uint32_t m_nAbilityDraftAdvanceSteps = 0xB34; // int32
        constexpr uint32_t m_nAbilityDraftPhase = 0xB38; // int32
        constexpr uint32_t m_nAbilityDraftHeroesChosen = 0xB3C; // int32[13]
        constexpr uint32_t m_bIsPlayerDraft = 0xB70; // bool
        constexpr uint32_t m_ePlayerDraftState = 0xB74; // DOTA_PlayerDraftState
        constexpr uint32_t m_vecPlayerDraftPickOrder = 0xB78; // C_NetworkUtlVectorBase< uint8 >
        constexpr uint32_t m_nPlayerDraftPick = 0xB90; // int32
        constexpr uint32_t m_nPlayerDraftActiveTeam = 0xB94; // int32
        constexpr uint32_t m_flPlayerDraftTimeBank = 0xB98; // float32[2]
        constexpr uint32_t m_vecARDMHeroes = 0xBA0; // CUtlVector< KeyValues* >[2]
        constexpr uint32_t m_nARDMHeroesPrecached = 0xBD0; // int32
        constexpr uint32_t m_fLastARDMPrecache = 0xBD4; // float32
        constexpr uint32_t m_nAllDraftPhase = 0xBD8; // int32
        constexpr uint32_t m_bAllDraftRadiantFirst = 0xBDC; // bool
        constexpr uint32_t m_bAllowOverrideVPK = 0xBDD; // bool
        constexpr uint32_t m_nARDMHeroesRemaining = 0xBE0; // int32[2]
        constexpr uint32_t m_bUpdateHeroStatues = 0xBE8; // bool
        constexpr uint32_t m_bExperimentalGameplay = 0xC00; // bool
        constexpr uint32_t m_vecPlayerMMR = 0xC40; // CUtlVector< int32 >
        constexpr uint32_t m_lobbyType = 0xC58; // uint32
        constexpr uint32_t m_lobbyLeagueID = 0xC5C; // LeagueID_t
        constexpr uint32_t m_lobbyGameName = 0xC60; // char[256]
        constexpr uint32_t m_vecHeroStatueLiked = 0xD60; // C_UtlVectorEmbeddedNetworkVar< CHeroStatueLiked >
        constexpr uint32_t m_CustomGameTeamMaxPlayers = 0xDB0; // int32[15]
        constexpr uint32_t m_iMutations = 0xDEC; // int32[5]
        constexpr uint32_t m_vecIngameEvents = 0xE00; // C_NetworkUtlVectorBase< CHandle< C_IngameEvent_Base > >
        constexpr uint32_t m_nPrimaryIngameEventIndex = 0xE18; // int8
        constexpr uint32_t m_hObsoleteIngameEvent = 0xE1C; // CHandle< C_IngameEvent_Base >
        constexpr uint32_t m_nOfrendaPledges = 0xE20; // uint32
        constexpr uint32_t m_nRadiantOfrendas = 0xE24; // uint32
        constexpr uint32_t m_nDireOfrendas = 0xE28; // uint32
        constexpr uint32_t m_bOfrendaEnabled = 0xE2C; // bool
        constexpr uint32_t m_NeutralSpawnBoxes = 0xE60; // C_NetworkUtlVectorBase< NeutralSpawnBoxes_t >
        constexpr uint32_t m_RegionTriggerBoxes = 0xE78; // C_NetworkUtlVectorBase< RegionTriggerBoxes_t >
        constexpr uint32_t m_flLastPerfSampleTime = 0x1E48; // float64
        constexpr uint32_t m_flLastPerfSampleSendTime = 0x1E50; // float64
        constexpr uint32_t m_bDidSeeStrategyTime = 0x1E58; // bool
        constexpr uint32_t m_flLastUnfocusedSleepTime = 0xABB0; // float64
    }

    namespace C_DOTAGamerulesProxy {
        constexpr uint32_t m_pGameRules = 0x538; // C_DOTAGamerules*
    }

    namespace C_DOTAPlayerController {
        constexpr uint32_t m_iMinimapMove = 0x750; // int32
        constexpr uint32_t m_pClickBehaviorKeys = 0x758; // KeyValues*
        constexpr uint32_t m_flCenterTime = 0x760; // GameTime_t
        constexpr uint32_t m_iConfirmationIndex = 0x764; // int32
        constexpr uint32_t m_bCenterOnHero = 0x768; // bool
        constexpr uint32_t m_bHeroAssigned = 0x769; // bool
        constexpr uint32_t m_nKeyBindHeroID = 0x76C; // int32
        constexpr uint32_t m_bUsingCameraMan = 0x770; // bool
        constexpr uint32_t m_bUsingAssistedCameraOperator = 0x771; // bool
        constexpr uint32_t m_nPlayerAssistFlags = 0x774; // int32
        constexpr uint32_t m_vLatestEvent = 0x778; // Vector
        constexpr uint32_t m_hFreeDrawAbility = 0x7A8; // CHandle< C_DOTABaseAbility >
        constexpr uint32_t m_vLastFreeDrawPosition = 0x7AC; // Vector
        constexpr uint32_t m_nPlayerID = 0x7B8; // PlayerID_t
        constexpr uint32_t m_hAssignedHero = 0x7BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hLastAssignedHero = 0x7C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hKillCamUnit = 0x7C4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hPreviousKillCamUnit = 0x7C8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flKillCamUnitReceivedTime = 0x7CC; // float32
        constexpr uint32_t m_nRareLineClickCount = 0x7D8; // int32
        constexpr uint32_t m_nRareLinesPlayed = 0x7DC; // int32
        constexpr uint32_t m_nRareLineGroup = 0x7E0; // int32
        constexpr uint32_t m_flLastRareLinePlayTime = 0x7E4; // float32
        constexpr uint32_t m_flLastUnitOrdersSendTime = 0x7E8; // float32
        constexpr uint32_t m_bTeleportRequiresHalt = 0x7EC; // bool
        constexpr uint32_t m_bChannelRequiresHalt = 0x7ED; // bool
        constexpr uint32_t m_bAutoPurchaseItems = 0x7EE; // bool
        constexpr uint32_t m_bDisableHUDErrorMessages = 0x7EF; // bool
        constexpr uint32_t m_iMouseDragStartX = 0x7F0; // int32
        constexpr uint32_t m_iMouseDragStartY = 0x7F4; // int32
        constexpr uint32_t m_nWeatherType = 0x7F8; // int32
        constexpr uint32_t m_bDynamicWeatherSystemActive = 0x7FC; // bool
        constexpr uint32_t m_bDynamicSoundHandled = 0x7FD; // bool
        constexpr uint32_t m_flDynamicWeatherNextSwitchTime = 0x800; // GameTime_t
        constexpr uint32_t m_flDynamicWeatherScaleFinishedTime = 0x804; // GameTime_t
        constexpr uint32_t m_flDynamicWeatherIntensity = 0x808; // float32
        constexpr uint32_t m_nXPRangeFXIndex = 0x80C; // ParticleIndex_t
        constexpr uint32_t m_nVisionRangeFXIndex = 0x810; // ParticleIndex_t
        constexpr uint32_t m_nSelectedControlGroup = 0x814; // int32
        constexpr uint32_t m_nCachedCoachedTeam = 0x818; // int32
        constexpr uint32_t m_hActiveAbility = 0x81C; // CHandle< C_DOTABaseAbility >
        constexpr uint32_t m_unitorders = 0x820; // CUtlVector< CUnitOrders >
        constexpr uint32_t m_nOutgoingOrderSequenceNumber = 0x838; // int32
        constexpr uint32_t m_nServerOrderSequenceNumber = 0x83C; // int32
        constexpr uint32_t m_nLastSentOutgoingOrderSequenceNumber = 0x840; // int32
        constexpr uint32_t m_nSelectedUnits = 0x848; // CUtlVector< CEntityIndex >
        constexpr uint32_t m_nWaypoints = 0x860; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_iActions = 0x878; // int32
        constexpr uint32_t m_hQueryUnit = 0x87C; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_bInQuery = 0x880; // bool
        constexpr uint32_t m_bSelectionChangedInDataUpdate = 0x881; // bool
        constexpr uint32_t m_flQueryInhibitingActionTime = 0x8E8; // GameTime_t
        constexpr uint32_t m_flQueryInhibitDuration = 0x8EC; // float32
        constexpr uint32_t m_RingedEntities = 0x8F0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_ActiveRingOwners = 0x908; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bOverridingQuery = 0x920; // bool
        constexpr uint32_t m_flLastAutoRepeatTime = 0x928; // float32
        constexpr uint32_t m_flConsumeDoubleclickTime = 0x92C; // float32
        constexpr uint32_t m_LightInfoWeatherEffect = 0x930; // CUtlString
        constexpr uint32_t m_bPreviousWasLightInfoWeather = 0x938; // bool
        constexpr uint32_t m_MapDefaultWeatherEffect = 0x940; // CUtlString
        constexpr uint32_t m_bMapUsesDynamicWeather = 0x948; // bool
        constexpr uint32_t m_nCastRangeEffectCreationRadius = 0x970; // int32
        constexpr uint32_t m_vecSuggestedWardLocationEffects = 0x990; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_pSmartCastNPC = 0x9A8; // C_DOTA_BaseNPC*
        constexpr uint32_t m_nTeamSprayParticleIndex = 0x9B0; // ParticleIndex_t
        constexpr uint32_t m_bIsNextCastOrderFromMouseClick = 0x9B4; // bool
        constexpr uint32_t m_iCursor = 0x9E8; // int32[2]
        constexpr uint32_t m_iSpectatorClickBehavior = 0x9F0; // int32
        constexpr uint32_t m_flAspectRatio = 0x9F4; // float32
        constexpr uint32_t m_hSpectatorQueryUnit = 0x9F8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iStatsPanel = 0x9FC; // int32
        constexpr uint32_t m_iShopPanel = 0xA00; // int32
        constexpr uint32_t m_iShopViewMode = 0xA04; // ShopItemViewMode_t
        constexpr uint32_t m_iStatsDropdownCategory = 0xA08; // int32
        constexpr uint32_t m_iStatsDropdownSort = 0xA0C; // int32
        constexpr uint32_t m_szShopString = 0xA10; // char[64]
        constexpr uint32_t m_vecClientQuickBuyState = 0xA50; // C_UtlVectorEmbeddedNetworkVar< ClientQuickBuyItemState >
        constexpr uint32_t m_bInShowCaseMode = 0xAA0; // bool
        constexpr uint32_t m_flCameraZoomAmount = 0xAA4; // float32
        constexpr uint32_t m_iHighPriorityScore = 0xAA8; // int32
        constexpr uint32_t m_quickBuyItems = 0xAAC; // AbilityID_t[9]
        constexpr uint32_t m_quickBuyIsPurchasable = 0xAD0; // bool[9]
        constexpr uint32_t m_flFrameTime = 0xADC; // float32
        constexpr uint32_t m_flFrameTimeStdDev = 0xAE0; // float32
        constexpr uint32_t m_flUnfilteredFrameTime = 0xAE4; // float32
        constexpr uint32_t m_NeutralCampAlarms = 0xAE8; // CUtlVector< NeutralCampStackPullAlarm_t >
        constexpr uint32_t m_iPrevCursor = 0xB00; // int32[2]
        constexpr uint32_t m_iPositionHistoryTail = 0xBA8; // int32
        constexpr uint32_t m_iMusicStatus = 0xBAC; // int32
        constexpr uint32_t m_iPreviousMusicStatus = 0xBB0; // int32
        constexpr uint32_t m_bRequestedInventory = 0xBB4; // bool
        constexpr uint32_t m_flMusicOperatorVals = 0xBB8; // float32[3]
        constexpr uint32_t m_iMusicOperatorVals = 0xBC4; // int32[4]
        constexpr uint32_t m_ControlGroups = 0xBD8; // CUtlVector< sControlGroupElem >[10]
        constexpr uint32_t m_pkvControlGroupKV = 0xCC8; // KeyValues*
        constexpr uint32_t m_flAltHeldStartTime = 0xD28; // float32
    }

    namespace C_DOTAPropCustomTexture {
        constexpr uint32_t m_unTeamID = 0xA58; // uint32
        constexpr uint32_t m_bSetupMaterialProxy = 0xA68; // bool
    }

    namespace C_DOTASceneEntity {
        constexpr uint32_t m_nCustomStackIndex = 0x598; // int32
        constexpr uint32_t m_flVolume = 0x59C; // float32
    }

    namespace C_DOTASpectatorGraphManager {
        constexpr uint32_t __m_pChainEntity = 0x28; // CNetworkVarChainer
        constexpr uint32_t m_bTrackingTeamStats = 0x50; // bool
        constexpr uint32_t m_flStartTime = 0x54; // GameTime_t
        constexpr uint32_t m_rgRadiantTotalEarnedGold = 0x58; // int32[64]
        constexpr uint32_t m_rgDireTotalEarnedGold = 0x158; // int32[64]
        constexpr uint32_t m_rgRadiantTotalEarnedXP = 0x258; // int32[64]
        constexpr uint32_t m_rgDireTotalEarnedXP = 0x358; // int32[64]
        constexpr uint32_t m_rgRadiantNetWorth = 0x458; // int32[64]
        constexpr uint32_t m_rgDireNetWorth = 0x558; // int32[64]
        constexpr uint32_t m_flTotalEarnedGoldStartTime = 0x658; // GameTime_t
        constexpr uint32_t m_flTotalEarnedGoldEndTime = 0x65C; // GameTime_t
        constexpr uint32_t m_nGoldGraphVersion = 0x660; // int32
        constexpr uint32_t m_rgRadiantWinChance = 0x664; // int32[64]
        constexpr uint32_t m_TeamStatsUpdateTimer = 0x768; // CountdownTimer
        constexpr uint32_t m_HeroInventorySnapshotTimer = 0x780; // CountdownTimer
        constexpr uint32_t m_vecPlayerSnapshots = 0x798; // CUtlVector< sPlayerSnapshot >[24]
        constexpr uint32_t m_unDataChangedCount = 0x9F0; // uint32
    }

    namespace C_DOTASpectatorGraphManagerProxy {
        constexpr uint32_t m_pGraphManager = 0x538; // C_DOTASpectatorGraphManager*
    }

    namespace C_DOTATeam {
        constexpr uint32_t m_iHeroKills = 0x5F0; // int32
        constexpr uint32_t m_iTowerKills = 0x5F4; // int32
        constexpr uint32_t m_iBarracksKills = 0x5F8; // int32
        constexpr uint32_t m_unTournamentTeamID = 0x5FC; // uint32
        constexpr uint32_t m_ulTeamLogo = 0x600; // uint64
        constexpr uint32_t m_ulTeamBaseLogo = 0x608; // uint64
        constexpr uint32_t m_ulTeamBannerLogo = 0x610; // uint64
        constexpr uint32_t m_bTeamComplete = 0x618; // bool
        constexpr uint32_t m_bTeamIsHomeTeam = 0x619; // bool
        constexpr uint32_t m_CustomHealthbarColor = 0x61A; // Color
        constexpr uint32_t m_szTag = 0x61E; // char[33]
    }

    namespace C_DOTATurboHeroPickRules {
        constexpr uint32_t m_Phase = 0x538; // DOTACustomHeroPickRulesPhase_t
    }

    namespace C_DOTAWearableItem {
        constexpr uint32_t m_bOwnerModelChanged = 0xAF8; // bool
        constexpr uint32_t m_bIsGeneratingEconItem = 0xAF9; // bool
        constexpr uint32_t m_bIsItemVisibleOnGeneratedEntity = 0xAFA; // bool
        constexpr uint32_t m_bHideWearableButDrawAdditionalWearables = 0xAFB; // bool
        constexpr uint32_t m_hAdditionalWearable = 0xAFC; // CHandle< CBaseAnimatingActivity >
        constexpr uint32_t m_hDrawWearable = 0xB00; // CHandle< C_DOTAWearableItem >
        constexpr uint32_t m_bHiddenByCombiner = 0xB04; // bool
        constexpr uint32_t m_bHiddenByEquipmentSlot = 0xB05; // bool
        constexpr uint32_t m_bIsPortrait = 0xB06; // bool
        constexpr uint32_t m_fZDelta = 0xB08; // float32
        constexpr uint32_t m_combinerMaterialOverrideList = 0xB10; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
        constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0xB30; // bool
        constexpr uint32_t m_bRubickFollower = 0xB31; // bool
        constexpr uint32_t m_bHasPlayerModel = 0xB32; // bool
    }

    namespace C_DOTAWorldParticleSystem {
        constexpr uint32_t m_nType = 0x7B8; // int32
        constexpr uint32_t m_iClientEffectIndex = 0x7BC; // ParticleIndex_t
        constexpr uint32_t m_szEffectName = 0x7C0; // CUtlSymbolLarge
        constexpr uint32_t m_szTargetName = 0x7C8; // CUtlSymbolLarge
        constexpr uint32_t m_szControlPoint = 0x7D0; // CUtlSymbolLarge
        constexpr uint32_t m_hOverrideSequence = 0x7D8; // HSequence
        constexpr uint32_t m_hOverrideModel = 0x7E0; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_vModelScale = 0x7E8; // Vector
        constexpr uint32_t m_nSkinOverride = 0x7F4; // int32
        constexpr uint32_t m_bDayTime = 0x7F8; // bool
        constexpr uint32_t m_bNightTime = 0x7F9; // bool
        constexpr uint32_t m_bShowInFow = 0x7FA; // bool
        constexpr uint32_t m_bShowWhileDynamicWeatherActive = 0x7FB; // bool
        constexpr uint32_t m_bAnimateDuringGameplayPause = 0x7FC; // bool
    }

    namespace C_DOTA_Ability_AbyssalUnderlord_DarkRift {
        constexpr uint32_t teleport_delay = 0x5B0; // float32
        constexpr uint32_t m_hTeleportTarget = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_AbyssalUnderlord_Dark_Portal {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t distance_from_fountain = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_AbyssalUnderlord_Portal_Warp {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flChannelTime = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_Aghanim_UrnUpheaval {
        constexpr uint32_t m_vPosition = 0x5B0; // Vector
        constexpr uint32_t aoe = 0x5BC; // float32
        constexpr uint32_t slow_rate = 0x5C0; // float32
        constexpr uint32_t slow_rate_duration = 0x5C4; // float32
        constexpr uint32_t duration = 0x5C8; // float32
        constexpr uint32_t max_slow = 0x5CC; // float32
        constexpr uint32_t burn_damage = 0x5D0; // float32
        constexpr uint32_t m_flCurrentSlow = 0x5D4; // float32
        constexpr uint32_t m_nFXIndex = 0x5D8; // ParticleIndex_t
        constexpr uint32_t m_SlowTimer = 0x5E0; // CountdownTimer
        constexpr uint32_t m_timer = 0x5F8; // CountdownTimer
    }

    namespace C_DOTA_Ability_AghsFort_BossDarkWillow_ShadowRealm {
        constexpr uint32_t projectile_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_Creature_Phoenix_FireSpirits {
        constexpr uint32_t hp_cost_perc = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_Creature_Venomancer_PoisonNova {
        constexpr uint32_t m_nFXPreview = 0x5B0; // ParticleIndex_t
        constexpr uint32_t radius = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_AghsFort_EarthSpiritBoss_Magnetize {
        constexpr uint32_t cast_radius = 0x5B0; // int32
        constexpr uint32_t rock_explosion_radius = 0x5B4; // int32
        constexpr uint32_t damage_duration = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_AghsFort_Juggernaut_BladeDance {
        constexpr uint32_t m_hBladeFuryThinker = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_AghsFort_Kunkka_GhostShip {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t stun_duration = 0x5B4; // float32
        constexpr uint32_t ghostship_width = 0x5B8; // int32
        constexpr uint32_t ghostship_width_scepter = 0x5BC; // int32
        constexpr uint32_t m_vFinalDestination = 0x5C0; // Vector
        constexpr uint32_t m_vStartingPoint = 0x5CC; // Vector
    }

    namespace C_DOTA_Ability_AghsFort_Kunkka_Tidal_Wave {
        constexpr uint32_t m_WaveData = 0x5B0; // WaveData_t[2]
    }

    namespace C_DOTA_Ability_AghsFort_Kunkka_Torrent {
        constexpr uint32_t torrent_storm_chance = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_Kunkka_XMarksTheSpot {
        constexpr uint32_t m_hThinkerEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_AghsFort_Lich_ChainFrost {
        constexpr uint32_t jump_range = 0x5B0; // int32
        constexpr uint32_t jumps = 0x5B4; // int32
        constexpr uint32_t slow_duration = 0x5B8; // float32
        constexpr uint32_t vision_radius = 0x5BC; // int32
        constexpr uint32_t projectile_speed = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_Lich_Ice_Spire {
        constexpr uint32_t aura_radius = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_AghsFort_Lich_Sinister_Gaze {
        constexpr uint32_t m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vPullLocation = 0x5B4; // Vector
        constexpr uint32_t m_flIntervalRate = 0x5C0; // float32
    }

    namespace C_DOTA_Ability_AghsFort_Phoenix_FireSpirits {
        constexpr uint32_t hp_cost_perc = 0x5B0; // int32
        constexpr uint32_t spirit_count = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_AghsFort_QueenOfPain_ScreamOfPain {
        constexpr uint32_t damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_QueenOfPain_ShadowStrike {
        constexpr uint32_t projectile_speed = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_AghsFort_QueenOfPain_SonicWave {
        constexpr uint32_t m_fStartTime = 0x5B0; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5B4; // float32
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
        constexpr uint32_t m_nSonicTrailRadius = 0x5BC; // int32
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x5C0; // Vector
        constexpr uint32_t bTrailStartedBurning = 0x5CC; // bool
        constexpr uint32_t damage = 0x5D0; // int32
        constexpr uint32_t starting_aoe = 0x5D4; // int32
        constexpr uint32_t final_aoe = 0x5D8; // int32
    }

    namespace C_DOTA_Ability_AghsFort_RockGolem_Smash {
        constexpr uint32_t m_nPreviewFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vTargetLoc = 0x5B4; // Vector
        constexpr uint32_t radius = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_AghsFort_ShadowShaman_Shackles {
        constexpr uint32_t m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t nShackleFXIndex = 0x5B4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_AghsFort_Sniper_Concussive_Grenade {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_AghsFort_StonehallGeneral_OverwhelmingOdds {
        constexpr uint32_t max_steps = 0x5B0; // int32
        constexpr uint32_t m_vTarget = 0x5B4; // Vector
        constexpr uint32_t m_vDir = 0x5C0; // Vector
        constexpr uint32_t m_nSteps = 0x5CC; // int32
        constexpr uint32_t m_flChannelStartTime = 0x5D0; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x5D4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_AghsFort_TrapRoom_Hookshot {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vProjectileVelocity = 0x5B4; // Vector
        constexpr uint32_t m_bRetract = 0x5C0; // bool
    }

    namespace C_DOTA_Ability_AghsFort_Wave_Blast {
        constexpr uint32_t damage = 0x5B0; // int32
        constexpr uint32_t knockback_duration = 0x5B4; // float32
        constexpr uint32_t disarm_duration = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_Aghsfort2_DrowRanger_Multishot {
        constexpr uint32_t m_vHitTargets = 0x5B0; // CUtlVector< CUtlVector< CHandle< C_BaseEntity > > >
    }

    namespace C_DOTA_Ability_Aghsfort2_DrowRanger_WaveOfSilence {
        constexpr uint32_t wave_length = 0x5B0; // int32
        constexpr uint32_t wave_width = 0x5B4; // int32
        constexpr uint32_t wave_speed = 0x5B8; // float32
        constexpr uint32_t silence_duration = 0x5BC; // float32
        constexpr uint32_t knockback_distance_max = 0x5C0; // float32
        constexpr uint32_t knockback_duration = 0x5C4; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Aziyog_Underlord_Dark_Portal {
        constexpr uint32_t duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Aziyog_Underlord_Portal_Warp {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Aghsfort_Bane_BrainSap {
        constexpr uint32_t cast_range = 0x5B0; // int32
        constexpr uint32_t brain_sap_damage = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Bane_FiendsGrip {
        constexpr uint32_t m_hGripTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t fiend_grip_damage = 0x5B4; // int32
        constexpr uint32_t fiend_grip_spread_radius = 0x5B8; // int32
        constexpr uint32_t channel_time = 0x5BC; // float32
        constexpr uint32_t fiend_grip_tick_interval = 0x5C0; // float32
        constexpr uint32_t m_flLastSpreadTime = 0x5C4; // GameTime_t
    }

    namespace C_DOTA_Ability_Aghsfort_Dawnbreaker_Solar_Guardian {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bJumping = 0x5B4; // bool
        constexpr uint32_t m_vecDeathThinkers = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hTeleportTarget = 0x5D0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nTPFXIndex = 0x5D4; // ParticleIndex_t
        constexpr uint32_t m_nAoEFXIndex = 0x5D8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Aghsfort_Elemental_Wisp_Tether {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vProjectileLocation = 0x5B4; // Vector
        constexpr uint32_t m_bProjectileActive = 0x5C0; // bool
        constexpr uint32_t latch_distance = 0x5C4; // int32
        constexpr uint32_t m_iProjectileIndex = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Gyrocopter_Rocket_Barrage {
        constexpr uint32_t duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Lina_DragonSlave {
        constexpr uint32_t dragon_slave_distance = 0x5B0; // int32
        constexpr uint32_t m_vLastTrailThinkerLocation = 0x5B4; // Vector
        constexpr uint32_t dragon_slave_damage = 0x5C0; // int32
        constexpr uint32_t m_flLSADistance = 0x5C4; // float32
        constexpr uint32_t m_nLSAPower = 0x5C8; // int32
        constexpr uint32_t m_flLSADelay = 0x5CC; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Lina_LagunaBlade {
        constexpr uint32_t m_hHitEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nMaxBounces = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Magnataur_Empower {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Aghsfort_Magnataur_FriendlySkewer {
        constexpr uint32_t skewer_radius = 0x5B0; // int32
        constexpr uint32_t skewer_speed = 0x5B4; // int32
        constexpr uint32_t max_targets = 0x5B8; // int32
        constexpr uint32_t range = 0x5BC; // int32
        constexpr uint32_t tree_radius = 0x5C0; // int32
        constexpr uint32_t affects_creeps = 0x5C4; // int32
        constexpr uint32_t m_nTargetsHit = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Magnataur_ReversePolarity {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vPullLocation = 0x5B4; // Vector
    }

    namespace C_DOTA_Ability_Aghsfort_Magnataur_Shockwave {
        constexpr uint32_t m_nFXIndices = 0x5B0; // CUtlVector< ParticleIndex_t >
    }

    namespace C_DOTA_Ability_Aghsfort_Magnataur_Skewer {
        constexpr uint32_t skewer_radius = 0x5B0; // int32
        constexpr uint32_t skewer_speed = 0x5B4; // int32
        constexpr uint32_t range = 0x5B8; // int32
        constexpr uint32_t tree_radius = 0x5BC; // int32
        constexpr uint32_t m_vSkewerDirection = 0x5C0; // Vector
        constexpr uint32_t m_nTargetsHit = 0x5CC; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_Onslaught {
        constexpr uint32_t max_charge_time = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_Pummel {
        constexpr uint32_t m_hTarget = 0x5B0; // C_DOTA_BaseNPC*
    }

    namespace C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_RoarAttack {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t projectile_count = 0x5B4; // int32
        constexpr uint32_t rotation_angle = 0x5B8; // float32
        constexpr uint32_t damage = 0x5BC; // float32
        constexpr uint32_t radius = 0x5C0; // float32
        constexpr uint32_t ctTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_vecStartRot = 0x5E0; // Vector
        constexpr uint32_t m_vecEndRot = 0x5EC; // Vector
    }

    namespace C_DOTA_Ability_Aghsfort_PrimalBeast_Boss_TectonicShift {
        constexpr uint32_t damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Sand_King_BurrowStrike {
        constexpr uint32_t burrow_width = 0x5B0; // int32
        constexpr uint32_t burrow_speed = 0x5B4; // int32
        constexpr uint32_t burrow_anim_time = 0x5B8; // float32
        constexpr uint32_t m_vStartLocation = 0x5BC; // Vector
    }

    namespace C_DOTA_Ability_Aghsfort_Sand_King_Epicenter {
        constexpr uint32_t m_nFXEpicenterIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Aghsfort_Sand_King_SandStorm {
        constexpr uint32_t m_iRadius = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Special_Magnataur_ReversePolarity_Polarity {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vPullLocation = 0x5B4; // Vector
        constexpr uint32_t pAbilityPrimaryPolarity = 0x5C0; // C_DOTABaseAbility*
    }

    namespace C_DOTA_Ability_Aghsfort_TuskBoss_IceShards {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
        constexpr uint32_t shard_width = 0x5B4; // int32
        constexpr uint32_t shard_damage = 0x5B8; // int32
        constexpr uint32_t shard_count = 0x5BC; // int32
        constexpr uint32_t shard_speed = 0x5C0; // float32
        constexpr uint32_t shard_duration = 0x5C4; // float32
        constexpr uint32_t shard_angle_step = 0x5C8; // float32
        constexpr uint32_t shard_distance = 0x5CC; // int32
        constexpr uint32_t m_vSpawnOrigin = 0x5D0; // Vector
        constexpr uint32_t m_vDirection = 0x5DC; // Vector
    }

    namespace C_DOTA_Ability_Aghsfort_TuskBoss_Snowball {
        constexpr uint32_t snowball_windup_radius = 0x5B0; // int32
        constexpr uint32_t snowball_radius = 0x5B4; // int32
        constexpr uint32_t snowball_grow_rate = 0x5B8; // int32
        constexpr uint32_t snowball_damage = 0x5BC; // int32
        constexpr uint32_t snowball_damage_bonus = 0x5C0; // int32
        constexpr uint32_t stun_duration = 0x5C4; // float32
        constexpr uint32_t bonus_damage = 0x5C8; // int32
        constexpr uint32_t bonus_stun = 0x5CC; // float32
        constexpr uint32_t snowball_speed = 0x5D0; // int32
        constexpr uint32_t snowball_duration = 0x5D4; // float32
        constexpr uint32_t m_vProjectileLocation = 0x5D8; // Vector
        constexpr uint32_t m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXIndex = 0x600; // ParticleIndex_t
        constexpr uint32_t ctSnowball = 0x608; // CountdownTimer
        constexpr uint32_t m_bSpeakAlly = 0x620; // bool
        constexpr uint32_t m_bIsExpired = 0x621; // bool
        constexpr uint32_t m_bInWindup = 0x622; // bool
        constexpr uint32_t m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nContainedValidUnits = 0x628; // int32
        constexpr uint32_t m_bEndingSnowball = 0x62C; // bool
    }

    namespace C_DOTA_Ability_Aghsfort_Tusk_IceShards {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
        constexpr uint32_t shard_width = 0x5B4; // int32
        constexpr uint32_t shard_damage = 0x5B8; // int32
        constexpr uint32_t shard_count = 0x5BC; // int32
        constexpr uint32_t shard_speed = 0x5C0; // float32
        constexpr uint32_t shard_duration = 0x5C4; // float32
        constexpr uint32_t shard_angle_step = 0x5C8; // float32
        constexpr uint32_t shard_distance = 0x5CC; // int32
        constexpr uint32_t secondary_damage_pct = 0x5D0; // int32
        constexpr uint32_t m_vSpawnOrigin = 0x5D4; // Vector
        constexpr uint32_t m_vDirection = 0x5E0; // Vector
    }

    namespace C_DOTA_Ability_Aghsfort_Tusk_Snowball {
        constexpr uint32_t snowball_windup_radius = 0x5B0; // int32
        constexpr uint32_t snowball_radius = 0x5B4; // int32
        constexpr uint32_t snowball_grow_rate = 0x5B8; // int32
        constexpr uint32_t snowball_damage = 0x5BC; // int32
        constexpr uint32_t snowball_damage_bonus = 0x5C0; // int32
        constexpr uint32_t stun_duration = 0x5C4; // float32
        constexpr uint32_t bonus_damage = 0x5C8; // int32
        constexpr uint32_t bonus_stun = 0x5CC; // float32
        constexpr uint32_t snowball_speed = 0x5D0; // int32
        constexpr uint32_t snowball_duration = 0x5D4; // float32
        constexpr uint32_t m_vProjectileLocation = 0x5D8; // Vector
        constexpr uint32_t m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXIndex = 0x600; // ParticleIndex_t
        constexpr uint32_t ctSnowball = 0x608; // CountdownTimer
        constexpr uint32_t m_bSpeakAlly = 0x620; // bool
        constexpr uint32_t m_bIsExpired = 0x621; // bool
        constexpr uint32_t m_bInWindup = 0x622; // bool
        constexpr uint32_t m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nContainedValidUnits = 0x628; // int32
        constexpr uint32_t m_bEndingSnowball = 0x62C; // bool
    }

    namespace C_DOTA_Ability_Aghsfort_Tusk_Snowball_Dummy {
        constexpr uint32_t snowball_radius = 0x5B0; // int32
        constexpr uint32_t snowball_grow_rate = 0x5B4; // int32
        constexpr uint32_t snowball_damage = 0x5B8; // int32
        constexpr uint32_t snowball_damage_bonus = 0x5BC; // int32
        constexpr uint32_t stun_duration = 0x5C0; // float32
        constexpr uint32_t bonus_damage = 0x5C4; // int32
        constexpr uint32_t bonus_stun = 0x5C8; // float32
        constexpr uint32_t snowball_speed = 0x5CC; // int32
        constexpr uint32_t snowball_duration = 0x5D0; // float32
        constexpr uint32_t m_bIsExpired = 0x5D4; // bool
        constexpr uint32_t m_vProjectileLocation = 0x5D8; // Vector
        constexpr uint32_t ctSnowball = 0x5E8; // CountdownTimer
        constexpr uint32_t m_hSnowballedUnits = 0x600; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXIndex = 0x618; // ParticleIndex_t
        constexpr uint32_t m_hPrimaryTarget = 0x61C; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Aghsfort_Viper_Aghsfort_ViperStrike {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nTargetTeam = 0x5B4; // int32
        constexpr uint32_t m_flNextViperStrikeTime = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Weaver_Shukuchi {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // int32
        constexpr uint32_t fade_time = 0x5BC; // float32
    }

    namespace C_DOTA_Ability_Aghsfort_Weaver_TimeLapse {
        constexpr uint32_t m_nNPCSpawnedID = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Aghsfort_Wildwing_Tornado_Blast {
        constexpr uint32_t disable_duration = 0x5B0; // float32
        constexpr uint32_t damage = 0x5B4; // float32
        constexpr uint32_t m_nPreviewFX = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Aghsfort_WitchDoctor_DeathWard {
        constexpr uint32_t m_iDamage = 0x5B0; // int32
        constexpr uint32_t m_iBounceRadius = 0x5B4; // int32
        constexpr uint32_t m_iProjectileSpeed = 0x5B8; // int32
        constexpr uint32_t m_iBounces = 0x5BC; // int32
        constexpr uint32_t m_hWard = 0x5C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_fWardExpireTime = 0x5C4; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x5C8; // ParticleIndex_t
        constexpr uint32_t m_iAttackIndex = 0x5CC; // int32
        constexpr uint32_t m_BounceInfo = 0x5D0; // CUtlVector< sAghsfortWardBounceInfo >
    }

    namespace C_DOTA_Ability_Aghsfort_WitchDoctor_DeathWard_No_Channel {
        constexpr uint32_t m_iDamage = 0x5B0; // int32
        constexpr uint32_t m_iBounceRadius = 0x5B4; // int32
        constexpr uint32_t m_iProjectileSpeed = 0x5B8; // int32
        constexpr uint32_t m_iBounces = 0x5BC; // int32
        constexpr uint32_t m_hWard = 0x5C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_fWardExpireTime = 0x5C4; // float32
        constexpr uint32_t m_nFXIndex = 0x5C8; // ParticleIndex_t
        constexpr uint32_t m_iAttackIndex = 0x5CC; // int32
        constexpr uint32_t m_BounceInfo = 0x5D0; // CUtlVector< sAghsfortWardBounceInfo >
    }

    namespace C_DOTA_Ability_Aghsfort_WitchDoctor_ParalyzingCask {
        constexpr uint32_t bounces = 0x5B0; // int32
        constexpr uint32_t bounce_bonus_damage = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Animation_Attack {
        constexpr uint32_t animation_time = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Animation_TailSpin {
        constexpr uint32_t animation_time = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_ArcWarden_SparkWraith {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t activation_delay = 0x5B4; // float32
        constexpr uint32_t wraith_vision_duration = 0x5B8; // float32
        constexpr uint32_t wraith_vision_radius = 0x5BC; // int32
        constexpr uint32_t spark_damage = 0x5C0; // float32
        constexpr uint32_t creep_damage_bonus_pct = 0x5C4; // int32
    }

    namespace C_DOTA_Ability_ArcWarden_TempestDouble {
        constexpr uint32_t m_hDoubles = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Axe_BattleHunger {
        constexpr uint32_t damage_per_second = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Axe_CullingBlade {
        constexpr uint32_t m_bInterrupted = 0x5B0; // bool
        constexpr uint32_t m_vProjectileLocation = 0x5B4; // Vector
        constexpr uint32_t m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Bane_BrainSap {
        constexpr uint32_t brain_sap_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Bane_FiendsGrip {
        constexpr uint32_t m_hGripTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t fiend_grip_damage = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Beastmaster_CallOfTheWild_Hawk {
        constexpr uint32_t m_HawkList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_flRotation = 0x5C8; // float32
    }

    namespace C_DOTA_Ability_Beastmaster_WildAxes {
        constexpr uint32_t axe_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_BountyHunter_Track {
        constexpr uint32_t m_hTrap = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Brewmaster_DrunkenBrawler {
        constexpr uint32_t m_iBrawlActive = 0x5B0; // int32
        constexpr uint32_t m_bUpdateIcons = 0x5B4; // bool
        constexpr uint32_t m_nDrunkenBrawlerFX = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Brewmaster_HurlBoulder {
        constexpr uint32_t m_iBounces = 0x5B0; // int32
        constexpr uint32_t m_hHitEntities = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Brewmaster_PrimalSplit {
        constexpr uint32_t m_hPrimary = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hSecondary = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTertiary = 0x5B8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hFourth = 0x5BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_fHurlBoulder_CooldownTime = 0x5C0; // GameTime_t
        constexpr uint32_t m_fHDispelMagic_CooldownTime = 0x5C4; // GameTime_t
        constexpr uint32_t m_fCyclone_CooldownTime = 0x5C8; // GameTime_t
        constexpr uint32_t m_fWindWalk_CooldownTime = 0x5CC; // GameTime_t
        constexpr uint32_t m_fAstralPulse_CooldownTime = 0x5D0; // GameTime_t
    }

    namespace C_DOTA_Ability_Broodmother_SpinWeb {
        constexpr uint32_t m_hWebs = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Broodmother_StickySnare {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
        constexpr uint32_t duration = 0x5BC; // float32
        constexpr uint32_t width = 0x5C0; // int32
        constexpr uint32_t m_bStolenSnareCheck = 0x5C4; // bool
        constexpr uint32_t m_vecSnares = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_ChaosKnight_Chaos_Bolt {
        constexpr uint32_t hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_ChaosKnight_Reality_Rift {
        constexpr uint32_t m_flPercentage = 0x5B0; // float32
        constexpr uint32_t m_FXIndex = 0x5B8; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_hRiftIllusion = 0x5D0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Chen_HolyPersuasion {
        constexpr uint32_t m_hDominatedUnits = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Clinkz_BurningBarrage {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_iArrowProjectile = 0x5BC; // int32
        constexpr uint32_t m_nFXIndex = 0x5C0; // int32
        constexpr uint32_t arrow_speed = 0x5C4; // float32
    }

    namespace C_DOTA_Ability_Clinkz_Burning_Army {
        constexpr uint32_t range = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Clinkz_DeathPact {
        constexpr uint32_t m_nDevourFirstSlot = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Creature_Fire_Breath {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t projectile_count = 0x5B4; // int32
        constexpr uint32_t rotation_angle = 0x5B8; // float32
        constexpr uint32_t damage = 0x5BC; // float32
        constexpr uint32_t radius = 0x5C0; // float32
        constexpr uint32_t ctTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_vecStartRot = 0x5E0; // Vector
        constexpr uint32_t m_vecEndRot = 0x5EC; // Vector
    }

    namespace C_DOTA_Ability_Creature_Ice_Breath {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t projectile_count = 0x5B4; // int32
        constexpr uint32_t rotation_angle = 0x5B8; // float32
        constexpr uint32_t damage = 0x5BC; // float32
        constexpr uint32_t radius = 0x5C0; // float32
        constexpr uint32_t slow_duration = 0x5C4; // float32
        constexpr uint32_t ctTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_vecStartRot = 0x5E0; // Vector
        constexpr uint32_t m_vecEndRot = 0x5EC; // Vector
    }

    namespace C_DOTA_Ability_CrystalMaiden_CrystalNova {
        constexpr uint32_t nova_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_DarkSeer_Surge {
        constexpr uint32_t m_bIsAltCastState = 0x5B0; // bool
    }

    namespace C_DOTA_Ability_DarkSeer_Vacuum {
        constexpr uint32_t m_vPullLocation = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_DarkSeer_WallOfReplica {
        constexpr uint32_t width = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_DarkWillow_Terrorize {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_DataDriven {
        constexpr uint32_t m_bProcsMagicStick = 0x5B0; // bool
        constexpr uint32_t m_bIsSharedWithTeammates = 0x5B1; // bool
        constexpr uint32_t m_bCastFilterRejectCaster = 0x5B2; // bool
        constexpr uint32_t m_fAOERadius = 0x5B4; // float32
        constexpr uint32_t m_CastAnimation = 0x5B8; // int32
        constexpr uint32_t m_ModifierKVDescriptions = 0x5C0; // CUtlVector< KeyValues* >
        constexpr uint32_t m_pOnChannelFinishKV = 0x5D8; // KeyValues*
        constexpr uint32_t m_pOnChannelSucceededKV = 0x5E0; // KeyValues*
        constexpr uint32_t m_pOnChannelInterruptedKV = 0x5E8; // KeyValues*
        constexpr uint32_t m_pOnOwnerSpawnedKV = 0x5F0; // KeyValues*
        constexpr uint32_t m_pOnOwnerDiedKV = 0x5F8; // KeyValues*
        constexpr uint32_t m_pOnUpgradeKV = 0x600; // KeyValues*
        constexpr uint32_t m_pOnProjectileHitUnitKV = 0x608; // KeyValues*
        constexpr uint32_t m_pOnProjectileFinishKV = 0x610; // KeyValues*
        constexpr uint32_t m_pOnSpellStartKV = 0x618; // KeyValues*
        constexpr uint32_t m_pOnAbilityPhaseStartKV = 0x620; // KeyValues*
        constexpr uint32_t m_pOnAbilityPhaseInterruptedKV = 0x628; // KeyValues*
        constexpr uint32_t m_pOnToggleOnKV = 0x630; // KeyValues*
        constexpr uint32_t m_pOnToggleOffKV = 0x638; // KeyValues*
        constexpr uint32_t m_pOnCreatedKV = 0x640; // KeyValues*
    }

    namespace C_DOTA_Ability_Dawnbreaker_Solar_Guardian {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bJumping = 0x5B4; // bool
        constexpr uint32_t m_hTeleportTarget = 0x5B8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nTPFXIndex = 0x5BC; // ParticleIndex_t
        constexpr uint32_t m_nAoEFXIndex = 0x5C0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Dazzle_ShadowWave {
        constexpr uint32_t m_hHitEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t bounce_radius = 0x5C8; // int32
        constexpr uint32_t damage_radius = 0x5CC; // int32
        constexpr uint32_t damage = 0x5D0; // int32
        constexpr uint32_t max_targets = 0x5D4; // int32
        constexpr uint32_t scepter_heal_pct = 0x5D8; // float32
    }

    namespace C_DOTA_Ability_DeathProphet_CarrionSwarm {
        constexpr uint32_t start_radius = 0x5B0; // int32
        constexpr uint32_t end_radius = 0x5B4; // int32
        constexpr uint32_t m_fStartTime = 0x5B8; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5BC; // float32
        constexpr uint32_t m_nProjectileHandle = 0x5C0; // int32
        constexpr uint32_t m_nFXIndex = 0x5C4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_DeathProphet_Exorcism {
        constexpr uint32_t m_SpiritInfos = 0x5B0; // CUtlVector< sSpiritInfo* >
    }

    namespace C_DOTA_Ability_DeathProphet_Silence {
        constexpr uint32_t m_vPos = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_DeathProphet_SpiritSiphon {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_iArrowProjectile = 0x5BC; // int32
        constexpr uint32_t m_nFXIndex = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_DoomBringer_Devour {
        constexpr uint32_t m_nDevourFirstSlot = 0x5B0; // int32
        constexpr uint32_t m_bIsAltCastState = 0x5B4; // bool
    }

    namespace C_DOTA_Ability_DragonKnight_BreatheFire {
        constexpr uint32_t start_radius = 0x5B0; // int32
        constexpr uint32_t end_radius = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // float32
        constexpr uint32_t m_vStartPos = 0x5BC; // Vector
        constexpr uint32_t m_fStartTime = 0x5C8; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5CC; // float32
    }

    namespace C_DOTA_Ability_DrowRanger_FrostArrows {
        constexpr uint32_t shard_burst_damage_per_stack = 0x5B0; // int32
        constexpr uint32_t shard_burst_slow_duration = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_DrowRanger_Multishot {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_iArrowProjectile = 0x5BC; // int32
        constexpr uint32_t m_nFXIndex = 0x5C0; // int32
        constexpr uint32_t arrow_speed = 0x5C4; // float32
        constexpr uint32_t arrow_spread = 0x5C8; // int32
        constexpr uint32_t m_vHitTargets0 = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets1 = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets2 = 0x600; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets3 = 0x618; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets4 = 0x630; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets5 = 0x648; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vHitTargets6 = 0x660; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_DrowRanger_WaveOfSilence {
        constexpr uint32_t wave_width = 0x5B0; // int32
        constexpr uint32_t wave_speed = 0x5B4; // float32
        constexpr uint32_t silence_duration = 0x5B8; // float32
        constexpr uint32_t knockback_distance_max = 0x5BC; // float32
        constexpr uint32_t m_nHeroesHit = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Drow_Ranger_Glacier {
        constexpr uint32_t shard_width = 0x5B0; // int32
        constexpr uint32_t shard_count = 0x5B4; // int32
        constexpr uint32_t shard_duration = 0x5B8; // float32
        constexpr uint32_t shard_angle_step = 0x5BC; // float32
        constexpr uint32_t shard_distance = 0x5C0; // int32
        constexpr uint32_t m_vSpawnOrigin = 0x5C4; // Vector
        constexpr uint32_t m_vDirection = 0x5D0; // Vector
        constexpr uint32_t m_vecShards = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_EarthSpirit_BoulderSmash {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t rock_damage = 0x5B4; // int32
        constexpr uint32_t creep_multiplier = 0x5B8; // float32
        constexpr uint32_t radius = 0x5BC; // int32
        constexpr uint32_t rock_search_aoe = 0x5C0; // int32
        constexpr uint32_t unit_distance = 0x5C4; // float32
        constexpr uint32_t rock_distance = 0x5C8; // float32
        constexpr uint32_t m_nProjectileID = 0x5CC; // int32
        constexpr uint32_t m_hCursorTarget = 0x5D0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bUsedStone = 0x5D4; // bool
        constexpr uint32_t m_hTarget = 0x5D8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bTargetStone = 0x5DC; // bool
    }

    namespace C_DOTA_Ability_EarthSpirit_GeomagneticGrip {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_EarthSpirit_Magnetize {
        constexpr uint32_t cast_radius = 0x5B0; // int32
        constexpr uint32_t rock_explosion_radius = 0x5B4; // int32
        constexpr uint32_t damage_duration = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_EarthSpirit_RollingBoulder {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t speed = 0x5B4; // int32
        constexpr uint32_t rock_speed = 0x5B8; // int32
        constexpr uint32_t damage = 0x5BC; // int32
        constexpr uint32_t damage_str = 0x5C0; // int32
        constexpr uint32_t distance = 0x5C4; // float32
        constexpr uint32_t rock_distance = 0x5C8; // float32
        constexpr uint32_t rock_distance_multiplier = 0x5CC; // float32
        constexpr uint32_t slow_duration = 0x5D0; // float32
        constexpr uint32_t m_nFXIndex = 0x5D4; // ParticleIndex_t
        constexpr uint32_t m_boulderSetposBool = 0x5D8; // bool
        constexpr uint32_t m_nProjectileID = 0x5DC; // int32
        constexpr uint32_t m_vStartingLocation = 0x5E0; // Vector
        constexpr uint32_t m_vProjectileLocation = 0x5EC; // Vector
        constexpr uint32_t m_vDir = 0x5F8; // Vector
        constexpr uint32_t m_vVel = 0x604; // Vector
        constexpr uint32_t m_bUsedStone = 0x610; // bool
        constexpr uint32_t m_vRollDirection = 0x614; // Vector
    }

    namespace C_DOTA_Ability_Earthshaker_EchoSlam {
        constexpr uint32_t echo_slam_damage_range = 0x5B0; // int32
        constexpr uint32_t echo_slam_echo_search_range = 0x5B4; // int32
        constexpr uint32_t echo_slam_echo_range = 0x5B8; // int32
        constexpr uint32_t echo_slam_echo_damage = 0x5BC; // int32
        constexpr uint32_t echo_slam_initial_damage = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Elder_Titan_AncestralSpirit {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t buff_duration = 0x5B8; // float32
        constexpr uint32_t spirit_duration = 0x5BC; // float32
        constexpr uint32_t m_nCreepsHit = 0x5C0; // int32
        constexpr uint32_t m_nHeroesHit = 0x5C4; // int32
        constexpr uint32_t m_bIsReturning = 0x5C8; // bool
        constexpr uint32_t m_hAncestralSpirit = 0x5CC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nReturnFXIndex = 0x5D0; // ParticleIndex_t
        constexpr uint32_t m_strMoveSpiritSwapAbility = 0x5D8; // CUtlString
    }

    namespace C_DOTA_Ability_Elder_Titan_EchoStomp {
        constexpr uint32_t m_nFXIndexTitan = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexSpirit = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexTitanB = 0x5B8; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexSpiritB = 0x5BC; // ParticleIndex_t
        constexpr uint32_t radius = 0x5C0; // int32
        constexpr uint32_t stomp_damage = 0x5C4; // int32
        constexpr uint32_t sleep_duration = 0x5C8; // float32
        constexpr uint32_t cast_time = 0x5CC; // float32
        constexpr uint32_t m_vecStompedHeroes = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecStompedHeroes_BuffCounted = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bStompedInvisibleHero = 0x600; // bool
    }

    namespace C_DOTA_Ability_EmberSpirit_Activate_FireRemnant {
        constexpr uint32_t m_nProjectileID = 0x5B0; // int32
        constexpr uint32_t m_vStartLocation = 0x5B4; // Vector
        constexpr uint32_t m_vProjectileLocation = 0x5C0; // Vector
        constexpr uint32_t m_ProjectileAngles = 0x5CC; // QAngle
        constexpr uint32_t m_hRemnantToKill = 0x5D8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bProjectileStarted = 0x5DC; // bool
        constexpr uint32_t hAlreadyHitList = 0x5E0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_EmberSpirit_FireRemnant {
        constexpr uint32_t m_vRemnantData = 0x5B0; // CUtlVector< RemnantData_t >
    }

    namespace C_DOTA_Ability_EmberSpirit_SleightOfFist {
        constexpr uint32_t m_vCastLoc = 0x5B0; // Vector
        constexpr uint32_t m_nHeroesKilled = 0x5BC; // int32
        constexpr uint32_t m_hAttackEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXMarkerIndex = 0x5D8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Enchantress_Little_Friends {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t radius = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Enigma_Malefice {
        constexpr uint32_t tick_rate = 0x5B0; // float32
        constexpr uint32_t stun_instances = 0x5B4; // int32
        constexpr uint32_t m_flDuration = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_EnragedWildkin_Tornado {
        constexpr uint32_t m_hTornado = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hNeutralTarget = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_FacelessVoid_TimeWalk {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t range = 0x5B4; // int32
        constexpr uint32_t radius = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_FacelessVoid_TimeWalk_Reverse {
        constexpr uint32_t speed = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Frostivus2018_Huskar_Life_Break {
        constexpr uint32_t m_vProjectileLocation = 0x5B0; // Vector
        constexpr uint32_t m_hTarget = 0x5BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bInterrupted = 0x5C0; // bool
        constexpr uint32_t max_damage = 0x5C4; // int32
    }

    namespace C_DOTA_Ability_Frostivus2018_Magnataur_Skewer {
        constexpr uint32_t skewer_radius = 0x5B0; // int32
        constexpr uint32_t skewer_speed = 0x5B4; // int32
        constexpr uint32_t range = 0x5B8; // int32
        constexpr uint32_t tree_radius = 0x5BC; // int32
        constexpr uint32_t m_nTargetsHit = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Frostivus2018_Puck_DreamCoil {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Frostivus2018_Rubick_GhostShip {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t stun_duration = 0x5B4; // float32
        constexpr uint32_t ghostship_width = 0x5B8; // int32
        constexpr uint32_t ghostship_speed = 0x5BC; // int32
        constexpr uint32_t ghostship_distance = 0x5C0; // int32
        constexpr uint32_t m_vFinalDestination = 0x5C4; // Vector
        constexpr uint32_t m_vStartingPoint = 0x5D0; // Vector
    }

    namespace C_DOTA_Ability_Frostivus2018_TrollWarlord_BattleTrance {
        constexpr uint32_t trance_duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Frostivus2018_Windrunner_Shackleshot {
        constexpr uint32_t shackle_count = 0x5B0; // int32
        constexpr uint32_t m_vArrowStartPos = 0x5B4; // Vector
        constexpr uint32_t m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hEntitiesAffected = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Furion_Sprout {
        constexpr uint32_t m_iShardCount = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Furion_Teleportation {
        constexpr uint32_t m_nFXIndexStart = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexEnd = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexEndTeam = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Greevil_Miniboss_Blue_IceVortex {
        constexpr uint32_t vision_aoe = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Greevil_Miniboss_Purple_VenomousGale {
        constexpr uint32_t duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Hoodwink_AcornShot {
        constexpr uint32_t m_nAcornTree = 0x5B0; // uint32
        constexpr uint32_t projectile_speed = 0x5B4; // float32
        constexpr uint32_t bounce_delay = 0x5B8; // float32
        constexpr uint32_t bounce_range = 0x5BC; // int32
        constexpr uint32_t bounce_count = 0x5C0; // int32
        constexpr uint32_t m_bIsAltCastState = 0x5C4; // bool
    }

    namespace C_DOTA_Ability_Hoodwink_Bushwhack {
        constexpr uint32_t trap_radius = 0x5B0; // int32
        constexpr uint32_t m_nProjectileHandle = 0x5B4; // int32
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Hoodwink_HuntersBoomerang {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t speed = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // int32
        constexpr uint32_t mark_duration = 0x5BC; // float32
        constexpr uint32_t m_hTarget = 0x5C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vecHitEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Hoodwink_Sharpshooter {
        constexpr uint32_t max_charge_time = 0x5B0; // float32
        constexpr uint32_t m_vStartPos = 0x5B4; // Vector
        constexpr uint32_t m_nFXIndex = 0x5C0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Huskar_Life_Break {
        constexpr uint32_t m_vProjectileLocation = 0x5B0; // Vector
        constexpr uint32_t m_hTarget = 0x5BC; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bInterrupted = 0x5C0; // bool
    }

    namespace C_DOTA_Ability_IceShaman_IncendiaryBomb {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Invoker_ChaosMeteor {
        constexpr uint32_t area_of_effect = 0x5C0; // int32
        constexpr uint32_t damage_interval = 0x5C4; // float32
        constexpr uint32_t vision_distance = 0x5C8; // int32
        constexpr uint32_t end_vision_duration = 0x5CC; // float32
        constexpr uint32_t main_damage = 0x5D0; // float32
        constexpr uint32_t burn_duration = 0x5D4; // float32
        constexpr uint32_t burn_dps = 0x5D8; // float32
    }

    namespace C_DOTA_Ability_Invoker_DeafeningBlast {
        constexpr uint32_t end_vision_duration = 0x5C0; // float32
        constexpr uint32_t damage = 0x5C4; // float32
        constexpr uint32_t knockback_duration = 0x5C8; // float32
        constexpr uint32_t disarm_duration = 0x5CC; // float32
    }

    namespace C_DOTA_Ability_Invoker_Invoke {
        constexpr uint32_t max_invoked_spells = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Invoker_Tornado {
        constexpr uint32_t vision_distance = 0x5C0; // int32
        constexpr uint32_t end_vision_duration = 0x5C4; // float32
        constexpr uint32_t lift_duration = 0x5C8; // float32
        constexpr uint32_t base_damage = 0x5CC; // float32
        constexpr uint32_t quas_damage = 0x5D0; // float32
        constexpr uint32_t wex_damage = 0x5D4; // float32
    }

    namespace C_DOTA_Ability_Juggernaut_BladeFury {
        constexpr uint32_t blade_fury_damage_per_tick = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_JungleSpirit_Volcano_Eruption {
        constexpr uint32_t m_iProjectile = 0x5B8; // int32
        constexpr uint32_t primary_explosion_radius = 0x5BC; // int32
        constexpr uint32_t secondary_explosion_radius = 0x5C0; // int32
        constexpr uint32_t split_radius = 0x5C4; // int32
        constexpr uint32_t szProjectileFXName = 0x5C8; // char*
        constexpr uint32_t szGroundMarkerFXName = 0x5D0; // char*
    }

    namespace C_DOTA_Ability_KeeperOfTheLight_Illuminate {
        constexpr uint32_t m_fStartTime = 0x5B0; // GameTime_t
        constexpr uint32_t m_iProjectile = 0x5B4; // int32
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x5BC; // ParticleIndex_t
        constexpr uint32_t m_vPos = 0x5C0; // Vector
        constexpr uint32_t total_damage = 0x5CC; // int32
        constexpr uint32_t m_bStarted = 0x5D0; // bool
    }

    namespace C_DOTA_Ability_KeeperOfTheLight_SpiritFormIlluminate {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t max_channel_time = 0x5B4; // float32
        constexpr uint32_t total_damage = 0x5B8; // int32
        constexpr uint32_t m_fPower = 0x5BC; // float32
        constexpr uint32_t m_fStartTime = 0x5C0; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x5C4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Kunkka_GhostShip {
        constexpr uint32_t buff_duration = 0x5B0; // float32
        constexpr uint32_t stun_duration = 0x5B4; // float32
        constexpr uint32_t ghostship_width = 0x5B8; // int32
        constexpr uint32_t ghostship_width_scepter = 0x5BC; // int32
        constexpr uint32_t m_vFinalDestination = 0x5C0; // Vector
        constexpr uint32_t m_vStartingPoint = 0x5CC; // Vector
    }

    namespace C_DOTA_Ability_Kunkka_Tidal_Wave {
        constexpr uint32_t hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vStart = 0x5C8; // Vector
    }

    namespace C_DOTA_Ability_Kunkka_XMarksTheSpot {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Lich_ChainFrost {
        constexpr uint32_t jump_range = 0x5B0; // int32
        constexpr uint32_t jumps = 0x5B4; // int32
        constexpr uint32_t slow_duration = 0x5B8; // float32
        constexpr uint32_t vision_radius = 0x5BC; // int32
        constexpr uint32_t projectile_speed = 0x5C0; // int32
        constexpr uint32_t initial_projectile_speed = 0x5C4; // int32
    }

    namespace C_DOTA_Ability_Lich_Ice_Spire {
        constexpr uint32_t aura_radius = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_Lich_Sinister_Gaze {
        constexpr uint32_t m_flLongestGazeDuration = 0x5B0; // float32
        constexpr uint32_t m_hAffectedEntities = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Lina_DragonSlave {
        constexpr uint32_t dragon_slave_distance = 0x5B0; // int32
        constexpr uint32_t dragon_slave_burn_duration = 0x5B4; // float32
        constexpr uint32_t m_flDamage = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_Lina_LagunaBlade {
        constexpr uint32_t m_iDamage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Lion_FingerOfDeath {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Lion_Impale {
        constexpr uint32_t width = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
        constexpr uint32_t speed = 0x5B8; // int32
        constexpr uint32_t length_buffer = 0x5BC; // float32
        constexpr uint32_t range = 0x5C0; // float32
        constexpr uint32_t m_iDefaultCastRange = 0x5C4; // int32
        constexpr uint32_t pierces_immunity = 0x5C8; // int32
        constexpr uint32_t m_hHitEntities = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Lion_ManaDrain {
        constexpr uint32_t m_Victims = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_LoneDruid_Rabid {
        constexpr uint32_t rabid_duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_LoneDruid_SpiritBear {
        constexpr uint32_t m_bLevelChanged = 0x5B0; // bool
        constexpr uint32_t m_hBear = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hPreBear = 0x5B8; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_LoneDruid_SpiritBear_Return {
        constexpr uint32_t m_nFXOrigin = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_LoneDruid_TrueForm_BattleCry {
        constexpr uint32_t cry_duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Luna_MoonGlaive {
        constexpr uint32_t m_iAttackIndex = 0x5B0; // int32
        constexpr uint32_t m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfo >
    }

    namespace C_DOTA_Ability_Lycan_SummonWolves {
        constexpr uint32_t szUnitName = 0x5B0; // char[260]
        constexpr uint32_t wolf_index = 0x6B4; // int32
        constexpr uint32_t wolf_duration = 0x6B8; // float32
        constexpr uint32_t m_hExistingUnits = 0x6C0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Magnataur_ReversePolarity {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vPullLocation = 0x5B4; // Vector
    }

    namespace C_DOTA_Ability_Magnataur_Shockwave {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t hAlreadyHitList = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t hAlreadyHitListReturning = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Magnataur_Skewer {
        constexpr uint32_t skewer_radius = 0x5B0; // int32
        constexpr uint32_t skewer_speed = 0x5B4; // int32
        constexpr uint32_t range = 0x5B8; // int32
        constexpr uint32_t tree_radius = 0x5BC; // int32
        constexpr uint32_t m_nTargetsHit = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Medusa_MysticSnake {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t snake_jumps = 0x5B4; // int32
        constexpr uint32_t snake_damage = 0x5B8; // int32
        constexpr uint32_t snake_damage_pct = 0x5BC; // int32
        constexpr uint32_t snake_mana_steal = 0x5C0; // int32
        constexpr uint32_t snake_scale = 0x5C4; // int32
        constexpr uint32_t snake_speed_scale = 0x5C8; // int32
        constexpr uint32_t initial_speed = 0x5CC; // int32
        constexpr uint32_t return_speed = 0x5D0; // int32
        constexpr uint32_t jump_delay = 0x5D4; // float32
        constexpr uint32_t slow_duration = 0x5D8; // float32
    }

    namespace C_DOTA_Ability_Meepo_DividedWeStand {
        constexpr uint32_t m_nWhichDividedWeStand = 0x5B0; // int32
        constexpr uint32_t m_nNumDividedWeStand = 0x5B4; // int32
        constexpr uint32_t m_entPrimeDividedWeStand = 0x5B8; // CHandle< C_DOTA_Ability_Meepo_DividedWeStand >
        constexpr uint32_t m_entNextDividedWeStand = 0x5BC; // CHandle< C_DOTA_Ability_Meepo_DividedWeStand >
    }

    namespace C_DOTA_Ability_Meepo_MegaMeepo {
        constexpr uint32_t hPreviousMeepo = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t hMegameepoFrame = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t hListOfMeepos = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bHasSwappedAbilities = 0x5D0; // bool
    }

    namespace C_DOTA_Ability_Meepo_Megameepo_Fling {
        constexpr uint32_t vision_radius = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Mirana_Arrow {
        constexpr uint32_t scepter_radius = 0x5B0; // int32
        constexpr uint32_t m_vStartPos = 0x5B4; // Vector
        constexpr uint32_t m_nFXIndex = 0x5C0; // ParticleIndex_t
        constexpr uint32_t hAlreadyHitList = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >[2]
        constexpr uint32_t hStarfallList = 0x5F8; // CUtlVector< CHandle< C_BaseEntity > >[2]
        constexpr uint32_t m_nActiveArrow = 0x628; // int32
    }

    namespace C_DOTA_Ability_Mirana_Leap {
        constexpr uint32_t m_bIsVectorTargeted = 0x5B0; // bool
        constexpr uint32_t m_vEndpoint = 0x5B4; // Vector
        constexpr uint32_t m_vLandPosition = 0x5C0; // Vector
    }

    namespace C_DOTA_Ability_Mirana_Starfall {
        constexpr uint32_t damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_MonkeyKing_Boundless_Strike {
        constexpr uint32_t strike_cast_range = 0x5B0; // int32
        constexpr uint32_t strike_radius = 0x5B4; // int32
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
        constexpr uint32_t m_bIsAltCastState = 0x5BC; // bool
    }

    namespace C_DOTA_Ability_MonkeyKing_FurArmy {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t num_first_soldiers = 0x5B8; // int32
        constexpr uint32_t num_second_soldiers = 0x5BC; // int32
        constexpr uint32_t m_bCreateMonkeys = 0x5C0; // bool
        constexpr uint32_t m_flNextCreationTime = 0x5C4; // GameTime_t
        constexpr uint32_t m_flScepterTime = 0x5C8; // GameTime_t
        constexpr uint32_t m_vecSoldiers = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_MonkeyKing_Spring {
        constexpr uint32_t m_vPos = 0x5B0; // Vector
        constexpr uint32_t m_fStartChannelTime = 0x5BC; // GameTime_t
        constexpr uint32_t m_hThinker = 0x5C0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFxIndex = 0x5C4; // ParticleIndex_t
        constexpr uint32_t m_nRefCount = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_MonkeyKing_TreeDance {
        constexpr uint32_t perched_jump_distance = 0x5B0; // int32
        constexpr uint32_t ground_jump_distance = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Morphling_MorphReplicate {
        constexpr uint32_t m_flOldHealthPct = 0x5B0; // float32
        constexpr uint32_t m_flOldManaPct = 0x5B4; // float32
    }

    namespace C_DOTA_Ability_Morphling_Replicate {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hScepterIllusion = 0x5B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsAltCastState = 0x5B8; // bool
    }

    namespace C_DOTA_Ability_Morty_Hop {
        constexpr uint32_t max_distance = 0x5B0; // float32
        constexpr uint32_t m_vTarget = 0x5B4; // Vector
        constexpr uint32_t m_iTrackerProjectile = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Muerta_DeadShot {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t ricochet_radius_start = 0x5B4; // int32
        constexpr uint32_t ricochet_radius_end = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Muerta_PartingShot {
        constexpr uint32_t m_hAbilitySoulEntity = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTarget = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_NagaSiren_MirrorImage {
        constexpr uint32_t m_hIllusions = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Naga_Siren_Reel_In {
        constexpr uint32_t affectedEntities = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Necrolyte_Death_Pulse {
        constexpr uint32_t m_bIsDeathSeekerCast = 0x5B8; // bool
    }

    namespace C_DOTA_Ability_Nevermore_Requiem {
        constexpr uint32_t requiem_line_width_start = 0x5B0; // int32
        constexpr uint32_t requiem_line_width_end = 0x5B4; // int32
        constexpr uint32_t m_nCachedSouls = 0x5B8; // int32
        constexpr uint32_t m_nFXIndex = 0x5BC; // ParticleIndex_t
        constexpr uint32_t m_nKilleater_nLines = 0x5C0; // int32
        constexpr uint32_t m_vecHeroesReqd = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Nevermore_Shadowraze {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x5B4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Nian_Apocalypse {
        constexpr uint32_t area_of_effect = 0x5B0; // int32
        constexpr uint32_t m_nfxIndex_roar = 0x5B4; // ParticleIndex_t
        constexpr uint32_t fire_interval = 0x5B8; // float32
        constexpr uint32_t delay = 0x5BC; // float32
        constexpr uint32_t target_range = 0x5C0; // float32
        constexpr uint32_t m_ctTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_flTiming = 0x5E0; // float32
    }

    namespace C_DOTA_Ability_Nian_Hurricane {
        constexpr uint32_t min_distance = 0x5B0; // int32
        constexpr uint32_t max_distance = 0x5B4; // int32
        constexpr uint32_t torrent_count = 0x5B8; // int32
        constexpr uint32_t fire_interval = 0x5BC; // float32
        constexpr uint32_t pull_switch_interval = 0x5C0; // float32
        constexpr uint32_t game_time_wind_activation = 0x5C4; // float32
        constexpr uint32_t m_ctPullTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_ctTimer = 0x5E0; // CountdownTimer
        constexpr uint32_t m_flTiming = 0x5F8; // float32
        constexpr uint32_t m_bForward = 0x5FC; // bool
        constexpr uint32_t m_bUseWind = 0x5FD; // bool
        constexpr uint32_t m_nFXIndex = 0x600; // ParticleIndex_t
        constexpr uint32_t m_nfxIndex_roar = 0x604; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Nian_Roar {
        constexpr uint32_t base_projectiles = 0x5B0; // int32
        constexpr uint32_t max_projectiles = 0x5B4; // int32
        constexpr uint32_t projectile_step = 0x5B8; // int32
        constexpr uint32_t base_speed = 0x5BC; // int32
        constexpr uint32_t speed_step = 0x5C0; // int32
        constexpr uint32_t initial_radius = 0x5C4; // int32
        constexpr uint32_t end_radius = 0x5C8; // int32
        constexpr uint32_t damage = 0x5CC; // int32
        constexpr uint32_t base_interval = 0x5D0; // float32
        constexpr uint32_t interval_step = 0x5D4; // float32
        constexpr uint32_t m_nCastCount = 0x5D8; // int32
        constexpr uint32_t m_nProjectiles = 0x5DC; // int32
        constexpr uint32_t m_nWaveCount = 0x5E0; // int32
        constexpr uint32_t m_ctTimer = 0x5E8; // CountdownTimer
        constexpr uint32_t m_flTiming = 0x600; // float32
        constexpr uint32_t m_bScriptRoar = 0x604; // bool
    }

    namespace C_DOTA_Ability_Nian_Waterball {
        constexpr uint32_t m_ctTimer = 0x5B0; // CountdownTimer
        constexpr uint32_t m_hEntities = 0x5C8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Nian_Whirlpool {
        constexpr uint32_t pool_count = 0x5B0; // int32
        constexpr uint32_t min_distance = 0x5B4; // int32
        constexpr uint32_t max_distance = 0x5B8; // int32
        constexpr uint32_t pull_radius = 0x5BC; // int32
        constexpr uint32_t fire_interval = 0x5C0; // float32
        constexpr uint32_t m_ctTimer = 0x5C8; // CountdownTimer
        constexpr uint32_t m_flTiming = 0x5E0; // float32
    }

    namespace C_DOTA_Ability_Nyx_Assassin_Impale {
        constexpr uint32_t hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t width = 0x5C8; // int32
        constexpr uint32_t duration = 0x5CC; // float32
        constexpr uint32_t length = 0x5D0; // int32
        constexpr uint32_t speed = 0x5D4; // int32
        constexpr uint32_t vOriginalCast = 0x5D8; // Vector
    }

    namespace C_DOTA_Ability_Obsidian_Destroyer_AstralImprisonment {
        constexpr uint32_t m_hImprisonedUnit = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_OgreBruiser_OgreSmash {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t hero_stun_duration = 0x5B4; // float32
        constexpr uint32_t damage = 0x5B8; // int32
        constexpr uint32_t damage_pct = 0x5BC; // float32
        constexpr uint32_t flCooldown = 0x5C0; // GameTime_t
    }

    namespace C_DOTA_Ability_Ogre_Magi_Fireblast {
        constexpr uint32_t m_nMostRecentMulticastCount = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Ogre_Magi_Ignite {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nMostRecentMulticastCount = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Ogre_Magi_Unrefined_Fireblast {
        constexpr uint32_t m_nMostRecentMulticastCount = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Oracle_FatesEdict {
        constexpr uint32_t m_bTargetIsAlly = 0x5B0; // bool
    }

    namespace C_DOTA_Ability_Oracle_FortunesEnd {
        constexpr uint32_t damage = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t bolt_speed = 0x5B8; // int32
        constexpr uint32_t maximum_purge_duration = 0x5BC; // float32
        constexpr uint32_t minimum_purge_duration = 0x5C0; // float32
        constexpr uint32_t m_flStartTime = 0x5C4; // GameTime_t
        constexpr uint32_t m_flDuration = 0x5C8; // float32
        constexpr uint32_t m_flDamage = 0x5CC; // float32
        constexpr uint32_t m_bAbsorbed = 0x5D0; // bool
        constexpr uint32_t m_hTarget = 0x5D4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndex = 0x5D8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Oracle_PurifyingFlames {
        constexpr uint32_t m_bTargetIsAlly = 0x5B0; // bool
        constexpr uint32_t m_hRecentTarget = 0x5B4; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Pangolier_Gyroshell {
        constexpr uint32_t m_nFxIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Pangolier_Rollup {
        constexpr uint32_t m_nFxIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Pangolier_Swashbuckle {
        constexpr uint32_t dash_speed = 0x5B0; // int32
        constexpr uint32_t start_radius = 0x5B4; // int32
        constexpr uint32_t end_radius = 0x5B8; // int32
        constexpr uint32_t range = 0x5BC; // int32
        constexpr uint32_t damage = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Phoenix_IcarusDive {
        constexpr uint32_t hp_cost_perc = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Phoenix_LaunchFireSpirit {
        constexpr uint32_t spirit_speed = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
        constexpr uint32_t radius = 0x5B8; // int32
        constexpr uint32_t m_nFXIndex = 0x5BC; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_PineCone_AcornShot {
        constexpr uint32_t m_nAcornTree = 0x5B0; // uint32
        constexpr uint32_t projectile_speed = 0x5B4; // float32
        constexpr uint32_t bounce_delay = 0x5B8; // float32
        constexpr uint32_t bounce_range = 0x5BC; // int32
        constexpr uint32_t bounce_count = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_PrimalBeast_Onslaught {
        constexpr uint32_t max_charge_time = 0x5B0; // float32
        constexpr uint32_t knockback_distance = 0x5B4; // float32
        constexpr uint32_t knockback_damage = 0x5B8; // int32
        constexpr uint32_t collision_radius = 0x5BC; // int32
        constexpr uint32_t max_distance = 0x5C0; // int32
        constexpr uint32_t m_vStartPos = 0x5C4; // Vector
        constexpr uint32_t m_nFXIndex = 0x5D0; // ParticleIndex_t
        constexpr uint32_t m_nProjectileID = 0x5D4; // int32
    }

    namespace C_DOTA_Ability_PrimalBeast_Pulverize {
        constexpr uint32_t m_hTarget = 0x5B0; // C_DOTA_BaseNPC*
    }

    namespace C_DOTA_Ability_PrimalBeast_Uproar {
        constexpr uint32_t m_iUproarStatus = 0x5B0; // int32
        constexpr uint32_t m_bUpdateIcons = 0x5B4; // bool
    }

    namespace C_DOTA_Ability_Primal_Companion {
        constexpr uint32_t m_hCurrentBrewling = 0x5B0; // CHandle< C_DOTA_BaseNPC >
    }

    namespace C_DOTA_Ability_Puck_DreamCoil {
        constexpr uint32_t m_hThinker = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Puck_IllusoryOrb {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
        constexpr uint32_t m_ViewerTimer = 0x5B8; // CountdownTimer
        constexpr uint32_t orb_vision = 0x5D0; // int32
        constexpr uint32_t vision_duration = 0x5D4; // float32
        constexpr uint32_t damage = 0x5D8; // int32
    }

    namespace C_DOTA_Ability_Pudge_FleshHeap {
        constexpr uint32_t m_iKills = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Pudge_Rot {
        constexpr uint32_t rot_damage = 0x5B0; // int32
        constexpr uint32_t m_flLastRotTime = 0x5B4; // GameTime_t
    }

    namespace C_DOTA_Ability_Pugna_LifeDrain {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Pugna_NetherWard {
        constexpr uint32_t vecAbilitiesUsed = 0x5B0; // CUtlVector< sAbilityHistory >
    }

    namespace C_DOTA_Ability_QueenOfPain_ScreamOfPain {
        constexpr uint32_t damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_QueenOfPain_ShadowStrike {
        constexpr uint32_t projectile_speed = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_QueenOfPain_SonicWave {
        constexpr uint32_t m_fStartTime = 0x5B0; // GameTime_t
        constexpr uint32_t m_fTotalTime = 0x5B4; // float32
        constexpr uint32_t m_nFXIndex = 0x5B8; // ParticleIndex_t
        constexpr uint32_t starting_aoe = 0x5BC; // int32
        constexpr uint32_t final_aoe = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Rattletrap_Hookshot {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_vProjectileVelocity = 0x5B4; // Vector
        constexpr uint32_t m_bRetract = 0x5C0; // bool
    }

    namespace C_DOTA_Ability_Rattletrap_RocketFlare {
        constexpr uint32_t m_vecEnemyHeroesInFog = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Razor_StaticLink {
        constexpr uint32_t m_iLinkIndex = 0x5B0; // int32
        constexpr uint32_t m_ViewerTimer = 0x5B8; // CountdownTimer
        constexpr uint32_t vision_duration = 0x5D0; // float32
        constexpr uint32_t m_bIsAltCastState = 0x5D4; // bool
    }

    namespace C_DOTA_Ability_Roshan_Teleport {
        constexpr uint32_t m_nFXIndexStart = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexEnd = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexEndTeam = 0x5B8; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Rubick_SpellSteal {
        constexpr uint32_t m_ActivityModifier = 0x5B0; // char[256]
        constexpr uint32_t m_fStolenCastPoint = 0x6B0; // float32
        constexpr uint32_t m_hStealTarget = 0x6B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hStealAbility = 0x6B8; // CHandle< C_DOTABaseAbility >
    }

    namespace C_DOTA_Ability_Rubick_Telekinesis {
        constexpr uint32_t m_vStartLocation = 0x5B0; // Vector
        constexpr uint32_t m_vLandLocation = 0x5BC; // Vector
        constexpr uint32_t m_flStartTime = 0x5C8; // GameTime_t
        constexpr uint32_t m_pTarget = 0x5D0; // C_DOTA_BaseNPC*
    }

    namespace C_DOTA_Ability_SandKing_BurrowStrike {
        constexpr uint32_t burrow_width = 0x5B0; // int32
        constexpr uint32_t burrow_speed = 0x5B4; // int32
        constexpr uint32_t burrow_speed_scepter = 0x5B8; // int32
        constexpr uint32_t burrow_anim_time = 0x5BC; // float32
    }

    namespace C_DOTA_Ability_SandKing_Epicenter {
        constexpr uint32_t m_nFXEpicenterIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex = 0x5B4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_SatyrSoulstealer_ManaBurn {
        constexpr uint32_t hNeutralTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flTimeBuffer = 0x5B4; // GameTime_t
    }

    namespace C_DOTA_Ability_SatyrTrickster_Purge {
        constexpr uint32_t m_flTargetTime = 0x5B0; // GameTime_t
    }

    namespace C_DOTA_Ability_ShadowShaman_Serpentine {
        constexpr uint32_t length = 0x5B0; // int32
        constexpr uint32_t count = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_ShadowShaman_Shackles {
        constexpr uint32_t m_hShackleTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t nShackleFXIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t hWardList = 0x5B8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Shadow_Demon_Demonic_Cleanse {
        constexpr uint32_t m_bGrantedScepterCharges = 0x5B0; // bool
    }

    namespace C_DOTA_Ability_Shadow_Demon_Demonic_Purge {
        constexpr uint32_t m_bGrantedScepterCharges = 0x5B0; // bool
    }

    namespace C_DOTA_Ability_Shadow_Demon_Disruption {
        constexpr uint32_t m_hDisruptedUnit = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Shredder_Chakram {
        constexpr uint32_t radius = 0x5B0; // float32
        constexpr uint32_t speed = 0x5B4; // float32
        constexpr uint32_t pass_slow_duration = 0x5B8; // float32
        constexpr uint32_t pass_damage = 0x5BC; // int32
        constexpr uint32_t m_vEndLocation = 0x5C0; // Vector
        constexpr uint32_t m_fZCoord = 0x5CC; // float32
        constexpr uint32_t m_bIsReturning = 0x5D0; // bool
        constexpr uint32_t m_nFXIndex = 0x5D4; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x5D8; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexC = 0x5DC; // ParticleIndex_t
        constexpr uint32_t m_nProjectileIndex = 0x5E0; // int32
        constexpr uint32_t m_hThinker = 0x5E4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hReturnHits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Shredder_TimberChain {
        constexpr uint32_t chain_radius = 0x5B0; // int32
        constexpr uint32_t m_nFXIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_vProjectileVelocity = 0x5B8; // Vector
        constexpr uint32_t m_bRetract = 0x5C4; // bool
    }

    namespace C_DOTA_Ability_Shredder_WhirlingDeath {
        constexpr uint32_t whirling_radius = 0x5B0; // int32
        constexpr uint32_t whirling_damage = 0x5B4; // int32
        constexpr uint32_t whirling_tick = 0x5B8; // float32
        constexpr uint32_t duration = 0x5BC; // float32
        constexpr uint32_t tree_damage_scale = 0x5C0; // int32
    }

    namespace C_DOTA_Ability_Silencer_GlaivesOfWisdom {
        constexpr uint32_t m_iAttackIndex = 0x5B0; // int32
        constexpr uint32_t m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfoSilencer >
    }

    namespace C_DOTA_Ability_SkeletonKing_Reincarnation {
        constexpr uint32_t m_bShouldUseResources = 0x5B0; // bool
    }

    namespace C_DOTA_Ability_Skywrath_Mage_Arcane_Bolt {
        constexpr uint32_t bolt_vision = 0x5B0; // int32
        constexpr uint32_t vision_duration = 0x5B4; // float32
        constexpr uint32_t m_flDamage = 0x5B8; // float32
        constexpr uint32_t m_nFXIndex = 0x5BC; // int32
    }

    namespace C_DOTA_Ability_Skywrath_Mage_Concussive_Shot {
        constexpr uint32_t speed = 0x5B0; // int32
        constexpr uint32_t slow_radius = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // int32
        constexpr uint32_t shot_vision = 0x5BC; // int32
        constexpr uint32_t slow_duration = 0x5C0; // float32
        constexpr uint32_t vision_duration = 0x5C4; // float32
    }

    namespace C_DOTA_Ability_Sniper_Assassinate {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t cooldown_reduction_on_kill = 0x5B8; // float32
    }

    namespace C_DOTA_Ability_Sniper_Concussive_Grenade {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Spectre_SpectralDagger {
        constexpr uint32_t dagger_path_duration = 0x5B0; // float32
        constexpr uint32_t hero_path_duration = 0x5B4; // float32
        constexpr uint32_t m_fCreateInterval = 0x5B8; // float32
        constexpr uint32_t m_fLastCreate = 0x5BC; // GameTime_t
        constexpr uint32_t m_vecLastPosition = 0x5C0; // Vector
        constexpr uint32_t m_bIsTrackingProjectile = 0x5CC; // bool
        constexpr uint32_t m_hTrackingProjectileHits = 0x5D0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hUnitsHit = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_hTrackingTarget = 0x600; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_SpiritBreaker_ChargeOfDarkness {
        constexpr uint32_t m_vChargeStartPos = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_StormSpirit_BallLightning {
        constexpr uint32_t m_bHasAutoRemnantTalent = 0x5B0; // bool
        constexpr uint32_t m_fAutoRemnantInterval = 0x5B4; // float32
        constexpr uint32_t ball_lightning_initial_mana_base = 0x5B8; // int32
        constexpr uint32_t ball_lightning_initial_mana_percentage = 0x5BC; // float32
        constexpr uint32_t ball_lightning_travel_cost_base = 0x5C0; // int32
        constexpr uint32_t ball_lightning_travel_cost_percent = 0x5C4; // float32
        constexpr uint32_t m_iProjectileID = 0x5C8; // int32
        constexpr uint32_t m_vStartLocation = 0x5CC; // Vector
        constexpr uint32_t m_vProjectileLocation = 0x5D8; // Vector
        constexpr uint32_t m_fDistanceAccumulator = 0x5E4; // float32
        constexpr uint32_t m_fTalentDistanceAccumulator = 0x5E8; // float32
        constexpr uint32_t scepter_remnant_interval = 0x5EC; // int32
    }

    namespace C_DOTA_Ability_StormSpirit_Overload {
        constexpr uint32_t m_iAttackIndex = 0x5B0; // int32
        constexpr uint32_t m_GlaiveInfo = 0x5B8; // CUtlVector< sGlaiveInfoStorm >
    }

    namespace C_DOTA_Ability_StormSpirit_StaticRemnant {
        constexpr uint32_t m_vecCastPos = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_Sven_StormBolt {
        constexpr uint32_t vision_radius = 0x5B0; // int32
        constexpr uint32_t m_bIsAltCastState = 0x5B4; // bool
    }

    namespace C_DOTA_Ability_Techies_Suicide {
        constexpr uint32_t m_unSuicideKills = 0x5B0; // uint32
    }

    namespace C_DOTA_Ability_TemplarAssassin_Trap_Teleport {
        constexpr uint32_t m_hTrap = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Terrorblade_Reflection {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Tidehunter_ArmOfTheDeep {
        constexpr uint32_t hAlreadyHitList = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t duration = 0x5C8; // float32
        constexpr uint32_t speed = 0x5CC; // int32
        constexpr uint32_t damage = 0x5D0; // float32
        constexpr uint32_t range = 0x5D4; // float32
    }

    namespace C_DOTA_Ability_Tidehunter_DeadInTheWater {
        constexpr uint32_t radius = 0x5B0; // int32
        constexpr uint32_t duration = 0x5B4; // float32
        constexpr uint32_t chain_length = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Tidehunter_Gush {
        constexpr uint32_t gush_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Tidehunter_Ravage {
        constexpr uint32_t m_hEntsHit = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bAwardedKillEater = 0x5C8; // bool
        constexpr uint32_t duration = 0x5CC; // float32
    }

    namespace C_DOTA_Ability_Tinker_HeatSeekingMissile {
        constexpr uint32_t m_nTargetsKilled = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Tinker_Keen_Teleport {
        constexpr uint32_t m_hTeleportTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXOrigin = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_nFXDestination = 0x5B8; // ParticleIndex_t
        constexpr uint32_t m_vDestination = 0x5BC; // Vector
        constexpr uint32_t m_iMinDistance = 0x5C8; // int32
        constexpr uint32_t m_flBaseTeleportTime = 0x5CC; // float32
        constexpr uint32_t m_flExtraTeleportTime = 0x5D0; // float32
    }

    namespace C_DOTA_Ability_Tinker_Laser {
        constexpr uint32_t m_vProjectileLocation = 0x5B0; // Vector
        constexpr uint32_t bBlocked = 0x5BC; // bool
        constexpr uint32_t m_hHitEntities = 0x5C0; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Tinker_MarchOfTheMachines {
        constexpr uint32_t splash_radius = 0x5B0; // int32
        constexpr uint32_t damage = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Tinker_Rearm {
        constexpr uint32_t m_vProjectileLocation = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_Tiny_Avalanche {
        constexpr uint32_t m_vTargetLoc = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_Tiny_Tree_Grab {
        constexpr uint32_t m_hStolenTree = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_TrollWarlord_BattleTrance {
        constexpr uint32_t trance_duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_TrollWarlord_BerserkersRage {
        constexpr uint32_t m_iOriginalAttackCapabilities = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_TrollWarlord_WhirlingAxes_Ranged {
        constexpr uint32_t m_vStartPos = 0x5B0; // Vector
        constexpr uint32_t m_iArrowProjectile = 0x5BC; // int32
        constexpr uint32_t axe_width = 0x5C0; // int32
        constexpr uint32_t axe_speed = 0x5C4; // float32
        constexpr uint32_t axe_range = 0x5C8; // float32
        constexpr uint32_t axe_spread = 0x5CC; // int32
        constexpr uint32_t axe_count = 0x5D0; // int32
        constexpr uint32_t m_hHitUnits = 0x5D8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_TrollWarlord_Whirling_Axes_Melee {
        constexpr uint32_t m_hAxes = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nAxeIdx = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_Tusk_IceShards {
        constexpr uint32_t m_iProjectile = 0x5B0; // int32
        constexpr uint32_t shard_width = 0x5B4; // int32
        constexpr uint32_t shard_damage = 0x5B8; // int32
        constexpr uint32_t shard_count = 0x5BC; // int32
        constexpr uint32_t shard_speed = 0x5C0; // float32
        constexpr uint32_t shard_duration = 0x5C4; // float32
        constexpr uint32_t shard_angle_step = 0x5C8; // float32
        constexpr uint32_t shard_distance = 0x5CC; // int32
        constexpr uint32_t m_vSpawnOrigin = 0x5D0; // Vector
        constexpr uint32_t m_vDirection = 0x5DC; // Vector
        constexpr uint32_t m_vecShards = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Tusk_Snowball {
        constexpr uint32_t snowball_windup_radius = 0x5B0; // int32
        constexpr uint32_t snowball_radius = 0x5B4; // int32
        constexpr uint32_t snowball_grow_rate = 0x5B8; // int32
        constexpr uint32_t snowball_damage = 0x5BC; // int32
        constexpr uint32_t snowball_damage_bonus = 0x5C0; // int32
        constexpr uint32_t stun_duration = 0x5C4; // float32
        constexpr uint32_t bonus_damage = 0x5C8; // int32
        constexpr uint32_t bonus_stun = 0x5CC; // float32
        constexpr uint32_t snowball_speed = 0x5D0; // int32
        constexpr uint32_t snowball_speed_bonus = 0x5D4; // int32
        constexpr uint32_t snowball_duration = 0x5D8; // float32
        constexpr uint32_t m_vProjectileLocation = 0x5DC; // Vector
        constexpr uint32_t m_hSnowballedUnits = 0x5E8; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nFXIndex = 0x600; // ParticleIndex_t
        constexpr uint32_t ctSnowball = 0x608; // CountdownTimer
        constexpr uint32_t m_bSpeakAlly = 0x620; // bool
        constexpr uint32_t m_bIsExpired = 0x621; // bool
        constexpr uint32_t m_bInWindup = 0x622; // bool
        constexpr uint32_t m_hPrimaryTarget = 0x624; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nContainedValidUnits = 0x628; // int32
        constexpr uint32_t m_bEndingSnowball = 0x62C; // bool
    }

    namespace C_DOTA_Ability_Twin_Gate_Portal_Warp {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Undying_Decay {
        constexpr uint32_t decay_damage = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t decay_duration = 0x5B8; // float32
        constexpr uint32_t str_steal = 0x5BC; // int32
        constexpr uint32_t creep_damage_multiplier = 0x5C0; // float32
    }

    namespace C_DOTA_Ability_Undying_SoulRip {
        constexpr uint32_t damage_per_unit = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t max_units = 0x5B8; // int32
        constexpr uint32_t tombstone_heal = 0x5BC; // int32
    }

    namespace C_DOTA_Ability_Undying_Tombstone {
        constexpr uint32_t m_vZombies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t hTombstone = 0x5C8; // CHandle< C_BaseEntity >
        constexpr uint32_t radius = 0x5CC; // int32
        constexpr uint32_t duration = 0x5D0; // float32
    }

    namespace C_DOTA_Ability_VengefulSpirit_Command_Aura {
        constexpr uint32_t m_hScepterIllusion = 0x5B0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_VengefulSpirit_Nether_Swap {
        constexpr uint32_t m_nFXIndex = 0x5B0; // int32
        constexpr uint32_t damage = 0x5B4; // int32
        constexpr uint32_t damage_reduction = 0x5B8; // float32
        constexpr uint32_t damage_reduction_duration = 0x5BC; // float32
    }

    namespace C_DOTA_Ability_VengefulSpirit_WaveOfTerror {
        constexpr uint32_t wave_width = 0x5B0; // int32
        constexpr uint32_t wave_speed = 0x5B4; // float32
        constexpr uint32_t m_iProjectile = 0x5B8; // int32
        constexpr uint32_t vision_aoe = 0x5BC; // float32
        constexpr uint32_t vision_duration = 0x5C0; // float32
        constexpr uint32_t steal_pct = 0x5C4; // int32
        constexpr uint32_t damage = 0x5C8; // int32
        constexpr uint32_t m_nNumHeroesHit = 0x5CC; // int32
        constexpr uint32_t m_ViewerTimer = 0x5D0; // CountdownTimer
    }

    namespace C_DOTA_Ability_Venomancer_Latent_Poison {
        constexpr uint32_t projectile_speed = 0x5B0; // Vector
    }

    namespace C_DOTA_Ability_Venomancer_PoisonSting {
        constexpr uint32_t radius = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Venomancer_VenomousGale {
        constexpr uint32_t duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Viper_ViperStrike {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Visage_Silent_As_The_Grave {
        constexpr uint32_t invis_duration = 0x5B0; // float32
    }

    namespace C_DOTA_Ability_Visage_SoulAssumption {
        constexpr uint32_t m_fDamage = 0x5B0; // float32
        constexpr uint32_t m_nFXIndex = 0x5B4; // ParticleIndex_t
        constexpr uint32_t m_iForcedStacks = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Visage_SummonFamiliars {
        constexpr uint32_t szUnitName = 0x5B0; // char[260]
        constexpr uint32_t m_hExistingUnits = 0x6B8; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Ability_Warlock_RainOfChaos {
        constexpr uint32_t aoe = 0x5B0; // int32
        constexpr uint32_t m_bHasScepter = 0x5B4; // bool
    }

    namespace C_DOTA_Ability_Warlock_Upheaval {
        constexpr uint32_t m_vPosition = 0x5B0; // Vector
        constexpr uint32_t aoe = 0x5BC; // float32
        constexpr uint32_t slow_per_second = 0x5C0; // int32
        constexpr uint32_t aspd_per_second = 0x5C4; // int32
        constexpr uint32_t max_slow = 0x5C8; // int32
        constexpr uint32_t damage_per_second = 0x5CC; // int32
        constexpr uint32_t max_damage = 0x5D0; // int32
        constexpr uint32_t damage_tick_interval = 0x5D4; // float32
        constexpr uint32_t m_timer = 0x5D8; // CountdownTimer
        constexpr uint32_t m_shardTimer = 0x5F0; // CountdownTimer
        constexpr uint32_t duration = 0x608; // float32
        constexpr uint32_t m_flElapsedTime = 0x60C; // GameTime_t
        constexpr uint32_t m_flCurrentSlow = 0x610; // float32
        constexpr uint32_t m_nFXIndex = 0x614; // ParticleIndex_t
        constexpr uint32_t m_bTargetCast = 0x620; // bool
        constexpr uint32_t m_hTarget = 0x624; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_WarpineRaider_SeedShot {
        constexpr uint32_t m_iBounces = 0x5B0; // int32
        constexpr uint32_t bounces = 0x5B4; // int32
    }

    namespace C_DOTA_Ability_Weaver_Shukuchi {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t damage = 0x5B8; // int32
        constexpr uint32_t fade_time = 0x5BC; // float32
    }

    namespace C_DOTA_Ability_Weaver_TimeLapse {
        constexpr uint32_t m_nNPCSpawnedID = 0x5B0; // int32
    }

    namespace C_DOTA_Ability_Windrunner_GaleForce {
        constexpr uint32_t m_vEndpoint = 0x5B0; // Vector
        constexpr uint32_t m_vFlowPosition = 0x5BC; // Vector
        constexpr uint32_t duration = 0x5C8; // float32
    }

    namespace C_DOTA_Ability_Windrunner_Powershot {
        constexpr uint32_t m_fStartTime = 0x5B8; // GameTime_t
        constexpr uint32_t m_fPower = 0x5BC; // float32
        constexpr uint32_t m_iProjectile = 0x5C0; // int32
        constexpr uint32_t damage_reduction = 0x5C4; // float32
        constexpr uint32_t arrow_width = 0x5C8; // int32
        constexpr uint32_t powershot_damage = 0x5CC; // int32
        constexpr uint32_t tree_width = 0x5D0; // float32
        constexpr uint32_t slow = 0x5D4; // float32
        constexpr uint32_t slow_duration = 0x5D8; // float32
        constexpr uint32_t m_bAwardedKillEater = 0x5DC; // bool
        constexpr uint32_t m_nHeroesHit = 0x5E0; // int32
        constexpr uint32_t m_nFXIndex = 0x5E4; // ParticleIndex_t
    }

    namespace C_DOTA_Ability_Windrunner_Shackleshot {
        constexpr uint32_t shackle_count = 0x5B0; // int32
        constexpr uint32_t m_vArrowAvgPos = 0x5B4; // Vector
        constexpr uint32_t m_vArrowStartPos = 0x5C0; // Vector
        constexpr uint32_t m_vArrowStartPos2 = 0x5CC; // Vector
        constexpr uint32_t m_vArrowStartPos3 = 0x5D8; // Vector
        constexpr uint32_t m_hTarget = 0x5E4; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Ability_Wisp_Relocate {
        constexpr uint32_t m_nFXIndexEndTeam = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexChannel = 0x5B4; // ParticleIndex_t
        constexpr uint32_t cast_delay = 0x5B8; // float32
        constexpr uint32_t return_time = 0x5BC; // float32
    }

    namespace C_DOTA_Ability_Wisp_Spirits {
        constexpr uint32_t m_SpiritDefs = 0x5B0; // CUtlVector< sSpiritDef >
        constexpr uint32_t m_nWispDirection = 0x5C8; // int32
        constexpr uint32_t spirit_amount = 0x5CC; // int32
    }

    namespace C_DOTA_Ability_Wisp_Tether {
        constexpr uint32_t m_hTarget = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vProjectileLocation = 0x5B4; // Vector
        constexpr uint32_t m_bProjectileActive = 0x5C0; // bool
        constexpr uint32_t latch_distance = 0x5C4; // int32
        constexpr uint32_t m_iProjectileIndex = 0x5C8; // int32
    }

    namespace C_DOTA_Ability_WitchDoctor_DeathWard {
        constexpr uint32_t m_hWard = 0x5B0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iDamage = 0x5B4; // int32
        constexpr uint32_t m_iBounceRadius = 0x5B8; // int32
        constexpr uint32_t m_iProjectileSpeed = 0x5BC; // int32
        constexpr uint32_t m_fWardExpireTime = 0x5C0; // GameTime_t
        constexpr uint32_t m_nFXIndex = 0x5C4; // ParticleIndex_t
        constexpr uint32_t m_iAttackIndex = 0x5C8; // int32
        constexpr uint32_t m_BounceInfo = 0x5D0; // CUtlVector< sBounceInfo >
    }

    namespace C_DOTA_Ability_WitchDoctor_ParalyzingCask {
        constexpr uint32_t m_iBounces = 0x5B0; // int32
        constexpr uint32_t bounces = 0x5B4; // int32
        constexpr uint32_t bounce_bonus_damage = 0x5B8; // int32
    }

    namespace C_DOTA_Ability_Zuus_ThundergodsWrath {
        constexpr uint32_t m_nFXIndex = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_bZeusHasArcana = 0x5B4; // bool
    }

    namespace C_DOTA_AghsFort_Ability_ArcWardenBoss_SparkWraith {
        constexpr uint32_t duration = 0x5B0; // float32
        constexpr uint32_t activation_delay = 0x5B4; // float32
        constexpr uint32_t wraith_vision_duration = 0x5B8; // float32
        constexpr uint32_t wraith_vision_radius = 0x5BC; // int32
        constexpr uint32_t spark_damage = 0x5C0; // int32
    }

    namespace C_DOTA_AghsFort_Ability_ArcWardenBoss_TempestDouble {
        constexpr uint32_t m_nNumDoubles = 0x5B0; // int32
    }

    namespace C_DOTA_AghsFort_Ability_Undying_Decay {
        constexpr uint32_t decay_damage = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t decay_duration = 0x5B8; // float32
        constexpr uint32_t str_steal = 0x5BC; // float32
        constexpr uint32_t str_steal_captain_mult = 0x5C0; // float32
        constexpr uint32_t str_steal_boss_mult = 0x5C4; // float32
    }

    namespace C_DOTA_AghsFort_Ability_Undying_SoulRip {
        constexpr uint32_t damage_per_unit = 0x5B0; // int32
        constexpr uint32_t radius = 0x5B4; // int32
        constexpr uint32_t max_units = 0x5B8; // int32
        constexpr uint32_t tombstone_heal = 0x5BC; // int32
        constexpr uint32_t damage_bonus_percent = 0x5C0; // int32
    }

    namespace C_DOTA_AghsFort_Ability_Undying_Tombstone {
        constexpr uint32_t m_vZombies = 0x5B0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t hTombstone = 0x5C8; // CHandle< C_BaseEntity >
        constexpr uint32_t duration = 0x5CC; // float32
    }

    namespace C_DOTA_AghsFort_Unit_Undying_Zombie {
        constexpr uint32_t m_ctRespawn = 0x1770; // CountdownTimer
        constexpr uint32_t m_pTombstone = 0x1788; // C_DOTA_BaseNPC*
    }

    namespace C_DOTA_Aghsfort_AbilityCrystalMaiden_FreezingField {
        constexpr uint32_t m_nWarningFX = 0x5B0; // ParticleIndex_t
        constexpr uint32_t m_nRadiusFX = 0x5B4; // ParticleIndex_t
    }

    namespace C_DOTA_Aghsfort_Ability_Creature_Magnus_Push_Skewer {
        constexpr uint32_t skewer_radius = 0x5B0; // int32
        constexpr uint32_t skewer_speed = 0x5B4; // int32
        constexpr uint32_t range = 0x5B8; // int32
        constexpr uint32_t tree_radius = 0x5BC; // int32
    }

    namespace C_DOTA_Aghsfort_Ability_CrystalMaiden_CrystalNova {
        constexpr uint32_t nova_damage = 0x5B0; // int32
    }

    namespace C_DOTA_Aghsfort_Ability_Hoodwink_HuntersBoomerang {
        constexpr uint32_t min_distance = 0x5B0; // int32
    }

    namespace C_DOTA_ArcanaDataEntity {
        constexpr uint32_t m_pArcanaData_CDOTA_ArcanaDataEntity_DrowRanger = 0x538; // CDOTA_ArcanaDataEntity_DrowRanger*
        constexpr uint32_t m_pArcanaData_CDOTA_ArcanaDataEntity_FacelessVoid = 0x540; // CDOTA_ArcanaDataEntity_FacelessVoid*
        constexpr uint32_t m_pArcanaData_CDOTA_ArcanaDataEntity_Razor = 0x548; // CDOTA_ArcanaDataEntity_Razor*
    }

    namespace C_DOTA_BaseNPC {
        constexpr uint32_t m_bIsPhantom = 0xA30; // bool
        constexpr uint32_t m_iUnitType = 0xA34; // uint32
        constexpr uint32_t m_bSelectionRingVisible = 0xA48; // bool
        constexpr uint32_t m_iCurrentLevel = 0xA4C; // int32
        constexpr uint32_t m_bIsAncient = 0xA50; // bool
        constexpr uint32_t m_bIsBossCreature = 0xA51; // bool
        constexpr uint32_t m_bStolenScepter = 0xA52; // bool
        constexpr uint32_t m_bIsNeutralUnitType = 0xA53; // bool
        constexpr uint32_t m_bSelectOnSpawn = 0xA54; // bool
        constexpr uint32_t m_bCachedReplicatedMorphlingIllusion = 0xA55; // bool
        constexpr uint32_t m_bIgnoreAddSummonedToSelection = 0xA56; // bool
        constexpr uint32_t m_bConsideredHero = 0xA57; // bool
        constexpr uint32_t m_bUsesConstantGesture = 0xA58; // bool
        constexpr uint32_t m_bUseHeroAbilityNumbers = 0xA59; // bool
        constexpr uint32_t m_bHasSharedAbilities = 0xA5A; // bool
        constexpr uint32_t m_bIsSummoned = 0xA5B; // bool
        constexpr uint32_t m_bCanBeDominated = 0xA5C; // bool
        constexpr uint32_t m_bHasUpgradeableAbilities = 0xA5D; // bool
        constexpr uint32_t m_flHealthThinkRegen = 0xA60; // float32
        constexpr uint32_t m_iIsControllableByPlayer64 = 0xA68; // uint64
        constexpr uint32_t m_nHealthBarOffsetOverride = 0xA70; // int32
        constexpr uint32_t m_bCanRespawn = 0xA74; // bool
        constexpr uint32_t m_iAttackRange = 0xA78; // int32
        constexpr uint32_t m_colorGemColor = 0xA7C; // Color
        constexpr uint32_t m_bHasColorGem = 0xA80; // bool
        constexpr uint32_t m_nFXDeniableIndex = 0xA84; // ParticleIndex_t
        constexpr uint32_t m_iMoveSpeed = 0xA88; // int32
        constexpr uint32_t m_iBaseAttackSpeed = 0xA8C; // int32
        constexpr uint32_t m_flBaseAttackTime = 0xA90; // float32
        constexpr uint32_t m_iUnitNameIndex = 0xA94; // int32
        constexpr uint32_t m_iHealthBarOffset = 0xA98; // int32
        constexpr uint32_t m_iHealthBarHighlightColor = 0xA9C; // Color
        constexpr uint32_t m_flMana = 0xAA0; // float32
        constexpr uint32_t m_flMaxMana = 0xAA4; // float32
        constexpr uint32_t m_flManaThinkRegen = 0xAA8; // float32
        constexpr uint32_t m_iBKBChargesUsed = 0xAAC; // int32
        constexpr uint32_t m_iAeonChargesUsed = 0xAB0; // int32
        constexpr uint32_t m_flRefresherUseTime = 0xAB4; // GameTime_t
        constexpr uint32_t m_flRefresherLastCooldown = 0xAB8; // float32
        constexpr uint32_t m_flLastDealtDamageTime = 0xABC; // GameTime_t
        constexpr uint32_t m_iBotDebugData = 0xAC0; // int32
        constexpr uint32_t m_bIsIllusion = 0xAC4; // bool
        constexpr uint32_t m_bHasClientSeenIllusionModifier = 0xAC5; // bool
        constexpr uint32_t m_hAbilities = 0xAC8; // CHandle< C_BaseEntity >[35]
        constexpr uint32_t m_flInvisibilityLevel = 0xB54; // float32
        constexpr uint32_t m_flHullRadius = 0xB58; // float32
        constexpr uint32_t m_flCollisionPadding = 0xB5C; // float32
        constexpr uint32_t m_flRingRadius = 0xB60; // float32
        constexpr uint32_t m_flProjectileCollisionSize = 0xB64; // float32
        constexpr uint32_t m_iszUnitName = 0xB68; // CUtlSymbolLarge
        constexpr uint32_t m_iszParticleFolder = 0xB70; // CUtlSymbolLarge
        constexpr uint32_t m_iszSoundSet = 0xB78; // CUtlSymbolLarge
        constexpr uint32_t m_iszSelectionGroup = 0xB80; // CUtlSymbolLarge
        constexpr uint32_t m_iszVoiceFile = 0xB88; // CUtlSymbolLarge
        constexpr uint32_t m_iszGameSoundsFile = 0xB90; // CUtlSymbolLarge
        constexpr uint32_t m_iszVoiceBackgroundSound = 0xB98; // CUtlSymbolLarge
        constexpr uint32_t m_iszIdleSoundLoop = 0xBA0; // CUtlSymbolLarge
        constexpr uint32_t m_szUnitLabel = 0xBA8; // CUtlString
        constexpr uint32_t m_szScaleset = 0xBB0; // CUtlString
        constexpr uint32_t m_nUnitLabelIndex = 0xBB8; // uint8
        constexpr uint32_t m_strAnimationModifier = 0xBC0; // CUtlString
        constexpr uint32_t m_TerrainSpecificFootstepEffect = 0xBC8; // CUtlString
        constexpr uint32_t m_bUseCustomTerrainWeatherEffect = 0xBD0; // bool
        constexpr uint32_t m_bHasClientSoundReplacement = 0xBD1; // bool
        constexpr uint32_t m_bHasClientReplacementParticle = 0xBD2; // bool
        constexpr uint32_t m_bResourcesLoaded = 0xBDC; // bool
        constexpr uint32_t m_flTauntCooldown = 0xBE0; // GameTime_t
        constexpr uint32_t m_flTauntCooldown2 = 0xBE4; // GameTime_t
        constexpr uint32_t m_iCurShop = 0xBE8; // DOTA_SHOP_TYPE
        constexpr uint32_t m_szCurShopEntName = 0xBF0; // CUtlSymbolLarge
        constexpr uint32_t m_iDayTimeVisionRange = 0xBF8; // int32
        constexpr uint32_t m_iNightTimeVisionRange = 0xBFC; // int32
        constexpr uint32_t m_iDamageMin = 0xC00; // int32
        constexpr uint32_t m_iDamageMax = 0xC04; // int32
        constexpr uint32_t m_iDamageBonus = 0xC08; // int32
        constexpr uint32_t m_iTaggedAsVisibleByTeam = 0xC0C; // int32
        constexpr uint32_t m_ModifierManager = 0xC10; // CDOTA_ModifierManager
        constexpr uint32_t m_Inventory = 0xEB0; // C_DOTA_UnitInventory
        constexpr uint32_t m_nUnitState64 = 0xF70; // uint64
        constexpr uint32_t m_nUnitDebuffState = 0xF80; // uint64
        constexpr uint32_t m_bHasInventory = 0xF88; // bool
        constexpr uint32_t m_iAcquisitionRange = 0xF8C; // int32
        constexpr uint32_t m_FoWViewID = 0xF90; // int32
        constexpr uint32_t m_iPrevHealthPct = 0xF94; // int32
        constexpr uint32_t m_iPrevLifeState = 0xF98; // int32
        constexpr uint32_t m_iPrevTeam = 0xF9C; // int32
        constexpr uint32_t m_bPrevProvidesVision = 0xFA0; // bool
        constexpr uint32_t m_nPrevControllableMask = 0xFA8; // uint64
        constexpr uint32_t m_TagTime = 0xFB8; // CountdownTimer
        constexpr uint32_t m_ClickedTime = 0xFD0; // CountdownTimer
        constexpr uint32_t m_flIdleRunPoseStartTime = 0xFE8; // GameTime_t[2]
        constexpr uint32_t m_flIdleRunPoseDuration = 0xFF0; // float32[2]
        constexpr uint32_t m_bAnimationTransitionActive = 0xFF8; // bool
        constexpr uint32_t m_nAnimationTransitionPoseParameters = 0xFFC; // int32[2]
        constexpr uint32_t m_nAnimationTransitionInjuredPoseParameters = 0x1004; // int32[2]
        constexpr uint32_t m_nAnimationTransitionAggressivePoseParameters = 0x100C; // int32[2]
        constexpr uint32_t m_flTimeSinceLastAbilityNag = 0x1070; // GameTime_t
        constexpr uint32_t m_iAttackCapabilities = 0x1074; // int32
        constexpr uint32_t m_iSpecialAbility = 0x1078; // int32
        constexpr uint32_t m_iMoveCapabilities = 0x107C; // int32
        constexpr uint32_t m_nPlayerOwnerID = 0x1080; // PlayerID_t
        constexpr uint32_t m_flLastDamageTime = 0x1084; // GameTime_t
        constexpr uint32_t m_flLastAttackTime = 0x1088; // GameTime_t
        constexpr uint32_t m_iszMinimapIcon = 0x1090; // CUtlSymbolLarge
        constexpr uint32_t m_flMinimapIconSize = 0x10A0; // float32
        constexpr uint32_t m_bMinimapDisableTint = 0x10A4; // bool
        constexpr uint32_t m_bMinimapDisableRotation = 0x10A5; // bool
        constexpr uint32_t m_colorHeroGlow = 0x10A6; // Color
        constexpr uint32_t m_iNearShopMask = 0x10AC; // int32
        constexpr uint32_t m_nPoseParameterTurn = 0x10B0; // int32
        constexpr uint32_t m_nPoseParameterRun = 0x10B4; // int32
        constexpr uint32_t m_flLean = 0x10B8; // float32
        constexpr uint32_t m_flRun = 0x10BC; // float32
        constexpr uint32_t m_anglediff = 0x10C0; // int32
        constexpr uint32_t m_bInfoKeyActive = 0x10C4; // bool
        constexpr uint32_t m_bNewUpdateAssetModifiersNetworked = 0x10C5; // bool
        constexpr uint32_t m_nAssetModifiersLastUpdatedTick = 0x10C8; // GameTick_t
        constexpr uint32_t m_bSuppressGlow = 0x10CC; // bool
        constexpr uint32_t m_bWasSinking = 0x10CD; // bool
        constexpr uint32_t m_flRangeDisplayDist = 0x10D0; // float32
        constexpr uint32_t m_szDefaultIdle = 0x12B8; // CUtlSymbolLarge
        constexpr uint32_t m_szDefaultRareIdle = 0x12C0; // CUtlSymbolLarge
        constexpr uint32_t m_damagetimer = 0x12C8; // CountdownTimer
        constexpr uint32_t m_vRenderOrigin = 0x12E0; // Vector
        constexpr uint32_t m_fZDelta = 0x12EC; // float32
        constexpr uint32_t m_flDeathTime = 0x12F0; // GameTime_t
        constexpr uint32_t m_bBaseStatsChanged = 0x12F4; // bool
        constexpr uint32_t m_bNeedsSoundEmitterRefresh = 0x12F5; // bool
        constexpr uint32_t m_flPhysicalArmorValue = 0x12F8; // float32
        constexpr uint32_t m_flMagicalResistanceValue = 0x12FC; // float32
        constexpr uint32_t m_nPrevSequenceParity = 0x1300; // int32
        constexpr uint32_t m_flPrevInvisLevel = 0x13A8; // float32
        constexpr uint32_t m_nOriginalModelIndex = 0x13B0; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_nClientOriginalModelIndex = 0x13B8; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_nClientReplacementModelIndex = 0x13C0; // CStrongHandle< InfoForResourceTypeCModel >
        constexpr uint32_t m_bClientReplacementModelNeedsRebuild = 0x13C8; // bool
        constexpr uint32_t m_nClientReplacementModelReloadCount = 0x13CC; // int32
        constexpr uint32_t m_nUnitModelVariant = 0x13D0; // int8
        constexpr uint32_t m_nUnitModelVariantCount = 0x13D1; // int8
        constexpr uint32_t m_iPrevSequence = 0x13D4; // int32
        constexpr uint32_t m_pLastWeatherEffectName = 0x13D8; // char*
        constexpr uint32_t m_VoiceBackgroundSoundTimer = 0x13E8; // CountdownTimer
        constexpr uint32_t m_bIsWaitingToSpawn = 0x1400; // bool
        constexpr uint32_t m_nTotalDamageTaken = 0x1408; // int64
        constexpr uint32_t m_flManaRegen = 0x1410; // float32
        constexpr uint32_t m_flHealthRegen = 0x1414; // float32
        constexpr uint32_t m_bIsMoving = 0x1418; // bool
        constexpr uint32_t m_fRevealRadius = 0x141C; // float32
        constexpr uint32_t m_bCanUseWards = 0x1420; // bool
        constexpr uint32_t m_bCanUseAllItems = 0x1421; // bool
        constexpr uint32_t m_iXPBounty = 0x1424; // int32
        constexpr uint32_t m_iXPBountyExtra = 0x1428; // int32
        constexpr uint32_t m_iGoldBountyMin = 0x142C; // int32
        constexpr uint32_t m_iGoldBountyMax = 0x1430; // int32
        constexpr uint32_t m_hOwnerNPC = 0x1434; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hGoalEntity = 0x1438; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hNeutralSpawner = 0x143C; // CHandle< C_DOTA_NeutralSpawner >
        constexpr uint32_t m_hClientOverrideMaterial = 0x1440; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_bCombinerMaterialOverrideListChanged = 0x1448; // bool
        constexpr uint32_t m_nBaseModelMeshCount = 0x144C; // int32
        constexpr uint32_t m_combinerMaterialOverrideList = 0x1450; // CUtlVector< CStrongHandleCopyable< InfoForResourceTypeIMaterial2 > >
        constexpr uint32_t m_nArcanaLevel = 0x1468; // int8
        constexpr uint32_t m_nDefaultArcanaLevel = 0x1469; // int8
        constexpr uint32_t m_defaultColorGemColor = 0x146A; // Color
        constexpr uint32_t m_bHasBuiltWearableSpawnList = 0x1488; // bool
        constexpr uint32_t m_bHasCostume = 0x1489; // bool
        constexpr uint32_t m_bRecreateParticleSystemsOnModifiersChange = 0x148A; // bool
        constexpr uint32_t m_NetworkActivity = 0x15A8; // int32
        constexpr uint32_t m_PrevNetworkActivity = 0x15AC; // int32
        constexpr uint32_t m_NetworkSequenceIndex = 0x15B0; // int32
        constexpr uint32_t m_bShouldDoFlyHeightVisual = 0x15B4; // bool
        constexpr uint32_t m_flStartSequenceCycle = 0x15B8; // float32
        constexpr uint32_t m_ActivityModifiers = 0x15C0; // CUtlVector< CUtlSymbol >
        constexpr uint32_t m_hBackgroundSceneEnt = 0x15D8; // CHandle< C_SceneEntity >
        constexpr uint32_t m_hSpeakingSceneEnt = 0x15DC; // CHandle< C_SceneEntity >
        constexpr uint32_t m_hOldWearables = 0x15F0; // CUtlVector< CHandle< C_EconWearable > >
        constexpr uint32_t m_hOldWearableSkins = 0x1608; // CUtlVector< CUtlStringToken >
        constexpr uint32_t m_CustomHealthLabel = 0x1620; // char[256]
        constexpr uint32_t m_CustomHealthLabelColor = 0x1720; // Color
        constexpr uint32_t m_nWearableDefIndex = 0x1724; // item_definition_index_t
        constexpr uint32_t m_gibTintColor = 0x1729; // Color
        constexpr uint32_t m_bForceMaterialCombine = 0x172D; // bool
        constexpr uint32_t m_bShouldDrawParticlesWhileHidden = 0x172E; // bool
        constexpr uint32_t m_bIsClientThinkPending = 0x172F; // bool
        constexpr uint32_t m_bActivityModifiersDirty = 0x1730; // bool
        constexpr uint32_t m_bUnitModelVariantChanged = 0x1731; // bool
        constexpr uint32_t m_bWearablesAreTaunting = 0x1732; // bool
        constexpr uint32_t m_bShowCannotBeDisabledIcon = 0x1748; // bool
    }

    namespace C_DOTA_BaseNPC_Building {
        constexpr uint32_t m_iDamageLevel = 0x1768; // int32
        constexpr uint32_t m_nAmbientFXIndex = 0x176C; // ParticleIndex_t
        constexpr uint32_t m_nTPFXIndex = 0x1770; // ParticleIndex_t
        constexpr uint32_t m_nStatusFXIndex = 0x1774; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex = 0x1778; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_nFXIndexDestruction = 0x1780; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_angInitialAngles = 0x1788; // QAngle
        constexpr uint32_t m_hHeroStatueSequence = 0x1794; // HSequence
        constexpr uint32_t m_hConstantLayerSequence = 0x1798; // HSequence
        constexpr uint32_t m_fHeroStatueCycle = 0x179C; // float32
        constexpr uint32_t m_iHeroStatueStatusEffectIndex = 0x17A0; // int32
        constexpr uint32_t m_bHeroStatue = 0x17A4; // bool
        constexpr uint32_t m_bBattleCup = 0x17A5; // bool
        constexpr uint32_t m_HeroStatueInscription = 0x17A6; // char[32]
        constexpr uint32_t m_iHeroStatueOwnerPlayerID = 0x17C8; // PlayerID_t
        constexpr uint32_t m_ParticleTintColor = 0x17CC; // Color
    }

    namespace C_DOTA_BaseNPC_Creature {
        constexpr uint32_t m_bIsCurrentlyChanneling = 0x1770; // bool
        constexpr uint32_t m_flChannelCycle = 0x1774; // float32
    }

    namespace C_DOTA_BaseNPC_Creep {
        constexpr uint32_t m_flAim = 0x1768; // float32
    }

    namespace C_DOTA_BaseNPC_Creep_Neutral {
        constexpr uint32_t m_sDisplayName = 0x1770; // CUtlString
    }

    namespace C_DOTA_BaseNPC_HallofFame {
        constexpr uint32_t m_HallofFame = 0x17D0; // int32
    }

    namespace C_DOTA_BaseNPC_Healer {
        constexpr uint32_t m_iRangeFX = 0x17D0; // ParticleIndex_t
    }

    namespace C_DOTA_BaseNPC_Hero {
        constexpr uint32_t m_iCurrentXP = 0x1770; // int32
        constexpr uint32_t m_iAbilityPoints = 0x1774; // int32
        constexpr uint32_t m_flRespawnTime = 0x1778; // GameTime_t
        constexpr uint32_t m_flRespawnTimePenalty = 0x177C; // float32
        constexpr uint32_t m_flStrength = 0x1780; // float32
        constexpr uint32_t m_flAgility = 0x1784; // float32
        constexpr uint32_t m_flIntellect = 0x1788; // float32
        constexpr uint32_t m_flStrengthTotal = 0x178C; // float32
        constexpr uint32_t m_flAgilityTotal = 0x1790; // float32
        constexpr uint32_t m_flIntellectTotal = 0x1794; // float32
        constexpr uint32_t m_flDeathTime = 0x1798; // GameTime_t
        constexpr uint32_t m_iRecentDamage = 0x179C; // int32
        constexpr uint32_t m_fPainFactor = 0x17A0; // float32
        constexpr uint32_t m_fTargetPainFactor = 0x17A4; // float32
        constexpr uint32_t m_bLifeState = 0x17A8; // bool
        constexpr uint32_t m_nFXStunIndex = 0x17AC; // ParticleIndex_t
        constexpr uint32_t m_nFXSilenceIndex = 0x17B0; // ParticleIndex_t
        constexpr uint32_t m_nFXDeathIndex = 0x17B4; // ParticleIndex_t
        constexpr uint32_t m_iPlayerID = 0x17D8; // PlayerID_t
        constexpr uint32_t m_hReplicatingOtherHeroModel = 0x17DC; // CHandle< C_DOTA_BaseNPC_Hero >
        constexpr uint32_t m_bReincarnating = 0x17E0; // bool
        constexpr uint32_t m_bCustomKillEffect = 0x17E1; // bool
        constexpr uint32_t m_flSpawnedAt = 0x17E4; // GameTime_t
        constexpr uint32_t m_bScriptDisableRespawns = 0x17E8; // bool
        constexpr uint32_t m_iPrimaryAttribute = 0x17EC; // int32
        constexpr uint32_t m_nLastDrawnHealth = 0x17F0; // int32
        constexpr uint32_t m_flHurtAmount = 0x17F4; // float32
        constexpr uint32_t m_flLastHurtTime = 0x17F8; // GameTime_t
        constexpr uint32_t m_flHurtDecayRate = 0x17FC; // float32
        constexpr uint32_t m_flLastHealTime = 0x1800; // GameTime_t
        constexpr uint32_t m_flLastTreeShakeTime = 0x1804; // GameTime_t
        constexpr uint32_t m_CenterOnHeroCooldownTimer = 0x1808; // CountdownTimer
        constexpr uint32_t m_CombinedModels = 0x1A28; // CStrongHandle< InfoForResourceTypeCModel >[4]
        constexpr uint32_t m_nCurrentCombinedModelIndex = 0x1A48; // int32
        constexpr uint32_t m_nPendingCombinedModelIndex = 0x1A4C; // int32
        constexpr uint32_t m_iHeroID = 0x1A50; // int32
        constexpr uint32_t m_flCheckLegacyItemsAt = 0x1A54; // float32
        constexpr uint32_t m_bDisplayAdditionalHeroes = 0x1A58; // bool
        constexpr uint32_t m_CombinedParticleModels = 0x1A68; // CStrongHandle< InfoForResourceTypeCModel >[4]
        constexpr uint32_t m_vecAttachedParticleIndeces = 0x1A88; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_hPets = 0x1AA0; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nKillStreakFX = 0x1AB8; // ParticleIndex_t
        constexpr uint32_t m_nKillStreakFXTier = 0x1ABC; // int32
        constexpr uint32_t m_bBuybackDisabled = 0x0; // bitfield:1
        constexpr uint32_t m_bWasFrozen = 0x0; // bitfield:1
        constexpr uint32_t m_bUpdateClientsideWearables = 0x0; // bitfield:1
        constexpr uint32_t m_bForceBuildCombinedModel = 0x0; // bitfield:1
        constexpr uint32_t m_bRecombineForMaterialsOnly = 0x0; // bitfield:1
        constexpr uint32_t m_bBuildingCombinedModel = 0x0; // bitfield:1
        constexpr uint32_t m_bInReloadEvent = 0x0; // bitfield:1
        constexpr uint32_t m_bStoreOldVisibility = 0x0; // bitfield:1
        constexpr uint32_t m_bResetVisibility = 0x0; // bitfield:1
        constexpr uint32_t m_bStoredVisibility = 0x0; // bitfield:1
    }

    namespace C_DOTA_BaseNPC_HoldoutTower {
        constexpr uint32_t m_iTowerType = 0x1840; // DOTA_HOLDOUT_TOWER_TYPE
    }

    namespace C_DOTA_BaseNPC_NeutralItemStash {
        constexpr uint32_t m_vecNewItemFX = 0x17E0; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_bHasFoundProps = 0x17F8; // bool
        constexpr uint32_t m_bDidHaveNewItems = 0x17F9; // bool
        constexpr uint32_t m_vecProps = 0x1800; // CUtlVector< CHandle< C_DynamicPropClientside > >
    }

    namespace C_DOTA_BaseNPC_RotatableBuilding {
        constexpr uint32_t m_hObsoleteHeroStatueSequence = 0x1768; // HSequence
        constexpr uint32_t m_hObsoleteConstantLayerSequence = 0x176C; // HSequence
    }

    namespace C_DOTA_BaseNPC_ShadowShaman_SerpentWard {
        constexpr uint32_t m_angle = 0x1768; // QAngle
        constexpr uint32_t m_iPoseParameterAim = 0x1774; // int32
    }

    namespace C_DOTA_BaseNPC_Shop {
        constexpr uint32_t m_ShopType = 0x17D0; // DOTA_SHOP_TYPE
        constexpr uint32_t m_nShopFX = 0x17F8; // ParticleIndex_t
        constexpr uint32_t m_vShopFXOrigin = 0x17FC; // Vector
        constexpr uint32_t m_flLastSpeech = 0x1808; // float32
    }

    namespace C_DOTA_BaseNPC_Tower {
        constexpr uint32_t m_nAltHeldRangeFX = 0x17D0; // ParticleIndex_t
        constexpr uint32_t m_bWasInRange = 0x17D4; // bool
        constexpr uint32_t m_iRangeFX = 0x17D8; // ParticleIndex_t
        constexpr uint32_t m_iPulseFX = 0x17DC; // ParticleIndex_t
        constexpr uint32_t m_unTowerTier = 0x17E0; // uint8
        constexpr uint32_t m_fTowerAggroDangerAmount = 0x17E4; // float32
        constexpr uint32_t m_flControlledUnitInRangeAmount = 0x17E8; // float32
        constexpr uint32_t m_flControlledUnitTargettedAmount = 0x17EC; // float32
        constexpr uint32_t m_iAnticipationFX = 0x17F0; // ParticleIndex_t
        constexpr uint32_t m_szAnticipationFXName = 0x17F8; // CUtlSymbolLarge
        constexpr uint32_t m_hPrevTowerAttackTarget = 0x1800; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTowerAttackTarget = 0x1804; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTowerHighFiveTarget = 0x1808; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iPoseParameterAim = 0x180C; // int32
        constexpr uint32_t m_angDefaultCustomTowerAngle = 0x1810; // QAngle
        constexpr uint32_t m_flLastAimYaw = 0x181C; // float32
        constexpr uint32_t m_bClientSideCustomTower = 0x1820; // bool
        constexpr uint32_t m_IdleRareAnimationTime = 0x1828; // CountdownTimer
    }

    namespace C_DOTA_BaseNPC_Tusk_Sigil {
        constexpr uint32_t m_angInitialAngles = 0x1768; // QAngle
    }

    namespace C_DOTA_BaseNPC_Venomancer_PlagueWard {
        constexpr uint32_t m_angle = 0x1768; // QAngle
        constexpr uint32_t m_iPoseParameterAim = 0x1774; // int32
    }

    namespace C_DOTA_BaseNPC_Watch_Tower {
        constexpr uint32_t m_iRangeFX = 0x17D0; // ParticleIndex_t
        constexpr uint32_t m_szOutpostName = 0x17D8; // CUtlSymbolLarge
        constexpr uint32_t m_szInteractAbilityName = 0x17E0; // CUtlSymbolLarge
    }

    namespace C_DOTA_BinaryObject {
        constexpr uint32_t m_bActive = 0x7E0; // bool
        constexpr uint32_t m_nBinaryID = 0x7E4; // int32
    }

    namespace C_DOTA_CDOTA_Item_BagOfGold_Caster_Only {
        constexpr uint32_t m_hThinker = 0x648; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_CombatLogQueryProgress {
        constexpr uint32_t m_nPlayerID = 0x28; // PlayerID_t
        constexpr uint32_t m_nQueryID = 0x2C; // int32
        constexpr uint32_t m_nQueryRank = 0x30; // int32
        constexpr uint32_t m_nMultiQueryID = 0x34; // int32
    }

    namespace C_DOTA_DataNonSpectator {
        constexpr uint32_t m_vecDataTeam = 0x538; // C_UtlVectorEmbeddedNetworkVar< DataTeamPlayer_t >
        constexpr uint32_t m_bWorldTreeState = 0x588; // uint64[256]
        constexpr uint32_t m_vecWorldTreeModelReplacements = 0xD88; // C_UtlVectorEmbeddedNetworkVar< TreeModelReplacement_t >
        constexpr uint32_t m_vDesiredWardPlacement = 0xDD8; // Vector2D[2]
        constexpr uint32_t m_nEnemyStartingPosition = 0xDE8; // int32[5]
        constexpr uint32_t m_nTotalEventPoints = 0xDFC; // int32
        constexpr uint32_t m_nCaptainInspectedHeroID = 0xE00; // int32
        constexpr uint32_t m_nFeaturedPlayerID = 0xE04; // int32
        constexpr uint32_t m_flSuggestedWardWeights = 0xE08; // float32[20]
        constexpr uint32_t m_nSuggestedWardIndexes = 0xE58; // uint8[20]
        constexpr uint32_t m_iSuggestedLanes = 0xE6C; // int32[5]
        constexpr uint32_t m_iSuggestedLaneWeights = 0xE80; // float32[5]
        constexpr uint32_t m_bSuggestedLaneRoam = 0xE94; // bool[5]
        constexpr uint32_t m_bSuggestedLaneJungle = 0xE99; // bool[5]
        constexpr uint32_t m_vecNeutralItemsTierInfo = 0xEA0; // C_UtlVectorEmbeddedNetworkVar< TierNeutralInfo_t >
        constexpr uint32_t m_vecNeutralStashItems = 0xEF0; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vecNeutralItemsConsumed = 0xF08; // C_NetworkUtlVectorBase< AbilityID_t >
        constexpr uint32_t m_PingConfirmationStates = 0xF20; // C_UtlVectorEmbeddedNetworkVar< PingConfirmationState_t >
        constexpr uint32_t m_vecKnownClearCamps = 0xF70; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
        constexpr uint32_t m_vPossibleWardPlacement = 0xF88; // Vector2D[100]
        constexpr uint32_t m_vPossibleWardRadii = 0x12A8; // float32[100]
        constexpr uint32_t m_vecTrackedTeleports = 0x1438; // C_UtlVectorEmbeddedNetworkVar< DOTATeleportInfo_t >
    }

    namespace C_DOTA_DataSpectator {
        constexpr uint32_t m_hPowerupRune_1 = 0x1488; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hPowerupRune_2 = 0x148C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBountyRune_1 = 0x1490; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBountyRune_2 = 0x1494; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBountyRune_3 = 0x1498; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hBountyRune_4 = 0x149C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hXPRune_1 = 0x14A0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hXPRune_2 = 0x14A4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iNetWorth = 0x14A8; // int32[24]
        constexpr uint32_t m_fRadiantWinProbability = 0x1508; // float32
        constexpr uint32_t m_iGoldSpentOnSupport = 0x150C; // int32[24]
        constexpr uint32_t m_iHeroDamage = 0x156C; // int32[24]
        constexpr uint32_t m_nWardsPurchased = 0x15CC; // int32[24]
        constexpr uint32_t m_nWardsPlaced = 0x162C; // int32[24]
        constexpr uint32_t m_nWardsDestroyed = 0x168C; // int32[24]
        constexpr uint32_t m_nRunesActivated = 0x16EC; // int32[24]
        constexpr uint32_t m_nCampsStacked = 0x174C; // int32[24]
        constexpr uint32_t m_ThreatLevelInfos = 0x17B0; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
    }

    namespace C_DOTA_DisplacementVisibility {
        constexpr uint32_t m_HiddenDisplacement = 0x538; // int32
    }

    namespace C_DOTA_GuildBannerDynamic {
        constexpr uint32_t m_bRespawnClientEntity = 0xA58; // bool
        constexpr uint32_t m_bPlaySpawnAnimation = 0xA59; // bool
        constexpr uint32_t m_unGuildTier = 0xA5A; // uint8
        constexpr uint32_t m_unPrimaryColor = 0xA5B; // uint8
        constexpr uint32_t m_unSecondaryColor = 0xA5C; // uint8
        constexpr uint32_t m_unPattern = 0xA5D; // uint8
        constexpr uint32_t m_unLogo = 0xA60; // uint64
        constexpr uint32_t m_unGuildID = 0xA68; // GuildID_t
        constexpr uint32_t m_unGuildFlags = 0xA6C; // uint32
        constexpr uint32_t m_bUsePanelCache = 0xA70; // bool
        constexpr uint32_t m_hClientEntity = 0xA74; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Hero_Recorder {
        constexpr uint32_t m_bStartRecording = 0x538; // bool
        constexpr uint32_t m_hHero = 0x53C; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_hPlayer = 0x540; // CHandle< C_DOTAPlayerController >
        constexpr uint32_t m_bRecording = 0x544; // bool
        constexpr uint32_t m_bLastStartRecording = 0x545; // bool
        constexpr uint32_t m_flLastCycle = 0x548; // float32
        constexpr uint32_t m_nCompletedCycles = 0x54C; // int32
        constexpr uint32_t m_nFramesThisCycle = 0x550; // int32
        constexpr uint32_t m_nRecordedFrames = 0x554; // int32
        constexpr uint32_t m_flHeroAdvanceTime = 0x558; // float32
        constexpr uint32_t m_flStartTime = 0x55C; // float32
        constexpr uint32_t m_flCycles = 0x560; // CUtlVector< float32 >
        constexpr uint32_t m_pBatchFiles = 0x578; // CUtlVector< CUtlString* >
    }

    namespace C_DOTA_Item {
        constexpr uint32_t m_bCombinable = 0x5B0; // bool
        constexpr uint32_t m_bPermanent = 0x5B1; // bool
        constexpr uint32_t m_bStackable = 0x5B2; // bool
        constexpr uint32_t m_iStackableMax = 0x5B4; // int32
        constexpr uint32_t m_bRecipe = 0x5B8; // bool
        constexpr uint32_t m_bRecipeConsumesCharges = 0x5B9; // bool
        constexpr uint32_t m_iSharability = 0x5BC; // int32
        constexpr uint32_t m_bDroppable = 0x5C0; // bool
        constexpr uint32_t m_bPurchasable = 0x5C1; // bool
        constexpr uint32_t m_bSellable = 0x5C2; // bool
        constexpr uint32_t m_bInitiallySellable = 0x5C3; // bool
        constexpr uint32_t m_bForceUnsellable = 0x5C4; // bool
        constexpr uint32_t m_bRequiresCharges = 0x5C5; // bool
        constexpr uint32_t m_bDisplayCharges = 0x5C6; // bool
        constexpr uint32_t m_bHideCharges = 0x5C7; // bool
        constexpr uint32_t m_bKillable = 0x5C8; // bool
        constexpr uint32_t m_bGloballyCombinable = 0x5C9; // bool
        constexpr uint32_t m_bDisassemblable = 0x5CA; // bool
        constexpr uint32_t m_bIsNeutralDrop = 0x5CB; // bool
        constexpr uint32_t m_nNeutralDropTeam = 0x5CC; // int32
        constexpr uint32_t m_bAlertable = 0x5D0; // bool
        constexpr uint32_t m_iInitialCharges = 0x5D4; // int32
        constexpr uint32_t m_bCastOnPickup = 0x5D8; // bool
        constexpr uint32_t m_bOnlyPlayerHeroPickup = 0x5D9; // bool
        constexpr uint32_t m_bCreepHeroPickup = 0x5DA; // bool
        constexpr uint32_t m_iValuelessCharges = 0x5DC; // int32
        constexpr uint32_t m_iCurrentCharges = 0x5E0; // int32
        constexpr uint32_t m_iSecondaryCharges = 0x5E4; // int32
        constexpr uint32_t m_iMaxCharges = 0x5E8; // int32
        constexpr uint32_t m_bCombineLocked = 0x5EC; // bool
        constexpr uint32_t m_flPurchaseTime = 0x5F0; // GameTime_t
        constexpr uint32_t m_flAssembledTime = 0x5F4; // GameTime_t
        constexpr uint32_t m_bPurchasedWhileDead = 0x5F8; // bool
        constexpr uint32_t m_bCanBeUsedOutOfInventory = 0x5F9; // bool
        constexpr uint32_t m_bItemEnabled = 0x5FA; // bool
        constexpr uint32_t m_flEnableTime = 0x5FC; // GameTime_t
        constexpr uint32_t m_flReclaimTime = 0x600; // GameTime_t
        constexpr uint32_t m_bDisplayOwnership = 0x604; // bool
        constexpr uint32_t m_bShowOnMinimap = 0x605; // bool
        constexpr uint32_t m_flMinimapIconSize = 0x608; // float32
        constexpr uint32_t m_bIsUpgradeable = 0x60C; // bool
        constexpr uint32_t m_nUpgradeProgress = 0x610; // int32
        constexpr uint32_t m_nUpgradeGoal = 0x614; // int32
        constexpr uint32_t m_hOldOwnerEntity = 0x618; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iOldCharges = 0x61C; // int32
        constexpr uint32_t m_iPlayerOwnerID = 0x620; // PlayerID_t
        constexpr uint32_t m_vecPreGameTransferPlayerIDs = 0x628; // C_NetworkUtlVectorBase< uint8 >
    }

    namespace C_DOTA_Item_AeonDisk {
        constexpr uint32_t m_nUses = 0x648; // int32
        constexpr uint32_t max_level = 0x64C; // int32
    }

    namespace C_DOTA_Item_AetherialHalo {
        constexpr uint32_t m_nFXIndex = 0x648; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x64C; // ParticleIndex_t
    }

    namespace C_DOTA_Item_Ancient_Janggo {
        constexpr uint32_t radius = 0x648; // int32
    }

    namespace C_DOTA_Item_Arcane_Scout {
        constexpr uint32_t m_hScout = 0x648; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Item_Armlet {
        constexpr uint32_t toggle_cooldown = 0x648; // float32
    }

    namespace C_DOTA_Item_Barricade {
        constexpr uint32_t m_hScout = 0x648; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Item_Black_King_Bar {
        constexpr uint32_t m_bActive = 0x648; // bool
    }

    namespace C_DOTA_Item_BootsOfTravel {
        constexpr uint32_t m_flTeleportTimeOverride = 0x648; // float32
        constexpr uint32_t m_bPendingSellExcessScrolls = 0x64C; // bool
        constexpr uint32_t m_bQueueSellScrolls = 0x64D; // bool
    }

    namespace C_DOTA_Item_Boots_Of_Bearing {
        constexpr uint32_t radius = 0x648; // int32
    }

    namespace C_DOTA_Item_Bottomless_Chalice {
        constexpr uint32_t m_iStoredRuneType = 0x648; // int32
        constexpr uint32_t m_fStoredRuneTime = 0x64C; // GameTime_t
        constexpr uint32_t stored_rune_duration = 0x650; // float32
    }

    namespace C_DOTA_Item_Bracer {
        constexpr uint32_t counter = 0x648; // int32
    }

    namespace C_DOTA_Item_DataDriven {
        constexpr uint32_t m_bProcsMagicStick = 0x648; // bool
        constexpr uint32_t m_bIsSharedWithTeammates = 0x649; // bool
        constexpr uint32_t m_bCastFilterRejectCaster = 0x64A; // bool
        constexpr uint32_t m_fAnimationPlaybackRate = 0x64C; // float32
        constexpr uint32_t m_fAOERadius = 0x650; // float32
        constexpr uint32_t m_CastAnimation = 0x654; // int32
        constexpr uint32_t m_ModifierKVDescriptions = 0x658; // CUtlVector< KeyValues* >
        constexpr uint32_t m_pOnChannelFinishKV = 0x670; // KeyValues*
        constexpr uint32_t m_pOnChannelSucceededKV = 0x678; // KeyValues*
        constexpr uint32_t m_pOnChannelInterruptedKV = 0x680; // KeyValues*
        constexpr uint32_t m_pOnOwnerSpawnedKV = 0x688; // KeyValues*
        constexpr uint32_t m_pOnOwnerDiedKV = 0x690; // KeyValues*
        constexpr uint32_t m_pOnProjectileHitUnitKV = 0x698; // KeyValues*
        constexpr uint32_t m_pOnProjectileFinishKV = 0x6A0; // KeyValues*
        constexpr uint32_t m_pOnSpellStartKV = 0x6A8; // KeyValues*
        constexpr uint32_t m_pOnAbilityPhaseStartKV = 0x6B0; // KeyValues*
        constexpr uint32_t m_pOnToggleOnKV = 0x6B8; // KeyValues*
        constexpr uint32_t m_pOnToggleOffKV = 0x6C0; // KeyValues*
        constexpr uint32_t m_pOnEquipKV = 0x6C8; // KeyValues*
        constexpr uint32_t m_pOnUnequipKV = 0x6D0; // KeyValues*
        constexpr uint32_t m_pOnCreatedKV = 0x6D8; // KeyValues*
    }

    namespace C_DOTA_Item_EagleEye {
        constexpr uint32_t m_iTempViewer = 0x648; // int32
        constexpr uint32_t m_iTeam = 0x64C; // int32
        constexpr uint32_t m_nFXIndex = 0x650; // int32
    }

    namespace C_DOTA_Item_EmptyBottle {
        constexpr uint32_t m_iStoredRuneType = 0x648; // int32
        constexpr uint32_t m_fStoredRuneTime = 0x64C; // GameTime_t
        constexpr uint32_t rune_expire_time = 0x650; // float32
    }

    namespace C_DOTA_Item_GemOfTrueSight {
        constexpr uint32_t m_iTempViewer = 0x648; // int32
        constexpr uint32_t m_iTeam = 0x64C; // int32
        constexpr uint32_t m_nFXIndex = 0x650; // int32
    }

    namespace C_DOTA_Item_Grandmasters_Glaive {
        constexpr uint32_t m_iStat = 0x648; // int32
    }

    namespace C_DOTA_Item_MeteorHammer {
        constexpr uint32_t m_nFXIndex = 0x648; // ParticleIndex_t
        constexpr uint32_t m_nFXIndexB = 0x64C; // ParticleIndex_t
    }

    namespace C_DOTA_Item_Muertas_Gun {
        constexpr uint32_t radius = 0x648; // int32
        constexpr uint32_t ricochet_radius_start = 0x64C; // int32
        constexpr uint32_t ricochet_radius_end = 0x650; // int32
        constexpr uint32_t m_iTempViewerRadiant = 0x654; // int32
        constexpr uint32_t m_iTempViewerDire = 0x658; // int32
    }

    namespace C_DOTA_Item_Necronomicon {
        constexpr uint32_t m_hWarrior = 0x648; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hArcher = 0x64C; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Item_NullTalisman {
        constexpr uint32_t counter = 0x648; // int32
    }

    namespace C_DOTA_Item_Orb_Of_Revelations {
        constexpr uint32_t m_ViewerTimer = 0x648; // CountdownTimer
        constexpr uint32_t m_iProjectile = 0x660; // int32
    }

    namespace C_DOTA_Item_Overflowing_Elixir {
        constexpr uint32_t m_iStoredRuneType = 0x648; // int32
        constexpr uint32_t m_fStoredRuneTime = 0x64C; // GameTime_t
    }

    namespace C_DOTA_Item_Physical {
        constexpr uint32_t m_hItem = 0x7E0; // CHandle< C_DOTA_Item >
        constexpr uint32_t m_bIsLowPriorityHoverItem = 0x7E4; // bool
        constexpr uint32_t m_hOldItem = 0x7E8; // CHandle< C_DOTA_Item >
        constexpr uint32_t m_pszParticleName = 0x7F0; // char*
        constexpr uint32_t m_nFXIndex = 0x7F8; // ParticleIndex_t
        constexpr uint32_t m_bShowingTooltip = 0x7FC; // bool
        constexpr uint32_t m_bShowingSimpleTooltip = 0x7FD; // bool
    }

    namespace C_DOTA_Item_PowerTreads {
        constexpr uint32_t m_iStat = 0x648; // int32
    }

    namespace C_DOTA_Item_RiverPainter {
        constexpr uint32_t m_iRiverPaintColor = 0x648; // int32
    }

    namespace C_DOTA_Item_Rune {
        constexpr uint32_t m_iRuneType = 0x7E0; // int32
        constexpr uint32_t m_flRuneTime = 0x7E4; // float32
        constexpr uint32_t m_nMapLocationTeam = 0x7E8; // int32
        constexpr uint32_t m_szLocation = 0x7EC; // char[512]
        constexpr uint32_t m_iOldRuneType = 0x9EC; // int32
        constexpr uint32_t m_bShowingTooltip = 0x9F0; // bool
    }

    namespace C_DOTA_Item_RuneSpawner {
        constexpr uint32_t m_nRuneType = 0x7E0; // DOTA_RUNES
        constexpr uint32_t m_flLastSpawnTime = 0x7E4; // float32
        constexpr uint32_t m_flNextSpawnTime = 0x7E8; // float32
    }

    namespace C_DOTA_Item_RuneSpawner_Bounty {
        constexpr uint32_t m_nRuneType = 0x7E0; // DOTA_RUNES
        constexpr uint32_t m_flLastSpawnTime = 0x7E4; // float32
        constexpr uint32_t m_flNextSpawnTime = 0x7E8; // float32
    }

    namespace C_DOTA_Item_RuneSpawner_Powerup {
        constexpr uint32_t m_nRuneType = 0x7E0; // DOTA_RUNES
        constexpr uint32_t m_flLastSpawnTime = 0x7E4; // float32
        constexpr uint32_t m_flNextSpawnTime = 0x7E8; // float32
        constexpr uint32_t m_bNextRuneIsWater = 0x7EC; // bool
    }

    namespace C_DOTA_Item_RuneSpawner_XP {
        constexpr uint32_t m_nRuneType = 0x7E0; // DOTA_RUNES
        constexpr uint32_t m_flLastSpawnTime = 0x7E4; // float32
        constexpr uint32_t m_flNextSpawnTime = 0x7E8; // float32
    }

    namespace C_DOTA_Item_Safety_Bubble {
        constexpr uint32_t m_bUnequipped = 0x648; // bool
    }

    namespace C_DOTA_Item_SheepStick {
        constexpr uint32_t upgrade_radius = 0x648; // int32
    }

    namespace C_DOTA_Item_SpookyTeleportScroll {
        constexpr uint32_t m_hTeleportTarget = 0x648; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXOrigin = 0x64C; // ParticleIndex_t
        constexpr uint32_t m_nFXDestination = 0x650; // ParticleIndex_t
        constexpr uint32_t m_vDestination = 0x654; // Vector
        constexpr uint32_t m_iMinDistance = 0x660; // int32
        constexpr uint32_t m_flBaseTeleportTime = 0x664; // float32
        constexpr uint32_t m_flExtraTeleportTime = 0x668; // float32
    }

    namespace C_DOTA_Item_Spring2021_DefusalBomb {
        constexpr uint32_t m_bInBombSite = 0x648; // bool
    }

    namespace C_DOTA_Item_TeleportScroll {
        constexpr uint32_t m_hTeleportTarget = 0x648; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXOrigin = 0x64C; // ParticleIndex_t
        constexpr uint32_t m_nFXDestination = 0x650; // ParticleIndex_t
        constexpr uint32_t m_vDestination = 0x654; // Vector
        constexpr uint32_t m_iMinDistance = 0x660; // int32
        constexpr uint32_t m_flBaseTeleportTime = 0x664; // float32
        constexpr uint32_t m_flExtraTeleportTime = 0x668; // float32
    }

    namespace C_DOTA_Item_TierToken {
        constexpr uint32_t m_vecChoices = 0x648; // AbilityID_t[5]
    }

    namespace C_DOTA_Item_Tombstone {
        constexpr uint32_t m_flTimer = 0x648; // float32
        constexpr uint32_t m_nFXIndex = 0x64C; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex2 = 0x650; // ParticleIndex_t
    }

    namespace C_DOTA_Item_TranquilBoots {
        constexpr uint32_t break_count = 0x648; // int32
        constexpr uint32_t m_DamageList = 0x650; // CUtlVector< GameTime_t >
    }

    namespace C_DOTA_Item_TranquilBoots2 {
        constexpr uint32_t break_count = 0x648; // int32
        constexpr uint32_t m_DamageList = 0x650; // CUtlVector< GameTime_t >
    }

    namespace C_DOTA_Item_TurtleShell {
        constexpr uint32_t duration = 0x648; // float32
    }

    namespace C_DOTA_Item_Vambrace {
        constexpr uint32_t m_iStat = 0x648; // int32
    }

    namespace C_DOTA_Item_WraithBand {
        constexpr uint32_t counter = 0x648; // int32
    }

    namespace C_DOTA_Item_WraithPact {
        constexpr uint32_t m_hWard = 0x648; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_LinearProjectileInfo {
        constexpr uint32_t m_transform = 0x20; // CTransform
        constexpr uint32_t m_iHandle = 0x40; // int32
        constexpr uint32_t m_vInitPosition = 0x44; // Vector
        constexpr uint32_t m_vPosition = 0x50; // Vector
        constexpr uint32_t m_vOriginalVelocity = 0x5C; // Vector
        constexpr uint32_t m_vVelocity = 0x68; // Vector
        constexpr uint32_t m_vAcceleration = 0x74; // Vector
        constexpr uint32_t m_flMaxSpeed = 0x80; // float32
        constexpr uint32_t m_flFowRadius = 0x84; // float32
        constexpr uint32_t m_bStickyFoWReveal = 0x88; // bool
        constexpr uint32_t m_flDistance = 0x8C; // float32
        constexpr uint32_t m_hSource = 0x90; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_MapTree {
        constexpr uint32_t m_bInitialized = 0x818; // bool
    }

    namespace C_DOTA_MinibossSpawner {
        constexpr uint32_t m_bIsRadiantMiniboss = 0x538; // bool
    }

    namespace C_DOTA_NPC_Aghsfort_WitchDoctor_Ward {
        constexpr uint32_t m_nFXSkullIndex = 0x1768; // ParticleIndex_t
        constexpr uint32_t m_nTargetType = 0x176C; // int32
        constexpr uint32_t m_nTargetFlags = 0x1770; // int32
    }

    namespace C_DOTA_NPC_Lantern {
        constexpr uint32_t m_szInteractAbilityName = 0x17D0; // CUtlSymbolLarge
        constexpr uint32_t m_pVisionRangeFX = 0x17D8; // CNewParticleEffect*
        constexpr uint32_t m_iFxIndex = 0x17E0; // ParticleIndex_t
        constexpr uint32_t m_nPreviewViewer = 0x17E4; // int32
        constexpr uint32_t m_nTeamNumberShown = 0x17E8; // int32
    }

    namespace C_DOTA_NPC_TechiesMines {
        constexpr uint32_t m_iRangeFX = 0x1768; // ParticleIndex_t
    }

    namespace C_DOTA_NPC_WitchDoctor_Ward {
        constexpr uint32_t m_nFXSkullIndex = 0x1768; // ParticleIndex_t
        constexpr uint32_t m_nTargetType = 0x176C; // int32
        constexpr uint32_t m_nTargetFlags = 0x1770; // int32
    }

    namespace C_DOTA_NeutralSpawner {
        constexpr uint32_t m_Type = 0x538; // int32
    }

    namespace C_DOTA_PhantomAssassin_Gravestone {
        constexpr uint32_t m_nVictimPlayerID = 0x1768; // PlayerID_t
    }

    namespace C_DOTA_PlayerResource {
        constexpr uint32_t m_bWasDataUpdateCreated = 0x548; // bool
        constexpr uint32_t m_vecPlayerTeamData = 0x550; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerTeamData_t >
        constexpr uint32_t m_vecPlayerData = 0x5A0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerData_t >
        constexpr uint32_t m_vecBrodcasterData = 0x5F0; // C_UtlVectorEmbeddedNetworkVar< PlayerResourceBroadcasterData_t >
        constexpr uint32_t m_vecEventsForDisplay = 0x640; // C_NetworkUtlVectorBase< uint32 >
        constexpr uint32_t m_nPrimaryEventIndex = 0x658; // int8
        constexpr uint32_t m_nObsoleteEventIDAssociatedWithEventData = 0x65C; // uint32
        constexpr uint32_t m_playerIDToPlayer = 0x660; // CHandle< C_BaseEntity >[64]
        constexpr uint32_t m_iszName = 0x760; // CUtlSymbolLarge[64]
        constexpr uint32_t m_iszHTMLSafeName = 0x960; // CUtlSymbolLarge[64]
        constexpr uint32_t m_iszFilteredHTMLSafeName = 0xB60; // CUtlSymbolLarge[64]
        constexpr uint32_t m_bDirtySuggestedItems = 0x2560; // bool
        constexpr uint32_t m_bDirtyEstimatedMatchDuration = 0x2561; // bool
        constexpr uint32_t m_bDirtySelection = 0x2562; // bool
        constexpr uint32_t m_bHasWorldTreesChanged = 0x2563; // bool
        constexpr uint32_t m_bWorldTreeModelsChanged = 0x2564; // bool
        constexpr uint32_t m_bSwapWillingness = 0x2565; // bool[24]
        constexpr uint32_t m_hTeamCouriers = 0x25C0; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[15]
        constexpr uint32_t m_hPlayerCouriers = 0x2728; // CUtlVector< CHandle< C_DOTA_Unit_Courier > >[64]
        constexpr uint32_t m_vecOnstageHomeTeams = 0x2D28; // CUtlVector< uint32 >
        constexpr uint32_t m_pPlayerIDToOnstageSlot = 0x2D40; // PlayerSeatAssignment_t*[24]
        constexpr uint32_t m_vecOnstagePlayerSeats = 0x2E00; // CUtlVector< PlayerSeatAssignment_t >
        constexpr uint32_t m_nEventNPCReplaced = 0x2E18; // int32
        constexpr uint32_t m_nEventPlayerInfo = 0x2E1C; // int32
        constexpr uint32_t m_nInventoryUpdated = 0x2E20; // int32
    }

    namespace C_DOTA_PortraitBuilding {
        constexpr uint32_t m_nAmbientFXIndex = 0x7E0; // ParticleIndex_t
        constexpr uint32_t m_nFXIndex = 0x7E8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_ParticleTintColor = 0x7F0; // Color
    }

    namespace C_DOTA_PortraitEntity {
        constexpr uint32_t m_PetIdleTimer = 0x1768; // CountdownTimer
        constexpr uint32_t m_nMouthFX = 0x1780; // ParticleIndex_t
        constexpr uint32_t m_nMouthControlPoint = 0x1784; // int32
        constexpr uint32_t m_iPortraitParticle = 0x1788; // ParticleIndex_t
        constexpr uint32_t m_PortraitActivity = 0x178C; // int32
        constexpr uint32_t m_CustomActivityModifiers = 0x1790; // CUtlVector< CUtlSymbol >
        constexpr uint32_t m_bIsSimulationActive = 0x17A8; // bool
        constexpr uint32_t m_hAppearanceFromNPC = 0x17AC; // CEntityHandle
    }

    namespace C_DOTA_RoshanSpawner {
        constexpr uint32_t m_iLastKillerTeam = 0x538; // int32
        constexpr uint32_t m_iKillCount = 0x53C; // int32
        constexpr uint32_t m_vRoshanAltLocation = 0x540; // Vector
    }

    namespace C_DOTA_Samurai_Tabi {
        constexpr uint32_t m_iStat = 0x648; // int32
    }

    namespace C_DOTA_SimpleObstruction {
        constexpr uint32_t m_bEnabled = 0x538; // bool
        constexpr uint32_t m_bBlockFoW = 0x539; // bool
        constexpr uint32_t m_unOccluderID = 0x53C; // uint32
        constexpr uint32_t m_bBlockingGridNav = 0x540; // bool
        constexpr uint32_t m_bPrevEnabled = 0x541; // bool
    }

    namespace C_DOTA_TempTree {
        constexpr uint32_t m_fExpireTime = 0x810; // GameTime_t
        constexpr uint32_t m_vecTreeCircleCenter = 0x814; // Vector
        constexpr uint32_t m_bCanApplyTreeCostume = 0x820; // bool
        constexpr uint32_t m_bIsMangoTree = 0x821; // bool
        constexpr uint32_t m_Particles = 0x828; // CUtlVector< ParticleIndex_t >
        constexpr uint32_t m_bIsPartOfFowSystem = 0x840; // bool
        constexpr uint32_t m_bHasClientSideAnimation = 0x841; // bool
    }

    namespace C_DOTA_TrackingProjectileInfo {
        constexpr uint32_t m_iHandle = 0x0; // int32
        constexpr uint32_t m_iOriginalMoveSpeed = 0x4; // int32
        constexpr uint32_t m_iMoveSpeed = 0x8; // int32
        constexpr uint32_t m_vLocation = 0xC; // Vector
        constexpr uint32_t m_hSource = 0x18; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hTarget = 0x1C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hAbility = 0x20; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vTargetLocation = 0x24; // Vector
        constexpr uint32_t m_bDodgeable = 0x30; // bool
        constexpr uint32_t m_bIsAttack = 0x31; // bool
        constexpr uint32_t m_bIsEvaded = 0x32; // bool
        constexpr uint32_t m_flExpireTime = 0x34; // GameTime_t
        constexpr uint32_t m_flMaxImpactTime = 0x38; // GameTime_t
    }

    namespace C_DOTA_UnitInventory {
        constexpr uint32_t m_SharedCooldownList = 0x8; // CUtlVector< sSharedCooldownInfo >
        constexpr uint32_t m_hItems = 0x20; // CHandle< C_BaseEntity >[19]
        constexpr uint32_t m_bItemQueried = 0x6C; // bool[21]
        constexpr uint32_t m_iParity = 0x84; // int32
        constexpr uint32_t m_hInventoryParent = 0x88; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsActive = 0x8C; // bool
        constexpr uint32_t m_bStashEnabled = 0x8D; // bool
        constexpr uint32_t m_hTransientCastItem = 0x90; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bSendChangedMsg = 0xB0; // bool
    }

    namespace C_DOTA_Unit_AghsFort_Creature_DungeonBat {
        constexpr uint32_t m_nFXAmbient = 0x1778; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Aghsfort_Aziyog_Underlord_Portal {
        constexpr uint32_t m_hOtherPortal = 0x1768; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_Brewmaster_PrimalEarth {
        constexpr uint32_t m_nFXEarthAmbient1 = 0x1770; // ParticleIndex_t
        constexpr uint32_t m_nFXEarthAmbient2 = 0x1774; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Brewmaster_PrimalFire {
        constexpr uint32_t m_nFXAmbient = 0x1770; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Brewmaster_PrimalStorm {
        constexpr uint32_t m_nFXStormAmbient1 = 0x1770; // ParticleIndex_t
        constexpr uint32_t m_nFXStormAmbient2 = 0x1774; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Brewmaster_PrimalVoid {
        constexpr uint32_t m_nFXAmbient = 0x1770; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Broodmother_Web {
        constexpr uint32_t m_nFXIndex = 0x1768; // ParticleIndex_t
        constexpr uint32_t m_vecOrigin = 0x176C; // Vector
    }

    namespace C_DOTA_Unit_Courier {
        constexpr uint32_t m_bUnitRespawned = 0x1768; // bool
        constexpr uint32_t m_bPreUpdateFlyingCourier = 0x1769; // bool
        constexpr uint32_t m_nSoleControllingPlayer = 0x176C; // PlayerID_t
        constexpr uint32_t m_bFlyingCourier = 0x1770; // bool
        constexpr uint32_t m_flRespawnTime = 0x1774; // GameTime_t
        constexpr uint32_t m_nCourierState = 0x1778; // CourierState_t
        constexpr uint32_t m_hCourierStateEntity = 0x177C; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_Diretide_Portal {
        constexpr uint32_t m_hPartnerPortal = 0x17D0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nRuneType = 0x17D4; // int32
        constexpr uint32_t m_nOriginalTeamNumber = 0x17D8; // int32
        constexpr uint32_t m_nActiveFXIndex = 0x17DC; // ParticleIndex_t
        constexpr uint32_t m_nRuneFXIndex = 0x17E0; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_CrystalMaiden {
        constexpr uint32_t m_iParticleMouthIndex = 0x1AC8; // int32
        constexpr uint32_t m_iParticleHandRIndex = 0x1ACC; // int32
    }

    namespace C_DOTA_Unit_Hero_DarkSeer {
        constexpr uint32_t m_nNormalPunchBuffIndex = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Earthshaker {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Juggernaut {
        constexpr uint32_t m_unOmniKills = 0x1AC8; // uint32
    }

    namespace C_DOTA_Unit_Hero_Kunkka {
        constexpr uint32_t m_nFXIndex = 0x1AC8; // int32
    }

    namespace C_DOTA_Unit_Hero_Legion_Commander {
        constexpr uint32_t m_unDuelsWon = 0x1AC8; // uint32
    }

    namespace C_DOTA_Unit_Hero_Lion {
        constexpr uint32_t m_unFingerPrestigeKills = 0x1AC8; // uint32
    }

    namespace C_DOTA_Unit_Hero_Meepo {
        constexpr uint32_t m_nWhichMeepo = 0x1AC8; // int32
    }

    namespace C_DOTA_Unit_Hero_MonkeyKing {
        constexpr uint32_t mb_MonkeyHasArcana = 0x1AC8; // bool
        constexpr uint32_t m_nTreeDisguise = 0x1ACC; // uint32
        constexpr uint32_t m_nPerchedTree = 0x1AD0; // uint32
        constexpr uint32_t m_hTreeDisguiseEnt = 0x1AD4; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_Hero_Muerta {
        constexpr uint32_t m_hDoubleShotTarget = 0x1AC8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_qStartAngle = 0x1ACC; // QAngle
    }

    namespace C_DOTA_Unit_Hero_Nevermore {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Obsidian_Destroyer {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Oracle {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_PhantomAssassin {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
        constexpr uint32_t m_nArcanaLevel = 0x1ACC; // uint32
    }

    namespace C_DOTA_Unit_Hero_PhantomLancer {
        constexpr uint32_t m_bInventoryEnabled = 0x1AC8; // bool
    }

    namespace C_DOTA_Unit_Hero_Razor {
        constexpr uint32_t m_iPoseParameterAim = 0x1AC8; // int32
        constexpr uint32_t m_iPoseParameterRange = 0x1ACC; // int32
        constexpr uint32_t m_nTargetAngle = 0x1AD0; // int32
        constexpr uint32_t m_nTargetRange = 0x1AD4; // int32
    }

    namespace C_DOTA_Unit_Hero_Rubick {
        constexpr uint32_t m_stolenAbilityColorHSV1 = 0x1AC8; // Vector
        constexpr uint32_t m_stolenAbilityColorHSV2 = 0x1AD4; // Vector
        constexpr uint32_t m_stolenAbilityFXColorHSV = 0x1AE0; // Vector
        constexpr uint32_t m_bHasInitializedAbilityColors = 0x1AEC; // bool
        constexpr uint32_t m_startAbilityColorHSV1 = 0x1AF0; // Vector
        constexpr uint32_t m_startAbilityColorHSV2 = 0x1AFC; // Vector
        constexpr uint32_t m_startAbilityFXColorHSV = 0x1B08; // Vector
        constexpr uint32_t m_currAbilityColorHSV1 = 0x1B14; // Vector
        constexpr uint32_t m_currAbilityColorHSV2 = 0x1B20; // Vector
        constexpr uint32_t m_currAbilityFXColorHSV = 0x1B2C; // Vector
        constexpr uint32_t m_flStartTime = 0x1B38; // GameTime_t
    }

    namespace C_DOTA_Unit_Hero_SkeletonKing {
        constexpr uint32_t m_nSkeletonWarriors = 0x1AC8; // int32
        constexpr uint32_t m_vecInitialHeroKillBitmask = 0x1ACC; // int32[5]
        constexpr uint32_t m_vecInGameHeroKillBitmask = 0x1AE0; // int32[5]
    }

    namespace C_DOTA_Unit_Hero_Spectre {
        constexpr uint32_t m_unCurrentArcanaKillStreak = 0x1AC8; // uint8
        constexpr uint32_t m_unBestArcanaKillStreak = 0x1AC9; // uint8
        constexpr uint32_t m_nVictimPlayerID = 0x1ACC; // PlayerID_t
        constexpr uint32_t m_bArcanaKillstreakRecordBroken = 0x1AD0; // bool
    }

    namespace C_DOTA_Unit_Hero_Techies {
        constexpr uint32_t m_bLastDeathFromSuicide = 0x1AC8; // bool
    }

    namespace C_DOTA_Unit_Hero_Terrorblade {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
        constexpr uint32_t m_szResponseCriteria = 0x1AD0; // CUtlString
        constexpr uint32_t m_nArcanaColor = 0x1AD8; // uint32
    }

    namespace C_DOTA_Unit_Hero_Tiny {
        constexpr uint32_t m_hTreeWearable = 0x1AC8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nFXIndexScepterAmbient = 0x1ACC; // ParticleIndex_t
        constexpr uint32_t m_hIllusionOwner = 0x1AD0; // CHandle< C_DOTA_BaseNPC >
        constexpr uint32_t m_bIllusionHasTree = 0x1AD4; // bool
    }

    namespace C_DOTA_Unit_Hero_Windrunner {
        constexpr uint32_t m_nTargetAngle = 0x1AC8; // int32
        constexpr uint32_t m_iPoseParameterAim = 0x1ACC; // int32
        constexpr uint32_t m_nFXDeath = 0x1AD0; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Winter_Wyvern {
        constexpr uint32_t m_nFXDeath = 0x1AC8; // ParticleIndex_t
    }

    namespace C_DOTA_Unit_Hero_Wisp {
        constexpr uint32_t m_nAmbientFXIndex = 0x1AC8; // ParticleIndex_t
        constexpr uint32_t m_nStunnedFXIndex = 0x1ACC; // ParticleIndex_t
        constexpr uint32_t m_nTalkFXIndex = 0x1AD0; // ParticleIndex_t
        constexpr uint32_t m_nIllusionFXIndex = 0x1AD4; // ParticleIndex_t
        constexpr uint32_t m_bParticleHexed = 0x1AD8; // bool
        constexpr uint32_t m_bParticleStunned = 0x1AD9; // bool
        constexpr uint32_t m_bDetermineAmbientEffect = 0x1ADA; // bool
        constexpr uint32_t m_flPrevHealth = 0x1ADC; // float32
    }

    namespace C_DOTA_Unit_LoopingSound {
        constexpr uint32_t m_nPrevLoopingSoundParity = 0x1770; // int32
        constexpr uint32_t m_pszNetworkedSoundLoop = 0x1774; // char[256]
        constexpr uint32_t m_nLoopingSoundParity = 0x1874; // int32
    }

    namespace C_DOTA_Unit_Miniboss {
        constexpr uint32_t m_nTimesSpawned = 0x1768; // int32
        constexpr uint32_t m_nTempViewer = 0x176C; // int32
        constexpr uint32_t m_hAttackingHeroes = 0x1770; // CUtlVector< CHandle< C_BaseEntity > >
    }

    namespace C_DOTA_Unit_Roshan {
        constexpr uint32_t m_iKillerTeam = 0x1768; // int32
        constexpr uint32_t m_iLastHealthPercent = 0x176C; // int32
        constexpr uint32_t m_nFXIndex = 0x1770; // ParticleIndex_t
        constexpr uint32_t m_hAttackingHeroes = 0x1778; // CUtlVector< CHandle< C_BaseEntity > >
        constexpr uint32_t m_bGoldenRoshan = 0x1790; // bool
        constexpr uint32_t m_bIsNightTimeMode = 0x1791; // bool
    }

    namespace C_DOTA_Unit_Scout {
        constexpr uint32_t m_bUnitRespawned = 0x1768; // bool
        constexpr uint32_t m_nSoleControllingPlayer = 0x176C; // PlayerID_t
        constexpr uint32_t m_flRespawnTime = 0x1770; // GameTime_t
        constexpr uint32_t m_nScoutState = 0x1774; // ScoutState_t
        constexpr uint32_t m_hScoutStateEntity = 0x1778; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_SpiritBear {
        constexpr uint32_t m_bShouldRespawn = 0x1AC8; // bool
        constexpr uint32_t m_bStolen = 0x1AC9; // bool
    }

    namespace C_DOTA_Unit_TargetDummy {
        constexpr uint32_t m_flDamageTaken = 0x1AC8; // float32
        constexpr uint32_t m_flLastHit = 0x1ACC; // float32
        constexpr uint32_t m_flStartDamageTime = 0x1AD0; // GameTime_t
        constexpr uint32_t m_flLastTargetDummyDamageTime = 0x1AD4; // GameTime_t
        constexpr uint32_t m_bIsMoving = 0x1AD8; // bool
    }

    namespace C_DOTA_Unit_Tidehunter_Anchor {
        constexpr uint32_t m_hTarget = 0x1768; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vProjectilePosition = 0x176C; // Vector
    }

    namespace C_DOTA_Unit_Twin_Gate {
        constexpr uint32_t m_hOtherPortal = 0x17D0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_Underlord_Portal {
        constexpr uint32_t m_hOtherPortal = 0x17D0; // CHandle< C_BaseEntity >
    }

    namespace C_DOTA_Unit_Undying_Zombie {
        constexpr uint32_t m_ctRespawn = 0x1770; // CountdownTimer
        constexpr uint32_t m_pTombstone = 0x1788; // C_DOTA_BaseNPC*
    }

    namespace C_DOTA_Unit_VisageFamiliar {
        constexpr uint32_t m_nFXAmbient = 0x1770; // ParticleIndex_t
    }

    namespace C_DotaQuest {
        constexpr uint32_t m_pszQuestTitle = 0x538; // char[256]
        constexpr uint32_t m_pszQuestText = 0x638; // char[256]
        constexpr uint32_t m_nQuestType = 0x738; // int32
        constexpr uint32_t m_hSubquests = 0x73C; // CHandle< C_DotaSubquestBase >[8]
        constexpr uint32_t m_bHidden = 0x75C; // bool
        constexpr uint32_t m_bCompleted = 0x75D; // bool
        constexpr uint32_t m_bWinIfCompleted = 0x75E; // bool
        constexpr uint32_t m_bLoseIfCompleted = 0x75F; // bool
        constexpr uint32_t m_pszGameEndText = 0x760; // char[256]
        constexpr uint32_t m_pnTextReplaceValuesCDotaQuest = 0x860; // int32[4]
        constexpr uint32_t m_pszTextReplaceString = 0x870; // char[64]
        constexpr uint32_t m_nTextReplaceValueVersion = 0x8B0; // int32
        constexpr uint32_t m_bWasCompleted = 0x8B4; // bool
    }

    namespace C_DotaSubquestBase {
        constexpr uint32_t m_pszSubquestText = 0x538; // char[256]
        constexpr uint32_t m_bHidden = 0x638; // bool
        constexpr uint32_t m_bCompleted = 0x639; // bool
        constexpr uint32_t m_bShowProgressBar = 0x63A; // bool
        constexpr uint32_t m_nProgressBarHueShift = 0x63C; // int32
        constexpr uint32_t m_pnTextReplaceValuesCDotaSubquestBase = 0x640; // int32[2]
        constexpr uint32_t m_pszTextReplaceString = 0x648; // char[64]
        constexpr uint32_t m_nTextReplaceValueVersion = 0x688; // int32
        constexpr uint32_t m_bWasCompleted = 0x68C; // bool
    }

    namespace C_DotaTree {
        constexpr uint32_t m_unOccluderID = 0x2C; // uint32
    }

    namespace C_DotaTutorialNetworker {
        constexpr uint32_t m_nTutorialState = 0x538; // int32
        constexpr uint32_t m_nTaskProgress = 0x53C; // int32
        constexpr uint32_t m_nTaskSteps = 0x540; // int32
        constexpr uint32_t m_nTaskSecondsRemianing = 0x544; // int32
        constexpr uint32_t m_nUIState = 0x548; // int32
        constexpr uint32_t m_nShopState = 0x54C; // int32
        constexpr uint32_t m_TargetLocation = 0x550; // Vector
        constexpr uint32_t m_TargetEntity = 0x55C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_SpeechBubbles = 0x560; // C_UtlVectorEmbeddedNetworkVar< C_SpeechBubbleInfo >
        constexpr uint32_t m_nLocationID = 0xAC0; // int32
        constexpr uint32_t m_GuideStr = 0xAC4; // char[256]
        constexpr uint32_t m_QuickBuyStr = 0xBC4; // char[256]
        constexpr uint32_t m_nPreTutorialState = 0xCC4; // int32
        constexpr uint32_t m_nPreUIState = 0xCC8; // int32
        constexpr uint32_t m_nPreShopState = 0xCCC; // int32
        constexpr uint32_t m_vecPrevTargetLocation = 0xCD0; // Vector
        constexpr uint32_t m_hPrevTargetEntity = 0xCDC; // CHandle< C_BaseEntity >
    }

    namespace C_DynamicLight {
        constexpr uint32_t m_Flags = 0x7B8; // uint8
        constexpr uint32_t m_LightStyle = 0x7B9; // uint8
        constexpr uint32_t m_Radius = 0x7BC; // float32
        constexpr uint32_t m_Exponent = 0x7C0; // int32
        constexpr uint32_t m_InnerAngle = 0x7C4; // float32
        constexpr uint32_t m_OuterAngle = 0x7C8; // float32
        constexpr uint32_t m_SpotRadius = 0x7CC; // float32
    }

    namespace C_DynamicProp {
        constexpr uint32_t m_bRandomAnimator = 0x930; // bool
        constexpr uint32_t m_flNextRandAnim = 0x934; // GameTime_t
        constexpr uint32_t m_flMinRandAnimDuration = 0x938; // float32
        constexpr uint32_t m_flMaxRandAnimDuration = 0x93C; // float32
        constexpr uint32_t m_bUseHitboxesForRenderBox = 0x940; // bool
        constexpr uint32_t m_bUseAnimGraph = 0x941; // bool
        constexpr uint32_t m_pOutputAnimBegun = 0x948; // CEntityIOOutput
        constexpr uint32_t m_pOutputAnimOver = 0x970; // CEntityIOOutput
        constexpr uint32_t m_pOutputAnimLoopCycleOver = 0x998; // CEntityIOOutput
        constexpr uint32_t m_OnAnimReachedStart = 0x9C0; // CEntityIOOutput
        constexpr uint32_t m_OnAnimReachedEnd = 0x9E8; // CEntityIOOutput
        constexpr uint32_t m_iszDefaultAnim = 0xA10; // CUtlSymbolLarge
        constexpr uint32_t m_nDefaultAnimLoopMode = 0xA18; // AnimLoopMode_t
        constexpr uint32_t m_bAnimateOnServer = 0xA1C; // bool
        constexpr uint32_t m_bRandomizeCycle = 0xA1D; // bool
        constexpr uint32_t m_bStartDisabled = 0xA1E; // bool
        constexpr uint32_t m_bScriptedMovement = 0xA1F; // bool
        constexpr uint32_t m_bFiredStartEndOutput = 0xA20; // bool
        constexpr uint32_t m_bForceNpcExclude = 0xA21; // bool
        constexpr uint32_t m_bCreateNonSolid = 0xA22; // bool
        constexpr uint32_t m_bIsOverrideProp = 0xA23; // bool
        constexpr uint32_t m_iInitialGlowState = 0xA24; // int32
        constexpr uint32_t m_nGlowRange = 0xA28; // int32
        constexpr uint32_t m_nGlowRangeMin = 0xA2C; // int32
        constexpr uint32_t m_glowColor = 0xA30; // Color
        constexpr uint32_t m_nGlowTeam = 0xA34; // int32
        constexpr uint32_t m_iCachedFrameCount = 0xA38; // int32
        constexpr uint32_t m_vecCachedRenderMins = 0xA3C; // Vector
        constexpr uint32_t m_vecCachedRenderMaxs = 0xA48; // Vector
    }

    namespace C_DynamicPropClientside {
        constexpr uint32_t m_bSetupMaterialProxy = 0xA60; // bool
        constexpr uint32_t m_bNoInterpolate = 0xA61; // bool
    }

    namespace C_EconEntity {
        constexpr uint32_t m_AttributeManager = 0x978; // CAttributeContainer
        constexpr uint32_t m_bClientside = 0xAA0; // bool
        constexpr uint32_t m_nDisableMode = 0xAA4; // EconEntityParticleDisableMode_t
        constexpr uint32_t m_bParticleSystemsCreated = 0xAA8; // bool
        constexpr uint32_t m_bForceDestroyAttachedParticlesImmediately = 0xAA9; // bool
        constexpr uint32_t m_vecAttachedParticles = 0xAB0; // CUtlVector< C_EconEntity::AttachedParticleInfo_t >
        constexpr uint32_t m_hViewmodelAttachment = 0xAC8; // CHandle< CBaseAnimatingActivity >
        constexpr uint32_t m_iOldTeam = 0xACC; // int32
        constexpr uint32_t m_bAttachmentDirty = 0xAD0; // bool
        constexpr uint32_t m_iOldStyle = 0xAD1; // style_index_t
        constexpr uint32_t m_hOldProvidee = 0xAD4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_vecAttachedModels = 0xAD8; // CUtlVector< C_EconEntity::AttachedModelData_t >
    }

    namespace C_EconEntity_AttachedModelData_t {
        constexpr uint32_t m_iModelDisplayFlags = 0x0; // int32
    }

    namespace C_EconEntity_AttachedParticleInfo_t {
        constexpr uint32_t m_nAttachedParticleIndex = 0x0; // ParticleIndex_t
        constexpr uint32_t m_customType = 0x4; // CUtlStringToken
        constexpr uint32_t m_bShouldDestroyImmediately = 0x8; // bool
    }

    namespace C_EconItemAttribute {
        constexpr uint32_t m_iAttributeDefinitionIndex = 0x30; // attrib_definition_index_t
        constexpr uint32_t m_flValue = 0x34; // float32
    }

    namespace C_EconItemView {
        constexpr uint32_t m_iItemDefinitionIndex = 0x8; // item_definition_index_t
        constexpr uint32_t m_iEntityQuality = 0xC; // int32
        constexpr uint32_t m_iEntityLevel = 0x10; // uint32
        constexpr uint32_t m_iItemID = 0x18; // itemid_t
        constexpr uint32_t m_iAccountID = 0x20; // uint32
        constexpr uint32_t m_iInventoryPosition = 0x24; // uint32
        constexpr uint32_t m_bInitialized = 0x30; // bool
        constexpr uint32_t m_nOverrideStyle = 0x31; // style_index_t
        constexpr uint32_t m_bIsStoreItem = 0x32; // bool
        constexpr uint32_t m_bIsTradeItem = 0x33; // bool
        constexpr uint32_t m_bHasComputedAttachedParticles = 0x34; // bool
        constexpr uint32_t m_bHasAttachedParticles = 0x35; // bool
        constexpr uint32_t m_iEntityQuantity = 0x38; // int32
        constexpr uint32_t m_unClientFlags = 0x3C; // uint8
        constexpr uint32_t m_unOverrideOrigin = 0x40; // eEconItemOrigin
        constexpr uint32_t m_pszGrayedOutReason = 0x50; // char*
        constexpr uint32_t m_AttributeList = 0x58; // CAttributeList
    }

    namespace C_EntityDissolve {
        constexpr uint32_t m_flStartTime = 0x7C0; // GameTime_t
        constexpr uint32_t m_flFadeInStart = 0x7C4; // float32
        constexpr uint32_t m_flFadeInLength = 0x7C8; // float32
        constexpr uint32_t m_flFadeOutModelStart = 0x7CC; // float32
        constexpr uint32_t m_flFadeOutModelLength = 0x7D0; // float32
        constexpr uint32_t m_flFadeOutStart = 0x7D4; // float32
        constexpr uint32_t m_flFadeOutLength = 0x7D8; // float32
        constexpr uint32_t m_flNextSparkTime = 0x7DC; // GameTime_t
        constexpr uint32_t m_nDissolveType = 0x7E0; // EntityDisolveType_t
        constexpr uint32_t m_vDissolverOrigin = 0x7E4; // Vector
        constexpr uint32_t m_nMagnitude = 0x7F0; // uint32
        constexpr uint32_t m_bCoreExplode = 0x7F4; // bool
        constexpr uint32_t m_bLinkedToServerEnt = 0x7F5; // bool
    }

    namespace C_EntityFlame {
        constexpr uint32_t m_hEntAttached = 0x538; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hOldAttached = 0x560; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bCheapEffect = 0x564; // bool
    }

    namespace C_EnvCombinedLightProbeVolume {
        constexpr uint32_t m_Color = 0x15A0; // Color
        constexpr uint32_t m_flBrightness = 0x15A4; // float32
        constexpr uint32_t m_hCubemapTexture = 0x15A8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_bCustomCubemapTexture = 0x15B0; // bool
        constexpr uint32_t m_hLightProbeTexture = 0x15B8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightIndicesTexture = 0x15C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightScalarsTexture = 0x15C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightShadowsTexture = 0x15D0; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_vBoxMins = 0x15D8; // Vector
        constexpr uint32_t m_vBoxMaxs = 0x15E4; // Vector
        constexpr uint32_t m_LightGroups = 0x15F0; // CUtlSymbolLarge
        constexpr uint32_t m_bMoveable = 0x15F8; // bool
        constexpr uint32_t m_nHandshake = 0x15FC; // int32
        constexpr uint32_t m_nEnvCubeMapArrayIndex = 0x1600; // int32
        constexpr uint32_t m_nPriority = 0x1604; // int32
        constexpr uint32_t m_bStartDisabled = 0x1608; // bool
        constexpr uint32_t m_flEdgeFadeDist = 0x160C; // float32
        constexpr uint32_t m_vEdgeFadeDists = 0x1610; // Vector
        constexpr uint32_t m_nLightProbeSizeX = 0x161C; // int32
        constexpr uint32_t m_nLightProbeSizeY = 0x1620; // int32
        constexpr uint32_t m_nLightProbeSizeZ = 0x1624; // int32
        constexpr uint32_t m_nLightProbeAtlasX = 0x1628; // int32
        constexpr uint32_t m_nLightProbeAtlasY = 0x162C; // int32
        constexpr uint32_t m_nLightProbeAtlasZ = 0x1630; // int32
        constexpr uint32_t m_bEnabled = 0x1649; // bool
    }

    namespace C_EnvCubemap {
        constexpr uint32_t m_hCubemapTexture = 0x5C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_bCustomCubemapTexture = 0x5C8; // bool
        constexpr uint32_t m_flInfluenceRadius = 0x5CC; // float32
        constexpr uint32_t m_vBoxProjectMins = 0x5D0; // Vector
        constexpr uint32_t m_vBoxProjectMaxs = 0x5DC; // Vector
        constexpr uint32_t m_LightGroups = 0x5E8; // CUtlSymbolLarge
        constexpr uint32_t m_bMoveable = 0x5F0; // bool
        constexpr uint32_t m_nHandshake = 0x5F4; // int32
        constexpr uint32_t m_nEnvCubeMapArrayIndex = 0x5F8; // int32
        constexpr uint32_t m_nPriority = 0x5FC; // int32
        constexpr uint32_t m_flEdgeFadeDist = 0x600; // float32
        constexpr uint32_t m_vEdgeFadeDists = 0x604; // Vector
        constexpr uint32_t m_flDiffuseScale = 0x610; // float32
        constexpr uint32_t m_bStartDisabled = 0x614; // bool
        constexpr uint32_t m_bDefaultEnvMap = 0x615; // bool
        constexpr uint32_t m_bDefaultSpecEnvMap = 0x616; // bool
        constexpr uint32_t m_bIndoorCubeMap = 0x617; // bool
        constexpr uint32_t m_bCopyDiffuseFromDefaultCubemap = 0x618; // bool
        constexpr uint32_t m_bEnabled = 0x628; // bool
    }

    namespace C_EnvCubemapFog {
        constexpr uint32_t m_flEndDistance = 0x538; // float32
        constexpr uint32_t m_flStartDistance = 0x53C; // float32
        constexpr uint32_t m_flFogFalloffExponent = 0x540; // float32
        constexpr uint32_t m_bHeightFogEnabled = 0x544; // bool
        constexpr uint32_t m_flFogHeightWidth = 0x548; // float32
        constexpr uint32_t m_flFogHeightEnd = 0x54C; // float32
        constexpr uint32_t m_flFogHeightStart = 0x550; // float32
        constexpr uint32_t m_flFogHeightExponent = 0x554; // float32
        constexpr uint32_t m_flLODBias = 0x558; // float32
        constexpr uint32_t m_bActive = 0x55C; // bool
        constexpr uint32_t m_bStartDisabled = 0x55D; // bool
        constexpr uint32_t m_flFogMaxOpacity = 0x560; // float32
        constexpr uint32_t m_nCubemapSourceType = 0x564; // int32
        constexpr uint32_t m_hSkyMaterial = 0x568; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_iszSkyEntity = 0x570; // CUtlSymbolLarge
        constexpr uint32_t m_hFogCubemapTexture = 0x578; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_bHasHeightFogEnd = 0x580; // bool
        constexpr uint32_t m_bFirstTime = 0x581; // bool
    }

    namespace C_EnvDecal {
        constexpr uint32_t m_hDecalMaterial = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_flWidth = 0x7C0; // float32
        constexpr uint32_t m_flHeight = 0x7C4; // float32
        constexpr uint32_t m_flDepth = 0x7C8; // float32
        constexpr uint32_t m_nRenderOrder = 0x7CC; // uint32
        constexpr uint32_t m_bProjectOnWorld = 0x7D0; // bool
        constexpr uint32_t m_bProjectOnCharacters = 0x7D1; // bool
        constexpr uint32_t m_bProjectOnWater = 0x7D2; // bool
        constexpr uint32_t m_flDepthSortBias = 0x7D4; // float32
    }

    namespace C_EnvDetailController {
        constexpr uint32_t m_flFadeStartDist = 0x538; // float32
        constexpr uint32_t m_flFadeEndDist = 0x53C; // float32
    }

    namespace C_EnvLightProbeVolume {
        constexpr uint32_t m_hLightProbeTexture = 0x1518; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightIndicesTexture = 0x1520; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightScalarsTexture = 0x1528; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hLightProbeDirectLightShadowsTexture = 0x1530; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_vBoxMins = 0x1538; // Vector
        constexpr uint32_t m_vBoxMaxs = 0x1544; // Vector
        constexpr uint32_t m_LightGroups = 0x1550; // CUtlSymbolLarge
        constexpr uint32_t m_bMoveable = 0x1558; // bool
        constexpr uint32_t m_nHandshake = 0x155C; // int32
        constexpr uint32_t m_nPriority = 0x1560; // int32
        constexpr uint32_t m_bStartDisabled = 0x1564; // bool
        constexpr uint32_t m_nLightProbeSizeX = 0x1568; // int32
        constexpr uint32_t m_nLightProbeSizeY = 0x156C; // int32
        constexpr uint32_t m_nLightProbeSizeZ = 0x1570; // int32
        constexpr uint32_t m_nLightProbeAtlasX = 0x1574; // int32
        constexpr uint32_t m_nLightProbeAtlasY = 0x1578; // int32
        constexpr uint32_t m_nLightProbeAtlasZ = 0x157C; // int32
        constexpr uint32_t m_bEnabled = 0x1589; // bool
    }

    namespace C_EnvParticleGlow {
        constexpr uint32_t m_flAlphaScale = 0xD68; // float32
        constexpr uint32_t m_flRadiusScale = 0xD6C; // float32
        constexpr uint32_t m_flSelfIllumScale = 0xD70; // float32
        constexpr uint32_t m_ColorTint = 0xD74; // Color
        constexpr uint32_t m_hTextureOverride = 0xD78; // CStrongHandle< InfoForResourceTypeCTextureBase >
    }

    namespace C_EnvScreenOverlay {
        constexpr uint32_t m_iszOverlayNames = 0x538; // CUtlSymbolLarge[10]
        constexpr uint32_t m_flOverlayTimes = 0x588; // float32[10]
        constexpr uint32_t m_flStartTime = 0x5B0; // GameTime_t
        constexpr uint32_t m_iDesiredOverlay = 0x5B4; // int32
        constexpr uint32_t m_bIsActive = 0x5B8; // bool
        constexpr uint32_t m_bWasActive = 0x5B9; // bool
        constexpr uint32_t m_iCachedDesiredOverlay = 0x5BC; // int32
        constexpr uint32_t m_iCurrentOverlay = 0x5C0; // int32
        constexpr uint32_t m_flCurrentOverlayTime = 0x5C4; // GameTime_t
    }

    namespace C_EnvSky {
        constexpr uint32_t m_hSkyMaterial = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_hSkyMaterialLightingOnly = 0x7C0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_bStartDisabled = 0x7C8; // bool
        constexpr uint32_t m_vTintColor = 0x7C9; // Color
        constexpr uint32_t m_vTintColorLightingOnly = 0x7CD; // Color
        constexpr uint32_t m_flBrightnessScale = 0x7D4; // float32
        constexpr uint32_t m_nFogType = 0x7D8; // int32
        constexpr uint32_t m_flFogMinStart = 0x7DC; // float32
        constexpr uint32_t m_flFogMinEnd = 0x7E0; // float32
        constexpr uint32_t m_flFogMaxStart = 0x7E4; // float32
        constexpr uint32_t m_flFogMaxEnd = 0x7E8; // float32
        constexpr uint32_t m_bEnabled = 0x7EC; // bool
    }

    namespace C_EnvVolumetricFogController {
        constexpr uint32_t m_flScattering = 0x538; // float32
        constexpr uint32_t m_flAnisotropy = 0x53C; // float32
        constexpr uint32_t m_flFadeSpeed = 0x540; // float32
        constexpr uint32_t m_flDrawDistance = 0x544; // float32
        constexpr uint32_t m_flFadeInStart = 0x548; // float32
        constexpr uint32_t m_flFadeInEnd = 0x54C; // float32
        constexpr uint32_t m_flIndirectStrength = 0x550; // float32
        constexpr uint32_t m_nIndirectTextureDimX = 0x554; // int32
        constexpr uint32_t m_nIndirectTextureDimY = 0x558; // int32
        constexpr uint32_t m_nIndirectTextureDimZ = 0x55C; // int32
        constexpr uint32_t m_vBoxMins = 0x560; // Vector
        constexpr uint32_t m_vBoxMaxs = 0x56C; // Vector
        constexpr uint32_t m_bActive = 0x578; // bool
        constexpr uint32_t m_flStartAnisoTime = 0x57C; // GameTime_t
        constexpr uint32_t m_flStartScatterTime = 0x580; // GameTime_t
        constexpr uint32_t m_flStartDrawDistanceTime = 0x584; // GameTime_t
        constexpr uint32_t m_flStartAnisotropy = 0x588; // float32
        constexpr uint32_t m_flStartScattering = 0x58C; // float32
        constexpr uint32_t m_flStartDrawDistance = 0x590; // float32
        constexpr uint32_t m_flDefaultAnisotropy = 0x594; // float32
        constexpr uint32_t m_flDefaultScattering = 0x598; // float32
        constexpr uint32_t m_flDefaultDrawDistance = 0x59C; // float32
        constexpr uint32_t m_bStartDisabled = 0x5A0; // bool
        constexpr uint32_t m_bEnableIndirect = 0x5A1; // bool
        constexpr uint32_t m_bIsMaster = 0x5A2; // bool
        constexpr uint32_t m_hFogIndirectTexture = 0x5A8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_nForceRefreshCount = 0x5B0; // int32
        constexpr uint32_t m_bFirstTime = 0x5B4; // bool
    }

    namespace C_EnvVolumetricFogVolume {
        constexpr uint32_t m_bActive = 0x538; // bool
        constexpr uint32_t m_vBoxMins = 0x53C; // Vector
        constexpr uint32_t m_vBoxMaxs = 0x548; // Vector
        constexpr uint32_t m_bStartDisabled = 0x554; // bool
        constexpr uint32_t m_flStrength = 0x558; // float32
        constexpr uint32_t m_nFalloffShape = 0x55C; // int32
        constexpr uint32_t m_flFalloffExponent = 0x560; // float32
    }

    namespace C_EnvWind {
        constexpr uint32_t m_EnvWindShared = 0x538; // C_EnvWindShared
    }

    namespace C_EnvWindClientside {
        constexpr uint32_t m_EnvWindShared = 0x538; // C_EnvWindShared
    }

    namespace C_EnvWindShared {
        constexpr uint32_t m_flStartTime = 0x8; // GameTime_t
        constexpr uint32_t m_iWindSeed = 0xC; // uint32
        constexpr uint32_t m_iMinWind = 0x10; // uint16
        constexpr uint32_t m_iMaxWind = 0x12; // uint16
        constexpr uint32_t m_windRadius = 0x14; // int32
        constexpr uint32_t m_iMinGust = 0x18; // uint16
        constexpr uint32_t m_iMaxGust = 0x1A; // uint16
        constexpr uint32_t m_flMinGustDelay = 0x1C; // float32
        constexpr uint32_t m_flMaxGustDelay = 0x20; // float32
        constexpr uint32_t m_flGustDuration = 0x24; // float32
        constexpr uint32_t m_iGustDirChange = 0x28; // uint16
        constexpr uint32_t m_location = 0x2C; // Vector
        constexpr uint32_t m_iszGustSound = 0x38; // int32
        constexpr uint32_t m_iWindDir = 0x3C; // int32
        constexpr uint32_t m_flWindSpeed = 0x40; // float32
        constexpr uint32_t m_currentWindVector = 0x44; // Vector
        constexpr uint32_t m_CurrentSwayVector = 0x50; // Vector
        constexpr uint32_t m_PrevSwayVector = 0x5C; // Vector
        constexpr uint32_t m_iInitialWindDir = 0x68; // uint16
        constexpr uint32_t m_flInitialWindSpeed = 0x6C; // float32
        constexpr uint32_t m_flVariationTime = 0x70; // GameTime_t
        constexpr uint32_t m_flSwayTime = 0x74; // GameTime_t
        constexpr uint32_t m_flSimTime = 0x78; // GameTime_t
        constexpr uint32_t m_flSwitchTime = 0x7C; // GameTime_t
        constexpr uint32_t m_flAveWindSpeed = 0x80; // float32
        constexpr uint32_t m_bGusting = 0x84; // bool
        constexpr uint32_t m_flWindAngleVariation = 0x88; // float32
        constexpr uint32_t m_flWindSpeedVariation = 0x8C; // float32
        constexpr uint32_t m_iEntIndex = 0x90; // CEntityIndex
    }

    namespace C_EnvWindShared_WindAveEvent_t {
        constexpr uint32_t m_flStartWindSpeed = 0x0; // float32
        constexpr uint32_t m_flAveWindSpeed = 0x4; // float32
    }

    namespace C_EnvWindShared_WindVariationEvent_t {
        constexpr uint32_t m_flWindAngleVariation = 0x0; // float32
        constexpr uint32_t m_flWindSpeedVariation = 0x4; // float32
    }

    namespace C_FoWRevealerEntity {
        constexpr uint32_t m_unViewerTeam = 0x538; // uint32
        constexpr uint32_t m_nVisionRange = 0x53C; // int32
    }

    namespace C_FogController {
        constexpr uint32_t m_fog = 0x538; // fogparams_t
        constexpr uint32_t m_bUseAngles = 0x5A0; // bool
        constexpr uint32_t m_iChangedVariables = 0x5A4; // int32
    }

    namespace C_FuncElectrifiedVolume {
        constexpr uint32_t m_nAmbientEffect = 0x7B8; // ParticleIndex_t
        constexpr uint32_t m_EffectName = 0x7C0; // CUtlSymbolLarge
        constexpr uint32_t m_bState = 0x7C8; // bool
    }

    namespace C_FuncTrackTrain {
        constexpr uint32_t m_nLongAxis = 0x7B8; // int32
        constexpr uint32_t m_flRadius = 0x7BC; // float32
        constexpr uint32_t m_flLineLength = 0x7C0; // float32
    }

    namespace C_GlobalLight {
        constexpr uint32_t m_WindClothForceHandle = 0xA60; // uint16
    }

    namespace C_InfoPlayerStartDota {
        constexpr uint32_t m_bDisabled = 0x538; // bool
    }

    namespace C_InfoVisibilityBox {
        constexpr uint32_t m_nMode = 0x53C; // int32
        constexpr uint32_t m_vBoxSize = 0x540; // Vector
        constexpr uint32_t m_bEnabled = 0x54C; // bool
    }

    namespace C_IngameEvent_Base {
        constexpr uint32_t m_bInitialized = 0x548; // bool
        constexpr uint32_t m_CompendiumChallengeEventID = 0x54C; // int32[24]
        constexpr uint32_t m_CompendiumChallengeSequenceID = 0x5AC; // int32[24]
        constexpr uint32_t m_CompendiumChallengeCoinReward = 0x60C; // int32[24]
        constexpr uint32_t m_CompendiumChallengeCoinSplash = 0x66C; // int32[24]
        constexpr uint32_t m_CompendiumChallengePointReward = 0x6CC; // int32[24]
        constexpr uint32_t m_CompendiumChallengeCompleted = 0x72C; // bool[24]
        constexpr uint32_t m_CompendiumChallengeFailed = 0x744; // bool[24]
        constexpr uint32_t m_CompendiumChallengeProgress = 0x75C; // int32[24]
        constexpr uint32_t m_QueryIDForProgress = 0x7BC; // int32[24]
        constexpr uint32_t m_SubChallenges = 0x820; // C_UtlVectorEmbeddedNetworkVar< CDOTASubChallengeInfo >
        constexpr uint32_t m_CompendiumCoinWager = 0x870; // int32[10]
        constexpr uint32_t m_CompendiumTokenWagerItemID = 0x898; // itemid_t[10]
        constexpr uint32_t m_CompendiumWagerTokenBonusPct = 0x8E8; // int32[10]
        constexpr uint32_t m_CompendiumCoinWagerResults = 0x910; // int32[10]
        constexpr uint32_t m_CompendiumRankWagers = 0x938; // int32[10]
        constexpr uint32_t m_flWagerTimer = 0x960; // float32
        constexpr uint32_t m_flWagerEndTime = 0x964; // GameTime_t
        constexpr uint32_t m_CompendiumChallengeInfo = 0x968; // C_UtlVectorEmbeddedNetworkVar< CDOTA_PlayerChallengeInfo >
        constexpr uint32_t m_PlayerQueryIDs = 0x1428; // C_UtlVectorEmbeddedNetworkVar< C_DOTA_CombatLogQueryProgress >
        constexpr uint32_t m_ProgressForQueryID = 0x1478; // int32[100]
        constexpr uint32_t m_GoalForQueryID = 0x1608; // int32[100]
        constexpr uint32_t m_PlayerQuestRankPreviouslyCompleted = 0x1798; // int32[10]
        constexpr uint32_t m_PlayerQuestRankCompleted = 0x17C0; // int32[10]
        constexpr uint32_t m_PlayerBountyTarget = 0x17E8; // PlayerID_t[10]
        constexpr uint32_t m_flPlayerBountyTimestamp = 0x1810; // GameTime_t[10]
        constexpr uint32_t m_PlayerBountyCount = 0x1838; // int32[10]
        constexpr uint32_t m_PlayerBountyTimestamp_Obsolete = 0x1860; // int32[24]
    }

    namespace C_LightEntity {
        constexpr uint32_t m_CLightComponent = 0x7B8; // CLightComponent*
    }

    namespace C_LocalTempEntity {
        constexpr uint32_t flags = 0x7F8; // int32
        constexpr uint32_t die = 0x7FC; // GameTime_t
        constexpr uint32_t m_flFrameMax = 0x800; // float32
        constexpr uint32_t x = 0x804; // float32
        constexpr uint32_t y = 0x808; // float32
        constexpr uint32_t fadeSpeed = 0x80C; // float32
        constexpr uint32_t bounceFactor = 0x810; // float32
        constexpr uint32_t hitSound = 0x814; // int32
        constexpr uint32_t priority = 0x818; // int32
        constexpr uint32_t tentOffset = 0x81C; // Vector
        constexpr uint32_t m_vecTempEntAngVelocity = 0x828; // QAngle
        constexpr uint32_t tempent_renderamt = 0x834; // int32
        constexpr uint32_t m_vecNormal = 0x838; // Vector
        constexpr uint32_t m_flSpriteScale = 0x844; // float32
        constexpr uint32_t m_nFlickerFrame = 0x848; // int32
        constexpr uint32_t m_flFrameRate = 0x84C; // float32
        constexpr uint32_t m_flFrame = 0x850; // float32
        constexpr uint32_t m_pszImpactEffect = 0x858; // char*
        constexpr uint32_t m_pszParticleEffect = 0x860; // char*
        constexpr uint32_t m_bParticleCollision = 0x868; // bool
        constexpr uint32_t m_iLastCollisionFrame = 0x86C; // int32
        constexpr uint32_t m_vLastCollisionOrigin = 0x870; // Vector
        constexpr uint32_t m_vecTempEntVelocity = 0x87C; // Vector
        constexpr uint32_t m_vecPrevAbsOrigin = 0x888; // Vector
        constexpr uint32_t m_vecTempEntAcceleration = 0x894; // Vector
    }

    namespace C_NextBotCombatCharacter {
        constexpr uint32_t m_shadowTimer = 0x9F8; // CountdownTimer
        constexpr uint32_t m_bInFrustum = 0xA10; // bool
        constexpr uint32_t m_nInFrustumFrame = 0xA14; // int32
        constexpr uint32_t m_flFrustumDistanceSqr = 0xA18; // float32
        constexpr uint32_t m_nLod = 0xA1C; // uint8
    }

    namespace C_ParticleSystem {
        constexpr uint32_t m_szSnapshotFileName = 0x7B8; // char[512]
        constexpr uint32_t m_bActive = 0x9B8; // bool
        constexpr uint32_t m_bFrozen = 0x9B9; // bool
        constexpr uint32_t m_flFreezeTransitionDuration = 0x9BC; // float32
        constexpr uint32_t m_nStopType = 0x9C0; // int32
        constexpr uint32_t m_bAnimateDuringGameplayPause = 0x9C4; // bool
        constexpr uint32_t m_iEffectIndex = 0x9C8; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_flStartTime = 0x9D0; // GameTime_t
        constexpr uint32_t m_flPreSimTime = 0x9D4; // float32
        constexpr uint32_t m_vServerControlPoints = 0x9D8; // Vector[4]
        constexpr uint32_t m_iServerControlPointAssignments = 0xA08; // uint8[4]
        constexpr uint32_t m_hControlPointEnts = 0xA0C; // CHandle< C_BaseEntity >[64]
        constexpr uint32_t m_bNoSave = 0xB0C; // bool
        constexpr uint32_t m_bNoFreeze = 0xB0D; // bool
        constexpr uint32_t m_bNoRamp = 0xB0E; // bool
        constexpr uint32_t m_bStartActive = 0xB0F; // bool
        constexpr uint32_t m_iszEffectName = 0xB10; // CUtlSymbolLarge
        constexpr uint32_t m_iszControlPointNames = 0xB18; // CUtlSymbolLarge[64]
        constexpr uint32_t m_nDataCP = 0xD18; // int32
        constexpr uint32_t m_vecDataCPValue = 0xD1C; // Vector
        constexpr uint32_t m_nTintCP = 0xD28; // int32
        constexpr uint32_t m_clrTint = 0xD2C; // Color
        constexpr uint32_t m_bOldActive = 0xD50; // bool
        constexpr uint32_t m_bOldFrozen = 0xD51; // bool
    }

    namespace C_PathParticleRope {
        constexpr uint32_t m_bStartActive = 0x538; // bool
        constexpr uint32_t m_flMaxSimulationTime = 0x53C; // float32
        constexpr uint32_t m_iszEffectName = 0x540; // CUtlSymbolLarge
        constexpr uint32_t m_PathNodes_Name = 0x548; // CUtlVector< CUtlSymbolLarge >
        constexpr uint32_t m_flParticleSpacing = 0x560; // float32
        constexpr uint32_t m_flSlack = 0x564; // float32
        constexpr uint32_t m_flRadius = 0x568; // float32
        constexpr uint32_t m_ColorTint = 0x56C; // Color
        constexpr uint32_t m_nEffectState = 0x570; // int32
        constexpr uint32_t m_iEffectIndex = 0x578; // CStrongHandle< InfoForResourceTypeIParticleSystemDefinition >
        constexpr uint32_t m_PathNodes_Position = 0x580; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_PathNodes_TangentIn = 0x598; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_PathNodes_TangentOut = 0x5B0; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_PathNodes_Color = 0x5C8; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_PathNodes_PinEnabled = 0x5E0; // C_NetworkUtlVectorBase< bool >
        constexpr uint32_t m_PathNodes_RadiusScale = 0x5F8; // C_NetworkUtlVectorBase< float32 >
    }

    namespace C_PhysPropClientside {
        constexpr uint32_t m_flTouchDelta = 0x930; // GameTime_t
        constexpr uint32_t m_fDeathTime = 0x934; // GameTime_t
        constexpr uint32_t m_impactEnergyScale = 0x938; // float32
        constexpr uint32_t m_inertiaScale = 0x93C; // float32
        constexpr uint32_t m_flDmgModBullet = 0x940; // float32
        constexpr uint32_t m_flDmgModClub = 0x944; // float32
        constexpr uint32_t m_flDmgModExplosive = 0x948; // float32
        constexpr uint32_t m_flDmgModFire = 0x94C; // float32
        constexpr uint32_t m_iszPhysicsDamageTableName = 0x950; // CUtlSymbolLarge
        constexpr uint32_t m_iszBasePropData = 0x958; // CUtlSymbolLarge
        constexpr uint32_t m_iInteractions = 0x960; // int32
        constexpr uint32_t m_bHasBreakPiecesOrCommands = 0x964; // bool
        constexpr uint32_t m_vecDamagePosition = 0x968; // Vector
        constexpr uint32_t m_vecDamageDirection = 0x974; // Vector
        constexpr uint32_t m_nDamageType = 0x980; // int32
    }

    namespace C_PhysicsProp {
        constexpr uint32_t m_bAwake = 0x930; // bool
    }

    namespace C_PlayerCosmeticPropClientside {
        constexpr uint32_t m_iPlayerNum = 0xA68; // int32
        constexpr uint32_t m_iCosmeticType = 0xA6C; // int32
        constexpr uint32_t m_szProxyTextureName = 0xA70; // char[260]
        constexpr uint32_t m_hProxyTexture = 0xB78; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_bGeneratedShowcaseProps = 0xC20; // bool
        constexpr uint32_t m_vecShowcaseProps = 0xC28; // CUtlVector< C_PlayerCosmeticPropClientside* >
        constexpr uint32_t m_pShowcaseItem = 0xC40; // C_EconItemView*
    }

    namespace C_PlayerVisibility {
        constexpr uint32_t m_flVisibilityStrength = 0x538; // float32
        constexpr uint32_t m_flFogDistanceMultiplier = 0x53C; // float32
        constexpr uint32_t m_flFogMaxDensityMultiplier = 0x540; // float32
        constexpr uint32_t m_flFadeTime = 0x544; // float32
        constexpr uint32_t m_bStartDisabled = 0x548; // bool
        constexpr uint32_t m_bIsEnabled = 0x549; // bool
    }

    namespace C_PointCamera {
        constexpr uint32_t m_FOV = 0x538; // float32
        constexpr uint32_t m_Resolution = 0x53C; // float32
        constexpr uint32_t m_bFogEnable = 0x540; // bool
        constexpr uint32_t m_FogColor = 0x541; // Color
        constexpr uint32_t m_flFogStart = 0x548; // float32
        constexpr uint32_t m_flFogEnd = 0x54C; // float32
        constexpr uint32_t m_flFogMaxDensity = 0x550; // float32
        constexpr uint32_t m_bActive = 0x554; // bool
        constexpr uint32_t m_bUseScreenAspectRatio = 0x555; // bool
        constexpr uint32_t m_flAspectRatio = 0x558; // float32
        constexpr uint32_t m_bNoSky = 0x55C; // bool
        constexpr uint32_t m_fBrightness = 0x560; // float32
        constexpr uint32_t m_flZFar = 0x564; // float32
        constexpr uint32_t m_flZNear = 0x568; // float32
        constexpr uint32_t m_bCanHLTVUse = 0x56C; // bool
        constexpr uint32_t m_flOverrideShadowFarZ = 0x570; // float32
        constexpr uint32_t m_bDofEnabled = 0x574; // bool
        constexpr uint32_t m_flDofNearBlurry = 0x578; // float32
        constexpr uint32_t m_flDofNearCrisp = 0x57C; // float32
        constexpr uint32_t m_flDofFarCrisp = 0x580; // float32
        constexpr uint32_t m_flDofFarBlurry = 0x584; // float32
        constexpr uint32_t m_flDofTiltToGround = 0x588; // float32
        constexpr uint32_t m_TargetFOV = 0x58C; // float32
        constexpr uint32_t m_DegreesPerSecond = 0x590; // float32
        constexpr uint32_t m_bIsOn = 0x594; // bool
        constexpr uint32_t m_pNext = 0x598; // C_PointCamera*
    }

    namespace C_PointCameraVFOV {
        constexpr uint32_t m_flVerticalFOV = 0x5A0; // float32
    }

    namespace C_PointClientUIDialog {
        constexpr uint32_t m_hActivator = 0x7E8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bStartEnabled = 0x7EC; // bool
    }

    namespace C_PointClientUIHUD {
        constexpr uint32_t m_bCheckCSSClasses = 0x7F0; // bool
        constexpr uint32_t m_bIgnoreInput = 0x978; // bool
        constexpr uint32_t m_flWidth = 0x97C; // float32
        constexpr uint32_t m_flHeight = 0x980; // float32
        constexpr uint32_t m_flDPI = 0x984; // float32
        constexpr uint32_t m_flInteractDistance = 0x988; // float32
        constexpr uint32_t m_flDepthOffset = 0x98C; // float32
        constexpr uint32_t m_unOwnerContext = 0x990; // uint32
        constexpr uint32_t m_unHorizontalAlign = 0x994; // uint32
        constexpr uint32_t m_unVerticalAlign = 0x998; // uint32
        constexpr uint32_t m_unOrientation = 0x99C; // uint32
        constexpr uint32_t m_bAllowInteractionFromAllSceneWorlds = 0x9A0; // bool
        constexpr uint32_t m_vecCSSClasses = 0x9A8; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
    }

    namespace C_PointClientUIWorldPanel {
        constexpr uint32_t m_bForceRecreateNextUpdate = 0x7F0; // bool
        constexpr uint32_t m_bMoveViewToPlayerNextThink = 0x7F1; // bool
        constexpr uint32_t m_bCheckCSSClasses = 0x7F2; // bool
        constexpr uint32_t m_anchorDeltaTransform = 0x800; // CTransform
        constexpr uint32_t m_pOffScreenIndicator = 0x9A0; // CPointOffScreenIndicatorUi*
        constexpr uint32_t m_bIgnoreInput = 0x9C8; // bool
        constexpr uint32_t m_bLit = 0x9C9; // bool
        constexpr uint32_t m_bFollowPlayerAcrossTeleport = 0x9CA; // bool
        constexpr uint32_t m_flWidth = 0x9CC; // float32
        constexpr uint32_t m_flHeight = 0x9D0; // float32
        constexpr uint32_t m_flDPI = 0x9D4; // float32
        constexpr uint32_t m_flInteractDistance = 0x9D8; // float32
        constexpr uint32_t m_flDepthOffset = 0x9DC; // float32
        constexpr uint32_t m_unOwnerContext = 0x9E0; // uint32
        constexpr uint32_t m_unHorizontalAlign = 0x9E4; // uint32
        constexpr uint32_t m_unVerticalAlign = 0x9E8; // uint32
        constexpr uint32_t m_unOrientation = 0x9EC; // uint32
        constexpr uint32_t m_bAllowInteractionFromAllSceneWorlds = 0x9F0; // bool
        constexpr uint32_t m_vecCSSClasses = 0x9F8; // C_NetworkUtlVectorBase< CUtlSymbolLarge >
        constexpr uint32_t m_bOpaque = 0xA10; // bool
        constexpr uint32_t m_bNoDepth = 0xA11; // bool
        constexpr uint32_t m_bRenderBackface = 0xA12; // bool
        constexpr uint32_t m_bUseOffScreenIndicator = 0xA13; // bool
        constexpr uint32_t m_bExcludeFromSaveGames = 0xA14; // bool
        constexpr uint32_t m_bGrabbable = 0xA15; // bool
        constexpr uint32_t m_bOnlyRenderToTexture = 0xA16; // bool
        constexpr uint32_t m_bDisableMipGen = 0xA17; // bool
        constexpr uint32_t m_nExplicitImageLayout = 0xA18; // int32
    }

    namespace C_PointClientUIWorldTextPanel {
        constexpr uint32_t m_messageText = 0xA20; // char[512]
    }

    namespace C_PointCommentaryNode {
        constexpr uint32_t m_bActive = 0x7E8; // bool
        constexpr uint32_t m_bWasActive = 0x7E9; // bool
        constexpr uint32_t m_flEndTime = 0x7EC; // GameTime_t
        constexpr uint32_t m_flStartTime = 0x7F0; // GameTime_t
        constexpr uint32_t m_flStartTimeInCommentary = 0x7F4; // float32
        constexpr uint32_t m_iszCommentaryFile = 0x7F8; // CUtlSymbolLarge
        constexpr uint32_t m_iszTitle = 0x800; // CUtlSymbolLarge
        constexpr uint32_t m_iszSpeakers = 0x808; // CUtlSymbolLarge
        constexpr uint32_t m_iNodeNumber = 0x810; // int32
        constexpr uint32_t m_iNodeNumberMax = 0x814; // int32
        constexpr uint32_t m_bListenedTo = 0x818; // bool
        constexpr uint32_t m_hViewPosition = 0x828; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bRestartAfterRestore = 0x82C; // bool
    }

    namespace C_PointValueRemapper {
        constexpr uint32_t m_bDisabled = 0x538; // bool
        constexpr uint32_t m_bDisabledOld = 0x539; // bool
        constexpr uint32_t m_bUpdateOnClient = 0x53A; // bool
        constexpr uint32_t m_nInputType = 0x53C; // ValueRemapperInputType_t
        constexpr uint32_t m_hRemapLineStart = 0x540; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hRemapLineEnd = 0x544; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flMaximumChangePerSecond = 0x548; // float32
        constexpr uint32_t m_flDisengageDistance = 0x54C; // float32
        constexpr uint32_t m_flEngageDistance = 0x550; // float32
        constexpr uint32_t m_bRequiresUseKey = 0x554; // bool
        constexpr uint32_t m_nOutputType = 0x558; // ValueRemapperOutputType_t
        constexpr uint32_t m_hOutputEntities = 0x560; // C_NetworkUtlVectorBase< CHandle< C_BaseEntity > >
        constexpr uint32_t m_nHapticsType = 0x578; // ValueRemapperHapticsType_t
        constexpr uint32_t m_nMomentumType = 0x57C; // ValueRemapperMomentumType_t
        constexpr uint32_t m_flMomentumModifier = 0x580; // float32
        constexpr uint32_t m_flSnapValue = 0x584; // float32
        constexpr uint32_t m_flCurrentMomentum = 0x588; // float32
        constexpr uint32_t m_nRatchetType = 0x58C; // ValueRemapperRatchetType_t
        constexpr uint32_t m_flRatchetOffset = 0x590; // float32
        constexpr uint32_t m_flInputOffset = 0x594; // float32
        constexpr uint32_t m_bEngaged = 0x598; // bool
        constexpr uint32_t m_bFirstUpdate = 0x599; // bool
        constexpr uint32_t m_flPreviousValue = 0x59C; // float32
        constexpr uint32_t m_flPreviousUpdateTickTime = 0x5A0; // GameTime_t
        constexpr uint32_t m_vecPreviousTestPoint = 0x5A4; // Vector
    }

    namespace C_PointWorldText {
        constexpr uint32_t m_bForceRecreateNextUpdate = 0x7C0; // bool
        constexpr uint32_t m_messageText = 0x7D0; // char[512]
        constexpr uint32_t m_FontName = 0x9D0; // char[64]
        constexpr uint32_t m_bEnabled = 0xA10; // bool
        constexpr uint32_t m_bFullbright = 0xA11; // bool
        constexpr uint32_t m_flWorldUnitsPerPx = 0xA14; // float32
        constexpr uint32_t m_flFontSize = 0xA18; // float32
        constexpr uint32_t m_flDepthOffset = 0xA1C; // float32
        constexpr uint32_t m_Color = 0xA20; // Color
        constexpr uint32_t m_nJustifyHorizontal = 0xA24; // PointWorldTextJustifyHorizontal_t
        constexpr uint32_t m_nJustifyVertical = 0xA28; // PointWorldTextJustifyVertical_t
        constexpr uint32_t m_nReorientMode = 0xA2C; // PointWorldTextReorientMode_t
    }

    namespace C_PortraitHero {
        constexpr uint32_t m_nHeroID = 0x1768; // int32
        constexpr uint32_t m_actQueuedActivity = 0x176C; // int32
        constexpr uint32_t m_szQueuedActivityModifier = 0x1770; // char[64]
    }

    namespace C_PortraitWorldLight {
        constexpr uint32_t m_flLatitude = 0xA80; // float32
        constexpr uint32_t m_flLongitude = 0xA84; // float32
        constexpr uint32_t m_flAdditionalRadius = 0xA88; // float32
        constexpr uint32_t m_flBoundsRadiusMultiplier = 0xA8C; // float32
        constexpr uint32_t m_hTarget = 0xA90; // CHandle< C_PortraitWorldUnit >
        constexpr uint32_t m_bShowGizmos = 0xA94; // bool
        constexpr uint32_t m_hitboxSetName = 0xA98; // CUtlStringToken
        constexpr uint32_t m_vPreviousCenter = 0xA9C; // Vector
        constexpr uint32_t m_vCenterVelocity = 0xAA8; // Vector
        constexpr uint32_t m_flPreviousBoundingSphereRadius = 0xAB4; // float32
        constexpr uint32_t m_flBoundingSphereRadiusChangeSpeed = 0xAB8; // float32
        constexpr uint32_t m_bPreviousValuesInitialized = 0xABC; // bool
    }

    namespace C_PortraitWorldUnit {
        constexpr uint32_t m_bSuppressIntroEffects = 0x1768; // bool
        constexpr uint32_t m_bIsAlternateLoadout = 0x1769; // bool
        constexpr uint32_t m_bSpawnBackgroundModels = 0x176A; // bool
        constexpr uint32_t m_bDeferredPortrait = 0x176B; // bool
        constexpr uint32_t m_bShowParticleAssetModifiers = 0x176C; // bool
        constexpr uint32_t m_bIgnorePortraitInfo = 0x176D; // bool
        constexpr uint32_t m_bFlyingCourier = 0x176E; // bool
        constexpr uint32_t m_bDisableDefaultModifiers = 0x176F; // bool
        constexpr uint32_t m_nEffigyStatusEffect = 0x1770; // int32
        constexpr uint32_t m_effigySequenceName = 0x1778; // CUtlSymbolLarge
        constexpr uint32_t m_flStartingAnimationCycle = 0x1780; // float32
        constexpr uint32_t m_flAnimationPlaybackSpeed = 0x1784; // float32
        constexpr uint32_t m_flRareLoadoutAnimChance = 0x1788; // float32
        constexpr uint32_t m_vecActivityModifiers = 0x1790; // CUtlVector< CUtlSymbolLarge >
        constexpr uint32_t m_environment = 0x17A8; // DOTAPortraitEnvironmentType_t
        constexpr uint32_t m_nStartupBehavior = 0x17B0; // StartupBehavior_t
        constexpr uint32_t m_cameraName = 0x1998; // CUtlSymbolLarge
        constexpr uint32_t m_nPortraitParticle = 0x19F0; // ParticleIndex_t
        constexpr uint32_t m_nCourierType = 0x19F4; // int32
    }

    namespace C_PostProcessingVolume {
        constexpr uint32_t m_hPostSettings = 0x7D0; // CStrongHandle< InfoForResourceTypeCPostProcessingResource >
        constexpr uint32_t m_flFadeDuration = 0x7D8; // float32
        constexpr uint32_t m_flMinLogExposure = 0x7DC; // float32
        constexpr uint32_t m_flMaxLogExposure = 0x7E0; // float32
        constexpr uint32_t m_flMinExposure = 0x7E4; // float32
        constexpr uint32_t m_flMaxExposure = 0x7E8; // float32
        constexpr uint32_t m_flExposureCompensation = 0x7EC; // float32
        constexpr uint32_t m_flExposureFadeSpeedUp = 0x7F0; // float32
        constexpr uint32_t m_flExposureFadeSpeedDown = 0x7F4; // float32
        constexpr uint32_t m_flTonemapEVSmoothingRange = 0x7F8; // float32
        constexpr uint32_t m_bMaster = 0x7FC; // bool
        constexpr uint32_t m_bExposureControl = 0x7FD; // bool
    }

    namespace C_RagdollManager {
        constexpr uint32_t m_iCurrentMaxRagdollCount = 0x538; // int8
    }

    namespace C_RagdollProp {
        constexpr uint32_t m_ragPos = 0x980; // C_NetworkUtlVectorBase< Vector >
        constexpr uint32_t m_ragAngles = 0x998; // C_NetworkUtlVectorBase< QAngle >
        constexpr uint32_t m_flBlendWeight = 0x9B0; // float32
        constexpr uint32_t m_hRagdollSource = 0x9B4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iEyeAttachment = 0x9B8; // AttachmentHandle_t
        constexpr uint32_t m_flBlendWeightCurrent = 0x9BC; // float32
        constexpr uint32_t m_parentPhysicsBoneIndices = 0x9C0; // CUtlVector< int32 >
        constexpr uint32_t m_worldSpaceBoneComputationOrder = 0x9D8; // CUtlVector< int32 >
    }

    namespace C_RagdollPropAttached {
        constexpr uint32_t m_boneIndexAttached = 0x9F0; // uint32
        constexpr uint32_t m_ragdollAttachedObjectIndex = 0x9F4; // uint32
        constexpr uint32_t m_attachmentPointBoneSpace = 0x9F8; // Vector
        constexpr uint32_t m_attachmentPointRagdollSpace = 0xA04; // Vector
        constexpr uint32_t m_vecOffset = 0xA10; // Vector
        constexpr uint32_t m_parentTime = 0xA1C; // float32
        constexpr uint32_t m_bHasParent = 0xA20; // bool
    }

    namespace C_RopeKeyframe {
        constexpr uint32_t m_LinksTouchingSomething = 0x7C0; // CBitVec< 10 >
        constexpr uint32_t m_nLinksTouchingSomething = 0x7C4; // int32
        constexpr uint32_t m_bApplyWind = 0x7C8; // bool
        constexpr uint32_t m_fPrevLockedPoints = 0x7CC; // int32
        constexpr uint32_t m_iForcePointMoveCounter = 0x7D0; // int32
        constexpr uint32_t m_bPrevEndPointPos = 0x7D4; // bool[2]
        constexpr uint32_t m_vPrevEndPointPos = 0x7D8; // Vector[2]
        constexpr uint32_t m_flCurScroll = 0x7F0; // float32
        constexpr uint32_t m_flScrollSpeed = 0x7F4; // float32
        constexpr uint32_t m_RopeFlags = 0x7F8; // uint16
        constexpr uint32_t m_iRopeMaterialModelIndex = 0x800; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_LightValues = 0xA78; // Vector[10]
        constexpr uint32_t m_nSegments = 0xAF0; // uint8
        constexpr uint32_t m_hStartPoint = 0xAF4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hEndPoint = 0xAF8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iStartAttachment = 0xAFC; // AttachmentHandle_t
        constexpr uint32_t m_iEndAttachment = 0xAFD; // AttachmentHandle_t
        constexpr uint32_t m_Subdiv = 0xAFE; // uint8
        constexpr uint32_t m_RopeLength = 0xB00; // int16
        constexpr uint32_t m_Slack = 0xB02; // int16
        constexpr uint32_t m_TextureScale = 0xB04; // float32
        constexpr uint32_t m_fLockedPoints = 0xB08; // uint8
        constexpr uint32_t m_nChangeCount = 0xB09; // uint8
        constexpr uint32_t m_Width = 0xB0C; // float32
        constexpr uint32_t m_PhysicsDelegate = 0xB10; // C_RopeKeyframe::CPhysicsDelegate
        constexpr uint32_t m_hMaterial = 0xB20; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_TextureHeight = 0xB28; // int32
        constexpr uint32_t m_vecImpulse = 0xB2C; // Vector
        constexpr uint32_t m_vecPreviousImpulse = 0xB38; // Vector
        constexpr uint32_t m_flCurrentGustTimer = 0xB44; // float32
        constexpr uint32_t m_flCurrentGustLifetime = 0xB48; // float32
        constexpr uint32_t m_flTimeToNextGust = 0xB4C; // float32
        constexpr uint32_t m_vWindDir = 0xB50; // Vector
        constexpr uint32_t m_vColorMod = 0xB5C; // Vector
        constexpr uint32_t m_vCachedEndPointAttachmentPos = 0xB68; // Vector[2]
        constexpr uint32_t m_vCachedEndPointAttachmentAngle = 0xB80; // QAngle[2]
        constexpr uint32_t m_bConstrainBetweenEndpoints = 0xB98; // bool
        constexpr uint32_t m_bEndPointAttachmentPositionsDirty = 0x0; // bitfield:1
        constexpr uint32_t m_bEndPointAttachmentAnglesDirty = 0x0; // bitfield:1
        constexpr uint32_t m_bNewDataThisFrame = 0x0; // bitfield:1
        constexpr uint32_t m_bPhysicsInitted = 0x0; // bitfield:1
    }

    namespace C_RopeKeyframe_CPhysicsDelegate {
        constexpr uint32_t m_pKeyframe = 0x8; // C_RopeKeyframe*
    }

    namespace C_SceneEntity {
        constexpr uint32_t m_bIsPlayingBack = 0x540; // bool
        constexpr uint32_t m_bPaused = 0x541; // bool
        constexpr uint32_t m_bMultiplayer = 0x542; // bool
        constexpr uint32_t m_bAutogenerated = 0x543; // bool
        constexpr uint32_t m_flForceClientTime = 0x544; // float32
        constexpr uint32_t m_nSceneStringIndex = 0x548; // uint16
        constexpr uint32_t m_bClientOnly = 0x54A; // bool
        constexpr uint32_t m_hOwner = 0x54C; // CHandle< C_BaseFlex >
        constexpr uint32_t m_hActorList = 0x550; // C_NetworkUtlVectorBase< CHandle< C_BaseFlex > >
        constexpr uint32_t m_bWasPlaying = 0x568; // bool
        constexpr uint32_t m_QueuedEvents = 0x578; // CUtlVector< C_SceneEntity::QueuedEvents_t >
        constexpr uint32_t m_flCurrentTime = 0x590; // float32
    }

    namespace C_SceneEntity_QueuedEvents_t {
        constexpr uint32_t starttime = 0x0; // float32
    }

    namespace C_SkyCamera {
        constexpr uint32_t m_skyboxData = 0x538; // sky3dparams_t
        constexpr uint32_t m_skyboxSlotToken = 0x5C8; // CUtlStringToken
        constexpr uint32_t m_bUseAngles = 0x5CC; // bool
        constexpr uint32_t m_pNext = 0x5D0; // C_SkyCamera*
    }

    namespace C_SoundAreaEntityBase {
        constexpr uint32_t m_bDisabled = 0x538; // bool
        constexpr uint32_t m_bWasEnabled = 0x540; // bool
        constexpr uint32_t m_iszSoundAreaType = 0x548; // CUtlSymbolLarge
        constexpr uint32_t m_vPos = 0x550; // Vector
    }

    namespace C_SoundAreaEntityOrientedBox {
        constexpr uint32_t m_vMin = 0x560; // Vector
        constexpr uint32_t m_vMax = 0x56C; // Vector
    }

    namespace C_SoundAreaEntitySphere {
        constexpr uint32_t m_flRadius = 0x560; // float32
    }

    namespace C_SoundOpvarSetPointBase {
        constexpr uint32_t m_iszStackName = 0x538; // CUtlSymbolLarge
        constexpr uint32_t m_iszOperatorName = 0x540; // CUtlSymbolLarge
        constexpr uint32_t m_iszOpvarName = 0x548; // CUtlSymbolLarge
        constexpr uint32_t m_iOpvarIndex = 0x550; // int32
        constexpr uint32_t m_bUseAutoCompare = 0x554; // bool
    }

    namespace C_SpeechBubbleInfo {
        constexpr uint32_t m_LocalizationStr = 0x30; // char[256]
        constexpr uint32_t m_hNPC = 0x130; // CHandle< C_BaseEntity >
        constexpr uint32_t m_flStartTime = 0x134; // GameTime_t
        constexpr uint32_t m_flDuration = 0x138; // float32
        constexpr uint32_t m_unOffsetX = 0x13C; // uint32
        constexpr uint32_t m_unOffsetY = 0x140; // uint32
        constexpr uint32_t m_unCount = 0x144; // uint16
    }

    namespace C_SpeechBubbleManager {
        constexpr uint32_t m_SpeechBubbles = 0x538; // C_UtlVectorEmbeddedNetworkVar< C_SpeechBubbleInfo >
        constexpr uint32_t m_nLastCountInQueue = 0x12D8; // uint32[4]
    }

    namespace C_Sprite {
        constexpr uint32_t m_hSpriteMaterial = 0x7D0; // CStrongHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_hAttachedToEntity = 0x7D8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_nAttachment = 0x7DC; // AttachmentHandle_t
        constexpr uint32_t m_flSpriteFramerate = 0x7E0; // float32
        constexpr uint32_t m_flFrame = 0x7E4; // float32
        constexpr uint32_t m_flDieTime = 0x7E8; // GameTime_t
        constexpr uint32_t m_nBrightness = 0x7F8; // uint32
        constexpr uint32_t m_flBrightnessDuration = 0x7FC; // float32
        constexpr uint32_t m_flSpriteScale = 0x800; // float32
        constexpr uint32_t m_flScaleDuration = 0x804; // float32
        constexpr uint32_t m_bWorldSpaceScale = 0x808; // bool
        constexpr uint32_t m_flGlowProxySize = 0x80C; // float32
        constexpr uint32_t m_flHDRColorScale = 0x810; // float32
        constexpr uint32_t m_flLastTime = 0x814; // GameTime_t
        constexpr uint32_t m_flMaxFrame = 0x818; // float32
        constexpr uint32_t m_flStartScale = 0x81C; // float32
        constexpr uint32_t m_flDestScale = 0x820; // float32
        constexpr uint32_t m_flScaleTimeStart = 0x824; // GameTime_t
        constexpr uint32_t m_nStartBrightness = 0x828; // int32
        constexpr uint32_t m_nDestBrightness = 0x82C; // int32
        constexpr uint32_t m_flBrightnessTimeStart = 0x830; // GameTime_t
        constexpr uint32_t m_hOldSpriteMaterial = 0x838; // CWeakHandle< InfoForResourceTypeIMaterial2 >
        constexpr uint32_t m_nSpriteWidth = 0x8E0; // int32
        constexpr uint32_t m_nSpriteHeight = 0x8E4; // int32
    }

    namespace C_Team {
        constexpr uint32_t m_aPlayerControllers = 0x538; // C_NetworkUtlVectorBase< CHandle< CBasePlayerController > >
        constexpr uint32_t m_aPlayers = 0x550; // C_NetworkUtlVectorBase< CHandle< C_BasePlayerPawn > >
        constexpr uint32_t m_iScore = 0x568; // int32
        constexpr uint32_t m_szTeamname = 0x56C; // char[129]
    }

    namespace C_TextureBasedAnimatable {
        constexpr uint32_t m_bLoop = 0x7B8; // bool
        constexpr uint32_t m_flFPS = 0x7BC; // float32
        constexpr uint32_t m_hPositionKeys = 0x7C0; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hRotationKeys = 0x7C8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_vAnimationBoundsMin = 0x7D0; // Vector
        constexpr uint32_t m_vAnimationBoundsMax = 0x7DC; // Vector
        constexpr uint32_t m_flStartTime = 0x7E8; // float32
        constexpr uint32_t m_flStartFrame = 0x7EC; // float32
    }

    namespace C_TonemapController2 {
        constexpr uint32_t m_flAutoExposureMin = 0x538; // float32
        constexpr uint32_t m_flAutoExposureMax = 0x53C; // float32
        constexpr uint32_t m_flTonemapPercentTarget = 0x540; // float32
        constexpr uint32_t m_flTonemapPercentBrightPixels = 0x544; // float32
        constexpr uint32_t m_flTonemapMinAvgLum = 0x548; // float32
        constexpr uint32_t m_flExposureAdaptationSpeedUp = 0x54C; // float32
        constexpr uint32_t m_flExposureAdaptationSpeedDown = 0x550; // float32
        constexpr uint32_t m_flTonemapEVSmoothingRange = 0x554; // float32
    }

    namespace C_World {
        constexpr uint32_t m_skyBoxFaces = 0x7B8; // CStrongHandle< InfoForResourceTypeIMaterial2 >[6]
        constexpr uint32_t m_hHeightFogTexture = 0x7E8; // CStrongHandle< InfoForResourceTypeCTextureBase >
        constexpr uint32_t m_hHeightFogMaskTexture = 0x7F0; // CStrongHandle< InfoForResourceTypeCTextureBase >
    }

    namespace C_fogplayerparams_t {
        constexpr uint32_t m_hCtrl = 0x8; // CHandle< C_FogController >
        constexpr uint32_t m_flTransitionTime = 0xC; // float32
        constexpr uint32_t m_OldColor = 0x10; // Color
        constexpr uint32_t m_flOldStart = 0x14; // float32
        constexpr uint32_t m_flOldEnd = 0x18; // float32
        constexpr uint32_t m_flOldMaxDensity = 0x1C; // float32
        constexpr uint32_t m_flOldHDRColorScale = 0x20; // float32
        constexpr uint32_t m_flOldFarZ = 0x24; // float32
        constexpr uint32_t m_NewColor = 0x28; // Color
        constexpr uint32_t m_flNewStart = 0x2C; // float32
        constexpr uint32_t m_flNewEnd = 0x30; // float32
        constexpr uint32_t m_flNewMaxDensity = 0x34; // float32
        constexpr uint32_t m_flNewHDRColorScale = 0x38; // float32
        constexpr uint32_t m_flNewFarZ = 0x3C; // float32
    }

    namespace CandyShopCandyType_t {
        constexpr uint32_t m_unCandyTypeID = 0x0; // CandyShopCandyTypeID_t
        constexpr uint32_t m_sLocName = 0x8; // CUtlString
        constexpr uint32_t m_sImage = 0x10; // CPanoramaImageName
    }

    namespace CandyShopRewardOption_t {
        constexpr uint32_t m_unRewardOptionID = 0x0; // CandyShopRewardOptionID_t
        constexpr uint32_t m_sRewardClass = 0x8; // CUtlString
        constexpr uint32_t m_unRewardOptionMaxCount = 0x10; // uint32
        constexpr uint32_t m_unWeight = 0x14; // uint32
        constexpr uint32_t m_unCandyPrice = 0x18; // uint32
        constexpr uint32_t m_eOptionType = 0x1C; // ECandyShopRewardOptionType
        constexpr uint32_t m_unSingleItemDef = 0x20; // item_definition_index_t
        constexpr uint32_t m_sLootList = 0x28; // CUtlString
        constexpr uint32_t m_eEvent = 0x30; // EEvent
        constexpr uint32_t m_unEventActionID = 0x34; // uint32
        constexpr uint32_t m_unEventPoints = 0x38; // uint32
    }

    namespace CandyShopRewardSlot_t {
        constexpr uint32_t m_sSlotClass = 0x0; // CUtlString
        constexpr uint32_t m_vecSlotRewardOptions = 0x8; // CUtlVector< CandyShopRewardOption_t >
    }

    namespace ClientQuickBuyItemState {
        constexpr uint32_t nItemType = 0x30; // int16
        constexpr uint32_t bPurchasable = 0x32; // bool
    }

    namespace CountdownTimer {
        constexpr uint32_t m_duration = 0x8; // float32
        constexpr uint32_t m_timestamp = 0xC; // GameTime_t
        constexpr uint32_t m_timescale = 0x10; // float32
        constexpr uint32_t m_nWorldGroupId = 0x14; // WorldGroupId_t
    }

    namespace DOTATeleportInfo_t {
        constexpr uint32_t m_flTime = 0x30; // GameTime_t
        constexpr uint32_t m_vPosition = 0x34; // Vector2D
        constexpr uint32_t m_bIsOutpost = 0x3C; // bool
    }

    namespace DOTAThreatLevelInfo_t {
        constexpr uint32_t m_flKillability = 0x30; // float32
        constexpr uint32_t m_nEntIndex = 0x34; // int32
    }

    namespace DOTA_AssassinMinigameNetworkState {
        constexpr uint32_t nAssassinState = 0x8; // uint16
        constexpr uint32_t nVictimHeroID = 0xA; // uint16
    }

    namespace DataTeamPlayer_t {
        constexpr uint32_t m_iReliableGold = 0x30; // int32
        constexpr uint32_t m_iUnreliableGold = 0x34; // int32
        constexpr uint32_t m_iStartingPosition = 0x38; // int32
        constexpr uint32_t m_iTotalEarnedGold = 0x3C; // int32
        constexpr uint32_t m_iTotalEarnedXP = 0x40; // int32
        constexpr uint32_t m_iSharedGold = 0x44; // int32
        constexpr uint32_t m_iHeroKillGold = 0x48; // int32
        constexpr uint32_t m_iCreepKillGold = 0x4C; // int32
        constexpr uint32_t m_iNeutralKillGold = 0x50; // int32
        constexpr uint32_t m_iCourierGold = 0x54; // int32
        constexpr uint32_t m_iBountyGold = 0x58; // int32
        constexpr uint32_t m_iRoshanGold = 0x5C; // int32
        constexpr uint32_t m_iBuildingGold = 0x60; // int32
        constexpr uint32_t m_iOtherGold = 0x64; // int32
        constexpr uint32_t m_iComebackGold = 0x68; // int32
        constexpr uint32_t m_iExperimentalGold = 0x6C; // int32
        constexpr uint32_t m_iExperimental2Gold = 0x70; // int32
        constexpr uint32_t m_iCreepDenyGold = 0x74; // int32
        constexpr uint32_t m_iTPScrollsPurchased = 0x78; // int32
        constexpr uint32_t m_flCustomStats = 0x7C; // float32
        constexpr uint32_t m_iIncomeGold = 0x80; // int32
        constexpr uint32_t m_iWardKillGold = 0x84; // int32
        constexpr uint32_t m_iAbilityGold = 0x88; // int32
        constexpr uint32_t m_iNetWorth = 0x8C; // int32
        constexpr uint32_t m_iDenyCount = 0x90; // int32
        constexpr uint32_t m_iLastHitCount = 0x94; // int32
        constexpr uint32_t m_iLastHitStreak = 0x98; // int32
        constexpr uint32_t m_iLastHitMultikill = 0x9C; // int32
        constexpr uint32_t m_iNearbyCreepDeathCount = 0xA0; // int32
        constexpr uint32_t m_iClaimedDenyCount = 0xA4; // int32
        constexpr uint32_t m_iClaimedMissCount = 0xA8; // int32
        constexpr uint32_t m_iMissCount = 0xAC; // int32
        constexpr uint32_t m_nPossibleHeroSelection = 0xB0; // int32
        constexpr uint32_t m_iMetaLevel = 0xB4; // uint16
        constexpr uint32_t m_iMetaExperience = 0xB6; // uint16
        constexpr uint32_t m_iMetaExperienceAwarded = 0xB8; // uint16
        constexpr uint32_t m_flBuybackCooldownTime = 0xBC; // GameTime_t
        constexpr uint32_t m_flBuybackGoldLimitTime = 0xC0; // GameTime_t
        constexpr uint32_t m_flBuybackCostTime = 0xC4; // float32
        constexpr uint32_t m_flCustomBuybackCooldown = 0xC8; // float32
        constexpr uint32_t m_fStuns = 0xCC; // float32
        constexpr uint32_t m_fHealing = 0xD0; // float32
        constexpr uint32_t m_fRegeneratedHealth = 0xD4; // float32
        constexpr uint32_t m_iTowerKills = 0xD8; // int32
        constexpr uint32_t m_iRoshanKills = 0xDC; // int32
        constexpr uint32_t m_hCameraTarget = 0xE0; // CHandle< C_BaseEntity >
        constexpr uint32_t m_hOverrideSelectionEntity = 0xE4; // CHandle< C_BaseEntity >
        constexpr uint32_t m_iObserverWardsPlaced = 0xE8; // int32
        constexpr uint32_t m_iSentryWardsPlaced = 0xEC; // int32
        constexpr uint32_t m_iCreepsStacked = 0xF0; // int32
        constexpr uint32_t m_iCampsStacked = 0xF4; // int32
        constexpr uint32_t m_iRunePickups = 0xF8; // int32
        constexpr uint32_t m_iGoldSpentOnSupport = 0xFC; // int32
        constexpr uint32_t m_iHeroDamage = 0x100; // int32
        constexpr uint32_t m_iTowerDamage = 0x104; // int32
        constexpr uint32_t m_iWardsPurchased = 0x108; // int32
        constexpr uint32_t m_iWardsDestroyed = 0x10C; // int32
        constexpr uint32_t m_PreGameInventory = 0x110; // C_DOTA_UnitInventory
        constexpr uint32_t m_nKillsPerOpposingTeamMember = 0x1C8; // int32[24]
        constexpr uint32_t m_iSuggestedAbilities = 0x228; // AbilityID_t[5]
        constexpr uint32_t m_fSuggestedAbilityWeights = 0x23C; // float32[5]
        constexpr uint32_t m_iSuggestedPregameItems = 0x250; // AbilityID_t[15]
        constexpr uint32_t m_iSuggestedItemSequences = 0x28C; // AbilityID_t[30]
        constexpr uint32_t m_iSuggestedWeightedItems = 0x304; // WeightedAbilitySuggestion_t[15]
        constexpr uint32_t m_iSuggestedTopNItems = 0x37C; // WeightedAbilitySuggestion_t[3]
        constexpr uint32_t m_iSuggestedNeutralItems = 0x394; // WeightedAbilitySuggestion_t[25]
        constexpr uint32_t m_iSuggestedHeroes = 0x45C; // uint32[10]
        constexpr uint32_t m_flSuggestedHeroesWeights = 0x484; // float32[10]
        constexpr uint32_t m_iDamageByTypeReceivedPreReduction = 0x4AC; // int32[3]
        constexpr uint32_t m_iDamageByTypeReceivedPostReduction = 0x4B8; // int32[3]
        constexpr uint32_t m_iOutgoingDamageByTypePreReduction = 0x4C4; // int32[3]
        constexpr uint32_t m_iOutgoingDamageByTypePostReduction = 0x4D0; // int32[3]
        constexpr uint32_t m_iCommandsIssued = 0x4DC; // int32
        constexpr uint32_t m_iGoldSpentOnConsumables = 0x4E0; // int32
        constexpr uint32_t m_iGoldSpentOnItems = 0x4E4; // int32
        constexpr uint32_t m_iGoldSpentOnBuybacks = 0x4E8; // int32
        constexpr uint32_t m_iGoldLostToDeath = 0x4EC; // int32
        constexpr uint32_t m_bIsNewPlayer = 0x4F0; // bool
        constexpr uint32_t m_bIsGuidePlayer = 0x4F1; // bool
        constexpr uint32_t m_iPlayerSteamID = 0x4F8; // uint64
        constexpr uint32_t m_iSmokesUsed = 0x500; // int32
        constexpr uint32_t m_iNeutralTokensFound = 0x504; // int32
        constexpr uint32_t m_iWatchersTaken = 0x508; // int32
        constexpr uint32_t m_iLotusesTaken = 0x50C; // int32
        constexpr uint32_t m_iTormentorKills = 0x510; // int32
        constexpr uint32_t m_iCourierKills = 0x514; // int32
    }

    namespace EngineCountdownTimer {
        constexpr uint32_t m_duration = 0x8; // float32
        constexpr uint32_t m_timestamp = 0xC; // float32
        constexpr uint32_t m_timescale = 0x10; // float32
    }

    namespace EntityRenderAttribute_t {
        constexpr uint32_t m_ID = 0x30; // CUtlStringToken
        constexpr uint32_t m_Values = 0x34; // Vector4D
    }

    namespace FowBlocker_t {
        constexpr uint32_t m_flMinX = 0x30; // float32
        constexpr uint32_t m_flMaxX = 0x34; // float32
        constexpr uint32_t m_flMinY = 0x38; // float32
        constexpr uint32_t m_flMaxY = 0x3C; // float32
        constexpr uint32_t m_fowBlockerShape = 0x40; // FowBlockerShape_t
        constexpr uint32_t m_bClearRegion = 0x44; // bool
    }

    namespace InGamePredictionData_t {
        constexpr uint32_t m_nID = 0x28; // uint32
        constexpr uint32_t m_nValue = 0x2C; // uint32
        constexpr uint32_t m_nRawValue = 0x30; // uint32
        constexpr uint32_t m_nValueState = 0x34; // uint8
        constexpr uint32_t m_bValueIsMask = 0x35; // bool
    }

    namespace IntervalTimer {
        constexpr uint32_t m_timestamp = 0x8; // GameTime_t
        constexpr uint32_t m_nWorldGroupId = 0xC; // WorldGroupId_t
    }

    namespace Modifier_Pluck_Famango_Channel {
        constexpr uint32_t famango_rate = 0x1318; // float32
        constexpr uint32_t m_hMangoTree = 0x131C; // CHandle< C_BaseEntity >
    }

    namespace NagaSiren_SongOfTheSiren_Healing {
        constexpr uint32_t heal_pct = 0x1318; // int32
    }

    namespace NeutralCampStackPullAlarm_t {
        constexpr uint32_t m_vPosition = 0x0; // Vector
        constexpr uint32_t m_flPullAlarmTime = 0xC; // float32
        constexpr uint32_t m_flStackAlarmTime = 0x10; // float32
        constexpr uint32_t m_nCampIndex = 0x14; // int32
        constexpr uint32_t m_nAlarmTypes = 0x18; // int32
    }

    namespace PhysicsRagdollPose_t {
        constexpr uint32_t __m_pChainEntity = 0x8; // CNetworkVarChainer
        constexpr uint32_t m_Transforms = 0x30; // C_NetworkUtlVectorBase< CTransform >
        constexpr uint32_t m_hOwner = 0x48; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bDirty = 0x68; // bool
    }

    namespace PingConfirmationState_t {
        constexpr uint32_t m_nInitiatingPlayerID = 0x30; // int32
        constexpr uint32_t m_PingWheelMessageID = 0x34; // int32
        constexpr uint32_t m_flActiveUntilTime = 0x38; // float32
        constexpr uint32_t m_vLocation = 0x3C; // Vector2D
        constexpr uint32_t m_nPingedEntityEntIndex = 0x44; // int32
        constexpr uint32_t m_nID = 0x48; // int32
        constexpr uint32_t m_IconType = 0x4C; // PingConfirmationIconType
        constexpr uint32_t m_nAgreeState = 0x50; // int32[24]
    }

    namespace PlayerResourceBroadcasterData_t {
        constexpr uint32_t m_iszBroadcasterChannelDescription = 0x30; // CUtlSymbolLarge
        constexpr uint32_t m_iszBroadcasterChannelCountryCode = 0x38; // CUtlSymbolLarge
        constexpr uint32_t m_iszBroadcasterChannelLanguageCode = 0x40; // CUtlSymbolLarge
    }

    namespace PlayerResourcePlayerData_t {
        constexpr uint32_t m_bIsValid = 0x30; // bool
        constexpr uint32_t m_iszPlayerName = 0x38; // CUtlSymbolLarge
        constexpr uint32_t m_iPlayerTeam = 0x40; // int32
        constexpr uint32_t m_bFullyJoinedServer = 0x44; // bool
        constexpr uint32_t m_bFakeClient = 0x45; // bool
        constexpr uint32_t m_bIsBroadcaster = 0x46; // bool
        constexpr uint32_t m_iBroadcasterChannel = 0x48; // uint32
        constexpr uint32_t m_iBroadcasterChannelSlot = 0x4C; // uint32
        constexpr uint32_t m_bIsBroadcasterChannelCameraman = 0x50; // bool
        constexpr uint32_t m_iConnectionState = 0x54; // int32
        constexpr uint32_t m_iPlayerSteamID = 0x58; // uint64
        constexpr uint32_t m_eCoachTeam = 0x60; // DOTATeam_t
        constexpr uint32_t m_vecPrivateCoachPlayerIDs = 0x68; // C_NetworkUtlVectorBase< PlayerID_t >
        constexpr uint32_t m_unCoachRating = 0x80; // uint32
        constexpr uint32_t m_eLiveSpectatorTeam = 0x84; // DOTATeam_t
        constexpr uint32_t m_nLiveSpectatorSpectatedHeroIndex = 0x88; // int32
        constexpr uint32_t m_bIsPlusSubscriber = 0x8C; // bool
        constexpr uint32_t m_bWasMVPLastGame = 0x8D; // bool
        constexpr uint32_t m_nCavernCrawlMapVariant = 0x8E; // CavernCrawlMapVariant_t
        constexpr uint32_t m_eAccoladeType = 0x90; // int32[3]
        constexpr uint32_t m_unAccoladeData = 0xA0; // uint64[3]
        constexpr uint32_t m_iRankTier = 0xB8; // int32
        constexpr uint32_t m_iTitle = 0xBC; // int32
        constexpr uint32_t m_unFavTeamPacked = 0xC0; // uint64
        constexpr uint32_t m_nPlayerSlot = 0xC8; // CPlayerSlot
        constexpr uint32_t m_bIsBot = 0xCC; // bool
        constexpr uint32_t m_bHasNeutralTier = 0xCD; // bool[5]
        constexpr uint32_t m_bHasRedeemedNeutralTier = 0xD2; // bool[5]
        constexpr uint32_t m_nCommLevel = 0xD8; // int32
        constexpr uint32_t m_nBehaviorLevel = 0xDC; // int32
        constexpr uint32_t m_flLastCommsTime = 0xE0; // float32
    }

    namespace PlayerResourcePlayerEventData_t {
        constexpr uint32_t m_iEventID = 0x30; // uint32
        constexpr uint32_t m_iEventPoints = 0x34; // uint32
        constexpr uint32_t m_iEventPremiumPoints = 0x38; // uint32
        constexpr uint32_t m_iEventEffectsMask = 0x3C; // uint32
        constexpr uint32_t m_iEventRanks = 0x40; // uint16
        constexpr uint32_t m_bIsEventOwned = 0x42; // bool
        constexpr uint32_t m_iFavoriteTeam = 0x44; // uint32
        constexpr uint32_t m_iFavoriteTeamQuality = 0x48; // uint16
        constexpr uint32_t m_iAvailableSalutes = 0x4A; // uint8
        constexpr uint32_t m_iSaluteAmountIndex = 0x4B; // uint8
        constexpr uint32_t m_iEventWagerStreak = 0x4C; // uint32
        constexpr uint32_t m_iEventTeleportFXLevel = 0x50; // uint8
        constexpr uint32_t m_nCandyPointsReason = 0x54; // int32[5]
        constexpr uint32_t m_vecPeriodicResources = 0x68; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerPeriodicResourceData_t >
        constexpr uint32_t m_iObsoleteSaluteAmounts = 0xB8; // uint8
        constexpr uint32_t m_iObsoleteEventArcanaPeriodicResourceRemaining = 0xBC; // uint32
        constexpr uint32_t m_iObsoleteEventArcanaPeriodicResourceMax = 0xC0; // uint32
        constexpr uint32_t m_iObsoleteEventWagerTokensRemaining = 0xC4; // uint32
        constexpr uint32_t m_iObsoleteEventWagerTokensMax = 0xC8; // uint32
        constexpr uint32_t m_iObsoleteEventBountiesRemaining = 0xCC; // uint32
        constexpr uint32_t m_iObsoleteRankWagersAvailable = 0xD0; // uint32
        constexpr uint32_t m_iObsoleteRankWagersMax = 0xD4; // uint32
        constexpr uint32_t m_iObsoleteEventPointAdjustmentsRemaining = 0xD8; // uint32
    }

    namespace PlayerResourcePlayerPeriodicResourceData_t {
        constexpr uint32_t m_unPeriodicResourceID = 0x30; // PeriodicResourceID_t
        constexpr uint32_t m_unPeriodicResourceMax = 0x34; // uint32
        constexpr uint32_t m_unPeriodicResourceRemaining = 0x38; // uint32
    }

    namespace PlayerResourcePlayerTeamData_t {
        constexpr uint32_t m_ThreatLevelInfos = 0x30; // C_UtlVectorEmbeddedNetworkVar< DOTAThreatLevelInfo_t >
        constexpr uint32_t m_nSelectedHeroID = 0x80; // int32
        constexpr uint32_t m_iKills = 0x84; // int32
        constexpr uint32_t m_iAssists = 0x88; // int32
        constexpr uint32_t m_iDeaths = 0x8C; // int32
        constexpr uint32_t m_iStreak = 0x90; // int32
        constexpr uint32_t m_iLevel = 0x94; // int32
        constexpr uint32_t m_iCustomIntParam = 0x98; // int32
        constexpr uint32_t m_iRespawnSeconds = 0x9C; // int32
        constexpr uint32_t m_flLastBuybackTime = 0xA0; // GameTime_t
        constexpr uint32_t m_iLastBuybackTime_Obsolete = 0xA4; // int32
        constexpr uint32_t m_hSelectedHero = 0xA8; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bAFK = 0xAC; // bool
        constexpr uint32_t m_nSuggestedHeroes = 0xB0; // int32[4]
        constexpr uint32_t m_bBanSuggestedHeroes = 0xC0; // bool[4]
        constexpr uint32_t m_iTimedRewardDrops = 0xC4; // item_definition_index_t
        constexpr uint32_t m_iTimedRewardDropOrigins = 0xC8; // int32
        constexpr uint32_t m_iTimedRewardCrates = 0xCC; // item_definition_index_t
        constexpr uint32_t m_iTimedRewardEvents = 0xD0; // item_definition_index_t
        constexpr uint32_t m_unCompendiumLevel = 0xD4; // uint16
        constexpr uint32_t m_bCanRepick = 0xD6; // bool
        constexpr uint32_t m_bCanEarnRewards = 0xD7; // bool
        constexpr uint32_t m_bHasRandomed = 0xD8; // bool
        constexpr uint32_t m_nRandomedHeroID = 0xDC; // int32
        constexpr uint32_t m_bBattleBonusActive = 0xE0; // bool
        constexpr uint32_t m_iBattleBonusRate = 0xE2; // uint16
        constexpr uint32_t m_iCustomBuybackCost = 0xE4; // int32
        constexpr uint32_t m_CustomPlayerColor = 0xE8; // Color
        constexpr uint32_t m_bQualifiesForPAContractReward = 0xEC; // bool
        constexpr uint32_t m_bHasPredictedVictory = 0xED; // bool
        constexpr uint32_t m_UnitShareMasks = 0xF0; // int32
        constexpr uint32_t m_iTeamSlot = 0xF4; // int32
        constexpr uint32_t m_iBattleCupWinStreak = 0xF8; // uint8
        constexpr uint32_t m_iBattleCupWinDate = 0x100; // uint64
        constexpr uint32_t m_iBattleCupSkillLevel = 0x108; // uint16
        constexpr uint32_t m_iBattleCupTeamID = 0x10C; // uint32
        constexpr uint32_t m_iBattleCupTournamentID = 0x110; // uint32
        constexpr uint32_t m_iBattleCupDivision = 0x114; // uint8
        constexpr uint32_t m_flTeamFightParticipation = 0x118; // float32
        constexpr uint32_t m_iFirstBloodClaimed = 0x11C; // int32
        constexpr uint32_t m_iFirstBloodGiven = 0x120; // int32
        constexpr uint32_t m_unPickOrder = 0x124; // uint32
        constexpr uint32_t m_flTimeOfLastSaluteSent = 0x128; // GameTime_t
        constexpr uint32_t m_vecPlayerEventData = 0x130; // C_UtlVectorEmbeddedNetworkVar< PlayerResourcePlayerEventData_t >
        constexpr uint32_t m_unSelectedHeroBadgeXP = 0x180; // uint32
        constexpr uint32_t m_iBountyRunes = 0x184; // uint8
        constexpr uint32_t m_iPowerRunes = 0x185; // uint8
        constexpr uint32_t m_iWaterRunes = 0x186; // uint8
        constexpr uint32_t m_iOutpostsCaptured = 0x187; // uint8
        constexpr uint32_t m_unGuildTier = 0x188; // uint8
        constexpr uint32_t m_unGuildLevel = 0x18A; // uint16
        constexpr uint32_t m_unGuildPrimaryColor = 0x18C; // uint8
        constexpr uint32_t m_unGuildSecondaryColor = 0x18D; // uint8
        constexpr uint32_t m_unGuildPattern = 0x18E; // uint8
        constexpr uint32_t m_unGuildLogo = 0x190; // uint64
        constexpr uint32_t m_unGuildFlags = 0x198; // uint32
        constexpr uint32_t m_bIsPartyGuild = 0x19C; // bool
        constexpr uint32_t m_unGuildID = 0x1A0; // GuildID_t
        constexpr uint32_t m_unHeroStickerDefIndex = 0x1A4; // item_definition_index_t
        constexpr uint32_t m_eHeroStickerQuality = 0x1A8; // uint8
        constexpr uint32_t m_eLaneSelectionFlags = 0x1A9; // uint8
        constexpr uint32_t m_nPlayerDraftPreferredRoles = 0x1AA; // uint8
        constexpr uint32_t m_nPlayerDraftPreferredTeam = 0x1AB; // int8
        constexpr uint32_t m_iObsoleteEventPoints = 0x1AC; // uint32
        constexpr uint32_t m_iObsoleteEventPremiumPoints = 0x1B0; // uint32
        constexpr uint32_t m_iObsoleteEventWagerTokensRemaining = 0x1B4; // uint32
        constexpr uint32_t m_iObsoleteEventWagerTokensMax = 0x1B8; // uint32
        constexpr uint32_t m_iObsoleteEventEffectsMask = 0x1BC; // uint32
        constexpr uint32_t m_iObsoleteEventRanks = 0x1C0; // uint16
        constexpr uint32_t m_bObsoleteIsEventOwned = 0x1C2; // bool
        constexpr uint32_t m_iObsoleteRankWagersAvailable = 0x1C4; // uint32
        constexpr uint32_t m_iObsoleteRankWagersMax = 0x1C8; // uint32
        constexpr uint32_t m_iObsoleteEventPointAdjustmentsRemaining = 0x1CC; // uint32
        constexpr uint32_t m_iObsoleteAvailableSalutes = 0x1D0; // uint32
        constexpr uint32_t m_iObsoleteSaluteAmounts = 0x1D4; // uint32
    }

    namespace PlayerSeatAssignment_t {
        constexpr uint32_t unAccountID = 0x0; // uint32
        constexpr uint32_t unSeat = 0x4; // uint32
        constexpr uint32_t unReversedSeat = 0x8; // uint32
        constexpr uint32_t unTeamID = 0xC; // uint32
    }

    namespace PortraitWorldLightConfig_t {
        constexpr uint32_t m_strName = 0x0; // CUtlString
        constexpr uint32_t m_flLatitude = 0x8; // float32
        constexpr uint32_t m_flLongitude = 0xC; // float32
        constexpr uint32_t m_flIntensity = 0x10; // float32
        constexpr uint32_t m_flAdditionalRadius = 0x14; // float32
        constexpr uint32_t m_flSpotFov = 0x18; // float32
        constexpr uint32_t m_flAnimatedNoiseFrequency = 0x1C; // float32
        constexpr uint32_t m_flAnimatedNoiseMinValue = 0x20; // float32
        constexpr uint32_t m_color = 0x24; // Color
        constexpr uint32_t m_bShowGizmos = 0x28; // bool
        constexpr uint32_t m_bShadows = 0x29; // bool
    }

    namespace RoadToTIQuestDefinition_t {
        constexpr uint32_t m_unID = 0x0; // RoadToTIQuestID_t
        constexpr uint32_t m_eQuestType = 0x4; // ERoadToTIQuestType
        constexpr uint32_t m_unPeriod = 0x8; // uint32
        constexpr uint32_t m_unMatchID = 0x10; // MatchID_t
        constexpr uint32_t m_unSeriesID = 0x18; // uint32
        constexpr uint32_t m_unLeagueID = 0x1C; // uint32
        constexpr uint32_t m_unPlayerID = 0x20; // uint32
        constexpr uint32_t m_unTeamID = 0x24; // uint32
        constexpr uint32_t m_vecHeroes = 0x28; // CUtlVector< uint8 >
        constexpr uint32_t m_bDeveloper = 0x40; // bool
    }

    namespace SZooSetAnnotation_t {
        constexpr uint32_t m_strSetTag = 0x0; // CUtlString
    }

    namespace SZooSetAnnotationsConfig_t {
        constexpr uint32_t m_allAnnotations = 0x0; // CUtlVector< SZooSetAnnotations_t >
    }

    namespace SZooSetAnnotations_t {
        constexpr uint32_t m_strSetName = 0x0; // CUtlString
        constexpr uint32_t m_annotations = 0x8; // CUtlVector< SZooSetAnnotation_t >
    }

    namespace TempViewerInfo_t {
        constexpr uint32_t m_nGridX = 0x30; // int32
        constexpr uint32_t m_nGridY = 0x34; // int32
        constexpr uint32_t m_nRadius = 0x38; // int32
        constexpr uint32_t m_nViewerType = 0x3C; // int8
        constexpr uint32_t m_bObstructedVision = 0x3D; // bool
        constexpr uint32_t m_bValid = 0x3E; // bool
        constexpr uint32_t m_bDirty = 0x3F; // bool
        constexpr uint32_t flEndTime = 0x40; // GameTime_t
        constexpr uint32_t nFoWID = 0x44; // int32
        constexpr uint32_t hOwner = 0x48; // CHandle< C_BaseEntity >
    }

    namespace TierNeutralInfo_t {
        constexpr uint32_t m_nTier = 0x30; // int32
        constexpr uint32_t m_nAbilityID = 0x38; // C_NetworkUtlVectorBase< AbilityID_t >
    }

    namespace TimedEvent {
        constexpr uint32_t m_TimeBetweenEvents = 0x0; // float32
        constexpr uint32_t m_fNextEvent = 0x4; // float32
    }

    namespace TransitioningLayer_t {
        constexpr uint32_t m_op = 0x8; // CNetworkedSequenceOperation
        constexpr uint32_t m_flStartAnimTime = 0x30; // float32
        constexpr uint32_t m_flStartWeight = 0x34; // float32
        constexpr uint32_t m_flAnimTime = 0x38; // float32
        constexpr uint32_t m_nOrder = 0x3C; // int32
        constexpr uint32_t m_flPlaybackRate = 0x40; // float32
        constexpr uint32_t m_flFadeOutDuration = 0x44; // float32
    }

    namespace TreeModelReplacement_t {
        constexpr uint32_t m_nBinaryObjectID = 0x30; // int32
        constexpr uint32_t m_szModel = 0x34; // char[512]
    }

    namespace VPhysicsCollisionAttribute_t {
        constexpr uint32_t m_nInteractsAs = 0x8; // uint64
        constexpr uint32_t m_nInteractsWith = 0x10; // uint64
        constexpr uint32_t m_nInteractsExclude = 0x18; // uint64
        constexpr uint32_t m_nEntityId = 0x20; // uint32
        constexpr uint32_t m_nOwnerId = 0x24; // uint32
        constexpr uint32_t m_nHierarchyId = 0x28; // uint16
        constexpr uint32_t m_nCollisionGroup = 0x2A; // uint8
        constexpr uint32_t m_nCollisionFunctionMask = 0x2B; // uint8
    }

    namespace audioparams_t {
        constexpr uint32_t localSound = 0x8; // Vector[8]
        constexpr uint32_t soundscapeIndex = 0x68; // int32
        constexpr uint32_t localBits = 0x6C; // uint8
        constexpr uint32_t soundscapeEntityListIndex = 0x70; // int32
        constexpr uint32_t soundEventHash = 0x74; // uint32
    }

    namespace fogparams_t {
        constexpr uint32_t dirPrimary = 0x8; // Vector
        constexpr uint32_t colorPrimary = 0x14; // Color
        constexpr uint32_t colorSecondary = 0x18; // Color
        constexpr uint32_t colorPrimaryLerpTo = 0x1C; // Color
        constexpr uint32_t colorSecondaryLerpTo = 0x20; // Color
        constexpr uint32_t start = 0x24; // float32
        constexpr uint32_t end = 0x28; // float32
        constexpr uint32_t farz = 0x2C; // float32
        constexpr uint32_t maxdensity = 0x30; // float32
        constexpr uint32_t exponent = 0x34; // float32
        constexpr uint32_t HDRColorScale = 0x38; // float32
        constexpr uint32_t skyboxFogFactor = 0x3C; // float32
        constexpr uint32_t skyboxFogFactorLerpTo = 0x40; // float32
        constexpr uint32_t startLerpTo = 0x44; // float32
        constexpr uint32_t endLerpTo = 0x48; // float32
        constexpr uint32_t maxdensityLerpTo = 0x4C; // float32
        constexpr uint32_t lerptime = 0x50; // GameTime_t
        constexpr uint32_t duration = 0x54; // float32
        constexpr uint32_t blendtobackground = 0x58; // float32
        constexpr uint32_t scattering = 0x5C; // float32
        constexpr uint32_t locallightscale = 0x60; // float32
        constexpr uint32_t enable = 0x64; // bool
        constexpr uint32_t blend = 0x65; // bool
        constexpr uint32_t m_bNoReflectionFog = 0x66; // bool
        constexpr uint32_t m_bPadding = 0x67; // bool
    }

    namespace sControlGroupElem {
        constexpr uint32_t m_UnitName = 0x0; // char[260]
        constexpr uint32_t m_UnitLabel = 0x104; // char[260]
        constexpr uint32_t m_unUnitLabelIndex = 0x208; // uint8
        constexpr uint32_t m_hEntity = 0x20C; // CHandle< C_BaseEntity >
        constexpr uint32_t m_bIsIllusion = 0x210; // bool
        constexpr uint32_t m_IllusionLabel = 0x211; // char[260]
    }

    namespace sky3dparams_t {
        constexpr uint32_t scale = 0x8; // int16
        constexpr uint32_t origin = 0xC; // Vector
        constexpr uint32_t bClip3DSkyBoxNearToWorldFar = 0x18; // bool
        constexpr uint32_t flClip3DSkyBoxNearToWorldFarOffset = 0x1C; // float32
        constexpr uint32_t fog = 0x20; // fogparams_t
        constexpr uint32_t m_nWorldGroupID = 0x88; // WorldGroupId_t
    }
}